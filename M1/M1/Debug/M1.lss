
M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00001112  000011a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000111  00800084  00800084  000011ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000117f  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000822  00000000  00000000  0000246f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001363  00000000  00000000  00002c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00003ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fdd0  00000000  00000000  000042cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e83  00000000  00000000  0001409c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00014f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  00014fe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	e0 c2       	rjmp	.+1472   	; 0x5e2 <__vector_8>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c0       	rjmp	.+98     	; 0x8c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	11 c7       	rjmp	.+3618   	; 0xe50 <__vector_11>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c2       	rjmp	.+1390   	; 0x5a4 <__vector_13>
      36:	00 00       	nop
      38:	29 c0       	rjmp	.+82     	; 0x8c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	1a d5       	rcall	.+2612   	; 0xabc <main>
      88:	0c 94 87 08 	jmp	0x110e	; 0x110e <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
      8e:	08 95       	ret

00000090 <Transmit>:
}


// TRANSMIT function : transmits a string

void Transmit(char data[],uint8_t x,uint8_t y){
      90:	9c 01       	movw	r18, r24
	

	for (uint8_t i = x ; i < y  ; i++ ){
      92:	64 17       	cp	r22, r20
      94:	50 f4       	brcc	.+20     	; 0xaa <Transmit+0x1a>
		while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
      96:	5d 9b       	sbis	0x0b, 5	; 11
      98:	fe cf       	rjmp	.-4      	; 0x96 <Transmit+0x6>
		;
		UDR = data[i];
      9a:	f9 01       	movw	r30, r18
      9c:	e6 0f       	add	r30, r22
      9e:	f1 1d       	adc	r31, r1
      a0:	90 81       	ld	r25, Z
      a2:	9c b9       	out	0x0c, r25	; 12
// TRANSMIT function : transmits a string

void Transmit(char data[],uint8_t x,uint8_t y){
	

	for (uint8_t i = x ; i < y  ; i++ ){
      a4:	6f 5f       	subi	r22, 0xFF	; 255
      a6:	46 13       	cpse	r20, r22
      a8:	f6 cf       	rjmp	.-20     	; 0x96 <Transmit+0x6>
      aa:	08 95       	ret

000000ac <RST>:

// RESET FUNCTION: initializing game board and turning off leds
void RST(void)
{
	
	mt = 0;
      ac:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <mt>
      b0:	28 e0       	ldi	r18, 0x08	; 8
      b2:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = 2 ; // 0 == black , 1 == white, 2 == empty
      b4:	42 e0       	ldi	r20, 0x02	; 2
      b6:	10 c0       	rjmp	.+32     	; 0xd8 <RST+0x2c>
      b8:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <M>
      bc:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <M+0x1>
      c0:	e8 0f       	add	r30, r24
      c2:	f9 1f       	adc	r31, r25
      c4:	40 83       	st	Z, r20
      c6:	01 96       	adiw	r24, 0x01	; 1
{
	
	mt = 0;
	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
      c8:	82 17       	cp	r24, r18
      ca:	93 07       	cpc	r25, r19
      cc:	a9 f7       	brne	.-22     	; 0xb8 <RST+0xc>
      ce:	28 5f       	subi	r18, 0xF8	; 248
      d0:	3f 4f       	sbci	r19, 0xFF	; 255
// RESET FUNCTION: initializing game board and turning off leds
void RST(void)
{
	
	mt = 0;
	for(uint8_t i = 0 ; i <= 7 ; i++)
      d2:	28 34       	cpi	r18, 0x48	; 72
      d4:	31 05       	cpc	r19, r1
      d6:	19 f0       	breq	.+6      	; 0xde <RST+0x32>
      d8:	c9 01       	movw	r24, r18
      da:	08 97       	sbiw	r24, 0x08	; 8
      dc:	ed cf       	rjmp	.-38     	; 0xb8 <RST+0xc>
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = 2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	M[3*8+3] = 1 ;
      de:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <M>
      e2:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <M+0x1>
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	83 8f       	std	Z+27, r24	; 0x1b
	M[3*8+4] = 0 ;
      ea:	14 8e       	std	Z+28, r1	; 0x1c
	M[4*8+3] = 0 ;
      ec:	13 a2       	std	Z+35, r1	; 0x23
	M[4*8+4] = 1 ;
      ee:	84 a3       	std	Z+36, r24	; 0x24
	enemy_pass=0;
      f0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <enemy_pass>
      f4:	08 95       	ret

000000f6 <CheckMove>:




uint8_t CheckMove(uint8_t mi,uint8_t my,uint8_t color)
{
      f6:	2f 92       	push	r2
      f8:	3f 92       	push	r3
      fa:	4f 92       	push	r4
      fc:	5f 92       	push	r5
      fe:	6f 92       	push	r6
     100:	7f 92       	push	r7
     102:	8f 92       	push	r8
     104:	9f 92       	push	r9
     106:	af 92       	push	r10
     108:	bf 92       	push	r11
     10a:	cf 92       	push	r12
     10c:	df 92       	push	r13
     10e:	ef 92       	push	r14
     110:	ff 92       	push	r15
     112:	0f 93       	push	r16
     114:	1f 93       	push	r17
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
     11e:	66 97       	sbiw	r28, 0x16	; 22
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	f8 94       	cli
     124:	de bf       	out	0x3e, r29	; 62
     126:	0f be       	out	0x3f, r0	; 63
     128:	cd bf       	out	0x3d, r28	; 61
	//c1[0] = my+1 + '0';
	//M[(mi+1)*8 + (my+1)] = color;
	//Transmit(c1,0,1);
	
	found = 0;//init before main loop
	for(i = mi - 1; i<=(mi+1); ++i)
     12a:	c8 2e       	mov	r12, r24
     12c:	d1 2c       	mov	r13, r1
     12e:	96 01       	movw	r18, r12
     130:	21 50       	subi	r18, 0x01	; 1
     132:	31 09       	sbc	r19, r1
     134:	3a 83       	std	Y+2, r19	; 0x02
     136:	29 83       	std	Y+1, r18	; 0x01
     138:	86 01       	movw	r16, r12
     13a:	0f 5f       	subi	r16, 0xFF	; 255
     13c:	1f 4f       	sbci	r17, 0xFF	; 255
     13e:	29 81       	ldd	r18, Y+1	; 0x01
     140:	3a 81       	ldd	r19, Y+2	; 0x02
     142:	02 17       	cp	r16, r18
     144:	13 07       	cpc	r17, r19
     146:	0c f4       	brge	.+2      	; 0x14a <CheckMove+0x54>
     148:	9f c1       	rjmp	.+830    	; 0x488 <__stack+0x29>
	{
		if(i<0||i>7)
			continue;
	  for(j = my - 1; j<=(my+1); ++j)		
     14a:	26 2f       	mov	r18, r22
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	3e 87       	std	Y+14, r19	; 0x0e
     150:	2d 87       	std	Y+13, r18	; 0x0d
					
				//IF in the line we are checking, we find a friendly pawn, then the move is legal se place the new pawn 
				if(M[u*8 + z] == color )	
				{ 
					
					M[mi*8 + my] = color;
     152:	c6 01       	movw	r24, r12
     154:	88 0f       	add	r24, r24
     156:	99 1f       	adc	r25, r25
     158:	88 0f       	add	r24, r24
     15a:	99 1f       	adc	r25, r25
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	28 0f       	add	r18, r24
     162:	39 1f       	adc	r19, r25
     164:	3c 87       	std	Y+12, r19	; 0x0c
     166:	2b 87       	std	Y+11, r18	; 0x0b
     168:	41 2c       	mov	r4, r1
	found = 0;//init before main loop
	for(i = mi - 1; i<=(mi+1); ++i)
	{
		if(i<0||i>7)
			continue;
	  for(j = my - 1; j<=(my+1); ++j)		
     16a:	8d 85       	ldd	r24, Y+13	; 0x0d
     16c:	9e 85       	ldd	r25, Y+14	; 0x0e
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	9b 8b       	std	Y+19, r25	; 0x13
     172:	8a 8b       	std	Y+18, r24	; 0x12
     174:	6d 84       	ldd	r6, Y+13	; 0x0d
     176:	7e 84       	ldd	r7, Y+14	; 0x0e
     178:	9f ef       	ldi	r25, 0xFF	; 255
     17a:	69 1a       	sub	r6, r25
     17c:	79 0a       	sbc	r7, r25
													mymove[2] = '\x20';
													mymove[3] = 'Z';
													mymove[4] = '\x20';
													mymove[5] = '\r';
													Transmit(mymove,0,6);*/
										mymove[0] = mi+65;
     17e:	0f 2e       	mov	r0, r31
     180:	f1 e4       	ldi	r31, 0x41	; 65
     182:	2f 2e       	mov	r2, r31
     184:	f0 2d       	mov	r31, r0
     186:	2c 0c       	add	r2, r12
										mymove[1] = my+1+'0';
     188:	21 e3       	ldi	r18, 0x31	; 49
     18a:	26 0f       	add	r18, r22
     18c:	2c 8b       	std	Y+20, r18	; 0x14
										mymove[2] = '\x20';
     18e:	68 94       	set
     190:	aa 24       	eor	r10, r10
     192:	a5 f8       	bld	r10, 5
										mymove[3] = M[mi*8 + my]+'0';
										mymove[4] = '\x20';
										mymove[5] = '\r';
     194:	0f 2e       	mov	r0, r31
     196:	fd e0       	ldi	r31, 0x0D	; 13
     198:	9f 2e       	mov	r9, r31
     19a:	f0 2d       	mov	r31, r0
										Transmit(mymove,0,6);
     19c:	49 8a       	std	Y+17, r4	; 0x11
     19e:	2d 8a       	std	Y+21, r2	; 0x15
     1a0:	18 01       	movw	r2, r16
     1a2:	ce 8a       	std	Y+22, r12	; 0x16
     1a4:	46 2e       	mov	r4, r22
     1a6:	54 2e       	mov	r5, r20
	//Transmit(c1,0,1);
	
	found = 0;//init before main loop
	for(i = mi - 1; i<=(mi+1); ++i)
	{
		if(i<0||i>7)
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	9a 81       	ldd	r25, Y+2	; 0x02
     1ac:	99 23       	and	r25, r25
     1ae:	0c f4       	brge	.+2      	; 0x1b2 <CheckMove+0xbc>
     1b0:	5e c1       	rjmp	.+700    	; 0x46e <__stack+0xf>
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	9a 81       	ldd	r25, Y+2	; 0x02
     1b6:	08 97       	sbiw	r24, 0x08	; 8
     1b8:	0c f0       	brlt	.+2      	; 0x1bc <CheckMove+0xc6>
     1ba:	59 c1       	rjmp	.+690    	; 0x46e <__stack+0xf>
			continue;
	  for(j = my - 1; j<=(my+1); ++j)		
     1bc:	8a 89       	ldd	r24, Y+18	; 0x12
     1be:	9b 89       	ldd	r25, Y+19	; 0x13
     1c0:	9c 83       	std	Y+4, r25	; 0x04
     1c2:	8b 83       	std	Y+3, r24	; 0x03
     1c4:	8b 81       	ldd	r24, Y+3	; 0x03
     1c6:	9c 81       	ldd	r25, Y+4	; 0x04
     1c8:	68 16       	cp	r6, r24
     1ca:	79 06       	cpc	r7, r25
     1cc:	0c f4       	brge	.+2      	; 0x1d0 <CheckMove+0xda>
     1ce:	4f c1       	rjmp	.+670    	; 0x46e <__stack+0xf>
			
			//Setting up y barrier
			if(j > mi)
			ybar = 7;
			else if(j == my)
			ybar = 9;
     1d0:	38 8a       	std	Y+16, r3	; 0x10
     1d2:	2f 86       	std	Y+15, r2	; 0x0f
     1d4:	3e 88       	ldd	r3, Y+22	; 0x16
	{
		if(i<0||i>7)
			continue;
	  for(j = my - 1; j<=(my+1); ++j)		
	  {
		if(j<0||j>7)
     1d6:	8b 81       	ldd	r24, Y+3	; 0x03
     1d8:	9c 81       	ldd	r25, Y+4	; 0x04
     1da:	99 23       	and	r25, r25
     1dc:	0c f4       	brge	.+2      	; 0x1e0 <CheckMove+0xea>
     1de:	3a c1       	rjmp	.+628    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     1e0:	8b 81       	ldd	r24, Y+3	; 0x03
     1e2:	9c 81       	ldd	r25, Y+4	; 0x04
     1e4:	08 97       	sbiw	r24, 0x08	; 8
     1e6:	0c f0       	brlt	.+2      	; 0x1ea <CheckMove+0xf4>
     1e8:	35 c1       	rjmp	.+618    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
								mymove[5] = '\r';
								Transmit(mymove,0,6);
								

		  */
	    if((M[i*8 + j] == color)||(M[i*8 + j] == 2)) //checking neighbors
     1ea:	40 91 8e 01 	lds	r20, 0x018E	; 0x80018e <M>
     1ee:	50 91 8f 01 	lds	r21, 0x018F	; 0x80018f <M+0x1>
     1f2:	e9 81       	ldd	r30, Y+1	; 0x01
     1f4:	fa 81       	ldd	r31, Y+2	; 0x02
     1f6:	8b 81       	ldd	r24, Y+3	; 0x03
     1f8:	9c 81       	ldd	r25, Y+4	; 0x04
     1fa:	ee 0f       	add	r30, r30
     1fc:	ff 1f       	adc	r31, r31
     1fe:	ee 0f       	add	r30, r30
     200:	ff 1f       	adc	r31, r31
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	e8 0f       	add	r30, r24
     208:	f9 1f       	adc	r31, r25
     20a:	e4 0f       	add	r30, r20
     20c:	f5 1f       	adc	r31, r21
     20e:	80 81       	ld	r24, Z
     210:	85 15       	cp	r24, r5
     212:	09 f4       	brne	.+2      	; 0x216 <CheckMove+0x120>
     214:	1f c1       	rjmp	.+574    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     216:	e9 81       	ldd	r30, Y+1	; 0x01
     218:	fa 81       	ldd	r31, Y+2	; 0x02
     21a:	8b 81       	ldd	r24, Y+3	; 0x03
     21c:	9c 81       	ldd	r25, Y+4	; 0x04
     21e:	ee 0f       	add	r30, r30
     220:	ff 1f       	adc	r31, r31
     222:	ee 0f       	add	r30, r30
     224:	ff 1f       	adc	r31, r31
     226:	ee 0f       	add	r30, r30
     228:	ff 1f       	adc	r31, r31
     22a:	e8 0f       	add	r30, r24
     22c:	f9 1f       	adc	r31, r25
     22e:	e4 0f       	add	r30, r20
     230:	f5 1f       	adc	r31, r21
     232:	80 81       	ld	r24, Z
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	09 f4       	brne	.+2      	; 0x23a <CheckMove+0x144>
     238:	0d c1       	rjmp	.+538    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		else
		{	
			

			//Setting up i barrier
			if(i > mi)
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	9a 81       	ldd	r25, Y+2	; 0x02
     23e:	c8 16       	cp	r12, r24
     240:	d9 06       	cpc	r13, r25
     242:	3c f0       	brlt	.+14     	; 0x252 <CheckMove+0x15c>
				ibar = 7 ;
			else if(i == mi)
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	9a 81       	ldd	r25, Y+2	; 0x02
     248:	c8 16       	cp	r12, r24
     24a:	d9 06       	cpc	r13, r25
     24c:	39 f0       	breq	.+14     	; 0x25c <CheckMove+0x166>
				ibar = 9;
			else
				ibar = 0;
     24e:	b1 2c       	mov	r11, r1
     250:	09 c0       	rjmp	.+18     	; 0x264 <CheckMove+0x16e>
		{	
			

			//Setting up i barrier
			if(i > mi)
				ibar = 7 ;
     252:	0f 2e       	mov	r0, r31
     254:	f7 e0       	ldi	r31, 0x07	; 7
     256:	bf 2e       	mov	r11, r31
     258:	f0 2d       	mov	r31, r0
     25a:	04 c0       	rjmp	.+8      	; 0x264 <CheckMove+0x16e>
			else if(i == mi)
				ibar = 9;
     25c:	0f 2e       	mov	r0, r31
     25e:	f9 e0       	ldi	r31, 0x09	; 9
     260:	bf 2e       	mov	r11, r31
     262:	f0 2d       	mov	r31, r0
			else
				ibar = 0;
			
			//Setting up y barrier
			if(j > mi)
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	9c 81       	ldd	r25, Y+4	; 0x04
     268:	c8 16       	cp	r12, r24
     26a:	d9 06       	cpc	r13, r25
     26c:	4c f0       	brlt	.+18     	; 0x280 <CheckMove+0x18a>
			ybar = 7;
			else if(j == my)
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	2d 85       	ldd	r18, Y+13	; 0x0d
     274:	3e 85       	ldd	r19, Y+14	; 0x0e
     276:	28 17       	cp	r18, r24
     278:	39 07       	cpc	r19, r25
     27a:	39 f0       	breq	.+14     	; 0x28a <CheckMove+0x194>
			ybar = 9;
			else
			ybar = 0;	
     27c:	81 2c       	mov	r8, r1
     27e:	09 c0       	rjmp	.+18     	; 0x292 <CheckMove+0x19c>
			else
				ibar = 0;
			
			//Setting up y barrier
			if(j > mi)
			ybar = 7;
     280:	0f 2e       	mov	r0, r31
     282:	f7 e0       	ldi	r31, 0x07	; 7
     284:	8f 2e       	mov	r8, r31
     286:	f0 2d       	mov	r31, r0
     288:	04 c0       	rjmp	.+8      	; 0x292 <CheckMove+0x19c>
			else if(j == my)
			ybar = 9;
     28a:	0f 2e       	mov	r0, r31
     28c:	f9 e0       	ldi	r31, 0x09	; 9
     28e:	8f 2e       	mov	r8, r31
     290:	f0 2d       	mov	r31, r0
			else
			ybar = 0;	

			//setting up steps, (for the loops)
			istep = i - mi; 
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	18 2f       	mov	r17, r24
     298:	13 19       	sub	r17, r3
			ystep = j - my;
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	9c 81       	ldd	r25, Y+4	; 0x04
     29e:	08 2f       	mov	r16, r24
     2a0:	04 19       	sub	r16, r4
			//start from the accepted neighbor
			u=i; 
     2a2:	29 81       	ldd	r18, Y+1	; 0x01
     2a4:	3a 81       	ldd	r19, Y+2	; 0x02
     2a6:	a2 2f       	mov	r26, r18
			z=j;
     2a8:	8b 81       	ldd	r24, Y+3	; 0x03
     2aa:	9c 81       	ldd	r25, Y+4	; 0x04
     2ac:	b8 2f       	mov	r27, r24
     2ae:	33 27       	eor	r19, r19

			skip = 1;
			while((u != (ibar+istep))&&(z != (ybar+ystep)))
     2b0:	e1 2e       	mov	r14, r17
     2b2:	f1 2c       	mov	r15, r1
     2b4:	eb 0c       	add	r14, r11
     2b6:	f1 1c       	adc	r15, r1
     2b8:	2e 15       	cp	r18, r14
     2ba:	3f 05       	cpc	r19, r15
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <CheckMove+0x1ca>
     2be:	ca c0       	rjmp	.+404    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     2c0:	99 27       	eor	r25, r25
     2c2:	60 2f       	mov	r22, r16
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	68 0d       	add	r22, r8
     2c8:	71 1d       	adc	r23, r1
     2ca:	86 17       	cp	r24, r22
     2cc:	97 07       	cpc	r25, r23
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <CheckMove+0x1dc>
     2d0:	c1 c0       	rjmp	.+386    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			{
				//check	
				if( M[u*8 + z] == 2)
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	22 0f       	add	r18, r18
     2d8:	33 1f       	adc	r19, r19
     2da:	22 0f       	add	r18, r18
     2dc:	33 1f       	adc	r19, r19
     2de:	82 0f       	add	r24, r18
     2e0:	93 1f       	adc	r25, r19
     2e2:	fa 01       	movw	r30, r20
     2e4:	e8 0f       	add	r30, r24
     2e6:	f9 1f       	adc	r31, r25
     2e8:	80 81       	ld	r24, Z
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <CheckMove+0x1fa>
     2ee:	b2 c0       	rjmp	.+356    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
					break;
					
				//IF in the line we are checking, we find a friendly pawn, then the move is legal se place the new pawn 
				if(M[u*8 + z] == color )	
     2f0:	80 81       	ld	r24, Z
     2f2:	58 12       	cpse	r5, r24
     2f4:	39 c0       	rjmp	.+114    	; 0x368 <CheckMove+0x272>
     2f6:	11 c0       	rjmp	.+34     	; 0x31a <CheckMove+0x224>

			skip = 1;
			while((u != (ibar+istep))&&(z != (ybar+ystep)))
			{
				//check	
				if( M[u*8 + z] == 2)
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	e4 0f       	add	r30, r20
     30a:	f5 1f       	adc	r31, r21
     30c:	80 81       	ld	r24, Z
     30e:	82 30       	cpi	r24, 0x02	; 2
     310:	09 f4       	brne	.+2      	; 0x314 <CheckMove+0x21e>
     312:	a0 c0       	rjmp	.+320    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
					break;
					
				//IF in the line we are checking, we find a friendly pawn, then the move is legal se place the new pawn 
				if(M[u*8 + z] == color )	
     314:	80 81       	ld	r24, Z
     316:	58 12       	cpse	r5, r24
     318:	27 c0       	rjmp	.+78     	; 0x368 <CheckMove+0x272>
				{ 
					
					M[mi*8 + my] = color;
     31a:	eb 85       	ldd	r30, Y+11	; 0x0b
     31c:	fc 85       	ldd	r31, Y+12	; 0x0c
     31e:	e4 0f       	add	r30, r20
     320:	f5 1f       	adc	r31, r21
     322:	50 82       	st	Z, r5
													mymove[2] = '\x20';
													mymove[3] = 'Z';
													mymove[4] = '\x20';
													mymove[5] = '\r';
													Transmit(mymove,0,6);*/
										mymove[0] = mi+65;
     324:	3d 89       	ldd	r19, Y+21	; 0x15
     326:	3d 83       	std	Y+5, r19	; 0x05
										mymove[1] = my+1+'0';
     328:	8c 89       	ldd	r24, Y+20	; 0x14
     32a:	8e 83       	std	Y+6, r24	; 0x06
										mymove[2] = '\x20';
     32c:	af 82       	std	Y+7, r10	; 0x07
										mymove[3] = M[mi*8 + my]+'0';
     32e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <M>
     332:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <M+0x1>
     336:	2b 85       	ldd	r18, Y+11	; 0x0b
     338:	3c 85       	ldd	r19, Y+12	; 0x0c
     33a:	e2 0f       	add	r30, r18
     33c:	f3 1f       	adc	r31, r19
     33e:	80 81       	ld	r24, Z
     340:	80 5d       	subi	r24, 0xD0	; 208
     342:	88 87       	std	Y+8, r24	; 0x08
										mymove[4] = '\x20';
     344:	a9 86       	std	Y+9, r10	; 0x09
										mymove[5] = '\r';
     346:	9a 86       	std	Y+10, r9	; 0x0a
										Transmit(mymove,0,6);
     348:	46 e0       	ldi	r20, 0x06	; 6
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	ce 01       	movw	r24, r28
     34e:	05 96       	adiw	r24, 0x05	; 5
     350:	9f de       	rcall	.-706    	; 0x90 <Transmit>
			
			}			
			
			if(!skip) //if a solution is found
			{
				u=i;
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	f8 2e       	mov	r15, r24
				z=j;
     358:	2b 81       	ldd	r18, Y+3	; 0x03
     35a:	3c 81       	ldd	r19, Y+4	; 0x04
     35c:	e2 2e       	mov	r14, r18
				while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     35e:	b8 12       	cpse	r11, r24
     360:	12 c0       	rjmp	.+36     	; 0x386 <CheckMove+0x290>
										Transmit(mymove,0,6);
					
					
					
					//mark that it is a legal move
					found = 1;
     362:	31 e0       	ldi	r19, 0x01	; 1
     364:	39 8b       	std	Y+17, r19	; 0x11
     366:	76 c0       	rjmp	.+236    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
					skip = 0;
					break;
				}
				//if mycolor --> do nothing
	    		z+= ystep;
     368:	b0 0f       	add	r27, r16
				u+= istep;
     36a:	a1 0f       	add	r26, r17
			//start from the accepted neighbor
			u=i; 
			z=j;

			skip = 1;
			while((u != (ibar+istep))&&(z != (ybar+ystep)))
     36c:	8a 2f       	mov	r24, r26
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	8e 15       	cp	r24, r14
     372:	9f 05       	cpc	r25, r15
     374:	09 f4       	brne	.+2      	; 0x378 <CheckMove+0x282>
     376:	6e c0       	rjmp	.+220    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     378:	eb 2f       	mov	r30, r27
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	e6 17       	cp	r30, r22
     37e:	f7 07       	cpc	r31, r23
     380:	09 f0       	breq	.+2      	; 0x384 <CheckMove+0x28e>
     382:	ba cf       	rjmp	.-140    	; 0x2f8 <CheckMove+0x202>
     384:	67 c0       	rjmp	.+206    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			
			if(!skip) //if a solution is found
			{
				u=i;
				z=j;
				while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     386:	82 16       	cp	r8, r18
     388:	09 f4       	brne	.+2      	; 0x38c <CheckMove+0x296>
     38a:	53 c0       	rjmp	.+166    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
				{
					if(M[u*8 + z] == 2)
     38c:	99 27       	eor	r25, r25
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	82 0f       	add	r24, r18
     39c:	91 1d       	adc	r25, r1
     39e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <M>
     3a2:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <M+0x1>
     3a6:	e8 0f       	add	r30, r24
     3a8:	f9 1f       	adc	r31, r25
     3aa:	20 81       	ld	r18, Z
     3ac:	22 30       	cpi	r18, 0x02	; 2
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <CheckMove+0x2bc>
     3b0:	43 c0       	rjmp	.+134    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
					{
						break;
					}
					if(M[u*8 + z] == color )
     3b2:	20 81       	ld	r18, Z
     3b4:	52 16       	cp	r5, r18
     3b6:	09 f4       	brne	.+2      	; 0x3ba <CheckMove+0x2c4>
     3b8:	42 c0       	rjmp	.+132    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3ba:	2e 2d       	mov	r18, r14
     3bc:	e0 2e       	mov	r14, r16
     3be:	3f 2d       	mov	r19, r15
     3c0:	f1 2e       	mov	r15, r17
     3c2:	13 2f       	mov	r17, r19
     3c4:	02 2f       	mov	r16, r18
     3c6:	13 c0       	rjmp	.+38     	; 0x3ee <CheckMove+0x2f8>
			{
				u=i;
				z=j;
				while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
				{
					if(M[u*8 + z] == 2)
     3c8:	80 2f       	mov	r24, r16
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	28 e0       	ldi	r18, 0x08	; 8
     3ce:	12 9f       	mul	r17, r18
     3d0:	80 0d       	add	r24, r0
     3d2:	91 1d       	adc	r25, r1
     3d4:	11 24       	eor	r1, r1
     3d6:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <M>
     3da:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <M+0x1>
     3de:	e8 0f       	add	r30, r24
     3e0:	f9 1f       	adc	r31, r25
     3e2:	20 81       	ld	r18, Z
     3e4:	22 30       	cpi	r18, 0x02	; 2
     3e6:	71 f1       	breq	.+92     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
					{
						break;
					}
					if(M[u*8 + z] == color )
     3e8:	20 81       	ld	r18, Z
     3ea:	52 16       	cp	r5, r18
     3ec:	71 f1       	breq	.+92     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
					{
						break;
					}
					M[u*8 + z] = color;	
     3ee:	50 82       	st	Z, r5
					
					mymove[0] = u+65;
     3f0:	21 e4       	ldi	r18, 0x41	; 65
     3f2:	21 0f       	add	r18, r17
     3f4:	2d 83       	std	Y+5, r18	; 0x05
					mymove[1] = z+1+'0';
     3f6:	21 e3       	ldi	r18, 0x31	; 49
     3f8:	20 0f       	add	r18, r16
     3fa:	2e 83       	std	Y+6, r18	; 0x06
					mymove[2] = '\x20';
     3fc:	af 82       	std	Y+7, r10	; 0x07
					mymove[3] = M[u*8 + z]+'0';
     3fe:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <M>
     402:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <M+0x1>
     406:	f9 01       	movw	r30, r18
     408:	e8 0f       	add	r30, r24
     40a:	f9 1f       	adc	r31, r25
     40c:	80 81       	ld	r24, Z
     40e:	80 5d       	subi	r24, 0xD0	; 208
     410:	88 87       	std	Y+8, r24	; 0x08
					mymove[4] = '\x20';
     412:	a9 86       	std	Y+9, r10	; 0x09
					mymove[5] = '\r';
     414:	9a 86       	std	Y+10, r9	; 0x0a
					Transmit(mymove,0,6);
     416:	46 e0       	ldi	r20, 0x06	; 6
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	38 de       	rcall	.-912    	; 0x90 <Transmit>
					
					
									
					z+= ystep;
     420:	0e 0d       	add	r16, r14
					u+= istep;
     422:	1f 0d       	add	r17, r15
			
			if(!skip) //if a solution is found
			{
				u=i;
				z=j;
				while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     424:	b1 16       	cp	r11, r17
     426:	a1 f0       	breq	.+40     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     428:	80 12       	cpse	r8, r16
     42a:	ce cf       	rjmp	.-100    	; 0x3c8 <CheckMove+0x2d2>
										Transmit(mymove,0,6);
					
					
					
					//mark that it is a legal move
					found = 1;
     42c:	31 e0       	ldi	r19, 0x01	; 1
     42e:	39 8b       	std	Y+17, r19	; 0x11
     430:	11 c0       	rjmp	.+34     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	89 8b       	std	Y+17, r24	; 0x11
     436:	0e c0       	rjmp	.+28     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	99 8b       	std	Y+17, r25	; 0x11
     43c:	0b c0       	rjmp	.+22     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     43e:	21 e0       	ldi	r18, 0x01	; 1
     440:	29 8b       	std	Y+17, r18	; 0x11
     442:	08 c0       	rjmp	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     444:	31 e0       	ldi	r19, 0x01	; 1
     446:	39 8b       	std	Y+17, r19	; 0x11
     448:	05 c0       	rjmp	.+10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	89 8b       	std	Y+17, r24	; 0x11
     44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	99 8b       	std	Y+17, r25	; 0x11
	found = 0;//init before main loop
	for(i = mi - 1; i<=(mi+1); ++i)
	{
		if(i<0||i>7)
			continue;
	  for(j = my - 1; j<=(my+1); ++j)		
     454:	8b 81       	ldd	r24, Y+3	; 0x03
     456:	9c 81       	ldd	r25, Y+4	; 0x04
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	9c 83       	std	Y+4, r25	; 0x04
     45c:	8b 83       	std	Y+3, r24	; 0x03
     45e:	8b 81       	ldd	r24, Y+3	; 0x03
     460:	9c 81       	ldd	r25, Y+4	; 0x04
     462:	68 16       	cp	r6, r24
     464:	79 06       	cpc	r7, r25
     466:	0c f0       	brlt	.+2      	; 0x46a <__stack+0xb>
     468:	b6 ce       	rjmp	.-660    	; 0x1d6 <CheckMove+0xe0>
     46a:	2f 84       	ldd	r2, Y+15	; 0x0f
     46c:	38 88       	ldd	r3, Y+16	; 0x10
	//c1[0] = my+1 + '0';
	//M[(mi+1)*8 + (my+1)] = color;
	//Transmit(c1,0,1);
	
	found = 0;//init before main loop
	for(i = mi - 1; i<=(mi+1); ++i)
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	9a 83       	std	Y+2, r25	; 0x02
     476:	89 83       	std	Y+1, r24	; 0x01
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	9a 81       	ldd	r25, Y+2	; 0x02
     47c:	28 16       	cp	r2, r24
     47e:	39 06       	cpc	r3, r25
     480:	0c f0       	brlt	.+2      	; 0x484 <__stack+0x25>
     482:	92 ce       	rjmp	.-732    	; 0x1a8 <CheckMove+0xb2>
     484:	49 88       	ldd	r4, Y+17	; 0x11
     486:	01 c0       	rjmp	.+2      	; 0x48a <__stack+0x2b>
	//char c1[1];
	//c1[0] = my+1 + '0';
	//M[(mi+1)*8 + (my+1)] = color;
	//Transmit(c1,0,1);
	
	found = 0;//init before main loop
     488:	41 2c       	mov	r4, r1
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	48 12       	cpse	r4, r24
     48e:	80 e0       	ldi	r24, 0x00	; 0
	if(found == 1)
		return 1;
	return 0;
  
		
}
     490:	66 96       	adiw	r28, 0x16	; 22
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	de bf       	out	0x3e, r29	; 62
     498:	0f be       	out	0x3f, r0	; 63
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	ff 90       	pop	r15
     4a6:	ef 90       	pop	r14
     4a8:	df 90       	pop	r13
     4aa:	cf 90       	pop	r12
     4ac:	bf 90       	pop	r11
     4ae:	af 90       	pop	r10
     4b0:	9f 90       	pop	r9
     4b2:	8f 90       	pop	r8
     4b4:	7f 90       	pop	r7
     4b6:	6f 90       	pop	r6
     4b8:	5f 90       	pop	r5
     4ba:	4f 90       	pop	r4
     4bc:	3f 90       	pop	r3
     4be:	2f 90       	pop	r2
     4c0:	08 95       	ret

000004c2 <Board>:


void Board(){
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <Board+0x14>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <Board+0x16>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <Board+0x18>
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
     4de:	41 e0       	ldi	r20, 0x01	; 1
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	87 e6       	ldi	r24, 0x67	; 103
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	d4 dd       	rcall	.-1112   	; 0x90 <Transmit>
     4e8:	11 e3       	ldi	r17, 0x31	; 49
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
     4ea:	0f 2e       	mov	r0, r31
     4ec:	fc e7       	ldi	r31, 0x7C	; 124
     4ee:	ff 2e       	mov	r15, r31
     4f0:	f0 2d       	mov	r31, r0
		mymove[1] = '\x20';
     4f2:	00 e2       	ldi	r16, 0x20	; 32
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
     4f4:	f9 82       	std	Y+1, r15	; 0x01
		mymove[1] = '\x20';
     4f6:	0a 83       	std	Y+2, r16	; 0x02
		mymove[2] = s1+1+'0';
     4f8:	1b 83       	std	Y+3, r17	; 0x03
		mymove[3] = '\x20';
     4fa:	0c 83       	std	Y+4, r16	; 0x04
		Transmit(mymove,0,4);
     4fc:	44 e0       	ldi	r20, 0x04	; 4
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	ce 01       	movw	r24, r28
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	c5 dd       	rcall	.-1142   	; 0x90 <Transmit>
     506:	1f 5f       	subi	r17, 0xFF	; 255

void Board(){
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
     508:	19 33       	cpi	r17, 0x39	; 57
     50a:	a1 f7       	brne	.-24     	; 0x4f4 <Board+0x32>
     50c:	00 e0       	ldi	r16, 0x00	; 0
     50e:	10 e0       	ldi	r17, 0x00	; 0
     510:	0f 2e       	mov	r0, r31
     512:	f1 e4       	ldi	r31, 0x41	; 65
     514:	bf 2e       	mov	r11, r31
     516:	f0 2d       	mov	r31, r0
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
     518:	0f 2e       	mov	r0, r31
     51a:	fc e7       	ldi	r31, 0x7C	; 124
     51c:	cf 2e       	mov	r12, r31
     51e:	f0 2d       	mov	r31, r0
			mymove[1] = '\x20';
     520:	68 94       	set
     522:	dd 24       	eor	r13, r13
     524:	d5 f8       	bld	r13, 5
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
     526:	42 e0       	ldi	r20, 0x02	; 2
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	89 e6       	ldi	r24, 0x69	; 105
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	b0 dd       	rcall	.-1184   	; 0x90 <Transmit>
		mymove[0] = s1+65;
     530:	b9 82       	std	Y+1, r11	; 0x01
		Transmit(mymove,0,1);
     532:	41 e0       	ldi	r20, 0x01	; 1
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	aa dd       	rcall	.-1196   	; 0x90 <Transmit>
     53c:	78 01       	movw	r14, r16
     53e:	88 e0       	ldi	r24, 0x08	; 8
     540:	e8 0e       	add	r14, r24
     542:	f1 1c       	adc	r15, r1
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
     544:	c9 82       	std	Y+1, r12	; 0x01
			mymove[1] = '\x20';
     546:	da 82       	std	Y+2, r13	; 0x02
			mymove[2] = M[s1*8 + s2]+'0';
     548:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <M>
     54c:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <M+0x1>
     550:	e0 0f       	add	r30, r16
     552:	f1 1f       	adc	r31, r17
     554:	80 81       	ld	r24, Z
     556:	80 5d       	subi	r24, 0xD0	; 208
     558:	8b 83       	std	Y+3, r24	; 0x03
			mymove[3] = '\x20';
     55a:	dc 82       	std	Y+4, r13	; 0x04
			Transmit(mymove,0,4);
     55c:	44 e0       	ldi	r20, 0x04	; 4
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	95 dd       	rcall	.-1238   	; 0x90 <Transmit>
     566:	0f 5f       	subi	r16, 0xFF	; 255
     568:	1f 4f       	sbci	r17, 0xFF	; 255
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
     56a:	0e 15       	cp	r16, r14
     56c:	1f 05       	cpc	r17, r15
     56e:	51 f7       	brne	.-44     	; 0x544 <Board+0x82>
     570:	b3 94       	inc	r11
     572:	87 01       	movw	r16, r14
		mymove[1] = '\x20';
		mymove[2] = s1+1+'0';
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
     574:	00 34       	cpi	r16, 0x40	; 64
     576:	11 05       	cpc	r17, r1
			mymove[2] = M[s1*8 + s2]+'0';
			mymove[3] = '\x20';
			Transmit(mymove,0,4);
		}
	}
	Transmit("\n\r",0,strlen("\n\r"));
     578:	b1 f6       	brne	.-84     	; 0x526 <Board+0x64>
     57a:	42 e0       	ldi	r20, 0x02	; 2
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	89 e6       	ldi	r24, 0x69	; 105
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	86 dd       	rcall	.-1268   	; 0x90 <Transmit>
}
     584:	26 96       	adiw	r28, 0x06	; 6
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	df 90       	pop	r13
     59e:	cf 90       	pop	r12
     5a0:	bf 90       	pop	r11
     5a2:	08 95       	ret

000005a4 <__vector_13>:

ISR (USART_TXC_vect) { //  Interrupts for completed transmit data	
     5a4:	1f 92       	push	r1
     5a6:	0f 92       	push	r0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
}
     5ae:	0f 90       	pop	r0
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	0f 90       	pop	r0
     5b4:	1f 90       	pop	r1
     5b6:	18 95       	reti

000005b8 <init_serial>:



void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
     5b8:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
     5ba:	83 e3       	ldi	r24, 0x33	; 51
     5bc:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
     5be:	80 b5       	in	r24, 0x20	; 32
     5c0:	8f 7e       	andi	r24, 0xEF	; 239
     5c2:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
     5c4:	80 b5       	in	r24, 0x20	; 32
     5c6:	8f 7d       	andi	r24, 0xDF	; 223
     5c8:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
     5ca:	80 b5       	in	r24, 0x20	; 32
     5cc:	87 7f       	andi	r24, 0xF7	; 247
     5ce:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
     5d0:	86 e8       	ldi	r24, 0x86	; 134
     5d2:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
     5d4:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
     5d6:	8a b1       	in	r24, 0x0a	; 10
     5d8:	88 61       	ori	r24, 0x18	; 24
     5da:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
     5dc:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
     5de:	57 9a       	sbi	0x0a, 7	; 10
     5e0:	08 95       	ret

000005e2 <__vector_8>:
}


 ISR (TIMER1_OVF_vect)    // Timer1 ISR
 {
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
	 if(myTurn==1){
     604:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     608:	81 30       	cpi	r24, 0x01	; 1
     60a:	19 f4       	brne	.+6      	; 0x612 <__vector_8+0x30>
		 // coming soon 
		 //last sec MM will save the day..eventually.		 
		 myTurn =0;
     60c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
     610:	0c c0       	rjmp	.+24     	; 0x62a <__vector_8+0x48>
		// move_done = 1;
	 } 
	 else if(myTurn == 0){
     612:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     616:	81 11       	cpse	r24, r1
     618:	08 c0       	rjmp	.+16     	; 0x62a <__vector_8+0x48>
		  Transmit("IT\r",0,strlen("IT\r"));
     61a:	43 e0       	ldi	r20, 0x03	; 3
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	8c e6       	ldi	r24, 0x6C	; 108
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	36 dd       	rcall	.-1428   	; 0x90 <Transmit>
		  ILflag=1;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
	 }	 
 }
     62a:	ff 91       	pop	r31
     62c:	ef 91       	pop	r30
     62e:	bf 91       	pop	r27
     630:	af 91       	pop	r26
     632:	9f 91       	pop	r25
     634:	8f 91       	pop	r24
     636:	7f 91       	pop	r23
     638:	6f 91       	pop	r22
     63a:	5f 91       	pop	r21
     63c:	4f 91       	pop	r20
     63e:	3f 91       	pop	r19
     640:	2f 91       	pop	r18
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <AnnounceRes>:


 void AnnounceRes(uint8_t res)
 {
	//after announcement, timer interrupts are disabled.
	TIMSK &= ~(1 << TOIE1) ; 
     64c:	99 b7       	in	r25, 0x39	; 57
     64e:	9b 7f       	andi	r25, 0xFB	; 251
     650:	99 bf       	out	0x39, r25	; 57
	if(res == 1)
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	51 f4       	brne	.+20     	; 0x66a <AnnounceRes+0x1e>
	{
	     Transmit("WN\r",0,strlen("WN\r"));
     656:	43 e0       	ldi	r20, 0x03	; 3
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	80 e7       	ldi	r24, 0x70	; 112
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	18 dd       	rcall	.-1488   	; 0x90 <Transmit>
		 PORTB ^= (1<<PORTB1);             //Toggle LED
     660:	98 b3       	in	r25, 0x18	; 24
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	89 27       	eor	r24, r25
     666:	88 bb       	out	0x18, r24	; 24
     668:	08 95       	ret
	}
	else if(res == 0)
     66a:	81 11       	cpse	r24, r1
     66c:	0a c0       	rjmp	.+20     	; 0x682 <AnnounceRes+0x36>
	{
		Transmit("LS\r",0,strlen("LS\r"));
     66e:	43 e0       	ldi	r20, 0x03	; 3
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	84 e7       	ldi	r24, 0x74	; 116
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0c dd       	rcall	.-1512   	; 0x90 <Transmit>
		PORTB ^= (1<<PORTB2);			//Toggle LED
     678:	98 b3       	in	r25, 0x18	; 24
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	89 27       	eor	r24, r25
     67e:	88 bb       	out	0x18, r24	; 24
     680:	08 95       	ret
	}
	else
	{
		Transmit("TE\r",0,strlen("TE\r"));
     682:	43 e0       	ldi	r20, 0x03	; 3
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	88 e7       	ldi	r24, 0x78	; 120
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	02 dd       	rcall	.-1532   	; 0x90 <Transmit>
		PORTB ^= (1<<PORTB3);			//Toggle LED
     68c:	98 b3       	in	r25, 0x18	; 24
     68e:	88 e0       	ldi	r24, 0x08	; 8
     690:	89 27       	eor	r24, r25
     692:	88 bb       	out	0x18, r24	; 24
     694:	08 95       	ret

00000696 <EndGame>:

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{			
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
     696:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <M>
     69a:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <M+0x1>
     69e:	bf 01       	movw	r22, r30
     6a0:	60 5c       	subi	r22, 0xC0	; 192
     6a2:	7f 4f       	sbci	r23, 0xFF	; 255


//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;
     6a4:	40 e0       	ldi	r20, 0x00	; 0
}


//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	11 c0       	rjmp	.+34     	; 0x6cc <EndGame+0x36>

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{			
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
     6aa:	df 01       	movw	r26, r30
     6ac:	80 81       	ld	r24, Z
     6ae:	81 11       	cpse	r24, r1
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <EndGame+0x1e>
				b++; 
     6b2:	9f 5f       	subi	r25, 0xFF	; 255
			if(M[i*8 + y] == 1)
     6b4:	8c 91       	ld	r24, X
     6b6:	81 30       	cpi	r24, 0x01	; 1
     6b8:	09 f4       	brne	.+2      	; 0x6bc <EndGame+0x26>
				w++;
     6ba:	4f 5f       	subi	r20, 0xFF	; 255
     6bc:	31 96       	adiw	r30, 0x01	; 1
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
     6be:	2e 17       	cp	r18, r30
     6c0:	3f 07       	cpc	r19, r31
     6c2:	99 f7       	brne	.-26     	; 0x6aa <EndGame+0x14>
     6c4:	f9 01       	movw	r30, r18
//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
     6c6:	26 17       	cp	r18, r22
     6c8:	37 07       	cpc	r19, r23
     6ca:	21 f0       	breq	.+8      	; 0x6d4 <EndGame+0x3e>
     6cc:	9f 01       	movw	r18, r30
     6ce:	28 5f       	subi	r18, 0xF8	; 248
     6d0:	3f 4f       	sbci	r19, 0xFF	; 255
     6d2:	eb cf       	rjmp	.-42     	; 0x6aa <EndGame+0x14>
				b++; 
			if(M[i*8 + y] == 1)
				w++;
		}
	}
	if(b == w)
     6d4:	94 13       	cpse	r25, r20
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <EndGame+0x48>
	{
		AnnounceRes(2);	//TIE -LED3
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	b8 df       	rcall	.-144    	; 0x64c <AnnounceRes>
     6dc:	14 c0       	rjmp	.+40     	; 0x706 <EndGame+0x70>

	}
	else if(b>w) 
     6de:	49 17       	cp	r20, r25
     6e0:	50 f4       	brcc	.+20     	; 0x6f6 <EndGame+0x60>
	{
		if(MyColor == 0) //black
     6e2:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <MyColor>
     6e6:	81 11       	cpse	r24, r1
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <EndGame+0x5a>
			AnnounceRes(1);//WIN - LED1
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	af df       	rcall	.-162    	; 0x64c <AnnounceRes>
     6ee:	0b c0       	rjmp	.+22     	; 0x706 <EndGame+0x70>
		else
			AnnounceRes(0); //LOST -LED2
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	ac df       	rcall	.-168    	; 0x64c <AnnounceRes>
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <EndGame+0x70>
     6f6:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <MyColor>
	}
	else
	{
		if(MyColor == 1) //white
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	11 f4       	brne	.+4      	; 0x702 <EndGame+0x6c>
		AnnounceRes(1);//WIN - LED1
     6fe:	a6 df       	rcall	.-180    	; 0x64c <AnnounceRes>
     700:	02 c0       	rjmp	.+4      	; 0x706 <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	a3 df       	rcall	.-186    	; 0x64c <AnnounceRes>
     706:	82 e0       	ldi	r24, 0x02	; 2
	}

	//after announcement wait for ok in while loop(set move_done = 1)
	myTurn = 2;
     708:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     70c:	08 95       	ret

0000070e <init_leds>:
     70e:	b9 9a       	sbi	0x17, 1	; 23


 void init_leds()
 {
	DDRB |= (1<<DDB1);
	DDRB |= (1<<DDB2);
     710:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= (1<<DDB3);
     712:	bb 9a       	sbi	0x17, 3	; 23
	PORTB |= (1<<PORTB1);
     714:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
     716:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
     718:	c3 9a       	sbi	0x18, 3	; 24
     71a:	08 95       	ret

0000071c <init_timer>:

	 //////////Timer/Counter Initialization/////////
	 /* Timer starts from a specific value, 
		so we can take advantage of ISR
	 */
	TCNT1 = 3036;//2SECONDS // 34286;//49911  //2^16 = 65536 - (8,000,000/256) 
     71c:	8c ed       	ldi	r24, 0xDC	; 220
     71e:	9b e0       	ldi	r25, 0x0B	; 11
     720:	9d bd       	out	0x2d, r25	; 45
     722:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00; //Default - Cleared
     724:	1f bc       	out	0x2f, r1	; 47

	/*	The CLK/64 
	*/
	//TCCR1B &=  ~(1<<CS11);  
	TCCR1B |=  (1<<CS12);// |(1<<CS10);
     726:	8e b5       	in	r24, 0x2e	; 46
     728:	84 60       	ori	r24, 0x04	; 4
     72a:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	89 bf       	out	0x39, r24	; 57
     730:	08 95       	ret

00000732 <Algo>:

}

///////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
     732:	2f 92       	push	r2
     734:	3f 92       	push	r3
     736:	4f 92       	push	r4
     738:	5f 92       	push	r5
     73a:	6f 92       	push	r6
     73c:	7f 92       	push	r7
     73e:	8f 92       	push	r8
     740:	9f 92       	push	r9
     742:	af 92       	push	r10
     744:	bf 92       	push	r11
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	69 97       	sbiw	r28, 0x19	; 25
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
	
	myTurn = 1;		//Important - collision with  init_timer
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	3c 8b       	std	Y+20, r19	; 0x14
     772:	2b 8b       	std	Y+19, r18	; 0x13
     774:	1e 8a       	std	Y+22, r1	; 0x16
     776:	1d 8a       	std	Y+21, r1	; 0x15

	//CheckMove();
	//check enemy pass and my pass ....end game, Coming Soon
	char mymove[6];
	uint8_t mi,my,i,j,u,z,ibar,ybar,skip,istep,ystep;
	for(mi=0;mi<=7;mi++)
     778:	41 2c       	mov	r4, r1
     77a:	4f 8a       	std	Y+23, r4	; 0x17
     77c:	49 c1       	rjmp	.+658    	; 0xa10 <Algo+0x2de>
	{
		for(my=0; my<=7; my++)
		{
			if(M[mi*8+my] == MyColor)
     77e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <M>
     782:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <M+0x1>
     786:	89 89       	ldd	r24, Y+17	; 0x11
     788:	9a 89       	ldd	r25, Y+18	; 0x12
     78a:	e8 0f       	add	r30, r24
     78c:	f9 1f       	adc	r31, r25
     78e:	90 81       	ld	r25, Z
     790:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <MyColor>
     794:	98 13       	cpse	r25, r24
     796:	18 c1       	rjmp	.+560    	; 0x9c8 <Algo+0x296>
			{					 // we found one of our pawns, so we start to check potential move 

				for(i = mi - 1; i<=(mi+1); ++i)
     798:	22 24       	eor	r2, r2
     79a:	2a 94       	dec	r2
     79c:	23 0c       	add	r2, r3
     79e:	c2 2c       	mov	r12, r2
     7a0:	d1 2c       	mov	r13, r1
     7a2:	eb 89       	ldd	r30, Y+19	; 0x13
     7a4:	fc 89       	ldd	r31, Y+20	; 0x14
     7a6:	ec 15       	cp	r30, r12
     7a8:	fd 05       	cpc	r31, r13
     7aa:	0c f4       	brge	.+2      	; 0x7ae <Algo+0x7c>
     7ac:	0d c1       	rjmp	.+538    	; 0x9c8 <Algo+0x296>
				{
					if(i<0||i>7)
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     7ae:	4d 84       	ldd	r4, Y+13	; 0x0d
     7b0:	5e 84       	ldd	r5, Y+14	; 0x0e
			if(M[mi*8+my] == MyColor)
			{					 // we found one of our pawns, so we start to check potential move 

				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7)
     7b2:	f7 e0       	ldi	r31, 0x07	; 7
     7b4:	f2 15       	cp	r31, r2
     7b6:	08 f4       	brcc	.+2      	; 0x7ba <Algo+0x88>
     7b8:	fe c0       	rjmp	.+508    	; 0x9b6 <Algo+0x284>
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     7ba:	99 24       	eor	r9, r9
     7bc:	9a 94       	dec	r9
     7be:	98 0c       	add	r9, r8
     7c0:	89 2d       	mov	r24, r9
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	2d 85       	ldd	r18, Y+13	; 0x0d
     7c6:	3e 85       	ldd	r19, Y+14	; 0x0e
     7c8:	28 17       	cp	r18, r24
     7ca:	39 07       	cpc	r19, r25
     7cc:	0c f4       	brge	.+2      	; 0x7d0 <Algo+0x9e>
     7ce:	57 c1       	rjmp	.+686    	; 0xa7e <Algo+0x34c>
					{
						if(j<0||j>7)
							continue;
						if((M[i*8 + j] == !MyColor))		//our pawn has en enemy pawn adjacent to it
     7d0:	36 01       	movw	r6, r12
     7d2:	66 0c       	add	r6, r6
     7d4:	77 1c       	adc	r7, r7
     7d6:	66 0c       	add	r6, r6
     7d8:	77 1c       	adc	r7, r7
     7da:	66 0c       	add	r6, r6
     7dc:	77 1c       	adc	r7, r7
							z=j;
							


							skip = 1;
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     7de:	e2 2d       	mov	r30, r2
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	f8 87       	std	Y+8, r31	; 0x08
     7e4:	ef 83       	std	Y+7, r30	; 0x07
							{
								if(M[u*8 + z] == MyColor )
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	ee 0f       	add	r30, r30
     7ec:	ff 1f       	adc	r31, r31
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	fc 87       	std	Y+12, r31	; 0x0c
     7f4:	eb 87       	std	Y+11, r30	; 0x0b
							ybar = 10;
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
     7f6:	c2 2c       	mov	r12, r2
     7f8:	c3 18       	sub	r12, r3
							z=j;
							


							skip = 1;
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     7fa:	2c 2d       	mov	r18, r12
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	3a 87       	std	Y+10, r19	; 0x0a
     800:	29 87       	std	Y+9, r18	; 0x09
				{
					if(i<0||i>7)
						continue;
					for(j = my - 1; j<=(my+1); ++j)
					{
						if(j<0||j>7)
     802:	37 e0       	ldi	r19, 0x07	; 7
     804:	39 15       	cp	r19, r9
     806:	08 f4       	brcc	.+2      	; 0x80a <Algo+0xd8>
     808:	cb c0       	rjmp	.+406    	; 0x9a0 <Algo+0x26e>
							continue;
						if((M[i*8 + j] == !MyColor))		//our pawn has en enemy pawn adjacent to it
     80a:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <M>
     80e:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <M+0x1>
     812:	86 0d       	add	r24, r6
     814:	97 1d       	adc	r25, r7
     816:	fb 01       	movw	r30, r22
     818:	e8 0f       	add	r30, r24
     81a:	f9 1f       	adc	r31, r25
     81c:	20 81       	ld	r18, Z
     81e:	40 91 8c 00 	lds	r20, 0x008C	; 0x80008c <MyColor>
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	41 11       	cpse	r20, r1
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	28 17       	cp	r18, r24
     82e:	39 07       	cpc	r19, r25
     830:	09 f0       	breq	.+2      	; 0x834 <Algo+0x102>
     832:	b6 c0       	rjmp	.+364    	; 0x9a0 <Algo+0x26e>
						{

							//Setting up i barrier (board)
							if(i > mi)
     834:	32 14       	cp	r3, r2
     836:	20 f0       	brcs	.+8      	; 0x840 <Algo+0x10e>
							ibar = 7 ;
							else if(i == mi)
     838:	32 14       	cp	r3, r2
     83a:	39 f0       	breq	.+14     	; 0x84a <Algo+0x118>
							ibar = 10;
							else
							ibar = 0;
     83c:	e1 2c       	mov	r14, r1
     83e:	09 c0       	rjmp	.+18     	; 0x852 <Algo+0x120>
						if((M[i*8 + j] == !MyColor))		//our pawn has en enemy pawn adjacent to it
						{

							//Setting up i barrier (board)
							if(i > mi)
							ibar = 7 ;
     840:	0f 2e       	mov	r0, r31
     842:	f7 e0       	ldi	r31, 0x07	; 7
     844:	ef 2e       	mov	r14, r31
     846:	f0 2d       	mov	r31, r0
     848:	04 c0       	rjmp	.+8      	; 0x852 <Algo+0x120>
							else if(i == mi)
							ibar = 10;
     84a:	0f 2e       	mov	r0, r31
     84c:	fa e0       	ldi	r31, 0x0A	; 10
     84e:	ef 2e       	mov	r14, r31
     850:	f0 2d       	mov	r31, r0
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
     852:	39 14       	cp	r3, r9
     854:	20 f0       	brcs	.+8      	; 0x85e <Algo+0x12c>
							ybar = 7;
							else if(j == my)
     856:	89 14       	cp	r8, r9
     858:	39 f0       	breq	.+14     	; 0x868 <Algo+0x136>
							ybar = 10;
							else
							ybar = 0;
     85a:	d1 2c       	mov	r13, r1
     85c:	09 c0       	rjmp	.+18     	; 0x870 <Algo+0x13e>
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
							ybar = 7;
     85e:	0f 2e       	mov	r0, r31
     860:	f7 e0       	ldi	r31, 0x07	; 7
     862:	df 2e       	mov	r13, r31
     864:	f0 2d       	mov	r31, r0
     866:	04 c0       	rjmp	.+8      	; 0x870 <Algo+0x13e>
							else if(j == my)
							ybar = 10;
     868:	0f 2e       	mov	r0, r31
     86a:	fa e0       	ldi	r31, 0x0A	; 10
     86c:	df 2e       	mov	r13, r31
     86e:	f0 2d       	mov	r31, r0
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
							ystep = j - my;
     870:	f9 2c       	mov	r15, r9
     872:	f8 18       	sub	r15, r8
							z=j;
							


							skip = 1;
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     874:	a9 85       	ldd	r26, Y+9	; 0x09
     876:	ba 85       	ldd	r27, Y+10	; 0x0a
     878:	ae 0d       	add	r26, r14
     87a:	b1 1d       	adc	r27, r1
     87c:	8f 81       	ldd	r24, Y+7	; 0x07
     87e:	98 85       	ldd	r25, Y+8	; 0x08
     880:	8a 17       	cp	r24, r26
     882:	9b 07       	cpc	r25, r27
     884:	09 f4       	brne	.+2      	; 0x888 <Algo+0x156>
     886:	8c c0       	rjmp	.+280    	; 0x9a0 <Algo+0x26e>
     888:	89 2d       	mov	r24, r9
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	ef 2d       	mov	r30, r15
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	9f 01       	movw	r18, r30
     892:	2d 0d       	add	r18, r13
     894:	31 1d       	adc	r19, r1
     896:	39 8f       	std	Y+25, r19	; 0x19
     898:	28 8f       	std	Y+24, r18	; 0x18
     89a:	82 17       	cp	r24, r18
     89c:	93 07       	cpc	r25, r19
     89e:	09 f4       	brne	.+2      	; 0x8a2 <Algo+0x170>
     8a0:	7f c0       	rjmp	.+254    	; 0x9a0 <Algo+0x26e>
							{
								if(M[u*8 + z] == MyColor )
     8a2:	ab 84       	ldd	r10, Y+11	; 0x0b
     8a4:	bc 84       	ldd	r11, Y+12	; 0x0c
     8a6:	a8 0e       	add	r10, r24
     8a8:	b9 1e       	adc	r11, r25
     8aa:	cb 01       	movw	r24, r22
     8ac:	8a 0d       	add	r24, r10
     8ae:	9b 1d       	adc	r25, r11
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 81       	ld	r18, Z
     8b4:	42 17       	cp	r20, r18
     8b6:	09 f4       	brne	.+2      	; 0x8ba <Algo+0x188>
     8b8:	73 c0       	rjmp	.+230    	; 0x9a0 <Algo+0x26e>
								{
									break;
								}
								
								//check
								if( M[u*8 + z] == 2){
     8ba:	80 81       	ld	r24, Z
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	b1 f0       	breq	.+44     	; 0x8ec <Algo+0x1ba>
     8c0:	09 2d       	mov	r16, r9
     8c2:	12 2d       	mov	r17, r2
     8c4:	26 c0       	rjmp	.+76     	; 0x912 <Algo+0x1e0>


							skip = 1;
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
							{
								if(M[u*8 + z] == MyColor )
     8c6:	88 0f       	add	r24, r24
     8c8:	99 1f       	adc	r25, r25
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	82 0f       	add	r24, r18
     8d4:	93 1f       	adc	r25, r19
     8d6:	86 0f       	add	r24, r22
     8d8:	97 1f       	adc	r25, r23
     8da:	fc 01       	movw	r30, r24
     8dc:	20 81       	ld	r18, Z
     8de:	42 17       	cp	r20, r18
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <Algo+0x1b2>
     8e2:	5e c0       	rjmp	.+188    	; 0x9a0 <Algo+0x26e>
								{
									break;
								}
								
								//check
								if( M[u*8 + z] == 2){
     8e4:	80 81       	ld	r24, Z
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	a1 f4       	brne	.+40     	; 0x912 <Algo+0x1e0>
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <Algo+0x1be>
     8ec:	09 2d       	mov	r16, r9
     8ee:	12 2d       	mov	r17, r2
									skip = 0;
									CheckMove(u, z, MyColor);
     8f0:	60 2f       	mov	r22, r16
     8f2:	81 2f       	mov	r24, r17
     8f4:	00 dc       	rcall	.-2048   	; 0xf6 <CheckMove>
									
									mymove[0] = 'M';
     8f6:	fd e4       	ldi	r31, 0x4D	; 77
     8f8:	f9 83       	std	Y+1, r31	; 0x01
									mymove[1] = 'M';
     8fa:	fa 83       	std	Y+2, r31	; 0x02
									mymove[2] = '\x20';
     8fc:	20 e2       	ldi	r18, 0x20	; 32
     8fe:	2b 83       	std	Y+3, r18	; 0x03
									mymove[3] = u+65;
     900:	1f 5b       	subi	r17, 0xBF	; 191
     902:	1c 83       	std	Y+4, r17	; 0x04
									mymove[4] = (z+1)+'0';
     904:	0f 5c       	subi	r16, 0xCF	; 207
     906:	0d 83       	std	Y+5, r16	; 0x05
									mymove[5] = '\r';
     908:	3d e0       	ldi	r19, 0x0D	; 13
     90a:	3e 83       	std	Y+6, r19	; 0x06
							
							if(!skip) //if a solution is found
							{
								u=i;
								z=j;
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     90c:	e2 10       	cpse	r14, r2
     90e:	11 c0       	rjmp	.+34     	; 0x932 <Algo+0x200>
     910:	3a c0       	rjmp	.+116    	; 0x986 <Algo+0x254>
										
									break;
								}
								
								//if mycolor --> do nothing
								z+= ystep;
     912:	0f 0d       	add	r16, r15
								u+= istep;
     914:	1c 0d       	add	r17, r12
							z=j;
							


							skip = 1;
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     916:	81 2f       	mov	r24, r17
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	8a 17       	cp	r24, r26
     91c:	9b 07       	cpc	r25, r27
     91e:	09 f4       	brne	.+2      	; 0x922 <Algo+0x1f0>
     920:	3f c0       	rjmp	.+126    	; 0x9a0 <Algo+0x26e>
     922:	20 2f       	mov	r18, r16
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	e8 8d       	ldd	r30, Y+24	; 0x18
     928:	f9 8d       	ldd	r31, Y+25	; 0x19
     92a:	2e 17       	cp	r18, r30
     92c:	3f 07       	cpc	r19, r31
     92e:	59 f6       	brne	.-106    	; 0x8c6 <Algo+0x194>
     930:	37 c0       	rjmp	.+110    	; 0x9a0 <Algo+0x26e>
							
							if(!skip) //if a solution is found
							{
								u=i;
								z=j;
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     932:	d9 14       	cp	r13, r9
     934:	41 f1       	breq	.+80     	; 0x986 <Algo+0x254>
								{
									if(M[u*8 + z] == MyColor )
     936:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <M>
     93a:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <M+0x1>
     93e:	fc 01       	movw	r30, r24
     940:	ea 0d       	add	r30, r10
     942:	fb 1d       	adc	r31, r11
     944:	90 81       	ld	r25, Z
     946:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <MyColor>
     94a:	98 17       	cp	r25, r24
     94c:	e1 f0       	breq	.+56     	; 0x986 <Algo+0x254>
     94e:	39 2d       	mov	r19, r9
     950:	22 2d       	mov	r18, r2
     952:	12 c0       	rjmp	.+36     	; 0x978 <Algo+0x246>
     954:	e3 2f       	mov	r30, r19
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	88 e0       	ldi	r24, 0x08	; 8
     95a:	28 9f       	mul	r18, r24
     95c:	e0 0d       	add	r30, r0
     95e:	f1 1d       	adc	r31, r1
     960:	11 24       	eor	r1, r1
     962:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <M>
     966:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <M+0x1>
     96a:	e8 0f       	add	r30, r24
     96c:	f9 1f       	adc	r31, r25
     96e:	90 81       	ld	r25, Z
     970:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <MyColor>
     974:	98 17       	cp	r25, r24
     976:	39 f0       	breq	.+14     	; 0x986 <Algo+0x254>
										break;
									M[u*8 + z] = MyColor;
     978:	80 83       	st	Z, r24
									
									z+= ystep;
     97a:	3f 0d       	add	r19, r15
									u+= istep;
     97c:	2c 0d       	add	r18, r12
							
							if(!skip) //if a solution is found
							{
								u=i;
								z=j;
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     97e:	e2 16       	cp	r14, r18
     980:	11 f0       	breq	.+4      	; 0x986 <Algo+0x254>
     982:	d3 12       	cpse	r13, r19
     984:	e7 cf       	rjmp	.-50     	; 0x954 <Algo+0x222>
									
									z+= ystep;
									u+= istep;
								}
								
								move_done=1;
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <move_done>
								Board();
     98c:	9a dd       	rcall	.-1228   	; 0x4c2 <Board>
								Transmit(mymove,0,6);
     98e:	46 e0       	ldi	r20, 0x06	; 6
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	7c db       	rcall	.-2312   	; 0x90 <Transmit>
								if(move_done)
     998:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <move_done>
     99c:	81 11       	cpse	r24, r1
     99e:	48 c0       	rjmp	.+144    	; 0xa30 <Algo+0x2fe>

				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7)
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     9a0:	93 94       	inc	r9
     9a2:	89 2d       	mov	r24, r9
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	48 16       	cp	r4, r24
     9a8:	59 06       	cpc	r5, r25
     9aa:	0c f0       	brlt	.+2      	; 0x9ae <Algo+0x27c>
     9ac:	2a cf       	rjmp	.-428    	; 0x802 <Algo+0xd0>
									break;
							}
							
						}//if check neighbors
					}//j for
					if(move_done)
     9ae:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <move_done>
     9b2:	81 11       	cpse	r24, r1
     9b4:	3d c0       	rjmp	.+122    	; 0xa30 <Algo+0x2fe>
		for(my=0; my<=7; my++)
		{
			if(M[mi*8+my] == MyColor)
			{					 // we found one of our pawns, so we start to check potential move 

				for(i = mi - 1; i<=(mi+1); ++i)
     9b6:	23 94       	inc	r2
     9b8:	c2 2c       	mov	r12, r2
     9ba:	d1 2c       	mov	r13, r1
     9bc:	ef 85       	ldd	r30, Y+15	; 0x0f
     9be:	f8 89       	ldd	r31, Y+16	; 0x10
     9c0:	ec 15       	cp	r30, r12
     9c2:	fd 05       	cpc	r31, r13
     9c4:	0c f0       	brlt	.+2      	; 0x9c8 <Algo+0x296>
     9c6:	f5 ce       	rjmp	.-534    	; 0x7b2 <Algo+0x80>
					}//j for
					if(move_done)
						break;
				}//i for
			}//if  (find our pawn)
			if(move_done)
     9c8:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <move_done>
     9cc:	81 11       	cpse	r24, r1
     9ce:	30 c0       	rjmp	.+96     	; 0xa30 <Algo+0x2fe>
	//check enemy pass and my pass ....end game, Coming Soon
	char mymove[6];
	uint8_t mi,my,i,j,u,z,ibar,ybar,skip,istep,ystep;
	for(mi=0;mi<=7;mi++)
	{
		for(my=0; my<=7; my++)
     9d0:	83 94       	inc	r8
     9d2:	29 89       	ldd	r18, Y+17	; 0x11
     9d4:	3a 89       	ldd	r19, Y+18	; 0x12
     9d6:	2f 5f       	subi	r18, 0xFF	; 255
     9d8:	3f 4f       	sbci	r19, 0xFF	; 255
     9da:	3a 8b       	std	Y+18, r19	; 0x12
     9dc:	29 8b       	std	Y+17, r18	; 0x11
     9de:	8d 85       	ldd	r24, Y+13	; 0x0d
     9e0:	9e 85       	ldd	r25, Y+14	; 0x0e
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	9e 87       	std	Y+14, r25	; 0x0e
     9e6:	8d 87       	std	Y+13, r24	; 0x0d
     9e8:	98 e0       	ldi	r25, 0x08	; 8
     9ea:	89 12       	cpse	r8, r25
     9ec:	c8 ce       	rjmp	.-624    	; 0x77e <Algo+0x4c>

	//CheckMove();
	//check enemy pass and my pass ....end game, Coming Soon
	char mymove[6];
	uint8_t mi,my,i,j,u,z,ibar,ybar,skip,istep,ystep;
	for(mi=0;mi<=7;mi++)
     9ee:	ef 89       	ldd	r30, Y+23	; 0x17
     9f0:	ef 5f       	subi	r30, 0xFF	; 255
     9f2:	ef 8b       	std	Y+23, r30	; 0x17
     9f4:	2d 89       	ldd	r18, Y+21	; 0x15
     9f6:	3e 89       	ldd	r19, Y+22	; 0x16
     9f8:	28 5f       	subi	r18, 0xF8	; 248
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	3e 8b       	std	Y+22, r19	; 0x16
     9fe:	2d 8b       	std	Y+21, r18	; 0x15
     a00:	8b 89       	ldd	r24, Y+19	; 0x13
     a02:	9c 89       	ldd	r25, Y+20	; 0x14
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	9c 8b       	std	Y+20, r25	; 0x14
     a08:	8b 8b       	std	Y+19, r24	; 0x13
     a0a:	20 34       	cpi	r18, 0x40	; 64
     a0c:	31 05       	cpc	r19, r1
     a0e:	81 f0       	breq	.+32     	; 0xa30 <Algo+0x2fe>

}

///////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
     a10:	ed 89       	ldd	r30, Y+21	; 0x15
     a12:	fe 89       	ldd	r31, Y+22	; 0x16
     a14:	fa 8b       	std	Y+18, r31	; 0x12
     a16:	e9 8b       	std	Y+17, r30	; 0x11
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	3e 87       	std	Y+14, r19	; 0x0e
     a1e:	2d 87       	std	Y+13, r18	; 0x0d
     a20:	31 2c       	mov	r3, r1
		for(my=0; my<=7; my++)
		{
			if(M[mi*8+my] == MyColor)
			{					 // we found one of our pawns, so we start to check potential move 

				for(i = mi - 1; i<=(mi+1); ++i)
     a22:	8b 89       	ldd	r24, Y+19	; 0x13
     a24:	9c 89       	ldd	r25, Y+20	; 0x14
     a26:	98 8b       	std	Y+16, r25	; 0x10
     a28:	8f 87       	std	Y+15, r24	; 0x0f
     a2a:	83 2c       	mov	r8, r3
     a2c:	3f 88       	ldd	r3, Y+23	; 0x17
     a2e:	a7 ce       	rjmp	.-690    	; 0x77e <Algo+0x4c>
	//Transmit("MM G2\r",0,strlen("mv g2\r"));

	//while loop until 'OK' response
	
	while(1){		// Check_Input does not support "OK" response so we check it here
		if(move_done >= 1)
     a30:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <move_done>
     a34:	88 23       	and	r24, r24
     a36:	f1 f3       	breq	.-4      	; 0xa34 <Algo+0x302>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a38:	ef e1       	ldi	r30, 0x1F	; 31
     a3a:	fe e4       	ldi	r31, 0x4E	; 78
     a3c:	31 97       	sbiw	r30, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <Algo+0x30a>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <Algo+0x310>
     a42:	00 00       	nop
		{
			while(1)
			{
				_delay_ms(10);
				if(move_done == 2)
     a44:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <move_done>
     a48:	82 30       	cpi	r24, 0x02	; 2
     a4a:	b1 f7       	brne	.-20     	; 0xa38 <Algo+0x306>
				{ // we received the response we were waiting'
					move_done = 0;
     a4c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <move_done>
					break;
				}
			}
			
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75) //Respone ok for our MM
     a50:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <rxReadPos>
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	fc 01       	movw	r30, r24
     a58:	e2 57       	subi	r30, 0x72	; 114
     a5a:	ff 4f       	sbci	r31, 0xFF	; 255
     a5c:	20 81       	ld	r18, Z
     a5e:	2f 34       	cpi	r18, 0x4F	; 79
     a60:	39 f7       	brne	.-50     	; 0xa30 <Algo+0x2fe>
     a62:	fc 01       	movw	r30, r24
     a64:	e2 57       	subi	r30, 0x72	; 114
     a66:	ff 4f       	sbci	r31, 0xFF	; 255
     a68:	81 81       	ldd	r24, Z+1	; 0x01
     a6a:	8b 34       	cpi	r24, 0x4B	; 75
			{
				init_timer();
     a6c:	09 f7       	brne	.-62     	; 0xa30 <Algo+0x2fe>
     a6e:	56 de       	rcall	.-852    	; 0x71c <init_timer>
				rxReadPos=rxWritePos;
     a70:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <rxWritePos>
     a74:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <rxReadPos>
				myTurn = 0;
     a78:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
				break;
			}//future update : else move_done=1 , wrong input avoidance
			
		}
	}
}
     a7c:	06 c0       	rjmp	.+12     	; 0xa8a <Algo+0x358>
									break;
							}
							
						}//if check neighbors
					}//j for
					if(move_done)
     a7e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <move_done>
     a82:	88 23       	and	r24, r24
     a84:	09 f4       	brne	.+2      	; 0xa88 <Algo+0x356>
     a86:	97 cf       	rjmp	.-210    	; 0x9b6 <Algo+0x284>
     a88:	d3 cf       	rjmp	.-90     	; 0xa30 <Algo+0x2fe>
				break;
			}//future update : else move_done=1 , wrong input avoidance
			
		}
	}
}
     a8a:	69 96       	adiw	r28, 0x19	; 25
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	bf 90       	pop	r11
     aa8:	af 90       	pop	r10
     aaa:	9f 90       	pop	r9
     aac:	8f 90       	pop	r8
     aae:	7f 90       	pop	r7
     ab0:	6f 90       	pop	r6
     ab2:	5f 90       	pop	r5
     ab4:	4f 90       	pop	r4
     ab6:	3f 90       	pop	r3
     ab8:	2f 90       	pop	r2
     aba:	08 95       	ret

00000abc <main>:
volatile uint8_t *M ;



int main (void)
{
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	00 d0       	rcall	.+0      	; 0xac2 <main+0x6>
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
	board_init();
     ac6:	e3 da       	rcall	.-2618   	; 0x8e <board_init>
	init_serial();
     ac8:	77 dd       	rcall	.-1298   	; 0x5b8 <init_serial>
	init_leds();
     aca:	21 de       	rcall	.-958    	; 0x70e <init_leds>
     acc:	8d e0       	ldi	r24, 0x0D	; 13
	// delimiter carriage return
	strcpy(CR,"\xD");
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <enemy_pass>
     ad4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <CR>
     ad8:	c1 9a       	sbi	0x18, 1	; 24

	//Turning off leds(atmega16)
	PORTB |= (1<<PORTB1); 
     ada:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB2);
     adc:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= (1<<PORTB3);
		

	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
     ade:	80 e4       	ldi	r24, 0x40	; 64
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	f4 d1       	rcall	.+1000   	; 0xecc <malloc>
     ae4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <M+0x1>
     ae8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <M>
     aec:	19 82       	std	Y+1, r1	; 0x01
	
	volatile uint8_t i=0;
     aee:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t y = 0 ;
     af0:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0 ; i <= 7 ; i++)
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	88 30       	cpi	r24, 0x08	; 8
     af6:	00 f5       	brcc	.+64     	; 0xb38 <main+0x7c>
     af8:	22 e0       	ldi	r18, 0x02	; 2
	{
		for(y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     afa:	1a 82       	std	Y+2, r1	; 0x02
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
     afc:	8a 81       	ldd	r24, Y+2	; 0x02
     afe:	88 30       	cpi	r24, 0x08	; 8
     b00:	a8 f4       	brcc	.+42     	; 0xb2c <main+0x70>
     b02:	39 81       	ldd	r19, Y+1	; 0x01
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	48 e0       	ldi	r20, 0x08	; 8
     b0a:	34 9f       	mul	r19, r20
     b0c:	80 0d       	add	r24, r0
     b0e:	91 1d       	adc	r25, r1
     b10:	11 24       	eor	r1, r1
     b12:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <M>
     b16:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <M+0x1>
     b1a:	e8 0f       	add	r30, r24
     b1c:	f9 1f       	adc	r31, r25
     b1e:	20 83       	st	Z, r18
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
     b22:	8f 5f       	subi	r24, 0xFF	; 255
     b24:	8a 83       	std	Y+2, r24	; 0x02
     b26:	8a 81       	ldd	r24, Y+2	; 0x02
     b28:	88 30       	cpi	r24, 0x08	; 8
     b2a:	58 f3       	brcs	.-42     	; 0xb02 <main+0x46>
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
     b2e:	8f 5f       	subi	r24, 0xFF	; 255
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	88 30       	cpi	r24, 0x08	; 8
     b36:	08 f3       	brcs	.-62     	; 0xafa <main+0x3e>
     b38:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <M>
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
	M[3*8+3] = 1 ;
     b3c:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <M+0x1>
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	83 8f       	std	Z+27, r24	; 0x1b
     b44:	14 8e       	std	Z+28, r1	; 0x1c
	M[3*8+4] = 0 ;
     b46:	13 a2       	std	Z+35, r1	; 0x23
	M[4*8+3] = 0 ;
     b48:	84 a3       	std	Z+36, r24	; 0x24
	M[4*8+4] = 1 ;
     b4a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <rxReadPos>

	//////////////////////////////////////////////////////////////////////
	

	//buffer pointers init
	rxReadPos=0;
     b4e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <rxWritePos>
	rxWritePos=0;
     b52:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end>
	//flag Initialization 
	ILflag =0;
     b56:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <move_done>
	move_done=0;
     b5a:	92 e0       	ldi	r25, 0x02	; 2
	myTurn=2;
     b5c:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <myTurn>
     b60:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <MyColor>
	MyColor = 1;
     b64:	78 94       	sei
	
	sei();
     b66:	12 e0       	ldi	r17, 0x02	; 2
			
			}//future update : "else ILflag=1;" , wrong input avoidance

			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){ //"PL"
				AnnounceRes(0); //LOST - LED2								//WARNING: algo myturn=1 in case we want to continue playing
				myTurn=2;	
     b68:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
	
	
	while(1){
		
		//Waiting for PC response - (ILLIGAL request)
		if(ILflag >= 1)
     b6c:	88 23       	and	r24, r24
     b6e:	d1 f1       	breq	.+116    	; 0xbe4 <main+0x128>
     b70:	8f e1       	ldi	r24, 0x1F	; 31
     b72:	9e e4       	ldi	r25, 0x4E	; 78
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <main+0xb8>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <main+0xbe>
     b7a:	00 00       	nop
     b7c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
		{
			//Transmit("Waiting OK for announcement\r",0,"Waiting OK for announcement\r");
			_delay_ms(10);
			while(1){		
				if(ILflag == 2){ // we received the response we were waiting
     b80:	82 30       	cpi	r24, 0x02	; 2
     b82:	e1 f7       	brne	.-8      	; 0xb7c <main+0xc0>
     b84:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end>
					ILflag = 0;
     b88:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <rxReadPos>
					break;
				}
			}
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75){ // "ok"
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	fc 01       	movw	r30, r24
     b90:	e2 57       	subi	r30, 0x72	; 114
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	20 81       	ld	r18, Z
     b96:	2f 34       	cpi	r18, 0x4F	; 79
     b98:	71 f4       	brne	.+28     	; 0xbb6 <main+0xfa>
     b9a:	fc 01       	movw	r30, r24
     b9c:	e2 57       	subi	r30, 0x72	; 114
     b9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ba0:	81 81       	ldd	r24, Z+1	; 0x01
     ba2:	8b 34       	cpi	r24, 0x4B	; 75
     ba4:	d9 f4       	brne	.+54     	; 0xbdc <main+0x120>
     ba6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <rxWritePos>
			   rxReadPos=rxWritePos;
     baa:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <rxReadPos>
				AnnounceRes(1); //WIN - LED1
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	4d dd       	rcall	.-1382   	; 0x64c <AnnounceRes>
     bb2:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
				myTurn=2;
     bb6:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <rxReadPos>
				
			
			}//future update : "else ILflag=1;" , wrong input avoidance

			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){ //"PL"
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	fc 01       	movw	r30, r24
     bbe:	e2 57       	subi	r30, 0x72	; 114
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	20 81       	ld	r18, Z
     bc4:	20 35       	cpi	r18, 0x50	; 80
     bc6:	51 f4       	brne	.+20     	; 0xbdc <main+0x120>
     bc8:	fc 01       	movw	r30, r24
     bca:	e2 57       	subi	r30, 0x72	; 114
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	81 81       	ldd	r24, Z+1	; 0x01
     bd0:	8c 34       	cpi	r24, 0x4C	; 76
     bd2:	21 f4       	brne	.+8      	; 0xbdc <main+0x120>
				AnnounceRes(0); //LOST - LED2								//WARNING: algo myturn=1 in case we want to continue playing
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	3a dd       	rcall	.-1420   	; 0x64c <AnnounceRes>
     bd8:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
				myTurn=2;	
     bdc:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <rxWritePos>
			}	//future update : "else ILflag=1;" , wrong input avoidance		

			rxReadPos=rxWritePos;
     be0:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <rxReadPos>
     be4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
		
		
		if((myTurn == 0)&&(mt == 0)){
     be8:	81 11       	cpse	r24, r1
     bea:	0a c0       	rjmp	.+20     	; 0xc00 <main+0x144>
     bec:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <mt>
     bf0:	81 11       	cpse	r24, r1
     bf2:	06 c0       	rjmp	.+12     	; 0xc00 <main+0x144>
			//Possible speculation algo
			mt = 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <mt>
			init_timer();
     bfa:	90 dd       	rcall	.-1248   	; 0x71c <init_timer>
     bfc:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			myTurn = 0;
     c00:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
			
		
		if(myTurn==1){ //When its avr's turn
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	09 f0       	breq	.+2      	; 0xc0a <main+0x14e>
     c08:	af cf       	rjmp	.-162    	; 0xb68 <main+0xac>
			mt = 0; //reset flag for HIS turn			
     c0a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <mt>
			init_timer(); //reset timer
     c0e:	86 dd       	rcall	.-1268   	; 0x71c <init_timer>
     c10:	81 e0       	ldi	r24, 0x01	; 1
			myTurn = 1;  //Important - collision with  init_timer
     c12:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     c16:	8d dd       	rcall	.-1254   	; 0x732 <Algo>
			Algo();		//The actual algorithm
     c18:	a7 cf       	rjmp	.-178    	; 0xb68 <main+0xac>

00000c1a <Check_Input>:
     c1a:	9c 01       	movw	r18, r24
     c1c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <rxReadPos>

////////////////////////////////////////////   CHECK_INPUT    ///////////////////////////////////////////////

void Check_Input(char data[]){
	
		if(data[rxReadPos]==CR[0]){
     c20:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <CR>
     c24:	f9 01       	movw	r30, r18
     c26:	e9 0f       	add	r30, r25
     c28:	f1 1d       	adc	r31, r1
     c2a:	80 81       	ld	r24, Z
     c2c:	84 13       	cpse	r24, r20
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <Check_Input+0x1c>
			rxReadPos++;
     c30:	9f 5f       	subi	r25, 0xFF	; 255
     c32:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <rxReadPos>
		//flag = 0;
		//Space_num = 0;
		

		//ILFlag will help us spot "OK" or "PL" terminal answer
		if(ILflag == 1)
     c36:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	21 f4       	brne	.+8      	; 0xc46 <Check_Input+0x2c>
		{
			ILflag=2;  //answer spotted, you can proceed.
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
			return;	
     c44:	08 95       	ret
		}
		
		//it will help to spot "OK"  terminal answer
		if(move_done == 1)
     c46:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <move_done>
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	21 f4       	brne	.+8      	; 0xc56 <Check_Input+0x3c>
		{	
			move_done=2; //answer spotted, you can proceed.
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <move_done>
			return;	
     c54:	08 95       	ret
     c56:	b9 01       	movw	r22, r18
	


		//process
		// command AT
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
     c58:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <rxReadPos>
     c5c:	29 2f       	mov	r18, r25
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	fb 01       	movw	r30, r22
     c62:	e2 0f       	add	r30, r18
     c64:	f3 1f       	adc	r31, r19
     c66:	90 81       	ld	r25, Z
     c68:	91 34       	cpi	r25, 0x41	; 65
     c6a:	99 f4       	brne	.+38     	; 0xc92 <Check_Input+0x78>
     c6c:	fb 01       	movw	r30, r22
     c6e:	e2 0f       	add	r30, r18
     c70:	f3 1f       	adc	r31, r19
     c72:	91 81       	ldd	r25, Z+1	; 0x01
     c74:	94 35       	cpi	r25, 0x54	; 84
     c76:	09 f0       	breq	.+2      	; 0xc7a <Check_Input+0x60>
     c78:	e5 c0       	rjmp	.+458    	; 0xe44 <Check_Input+0x22a>
		{
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			if(data[rxReadPos+2] == CR[0]){
     c7a:	fb 01       	movw	r30, r22
     c7c:	e2 0f       	add	r30, r18
     c7e:	f3 1f       	adc	r31, r19
     c80:	82 81       	ldd	r24, Z+2	; 0x02
     c82:	48 13       	cpse	r20, r24
     c84:	df c0       	rjmp	.+446    	; 0xe44 <Check_Input+0x22a>
				Transmit("OK\r",0 , strlen("OK\r"));
     c86:	43 e0       	ldi	r20, 0x03	; 3
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	8c e7       	ldi	r24, 0x7C	; 124
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	00 da       	rcall	.-3072   	; 0x90 <Transmit>
     c90:	d9 c0       	rjmp	.+434    	; 0xe44 <Check_Input+0x22a>
				rxReadPos = rxWritePos;
			}

		}
		//Checking for RST<CR> command.
		else if((data[rxReadPos] == 82)&&(data[rxReadPos + 1] == 83)&&(data[rxReadPos + 2] == 84))		
     c92:	92 35       	cpi	r25, 0x52	; 82
     c94:	f9 f4       	brne	.+62     	; 0xcd4 <Check_Input+0xba>
     c96:	fb 01       	movw	r30, r22
     c98:	e2 0f       	add	r30, r18
     c9a:	f3 1f       	adc	r31, r19
     c9c:	91 81       	ldd	r25, Z+1	; 0x01
     c9e:	93 35       	cpi	r25, 0x53	; 83
     ca0:	09 f0       	breq	.+2      	; 0xca4 <Check_Input+0x8a>
     ca2:	d0 c0       	rjmp	.+416    	; 0xe44 <Check_Input+0x22a>
     ca4:	fb 01       	movw	r30, r22
     ca6:	e2 0f       	add	r30, r18
     ca8:	f3 1f       	adc	r31, r19
     caa:	82 81       	ldd	r24, Z+2	; 0x02
     cac:	84 35       	cpi	r24, 0x54	; 84
     cae:	09 f0       	breq	.+2      	; 0xcb2 <Check_Input+0x98>
     cb0:	c9 c0       	rjmp	.+402    	; 0xe44 <Check_Input+0x22a>
		{
			ILflag =0;
     cb2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end>
			move_done=0;
     cb6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <move_done>
			myTurn=2;
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			PORTB |= (1<<PORTB1);
     cc0:	c1 9a       	sbi	0x18, 1	; 24
			PORTB |= (1<<PORTB2);
     cc2:	c2 9a       	sbi	0x18, 2	; 24
			PORTB |= (1<<PORTB3);
			RST();
     cc4:	c3 9a       	sbi	0x18, 3	; 24
     cc6:	f2 d9       	rcall	.-3100   	; 0xac <RST>
			Transmit("OK\r",0 , strlen("OK\r"));
     cc8:	43 e0       	ldi	r20, 0x03	; 3
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	8c e7       	ldi	r24, 0x7C	; 124
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	df d9       	rcall	.-3138   	; 0x90 <Transmit>
			rxReadPos = rxWritePos; 
     cd2:	b8 c0       	rjmp	.+368    	; 0xe44 <Check_Input+0x22a>
			//
		}	
		// SP<SPACE>{B/W}<CR>
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 80))
     cd4:	93 35       	cpi	r25, 0x53	; 83
     cd6:	d9 f4       	brne	.+54     	; 0xd0e <Check_Input+0xf4>
     cd8:	fb 01       	movw	r30, r22
     cda:	e2 0f       	add	r30, r18
     cdc:	f3 1f       	adc	r31, r19
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	90 35       	cpi	r25, 0x50	; 80
     ce2:	09 f0       	breq	.+2      	; 0xce6 <Check_Input+0xcc>
     ce4:	41 c0       	rjmp	.+130    	; 0xd68 <Check_Input+0x14e>
		{
			//(int)c - 65;
			if(data[rxReadPos + 3] == 66)		//B
     ce6:	fb 01       	movw	r30, r22
     ce8:	e2 0f       	add	r30, r18
     cea:	f3 1f       	adc	r31, r19
     cec:	83 81       	ldd	r24, Z+3	; 0x03
     cee:	82 34       	cpi	r24, 0x42	; 66
     cf0:	19 f4       	brne	.+6      	; 0xcf8 <Check_Input+0xde>
				MyColor = 0;					//Saving myColor
     cf2:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <MyColor>
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <Check_Input+0xe8>
			else if(data[rxReadPos + 3] == 87)  //W
     cf8:	87 35       	cpi	r24, 0x57	; 87
     cfa:	19 f4       	brne	.+6      	; 0xd02 <Check_Input+0xe8>
				MyColor = 1;					//Saving myColor
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <MyColor>
			Transmit("OK\r",0 , strlen("OK\r"));
     d02:	43 e0       	ldi	r20, 0x03	; 3
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	8c e7       	ldi	r24, 0x7C	; 124
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	c2 d9       	rcall	.-3196   	; 0x90 <Transmit>
			rxReadPos = rxWritePos;
     d0c:	9b c0       	rjmp	.+310    	; 0xe44 <Check_Input+0x22a>
		}
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
     d0e:	9e 34       	cpi	r25, 0x4E	; 78
     d10:	b9 f4       	brne	.+46     	; 0xd40 <Check_Input+0x126>
     d12:	fb 01       	movw	r30, r22
     d14:	e2 0f       	add	r30, r18
     d16:	f3 1f       	adc	r31, r19
     d18:	81 81       	ldd	r24, Z+1	; 0x01
     d1a:	87 34       	cpi	r24, 0x47	; 71
     d1c:	09 f0       	breq	.+2      	; 0xd20 <Check_Input+0x106>
     d1e:	92 c0       	rjmp	.+292    	; 0xe44 <Check_Input+0x22a>
		{
			
			if(MyColor == 0)// BLACK
     d20:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <MyColor>
     d24:	81 11       	cpse	r24, r1
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <Check_Input+0x116>
				myTurn=1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <Check_Input+0x11a>
			else           //WHITE
				myTurn=0;
     d30:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			
			Transmit("OK\r",0 , strlen("OK\r"));
     d34:	43 e0       	ldi	r20, 0x03	; 3
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	8c e7       	ldi	r24, 0x7C	; 124
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a9 d9       	rcall	.-3246   	; 0x90 <Transmit>
			rxReadPos = rxWritePos;
     d3e:	82 c0       	rjmp	.+260    	; 0xe44 <Check_Input+0x22a>
		}
		        //EG<CR>
		else if((data[rxReadPos] == 69)&&(data[rxReadPos + 1] == 71))
     d40:	95 34       	cpi	r25, 0x45	; 69
     d42:	31 f5       	brne	.+76     	; 0xd90 <Check_Input+0x176>
     d44:	fb 01       	movw	r30, r22
     d46:	e2 0f       	add	r30, r18
     d48:	f3 1f       	adc	r31, r19
     d4a:	81 81       	ldd	r24, Z+1	; 0x01
     d4c:	87 34       	cpi	r24, 0x47	; 71
     d4e:	09 f0       	breq	.+2      	; 0xd52 <Check_Input+0x138>
		{
			//EndGameFlag = 1; // check this flag during waiting/calculating loop
			Transmit("OK\r",0 , strlen("OK\r"));
     d50:	79 c0       	rjmp	.+242    	; 0xe44 <Check_Input+0x22a>
     d52:	43 e0       	ldi	r20, 0x03	; 3
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	8c e7       	ldi	r24, 0x7C	; 124
     d58:	90 e0       	ldi	r25, 0x00	; 0
			rxReadPos = rxWritePos;
     d5a:	9a d9       	rcall	.-3276   	; 0x90 <Transmit>
     d5c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <rxWritePos>
     d60:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <rxReadPos>
			EndGame();
     d64:	98 dc       	rcall	.-1744   	; 0x696 <EndGame>
     d66:	6e c0       	rjmp	.+220    	; 0xe44 <Check_Input+0x22a>
		}
			 //ST<CR>
        else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 84))
     d68:	fb 01       	movw	r30, r22
     d6a:	e2 0f       	add	r30, r18
     d6c:	f3 1f       	adc	r31, r19
     d6e:	81 81       	ldd	r24, Z+1	; 0x01
     d70:	84 35       	cpi	r24, 0x54	; 84
     d72:	09 f0       	breq	.+2      	; 0xd76 <Check_Input+0x15c>
     d74:	67 c0       	rjmp	.+206    	; 0xe44 <Check_Input+0x22a>
        {
			Time = data[rxReadPos+3] - '0';    //String to Int
     d76:	fb 01       	movw	r30, r22
     d78:	e2 0f       	add	r30, r18
     d7a:	f3 1f       	adc	r31, r19
     d7c:	83 81       	ldd	r24, Z+3	; 0x03
     d7e:	80 53       	subi	r24, 0x30	; 48
     d80:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <Time>
			Transmit("OK\r",0 , strlen("OK\r"));
     d84:	43 e0       	ldi	r20, 0x03	; 3
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	8c e7       	ldi	r24, 0x7C	; 124
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	81 d9       	rcall	.-3326   	; 0x90 <Transmit>
			rxReadPos = rxWritePos;
     d8e:	5a c0       	rjmp	.+180    	; 0xe44 <Check_Input+0x22a>
        }
			//MV<SP>{[A-H],[1-8]}<CR>
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 86))
     d90:	9d 34       	cpi	r25, 0x4D	; 77
     d92:	99 f5       	brne	.+102    	; 0xdfa <Check_Input+0x1e0>
     d94:	fb 01       	movw	r30, r22
     d96:	e2 0f       	add	r30, r18
     d98:	f3 1f       	adc	r31, r19
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	86 35       	cpi	r24, 0x56	; 86
     d9e:	09 f0       	breq	.+2      	; 0xda2 <Check_Input+0x188>
     da0:	51 c0       	rjmp	.+162    	; 0xe44 <Check_Input+0x22a>
		{
				if((data[rxReadPos+3] >= 65)&&(data[rxReadPos+3] <= 72)&&(data[rxReadPos+4] >= 49)&&(data[rxReadPos+4] <= 56))  // Checking input
     da2:	fb 01       	movw	r30, r22
     da4:	e2 0f       	add	r30, r18
     da6:	f3 1f       	adc	r31, r19
     da8:	93 81       	ldd	r25, Z+3	; 0x03
     daa:	91 54       	subi	r25, 0x41	; 65
     dac:	98 30       	cpi	r25, 0x08	; 8
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <Check_Input+0x198>
     db0:	49 c0       	rjmp	.+146    	; 0xe44 <Check_Input+0x22a>
     db2:	fb 01       	movw	r30, r22
     db4:	e2 0f       	add	r30, r18
     db6:	f3 1f       	adc	r31, r19
     db8:	64 81       	ldd	r22, Z+4	; 0x04
     dba:	61 53       	subi	r22, 0x31	; 49
     dbc:	68 30       	cpi	r22, 0x08	; 8
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <Check_Input+0x1a8>
				{
					uint8_t moveok = CheckMove(((int)data[rxReadPos+3] - 65),((data[rxReadPos+4] - '0') - 1), !MyColor );  //Check opponents move.
     dc0:	41 c0       	rjmp	.+130    	; 0xe44 <Check_Input+0x22a>
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <MyColor>
     dc8:	81 11       	cpse	r24, r1
     dca:	40 e0       	ldi	r20, 0x00	; 0
					//If opponent's move is legal, send ok and reset timer, else 
					//send IL and wait for PC response, if response OK --> I win else(PL) --> I LOSE
					if(moveok == 1)		
     dcc:	89 2f       	mov	r24, r25
     dce:	93 d9       	rcall	.-3290   	; 0xf6 <CheckMove>
					{
						// Saving opponent's move in my local game board
						//M[(((int)data[rxReadPos+3] - 65)*8) + (data[rxReadPos+4] - '0')] = !MyColor;  // Saving opponent's move in my local game board
						Transmit("OK\r",0 , strlen("OK\r"));
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	51 f4       	brne	.+20     	; 0xde8 <Check_Input+0x1ce>
     dd4:	43 e0       	ldi	r20, 0x03	; 3
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	8c e7       	ldi	r24, 0x7C	; 124
						init_timer();
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	59 d9       	rcall	.-3406   	; 0x90 <Transmit>
						myTurn=1;
     dde:	9e dc       	rcall	.-1732   	; 0x71c <init_timer>
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
					}
					else{
						Transmit("IL\r",0 , strlen("IL\r"));
     de6:	2e c0       	rjmp	.+92     	; 0xe44 <Check_Input+0x22a>
     de8:	43 e0       	ldi	r20, 0x03	; 3
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	80 e8       	ldi	r24, 0x80	; 128
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	4f d9       	rcall	.-3426   	; 0x90 <Transmit>
						ILflag =  1;							//Waiting mode for PC's response
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
     df8:	25 c0       	rjmp	.+74     	; 0xe44 <Check_Input+0x22a>
						
				} 	
		}

		//PASS
		else if ((data[rxReadPos] == 80)&&(data[rxReadPos + 1] == 83))
     dfa:	90 35       	cpi	r25, 0x50	; 80
     dfc:	89 f4       	brne	.+34     	; 0xe20 <Check_Input+0x206>
     dfe:	fb 01       	movw	r30, r22
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	81 81       	ldd	r24, Z+1	; 0x01
     e06:	83 35       	cpi	r24, 0x53	; 83
		{
			myTurn=1;
     e08:	e9 f4       	brne	.+58     	; 0xe44 <Check_Input+0x22a>
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			//This flag will help us end game in case we pass after opponent's pass
			enemy_pass = 1;   
     e10:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <enemy_pass>
			Transmit("OK\r",0,strlen("OK\r"));
     e14:	43 e0       	ldi	r20, 0x03	; 3
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	8c e7       	ldi	r24, 0x7C	; 124
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	39 d9       	rcall	.-3470   	; 0x90 <Transmit>
		}
		//WN

		else if((data[rxReadPos] == 87)&&(data[rxReadPos + 1] == 78)){
     e1e:	12 c0       	rjmp	.+36     	; 0xe44 <Check_Input+0x22a>
     e20:	97 35       	cpi	r25, 0x57	; 87
     e22:	81 f4       	brne	.+32     	; 0xe44 <Check_Input+0x22a>
     e24:	fb 01       	movw	r30, r22
     e26:	e2 0f       	add	r30, r18
     e28:	f3 1f       	adc	r31, r19
     e2a:	81 81       	ldd	r24, Z+1	; 0x01
			AnnounceRes(1);  //announce i win with led1
     e2c:	8e 34       	cpi	r24, 0x4E	; 78
     e2e:	51 f4       	brne	.+20     	; 0xe44 <Check_Input+0x22a>
     e30:	81 e0       	ldi	r24, 0x01	; 1
			myTurn=2;			
     e32:	0c dc       	rcall	.-2024   	; 0x64c <AnnounceRes>
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			Transmit("OK\r",0,strlen("OK\r"));
     e3a:	43 e0       	ldi	r20, 0x03	; 3
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	8c e7       	ldi	r24, 0x7C	; 124
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	26 d9       	rcall	.-3508   	; 0x90 <Transmit>
		}
		else
			NULL;
	rxReadPos=rxWritePos;		
	rxReadPos++;		//Ready for the next command (directs to the next letter, the one after <CR>) 
     e44:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <rxWritePos>
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <rxReadPos>
     e4e:	08 95       	ret

00000e50 <__vector_11>:
}




ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
     e72:	8c b1       	in	r24, 0x0c	; 12
     e74:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <rxWritePos>
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	e2 57       	subi	r30, 0x72	; 114
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
     e80:	5d 9b       	sbis	0x0b, 5	; 11
     e82:	fe cf       	rjmp	.-4      	; 0xe80 <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
     e84:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
     e86:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <rxWritePos>
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	e2 57       	subi	r30, 0x72	; 114
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	90 81       	ld	r25, Z
     e92:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <CR>
     e96:	98 13       	cpse	r25, r24
     e98:	03 c0       	rjmp	.+6      	; 0xea0 <__vector_11+0x50>
		Check_Input(myrxbuffer);
     e9a:	8e e8       	ldi	r24, 0x8E	; 142
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	bd de       	rcall	.-646    	; 0xc1a <Check_Input>
	
	
	

	rxWritePos++;
     ea0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <rxWritePos>
     ea4:	8f 5f       	subi	r24, 0xFF	; 255
     ea6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <rxWritePos>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <malloc>:
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	91 05       	cpc	r25, r1
     ed8:	10 f4       	brcc	.+4      	; 0xede <malloc+0x12>
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <__flp>
     ee2:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <__flp+0x1>
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	a0 e0       	ldi	r26, 0x00	; 0
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	30 97       	sbiw	r30, 0x00	; 0
     ef0:	19 f1       	breq	.+70     	; 0xf38 <malloc+0x6c>
     ef2:	40 81       	ld	r20, Z
     ef4:	51 81       	ldd	r21, Z+1	; 0x01
     ef6:	02 81       	ldd	r16, Z+2	; 0x02
     ef8:	13 81       	ldd	r17, Z+3	; 0x03
     efa:	48 17       	cp	r20, r24
     efc:	59 07       	cpc	r21, r25
     efe:	c8 f0       	brcs	.+50     	; 0xf32 <malloc+0x66>
     f00:	84 17       	cp	r24, r20
     f02:	95 07       	cpc	r25, r21
     f04:	69 f4       	brne	.+26     	; 0xf20 <malloc+0x54>
     f06:	10 97       	sbiw	r26, 0x00	; 0
     f08:	31 f0       	breq	.+12     	; 0xf16 <malloc+0x4a>
     f0a:	12 96       	adiw	r26, 0x02	; 2
     f0c:	0c 93       	st	X, r16
     f0e:	12 97       	sbiw	r26, 0x02	; 2
     f10:	13 96       	adiw	r26, 0x03	; 3
     f12:	1c 93       	st	X, r17
     f14:	27 c0       	rjmp	.+78     	; 0xf64 <malloc+0x98>
     f16:	00 93 93 01 	sts	0x0193, r16	; 0x800193 <__flp>
     f1a:	10 93 94 01 	sts	0x0194, r17	; 0x800194 <__flp+0x1>
     f1e:	22 c0       	rjmp	.+68     	; 0xf64 <malloc+0x98>
     f20:	21 15       	cp	r18, r1
     f22:	31 05       	cpc	r19, r1
     f24:	19 f0       	breq	.+6      	; 0xf2c <malloc+0x60>
     f26:	42 17       	cp	r20, r18
     f28:	53 07       	cpc	r21, r19
     f2a:	18 f4       	brcc	.+6      	; 0xf32 <malloc+0x66>
     f2c:	9a 01       	movw	r18, r20
     f2e:	bd 01       	movw	r22, r26
     f30:	ef 01       	movw	r28, r30
     f32:	df 01       	movw	r26, r30
     f34:	f8 01       	movw	r30, r16
     f36:	db cf       	rjmp	.-74     	; 0xeee <malloc+0x22>
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	f9 f0       	breq	.+62     	; 0xf7c <malloc+0xb0>
     f3e:	28 1b       	sub	r18, r24
     f40:	39 0b       	sbc	r19, r25
     f42:	24 30       	cpi	r18, 0x04	; 4
     f44:	31 05       	cpc	r19, r1
     f46:	80 f4       	brcc	.+32     	; 0xf68 <malloc+0x9c>
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	9b 81       	ldd	r25, Y+3	; 0x03
     f4c:	61 15       	cp	r22, r1
     f4e:	71 05       	cpc	r23, r1
     f50:	21 f0       	breq	.+8      	; 0xf5a <malloc+0x8e>
     f52:	fb 01       	movw	r30, r22
     f54:	93 83       	std	Z+3, r25	; 0x03
     f56:	82 83       	std	Z+2, r24	; 0x02
     f58:	04 c0       	rjmp	.+8      	; 0xf62 <malloc+0x96>
     f5a:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <__flp+0x1>
     f5e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <__flp>
     f62:	fe 01       	movw	r30, r28
     f64:	32 96       	adiw	r30, 0x02	; 2
     f66:	44 c0       	rjmp	.+136    	; 0xff0 <malloc+0x124>
     f68:	fe 01       	movw	r30, r28
     f6a:	e2 0f       	add	r30, r18
     f6c:	f3 1f       	adc	r31, r19
     f6e:	81 93       	st	Z+, r24
     f70:	91 93       	st	Z+, r25
     f72:	22 50       	subi	r18, 0x02	; 2
     f74:	31 09       	sbc	r19, r1
     f76:	39 83       	std	Y+1, r19	; 0x01
     f78:	28 83       	st	Y, r18
     f7a:	3a c0       	rjmp	.+116    	; 0xff0 <malloc+0x124>
     f7c:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <__brkval>
     f80:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <__brkval+0x1>
     f84:	23 2b       	or	r18, r19
     f86:	41 f4       	brne	.+16     	; 0xf98 <malloc+0xcc>
     f88:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
     f8c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     f90:	30 93 92 01 	sts	0x0192, r19	; 0x800192 <__brkval+0x1>
     f94:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <__brkval>
     f98:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     f9c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     fa0:	21 15       	cp	r18, r1
     fa2:	31 05       	cpc	r19, r1
     fa4:	41 f4       	brne	.+16     	; 0xfb6 <malloc+0xea>
     fa6:	2d b7       	in	r18, 0x3d	; 61
     fa8:	3e b7       	in	r19, 0x3e	; 62
     faa:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     fae:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     fb2:	24 1b       	sub	r18, r20
     fb4:	35 0b       	sbc	r19, r21
     fb6:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <__brkval>
     fba:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <__brkval+0x1>
     fbe:	e2 17       	cp	r30, r18
     fc0:	f3 07       	cpc	r31, r19
     fc2:	a0 f4       	brcc	.+40     	; 0xfec <malloc+0x120>
     fc4:	2e 1b       	sub	r18, r30
     fc6:	3f 0b       	sbc	r19, r31
     fc8:	28 17       	cp	r18, r24
     fca:	39 07       	cpc	r19, r25
     fcc:	78 f0       	brcs	.+30     	; 0xfec <malloc+0x120>
     fce:	ac 01       	movw	r20, r24
     fd0:	4e 5f       	subi	r20, 0xFE	; 254
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255
     fd4:	24 17       	cp	r18, r20
     fd6:	35 07       	cpc	r19, r21
     fd8:	48 f0       	brcs	.+18     	; 0xfec <malloc+0x120>
     fda:	4e 0f       	add	r20, r30
     fdc:	5f 1f       	adc	r21, r31
     fde:	50 93 92 01 	sts	0x0192, r21	; 0x800192 <__brkval+0x1>
     fe2:	40 93 91 01 	sts	0x0191, r20	; 0x800191 <__brkval>
     fe6:	81 93       	st	Z+, r24
     fe8:	91 93       	st	Z+, r25
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <malloc+0x124>
     fec:	e0 e0       	ldi	r30, 0x00	; 0
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	cf 01       	movw	r24, r30
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <free>:
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	09 f4       	brne	.+2      	; 0x1006 <free+0xa>
    1004:	81 c0       	rjmp	.+258    	; 0x1108 <free+0x10c>
    1006:	fc 01       	movw	r30, r24
    1008:	32 97       	sbiw	r30, 0x02	; 2
    100a:	13 82       	std	Z+3, r1	; 0x03
    100c:	12 82       	std	Z+2, r1	; 0x02
    100e:	a0 91 93 01 	lds	r26, 0x0193	; 0x800193 <__flp>
    1012:	b0 91 94 01 	lds	r27, 0x0194	; 0x800194 <__flp+0x1>
    1016:	10 97       	sbiw	r26, 0x00	; 0
    1018:	81 f4       	brne	.+32     	; 0x103a <free+0x3e>
    101a:	20 81       	ld	r18, Z
    101c:	31 81       	ldd	r19, Z+1	; 0x01
    101e:	82 0f       	add	r24, r18
    1020:	93 1f       	adc	r25, r19
    1022:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <__brkval>
    1026:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <__brkval+0x1>
    102a:	28 17       	cp	r18, r24
    102c:	39 07       	cpc	r19, r25
    102e:	51 f5       	brne	.+84     	; 0x1084 <free+0x88>
    1030:	f0 93 92 01 	sts	0x0192, r31	; 0x800192 <__brkval+0x1>
    1034:	e0 93 91 01 	sts	0x0191, r30	; 0x800191 <__brkval>
    1038:	67 c0       	rjmp	.+206    	; 0x1108 <free+0x10c>
    103a:	ed 01       	movw	r28, r26
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	ce 17       	cp	r28, r30
    1042:	df 07       	cpc	r29, r31
    1044:	40 f4       	brcc	.+16     	; 0x1056 <free+0x5a>
    1046:	4a 81       	ldd	r20, Y+2	; 0x02
    1048:	5b 81       	ldd	r21, Y+3	; 0x03
    104a:	9e 01       	movw	r18, r28
    104c:	41 15       	cp	r20, r1
    104e:	51 05       	cpc	r21, r1
    1050:	f1 f0       	breq	.+60     	; 0x108e <free+0x92>
    1052:	ea 01       	movw	r28, r20
    1054:	f5 cf       	rjmp	.-22     	; 0x1040 <free+0x44>
    1056:	d3 83       	std	Z+3, r29	; 0x03
    1058:	c2 83       	std	Z+2, r28	; 0x02
    105a:	40 81       	ld	r20, Z
    105c:	51 81       	ldd	r21, Z+1	; 0x01
    105e:	84 0f       	add	r24, r20
    1060:	95 1f       	adc	r25, r21
    1062:	c8 17       	cp	r28, r24
    1064:	d9 07       	cpc	r29, r25
    1066:	59 f4       	brne	.+22     	; 0x107e <free+0x82>
    1068:	88 81       	ld	r24, Y
    106a:	99 81       	ldd	r25, Y+1	; 0x01
    106c:	84 0f       	add	r24, r20
    106e:	95 1f       	adc	r25, r21
    1070:	02 96       	adiw	r24, 0x02	; 2
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	80 83       	st	Z, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	9b 81       	ldd	r25, Y+3	; 0x03
    107a:	93 83       	std	Z+3, r25	; 0x03
    107c:	82 83       	std	Z+2, r24	; 0x02
    107e:	21 15       	cp	r18, r1
    1080:	31 05       	cpc	r19, r1
    1082:	29 f4       	brne	.+10     	; 0x108e <free+0x92>
    1084:	f0 93 94 01 	sts	0x0194, r31	; 0x800194 <__flp+0x1>
    1088:	e0 93 93 01 	sts	0x0193, r30	; 0x800193 <__flp>
    108c:	3d c0       	rjmp	.+122    	; 0x1108 <free+0x10c>
    108e:	e9 01       	movw	r28, r18
    1090:	fb 83       	std	Y+3, r31	; 0x03
    1092:	ea 83       	std	Y+2, r30	; 0x02
    1094:	49 91       	ld	r20, Y+
    1096:	59 91       	ld	r21, Y+
    1098:	c4 0f       	add	r28, r20
    109a:	d5 1f       	adc	r29, r21
    109c:	ec 17       	cp	r30, r28
    109e:	fd 07       	cpc	r31, r29
    10a0:	61 f4       	brne	.+24     	; 0x10ba <free+0xbe>
    10a2:	80 81       	ld	r24, Z
    10a4:	91 81       	ldd	r25, Z+1	; 0x01
    10a6:	84 0f       	add	r24, r20
    10a8:	95 1f       	adc	r25, r21
    10aa:	02 96       	adiw	r24, 0x02	; 2
    10ac:	e9 01       	movw	r28, r18
    10ae:	99 83       	std	Y+1, r25	; 0x01
    10b0:	88 83       	st	Y, r24
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	9b 83       	std	Y+3, r25	; 0x03
    10b8:	8a 83       	std	Y+2, r24	; 0x02
    10ba:	e0 e0       	ldi	r30, 0x00	; 0
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	12 96       	adiw	r26, 0x02	; 2
    10c0:	8d 91       	ld	r24, X+
    10c2:	9c 91       	ld	r25, X
    10c4:	13 97       	sbiw	r26, 0x03	; 3
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	19 f0       	breq	.+6      	; 0x10d0 <free+0xd4>
    10ca:	fd 01       	movw	r30, r26
    10cc:	dc 01       	movw	r26, r24
    10ce:	f7 cf       	rjmp	.-18     	; 0x10be <free+0xc2>
    10d0:	8d 91       	ld	r24, X+
    10d2:	9c 91       	ld	r25, X
    10d4:	11 97       	sbiw	r26, 0x01	; 1
    10d6:	9d 01       	movw	r18, r26
    10d8:	2e 5f       	subi	r18, 0xFE	; 254
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	82 0f       	add	r24, r18
    10de:	93 1f       	adc	r25, r19
    10e0:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <__brkval>
    10e4:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <__brkval+0x1>
    10e8:	28 17       	cp	r18, r24
    10ea:	39 07       	cpc	r19, r25
    10ec:	69 f4       	brne	.+26     	; 0x1108 <free+0x10c>
    10ee:	30 97       	sbiw	r30, 0x00	; 0
    10f0:	29 f4       	brne	.+10     	; 0x10fc <free+0x100>
    10f2:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__flp+0x1>
    10f6:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__flp>
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <free+0x104>
    10fc:	13 82       	std	Z+3, r1	; 0x03
    10fe:	12 82       	std	Z+2, r1	; 0x02
    1100:	b0 93 92 01 	sts	0x0192, r27	; 0x800192 <__brkval+0x1>
    1104:	a0 93 91 01 	sts	0x0191, r26	; 0x800191 <__brkval>
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <_exit>:
    110e:	f8 94       	cli

00001110 <__stop_program>:
    1110:	ff cf       	rjmp	.-2      	; 0x1110 <__stop_program>
