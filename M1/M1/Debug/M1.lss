
M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000103e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000103e  000010d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000110  00800080  00800080  000010f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001124  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d4  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000849  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012a2  00000000  00000000  00002b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00003dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fdc4  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cbc  00000000  00000000  00013e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00014ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  00014ba4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
       6:	00 00       	nop
       8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
       a:	00 00       	nop
       c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
       e:	00 00       	nop
      10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
      16:	00 00       	nop
      18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c2       	rjmp	.+1240   	; 0x4fa <__vector_8>
      22:	00 00       	nop
      24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
      26:	00 00       	nop
      28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a7 c6       	rjmp	.+3406   	; 0xd7c <__vector_11>
      2e:	00 00       	nop
      30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
      32:	00 00       	nop
      34:	43 c2       	rjmp	.+1158   	; 0x4bc <__vector_13>
      36:	00 00       	nop
      38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
      3e:	00 00       	nop
      40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
      46:	00 00       	nop
      48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	b7 d4       	rcall	.+2414   	; 0x9f6 <main>
      88:	d8 c7       	rjmp	.+4016   	; 0x103a <_exit>

0000008a <__bad_interrupt>:
      8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
      8c:	08 95       	ret

0000008e <Transmit>:
	// reset and the rest of the settings will remain the same as previous.
	if(MyColor == 0)// BLACK  
		myTurn=1;
	else           //WHITE
		myTurn=0;
	Transmit("OK\r",0 , strlen("OK\r"));
      8e:	9c 01       	movw	r18, r24
      90:	64 17       	cp	r22, r20
      92:	50 f4       	brcc	.+20     	; 0xa8 <Transmit+0x1a>
      94:	5d 9b       	sbis	0x0b, 5	; 11
      96:	fe cf       	rjmp	.-4      	; 0x94 <Transmit+0x6>
      98:	f9 01       	movw	r30, r18
      9a:	e6 0f       	add	r30, r22
      9c:	f1 1d       	adc	r31, r1
      9e:	90 81       	ld	r25, Z
      a0:	9c b9       	out	0x0c, r25	; 12
      a2:	6f 5f       	subi	r22, 0xFF	; 255
      a4:	46 13       	cpse	r20, r22
      a6:	f6 cf       	rjmp	.-20     	; 0x94 <Transmit+0x6>
      a8:	08 95       	ret

000000aa <CheckMove>:




uint8_t CheckMove(char data[])
{
      aa:	2f 92       	push	r2
      ac:	3f 92       	push	r3
      ae:	4f 92       	push	r4
      b0:	5f 92       	push	r5
      b2:	6f 92       	push	r6
      b4:	7f 92       	push	r7
      b6:	8f 92       	push	r8
      b8:	9f 92       	push	r9
      ba:	af 92       	push	r10
      bc:	bf 92       	push	r11
      be:	cf 92       	push	r12
      c0:	df 92       	push	r13
      c2:	ef 92       	push	r14
      c4:	ff 92       	push	r15
      c6:	0f 93       	push	r16
      c8:	1f 93       	push	r17
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	69 97       	sbiw	r28, 0x19	; 25
      d4:	0f b6       	in	r0, 0x3f	; 63
      d6:	f8 94       	cli
      d8:	de bf       	out	0x3e, r29	; 62
      da:	0f be       	out	0x3f, r0	; 63
      dc:	cd bf       	out	0x3d, r28	; 61
	//Coming Soon. . .
	volatile int i,j;
	uint8_t mi,my,u,z,found,ibar,ybar,skip,istep,ystep;
	char mymove[6];
	//translate opponent's move
	mi = ((int)data[rxReadPos+3] - 65);
      de:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <rxReadPos>
      e2:	fc 01       	movw	r30, r24
      e4:	e2 0f       	add	r30, r18
      e6:	f1 1d       	adc	r31, r1
      e8:	93 81       	ldd	r25, Z+3	; 0x03
      ea:	0f 2e       	mov	r0, r31
      ec:	ff eb       	ldi	r31, 0xBF	; 191
      ee:	4f 2e       	mov	r4, r31
      f0:	f0 2d       	mov	r31, r0
      f2:	49 0e       	add	r4, r25
	my = (data[rxReadPos+4] - '0') - 1;
      f4:	14 81       	ldd	r17, Z+4	; 0x04
      f6:	0f 2e       	mov	r0, r31
      f8:	ff ec       	ldi	r31, 0xCF	; 207
      fa:	5f 2e       	mov	r5, r31
      fc:	f0 2d       	mov	r31, r0
      fe:	51 0e       	add	r5, r17
	char c[1];
	c[0] = mi +1 + '0';
     100:	90 51       	subi	r25, 0x10	; 16
     102:	9b 87       	std	Y+11, r25	; 0x0b
	Transmit(c,0,1);
     104:	41 e0       	ldi	r20, 0x01	; 1
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	ce 01       	movw	r24, r28
     10a:	0b 96       	adiw	r24, 0x0b	; 11
     10c:	c0 df       	rcall	.-128    	; 0x8e <Transmit>
	char c1[1];
	c1[0] = my+1 + '0';
     10e:	1c 87       	std	Y+12, r17	; 0x0c
	M[(mi+1)*8 + (my+1)] == !MyColor;
     110:	24 2c       	mov	r2, r4
     112:	31 2c       	mov	r3, r1
     114:	41 01       	movw	r8, r2
     116:	2f ef       	ldi	r18, 0xFF	; 255
     118:	82 1a       	sub	r8, r18
     11a:	92 0a       	sbc	r9, r18
     11c:	84 01       	movw	r16, r8
     11e:	00 0f       	add	r16, r16
     120:	11 1f       	adc	r17, r17
     122:	00 0f       	add	r16, r16
     124:	11 1f       	adc	r17, r17
     126:	00 0f       	add	r16, r16
     128:	11 1f       	adc	r17, r17
     12a:	85 2d       	mov	r24, r5
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	98 8b       	std	Y+16, r25	; 0x10
     130:	8f 87       	std	Y+15, r24	; 0x0f
     132:	3c 01       	movw	r6, r24
     134:	9f ef       	ldi	r25, 0xFF	; 255
     136:	69 1a       	sub	r6, r25
     138:	79 0a       	sbc	r7, r25
     13a:	c8 01       	movw	r24, r16
     13c:	86 0d       	add	r24, r6
     13e:	97 1d       	adc	r25, r7
     140:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <M>
     144:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <M+0x1>
     148:	e8 0f       	add	r30, r24
     14a:	f9 1f       	adc	r31, r25
     14c:	80 81       	ld	r24, Z
	Transmit(c1,0,1);
     14e:	41 e0       	ldi	r20, 0x01	; 1
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	ce 01       	movw	r24, r28
     154:	0c 96       	adiw	r24, 0x0c	; 12
     156:	9b df       	rcall	.-202    	; 0x8e <Transmit>

	found = 0;//init before main loop
	for(i = mi - 1; i<=(mi+1); ++i)
     158:	c1 01       	movw	r24, r2
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	9a 81       	ldd	r25, Y+2	; 0x02
     164:	88 16       	cp	r8, r24
     166:	99 06       	cpc	r9, r25
     168:	0c f4       	brge	.+2      	; 0x16c <CheckMove+0xc2>
     16a:	89 c1       	rjmp	.+786    	; 0x47e <__stack+0x1f>
				//check	
				if( M[u*8 + z] == 2)
					break;
				if(M[u*8 + z] == !MyColor )	
				{ 
					M[mi*8 + my] = !MyColor;
     16c:	08 50       	subi	r16, 0x08	; 8
     16e:	11 09       	sbc	r17, r1
     170:	2f 85       	ldd	r18, Y+15	; 0x0f
     172:	38 89       	ldd	r19, Y+16	; 0x10
     174:	20 0f       	add	r18, r16
     176:	31 1f       	adc	r19, r17
     178:	38 8f       	std	Y+24, r19	; 0x18
     17a:	2f 8b       	std	Y+23, r18	; 0x17
     17c:	1e 8a       	std	Y+22, r1	; 0x16
	found = 0;//init before main loop
	for(i = mi - 1; i<=(mi+1); ++i)
	{
		if(i<0||i>7)
			continue;
	  for(j = my - 1; j<=(my+1); ++j)		
     17e:	8f 85       	ldd	r24, Y+15	; 0x0f
     180:	98 89       	ldd	r25, Y+16	; 0x10
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	9c 8b       	std	Y+20, r25	; 0x14
     186:	8b 8b       	std	Y+19, r24	; 0x13
			{
				u=i;
				z=j;
				while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
				{
					if(M[u*8 + z] == !MyColor ) 
     188:	a1 2c       	mov	r10, r1
     18a:	91 e0       	ldi	r25, 0x01	; 1
     18c:	9d 8b       	std	Y+21, r25	; 0x15
     18e:	a9 8e       	std	Y+25, r10	; 0x19
     190:	49 8a       	std	Y+17, r4	; 0x11
     192:	5a 8a       	std	Y+18, r5	; 0x12
	Transmit(c1,0,1);

	found = 0;//init before main loop
	for(i = mi - 1; i<=(mi+1); ++i)
	{
		if(i<0||i>7)
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	9a 81       	ldd	r25, Y+2	; 0x02
     198:	99 23       	and	r25, r25
     19a:	0c f4       	brge	.+2      	; 0x19e <CheckMove+0xf4>
     19c:	64 c1       	rjmp	.+712    	; 0x466 <__stack+0x7>
     19e:	89 81       	ldd	r24, Y+1	; 0x01
     1a0:	9a 81       	ldd	r25, Y+2	; 0x02
     1a2:	08 97       	sbiw	r24, 0x08	; 8
     1a4:	0c f0       	brlt	.+2      	; 0x1a8 <CheckMove+0xfe>
     1a6:	5f c1       	rjmp	.+702    	; 0x466 <__stack+0x7>
			continue;
	  for(j = my - 1; j<=(my+1); ++j)		
     1a8:	2b 89       	ldd	r18, Y+19	; 0x13
     1aa:	3c 89       	ldd	r19, Y+20	; 0x14
     1ac:	3c 83       	std	Y+4, r19	; 0x04
     1ae:	2b 83       	std	Y+3, r18	; 0x03
     1b0:	8b 81       	ldd	r24, Y+3	; 0x03
     1b2:	9c 81       	ldd	r25, Y+4	; 0x04
     1b4:	68 16       	cp	r6, r24
     1b6:	79 06       	cpc	r7, r25
     1b8:	0c f4       	brge	.+2      	; 0x1bc <CheckMove+0x112>
     1ba:	55 c1       	rjmp	.+682    	; 0x466 <__stack+0x7>
			
			//Setting up y barrier
			if(j > mi)
			ybar = 7;
			else if(j == my)
			ybar = 9;
     1bc:	9e 86       	std	Y+14, r9	; 0x0e
     1be:	8d 86       	std	Y+13, r8	; 0x0d
     1c0:	9d 88       	ldd	r9, Y+21	; 0x15
	{
		if(i<0||i>7)
			continue;
	  for(j = my - 1; j<=(my+1); ++j)		
	  {
		if(j<0||j>7)
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	9c 81       	ldd	r25, Y+4	; 0x04
     1c6:	99 23       	and	r25, r25
     1c8:	0c f4       	brge	.+2      	; 0x1cc <CheckMove+0x122>
     1ca:	40 c1       	rjmp	.+640    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	08 97       	sbiw	r24, 0x08	; 8
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <CheckMove+0x12c>
     1d4:	3b c1       	rjmp	.+630    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			continue;  
		  mymove[0] = i+65;
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	9a 81       	ldd	r25, Y+2	; 0x02
     1da:	8f 5b       	subi	r24, 0xBF	; 191
     1dc:	8d 83       	std	Y+5, r24	; 0x05
		  mymove[1] = j+1+'0';
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	9c 81       	ldd	r25, Y+4	; 0x04
     1e2:	8f 5c       	subi	r24, 0xCF	; 207
     1e4:	8e 83       	std	Y+6, r24	; 0x06
		  mymove[2] = '\x20';
     1e6:	30 e2       	ldi	r19, 0x20	; 32
     1e8:	3f 83       	std	Y+7, r19	; 0x07
		  mymove[3] = M[i*8 + j]+'0';
     1ea:	e9 81       	ldd	r30, Y+1	; 0x01
     1ec:	fa 81       	ldd	r31, Y+2	; 0x02
     1ee:	8b 81       	ldd	r24, Y+3	; 0x03
     1f0:	9c 81       	ldd	r25, Y+4	; 0x04
     1f2:	ee 0f       	add	r30, r30
     1f4:	ff 1f       	adc	r31, r31
     1f6:	ee 0f       	add	r30, r30
     1f8:	ff 1f       	adc	r31, r31
     1fa:	ee 0f       	add	r30, r30
     1fc:	ff 1f       	adc	r31, r31
     1fe:	e8 0f       	add	r30, r24
     200:	f9 1f       	adc	r31, r25
     202:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <M>
     206:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <M+0x1>
     20a:	e8 0f       	add	r30, r24
     20c:	f9 1f       	adc	r31, r25
     20e:	80 81       	ld	r24, Z
     210:	80 5d       	subi	r24, 0xD0	; 208
     212:	88 87       	std	Y+8, r24	; 0x08
		  mymove[4] = '\x20';
     214:	39 87       	std	Y+9, r19	; 0x09
		  mymove[5] = '\r';
     216:	8d e0       	ldi	r24, 0x0D	; 13
     218:	8a 87       	std	Y+10, r24	; 0x0a
		  Transmit(mymove,0,6);
     21a:	46 e0       	ldi	r20, 0x06	; 6
     21c:	6a 2d       	mov	r22, r10
     21e:	ce 01       	movw	r24, r28
     220:	05 96       	adiw	r24, 0x05	; 5
     222:	35 df       	rcall	.-406    	; 0x8e <Transmit>
		  
	    if((M[i*8 + j] == !MyColor)||(M[i*8 + j] == 2)) //checking neighbors
     224:	40 91 89 01 	lds	r20, 0x0189	; 0x800189 <M>
     228:	50 91 8a 01 	lds	r21, 0x018A	; 0x80018a <M+0x1>
     22c:	e9 81       	ldd	r30, Y+1	; 0x01
     22e:	fa 81       	ldd	r31, Y+2	; 0x02
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	9c 81       	ldd	r25, Y+4	; 0x04
     234:	ee 0f       	add	r30, r30
     236:	ff 1f       	adc	r31, r31
     238:	ee 0f       	add	r30, r30
     23a:	ff 1f       	adc	r31, r31
     23c:	ee 0f       	add	r30, r30
     23e:	ff 1f       	adc	r31, r31
     240:	e8 0f       	add	r30, r24
     242:	f9 1f       	adc	r31, r25
     244:	e4 0f       	add	r30, r20
     246:	f5 1f       	adc	r31, r21
     248:	80 81       	ld	r24, Z
     24a:	44 24       	eor	r4, r4
     24c:	43 94       	inc	r4
     24e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <MyColor>
     252:	91 11       	cpse	r25, r1
     254:	4a 2c       	mov	r4, r10
     256:	c4 2c       	mov	r12, r4
     258:	d1 2c       	mov	r13, r1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	8c 15       	cp	r24, r12
     25e:	9d 05       	cpc	r25, r13
     260:	09 f4       	brne	.+2      	; 0x264 <CheckMove+0x1ba>
     262:	f4 c0       	rjmp	.+488    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     264:	e9 81       	ldd	r30, Y+1	; 0x01
     266:	fa 81       	ldd	r31, Y+2	; 0x02
     268:	8b 81       	ldd	r24, Y+3	; 0x03
     26a:	9c 81       	ldd	r25, Y+4	; 0x04
     26c:	ee 0f       	add	r30, r30
     26e:	ff 1f       	adc	r31, r31
     270:	ee 0f       	add	r30, r30
     272:	ff 1f       	adc	r31, r31
     274:	ee 0f       	add	r30, r30
     276:	ff 1f       	adc	r31, r31
     278:	e8 0f       	add	r30, r24
     27a:	f9 1f       	adc	r31, r25
     27c:	e4 0f       	add	r30, r20
     27e:	f5 1f       	adc	r31, r21
     280:	80 81       	ld	r24, Z
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	09 f4       	brne	.+2      	; 0x288 <CheckMove+0x1de>
     286:	e2 c0       	rjmp	.+452    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		else
		{	
			

			//Setting up i barrier
			if(i > mi)
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	9a 81       	ldd	r25, Y+2	; 0x02
     28c:	28 16       	cp	r2, r24
     28e:	39 06       	cpc	r3, r25
     290:	3c f0       	brlt	.+14     	; 0x2a0 <CheckMove+0x1f6>
				ibar = 7 ;
			else if(i == mi)
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	28 16       	cp	r2, r24
     298:	39 06       	cpc	r3, r25
     29a:	39 f0       	breq	.+14     	; 0x2aa <CheckMove+0x200>
				ibar = 9;
			else
				ibar = 0;
     29c:	ba 2c       	mov	r11, r10
     29e:	09 c0       	rjmp	.+18     	; 0x2b2 <CheckMove+0x208>
		{	
			

			//Setting up i barrier
			if(i > mi)
				ibar = 7 ;
     2a0:	0f 2e       	mov	r0, r31
     2a2:	f7 e0       	ldi	r31, 0x07	; 7
     2a4:	bf 2e       	mov	r11, r31
     2a6:	f0 2d       	mov	r31, r0
     2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <CheckMove+0x208>
			else if(i == mi)
				ibar = 9;
     2aa:	0f 2e       	mov	r0, r31
     2ac:	f9 e0       	ldi	r31, 0x09	; 9
     2ae:	bf 2e       	mov	r11, r31
     2b0:	f0 2d       	mov	r31, r0
			else
				ibar = 0;
			
			//Setting up y barrier
			if(j > mi)
     2b2:	8b 81       	ldd	r24, Y+3	; 0x03
     2b4:	9c 81       	ldd	r25, Y+4	; 0x04
     2b6:	28 16       	cp	r2, r24
     2b8:	39 06       	cpc	r3, r25
     2ba:	4c f0       	brlt	.+18     	; 0x2ce <CheckMove+0x224>
			ybar = 7;
			else if(j == my)
     2bc:	8b 81       	ldd	r24, Y+3	; 0x03
     2be:	9c 81       	ldd	r25, Y+4	; 0x04
     2c0:	2f 85       	ldd	r18, Y+15	; 0x0f
     2c2:	38 89       	ldd	r19, Y+16	; 0x10
     2c4:	28 17       	cp	r18, r24
     2c6:	39 07       	cpc	r19, r25
     2c8:	39 f0       	breq	.+14     	; 0x2d8 <CheckMove+0x22e>
			ybar = 9;
			else
			ybar = 0;	
     2ca:	5a 2c       	mov	r5, r10
     2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <CheckMove+0x236>
			else
				ibar = 0;
			
			//Setting up y barrier
			if(j > mi)
			ybar = 7;
     2ce:	0f 2e       	mov	r0, r31
     2d0:	f7 e0       	ldi	r31, 0x07	; 7
     2d2:	5f 2e       	mov	r5, r31
     2d4:	f0 2d       	mov	r31, r0
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <CheckMove+0x236>
			else if(j == my)
			ybar = 9;
     2d8:	0f 2e       	mov	r0, r31
     2da:	f9 e0       	ldi	r31, 0x09	; 9
     2dc:	5f 2e       	mov	r5, r31
     2de:	f0 2d       	mov	r31, r0
			else
			ybar = 0;	

			//setting up steps, (for the loops)
			istep = i - mi; 
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	9a 81       	ldd	r25, Y+2	; 0x02
     2e4:	f8 2e       	mov	r15, r24
     2e6:	39 89       	ldd	r19, Y+17	; 0x11
     2e8:	f3 1a       	sub	r15, r19
			ystep = j - my;
     2ea:	8b 81       	ldd	r24, Y+3	; 0x03
     2ec:	9c 81       	ldd	r25, Y+4	; 0x04
     2ee:	e8 2e       	mov	r14, r24
     2f0:	2a 89       	ldd	r18, Y+18	; 0x12
     2f2:	e2 1a       	sub	r14, r18
			//start from the accepted neighbor
			u=i; 
     2f4:	29 81       	ldd	r18, Y+1	; 0x01
     2f6:	3a 81       	ldd	r19, Y+2	; 0x02
     2f8:	12 2f       	mov	r17, r18
			z=j;
     2fa:	8b 81       	ldd	r24, Y+3	; 0x03
     2fc:	9c 81       	ldd	r25, Y+4	; 0x04
     2fe:	08 2f       	mov	r16, r24
     300:	33 27       	eor	r19, r19

			skip = 1;
			while((u != (ibar+istep))&&(z != (ybar+ystep)))
     302:	6f 2d       	mov	r22, r15
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	6b 0d       	add	r22, r11
     308:	71 1d       	adc	r23, r1
     30a:	26 17       	cp	r18, r22
     30c:	37 07       	cpc	r19, r23
     30e:	09 f4       	brne	.+2      	; 0x312 <CheckMove+0x268>
     310:	9d c0       	rjmp	.+314    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     312:	99 27       	eor	r25, r25
     314:	ae 2d       	mov	r26, r14
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	a5 0d       	add	r26, r5
     31a:	b1 1d       	adc	r27, r1
     31c:	8a 17       	cp	r24, r26
     31e:	9b 07       	cpc	r25, r27
     320:	09 f4       	brne	.+2      	; 0x324 <CheckMove+0x27a>
     322:	94 c0       	rjmp	.+296    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			{
				//check	
				if( M[u*8 + z] == 2)
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	22 0f       	add	r18, r18
     32a:	33 1f       	adc	r19, r19
     32c:	22 0f       	add	r18, r18
     32e:	33 1f       	adc	r19, r19
     330:	82 0f       	add	r24, r18
     332:	93 1f       	adc	r25, r19
     334:	fa 01       	movw	r30, r20
     336:	e8 0f       	add	r30, r24
     338:	f9 1f       	adc	r31, r25
     33a:	80 81       	ld	r24, Z
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	09 f4       	brne	.+2      	; 0x342 <CheckMove+0x298>
     340:	85 c0       	rjmp	.+266    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
					break;
				if(M[u*8 + z] == !MyColor )	
     342:	80 81       	ld	r24, Z
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	c8 16       	cp	r12, r24
     348:	d9 06       	cpc	r13, r25
     34a:	21 f5       	brne	.+72     	; 0x394 <CheckMove+0x2ea>
     34c:	13 c0       	rjmp	.+38     	; 0x374 <CheckMove+0x2ca>

			skip = 1;
			while((u != (ibar+istep))&&(z != (ybar+ystep)))
			{
				//check	
				if( M[u*8 + z] == 2)
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	e8 0f       	add	r30, r24
     35c:	f9 1f       	adc	r31, r25
     35e:	e4 0f       	add	r30, r20
     360:	f5 1f       	adc	r31, r21
     362:	80 81       	ld	r24, Z
     364:	82 30       	cpi	r24, 0x02	; 2
     366:	09 f4       	brne	.+2      	; 0x36a <CheckMove+0x2c0>
     368:	71 c0       	rjmp	.+226    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
					break;
				if(M[u*8 + z] == !MyColor )	
     36a:	80 81       	ld	r24, Z
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	c8 16       	cp	r12, r24
     370:	d9 06       	cpc	r13, r25
     372:	81 f4       	brne	.+32     	; 0x394 <CheckMove+0x2ea>
				{ 
					M[mi*8 + my] = !MyColor;
     374:	ef 89       	ldd	r30, Y+23	; 0x17
     376:	f8 8d       	ldd	r31, Y+24	; 0x18
     378:	e4 0f       	add	r30, r20
     37a:	f5 1f       	adc	r31, r21
     37c:	40 82       	st	Z, r4
			
			}			
			
			if(!skip) //if a solution is found
			{
				u=i;
     37e:	e9 81       	ldd	r30, Y+1	; 0x01
     380:	fa 81       	ldd	r31, Y+2	; 0x02
     382:	8e 2f       	mov	r24, r30
				z=j;
     384:	2b 81       	ldd	r18, Y+3	; 0x03
     386:	3c 81       	ldd	r19, Y+4	; 0x04
     388:	92 2f       	mov	r25, r18
				while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     38a:	be 12       	cpse	r11, r30
     38c:	11 c0       	rjmp	.+34     	; 0x3b0 <CheckMove+0x306>
					mymove[2] = '\x20';
					mymove[3] = mi+65;
					mymove[4] = (my+1)+'0';
					mymove[5] = '\r';
					Transmit(mymove,0,6);*/
					found = 1;
     38e:	31 e0       	ldi	r19, 0x01	; 1
     390:	3e 8b       	std	Y+22, r19	; 0x16
     392:	5c c0       	rjmp	.+184    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
					skip = 0;
					break;
				}
				//if mycolor --> do nothing
	    		z+= ystep;
     394:	0e 0d       	add	r16, r14
				u+= istep;
     396:	1f 0d       	add	r17, r15
			//start from the accepted neighbor
			u=i; 
			z=j;

			skip = 1;
			while((u != (ibar+istep))&&(z != (ybar+ystep)))
     398:	81 2f       	mov	r24, r17
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	86 17       	cp	r24, r22
     39e:	97 07       	cpc	r25, r23
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <CheckMove+0x2fa>
     3a2:	54 c0       	rjmp	.+168    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     3a4:	e0 2f       	mov	r30, r16
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ea 17       	cp	r30, r26
     3aa:	fb 07       	cpc	r31, r27
     3ac:	81 f6       	brne	.-96     	; 0x34e <CheckMove+0x2a4>
     3ae:	4e c0       	rjmp	.+156    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			
			if(!skip) //if a solution is found
			{
				u=i;
				z=j;
				while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     3b0:	52 16       	cp	r5, r18
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <CheckMove+0x30c>
     3b4:	40 c0       	rjmp	.+128    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
				{
					if(M[u*8 + z] == !MyColor ) 
     3b6:	ff 27       	eor	r31, r31
     3b8:	ee 0f       	add	r30, r30
     3ba:	ff 1f       	adc	r31, r31
     3bc:	ee 0f       	add	r30, r30
     3be:	ff 1f       	adc	r31, r31
     3c0:	ee 0f       	add	r30, r30
     3c2:	ff 1f       	adc	r31, r31
     3c4:	e2 0f       	add	r30, r18
     3c6:	f1 1d       	adc	r31, r1
     3c8:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <M>
     3cc:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <M+0x1>
     3d0:	e2 0f       	add	r30, r18
     3d2:	f3 1f       	adc	r31, r19
     3d4:	20 81       	ld	r18, Z
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <MyColor>
     3dc:	31 11       	cpse	r19, r1
     3de:	6a 2d       	mov	r22, r10
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	46 2f       	mov	r20, r22
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	24 17       	cp	r18, r20
     3e8:	35 07       	cpc	r19, r21
     3ea:	41 f1       	breq	.+80     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     3ec:	79 8d       	ldd	r23, Y+25	; 0x19
     3ee:	19 c0       	rjmp	.+50     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3f0:	e9 2f       	mov	r30, r25
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	28 e0       	ldi	r18, 0x08	; 8
     3f6:	82 9f       	mul	r24, r18
     3f8:	e0 0d       	add	r30, r0
     3fa:	f1 1d       	adc	r31, r1
     3fc:	11 24       	eor	r1, r1
     3fe:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <M>
     402:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <M+0x1>
     406:	e2 0f       	add	r30, r18
     408:	f3 1f       	adc	r31, r19
     40a:	20 81       	ld	r18, Z
     40c:	69 2d       	mov	r22, r9
     40e:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <MyColor>
     412:	31 11       	cpse	r19, r1
     414:	67 2f       	mov	r22, r23
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	46 2f       	mov	r20, r22
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	24 17       	cp	r18, r20
     41e:	35 07       	cpc	r19, r21
     420:	81 f0       	breq	.+32     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
						break;
					M[u*8 + z] = !MyColor;
     422:	60 83       	st	Z, r22
						mymove[3] = u+65;
						mymove[4] = (z+1)+'0';
						mymove[5] = '\r';
						Transmit(mymove,0,6);*/
					
					z+= ystep;
     424:	9e 0d       	add	r25, r14
					u+= istep;
     426:	8f 0d       	add	r24, r15
			
			if(!skip) //if a solution is found
			{
				u=i;
				z=j;
				while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     428:	b8 16       	cp	r11, r24
     42a:	71 f0       	breq	.+28     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     42c:	59 12       	cpse	r5, r25
     42e:	e0 cf       	rjmp	.-64     	; 0x3f0 <CheckMove+0x346>
					mymove[2] = '\x20';
					mymove[3] = mi+65;
					mymove[4] = (my+1)+'0';
					mymove[5] = '\r';
					Transmit(mymove,0,6);*/
					found = 1;
     430:	31 e0       	ldi	r19, 0x01	; 1
     432:	3e 8b       	std	Y+22, r19	; 0x16
     434:	0b c0       	rjmp	.+22     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	8e 8b       	std	Y+22, r24	; 0x16
     43a:	08 c0       	rjmp	.+16     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	9e 8b       	std	Y+22, r25	; 0x16
     440:	05 c0       	rjmp	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     442:	21 e0       	ldi	r18, 0x01	; 1
     444:	2e 8b       	std	Y+22, r18	; 0x16
     446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     448:	31 e0       	ldi	r19, 0x01	; 1
     44a:	3e 8b       	std	Y+22, r19	; 0x16
	found = 0;//init before main loop
	for(i = mi - 1; i<=(mi+1); ++i)
	{
		if(i<0||i>7)
			continue;
	  for(j = my - 1; j<=(my+1); ++j)		
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	9c 81       	ldd	r25, Y+4	; 0x04
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	9c 83       	std	Y+4, r25	; 0x04
     454:	8b 83       	std	Y+3, r24	; 0x03
     456:	8b 81       	ldd	r24, Y+3	; 0x03
     458:	9c 81       	ldd	r25, Y+4	; 0x04
     45a:	68 16       	cp	r6, r24
     45c:	79 06       	cpc	r7, r25
     45e:	0c f0       	brlt	.+2      	; 0x462 <__stack+0x3>
     460:	b0 ce       	rjmp	.-672    	; 0x1c2 <CheckMove+0x118>
     462:	8d 84       	ldd	r8, Y+13	; 0x0d
     464:	9e 84       	ldd	r9, Y+14	; 0x0e
	c1[0] = my+1 + '0';
	M[(mi+1)*8 + (my+1)] == !MyColor;
	Transmit(c1,0,1);

	found = 0;//init before main loop
	for(i = mi - 1; i<=(mi+1); ++i)
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	9a 81       	ldd	r25, Y+2	; 0x02
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	9a 83       	std	Y+2, r25	; 0x02
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	9a 81       	ldd	r25, Y+2	; 0x02
     474:	88 16       	cp	r8, r24
     476:	99 06       	cpc	r9, r25
     478:	0c f0       	brlt	.+2      	; 0x47c <__stack+0x1d>
     47a:	8c ce       	rjmp	.-744    	; 0x194 <CheckMove+0xea>
     47c:	01 c0       	rjmp	.+2      	; 0x480 <__stack+0x21>
	char c1[1];
	c1[0] = my+1 + '0';
	M[(mi+1)*8 + (my+1)] == !MyColor;
	Transmit(c1,0,1);

	found = 0;//init before main loop
     47e:	1e 8a       	std	Y+22, r1	; 0x16
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	9e 89       	ldd	r25, Y+22	; 0x16
     484:	91 30       	cpi	r25, 0x01	; 1
     486:	09 f0       	breq	.+2      	; 0x48a <__stack+0x2b>
     488:	80 e0       	ldi	r24, 0x00	; 0
	if(found == 1)
		return 1;
	return 0;
  
		
}
     48a:	69 96       	adiw	r28, 0x19	; 25
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	bf 90       	pop	r11
     4a8:	af 90       	pop	r10
     4aa:	9f 90       	pop	r9
     4ac:	8f 90       	pop	r8
     4ae:	7f 90       	pop	r7
     4b0:	6f 90       	pop	r6
     4b2:	5f 90       	pop	r5
     4b4:	4f 90       	pop	r4
     4b6:	3f 90       	pop	r3
     4b8:	2f 90       	pop	r2
     4ba:	08 95       	ret

000004bc <__vector_13>:


ISR (USART_TXC_vect) { //  Interrupts for completed transmit data	
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
}
     4c6:	0f 90       	pop	r0
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	0f 90       	pop	r0
     4cc:	1f 90       	pop	r1
     4ce:	18 95       	reti

000004d0 <init_serial>:



void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
     4d0:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
     4d2:	83 e3       	ldi	r24, 0x33	; 51
     4d4:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
     4d6:	80 b5       	in	r24, 0x20	; 32
     4d8:	8f 7e       	andi	r24, 0xEF	; 239
     4da:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
     4dc:	80 b5       	in	r24, 0x20	; 32
     4de:	8f 7d       	andi	r24, 0xDF	; 223
     4e0:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
     4e2:	80 b5       	in	r24, 0x20	; 32
     4e4:	87 7f       	andi	r24, 0xF7	; 247
     4e6:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
     4e8:	86 e8       	ldi	r24, 0x86	; 134
     4ea:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
     4ec:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
     4ee:	8a b1       	in	r24, 0x0a	; 10
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
     4f4:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
     4f6:	57 9a       	sbi	0x0a, 7	; 10
     4f8:	08 95       	ret

000004fa <__vector_8>:
}


 ISR (TIMER1_OVF_vect)    // Timer1 ISR
 {
     4fa:	1f 92       	push	r1
     4fc:	0f 92       	push	r0
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	0f 92       	push	r0
     502:	11 24       	eor	r1, r1
     504:	2f 93       	push	r18
     506:	3f 93       	push	r19
     508:	4f 93       	push	r20
     50a:	5f 93       	push	r21
     50c:	6f 93       	push	r22
     50e:	7f 93       	push	r23
     510:	8f 93       	push	r24
     512:	9f 93       	push	r25
     514:	af 93       	push	r26
     516:	bf 93       	push	r27
     518:	ef 93       	push	r30
     51a:	ff 93       	push	r31
	 if(myTurn==1){
     51c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	19 f4       	brne	.+6      	; 0x52a <__vector_8+0x30>
		 // coming soon 
		 //last sec MM will save the day..eventually.		 
		 myTurn =0;
     524:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
     528:	0c c0       	rjmp	.+24     	; 0x542 <__vector_8+0x48>
		// move_done = 1;
	 } 
	 else if(myTurn == 0){
     52a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     52e:	81 11       	cpse	r24, r1
     530:	08 c0       	rjmp	.+16     	; 0x542 <__vector_8+0x48>
		  Transmit("IT\r",0,strlen("IT\r"));
     532:	43 e0       	ldi	r20, 0x03	; 3
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	8b e6       	ldi	r24, 0x6B	; 107
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	a9 dd       	rcall	.-1198   	; 0x8e <Transmit>
		  ILflag=1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
	 }	 
 }
     542:	ff 91       	pop	r31
     544:	ef 91       	pop	r30
     546:	bf 91       	pop	r27
     548:	af 91       	pop	r26
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	7f 91       	pop	r23
     550:	6f 91       	pop	r22
     552:	5f 91       	pop	r21
     554:	4f 91       	pop	r20
     556:	3f 91       	pop	r19
     558:	2f 91       	pop	r18
     55a:	0f 90       	pop	r0
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	0f 90       	pop	r0
     560:	1f 90       	pop	r1
     562:	18 95       	reti

00000564 <AnnounceRes>:


 void AnnounceRes(uint8_t res)
 {
	//after announcement, timer interrupts are disabled.
	TIMSK &= ~(1 << TOIE1) ; 
     564:	99 b7       	in	r25, 0x39	; 57
     566:	9b 7f       	andi	r25, 0xFB	; 251
     568:	99 bf       	out	0x39, r25	; 57
	if(res == 1)
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	51 f4       	brne	.+20     	; 0x582 <AnnounceRes+0x1e>
	{
	     Transmit("WN\r",0,strlen("WN\r"));
     56e:	43 e0       	ldi	r20, 0x03	; 3
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	8f e6       	ldi	r24, 0x6F	; 111
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	8b dd       	rcall	.-1258   	; 0x8e <Transmit>
		 PORTB ^= (1<<PORTB1);             //Toggle LED
     578:	98 b3       	in	r25, 0x18	; 24
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	89 27       	eor	r24, r25
     57e:	88 bb       	out	0x18, r24	; 24
     580:	08 95       	ret
	}
	else if(res == 0)
     582:	81 11       	cpse	r24, r1
     584:	0a c0       	rjmp	.+20     	; 0x59a <AnnounceRes+0x36>
	{
		Transmit("LS\r",0,strlen("LS\r"));
     586:	43 e0       	ldi	r20, 0x03	; 3
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	83 e7       	ldi	r24, 0x73	; 115
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	7f dd       	rcall	.-1282   	; 0x8e <Transmit>
		PORTB ^= (1<<PORTB2);			//Toggle LED
     590:	98 b3       	in	r25, 0x18	; 24
     592:	84 e0       	ldi	r24, 0x04	; 4
     594:	89 27       	eor	r24, r25
     596:	88 bb       	out	0x18, r24	; 24
     598:	08 95       	ret
	}
	else
	{
		Transmit("TE\r",0,strlen("TE\r"));
     59a:	43 e0       	ldi	r20, 0x03	; 3
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	87 e7       	ldi	r24, 0x77	; 119
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	75 dd       	rcall	.-1302   	; 0x8e <Transmit>
		PORTB ^= (1<<PORTB3);			//Toggle LED
     5a4:	98 b3       	in	r25, 0x18	; 24
     5a6:	88 e0       	ldi	r24, 0x08	; 8
     5a8:	89 27       	eor	r24, r25
     5aa:	88 bb       	out	0x18, r24	; 24
     5ac:	08 95       	ret

000005ae <EndGame>:

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{			
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
     5ae:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <M>
     5b2:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <M+0x1>
     5b6:	bf 01       	movw	r22, r30
     5b8:	60 5c       	subi	r22, 0xC0	; 192
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255


//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;
     5bc:	40 e0       	ldi	r20, 0x00	; 0
}


//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	11 c0       	rjmp	.+34     	; 0x5e4 <EndGame+0x36>

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{			
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
     5c2:	df 01       	movw	r26, r30
     5c4:	80 81       	ld	r24, Z
     5c6:	81 11       	cpse	r24, r1
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <EndGame+0x1e>
				b++; 
     5ca:	9f 5f       	subi	r25, 0xFF	; 255
			if(M[i*8 + y] == 1)
     5cc:	8c 91       	ld	r24, X
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <EndGame+0x26>
				w++;
     5d2:	4f 5f       	subi	r20, 0xFF	; 255
     5d4:	31 96       	adiw	r30, 0x01	; 1
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
     5d6:	2e 17       	cp	r18, r30
     5d8:	3f 07       	cpc	r19, r31
     5da:	99 f7       	brne	.-26     	; 0x5c2 <EndGame+0x14>
     5dc:	f9 01       	movw	r30, r18
//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
     5de:	26 17       	cp	r18, r22
     5e0:	37 07       	cpc	r19, r23
     5e2:	21 f0       	breq	.+8      	; 0x5ec <EndGame+0x3e>
     5e4:	9f 01       	movw	r18, r30
     5e6:	28 5f       	subi	r18, 0xF8	; 248
     5e8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ea:	eb cf       	rjmp	.-42     	; 0x5c2 <EndGame+0x14>
				b++; 
			if(M[i*8 + y] == 1)
				w++;
		}
	}
	if(b == w)
     5ec:	94 13       	cpse	r25, r20
     5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <EndGame+0x48>
	{
		AnnounceRes(2);	//TIE -LED3
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	b8 df       	rcall	.-144    	; 0x564 <AnnounceRes>
     5f4:	14 c0       	rjmp	.+40     	; 0x61e <EndGame+0x70>

	}
	else if(b>w) 
     5f6:	49 17       	cp	r20, r25
     5f8:	50 f4       	brcc	.+20     	; 0x60e <EndGame+0x60>
	{
		if(MyColor == 0) //black
     5fa:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <MyColor>
     5fe:	81 11       	cpse	r24, r1
     600:	03 c0       	rjmp	.+6      	; 0x608 <EndGame+0x5a>
			AnnounceRes(1);//WIN - LED1
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	af df       	rcall	.-162    	; 0x564 <AnnounceRes>
     606:	0b c0       	rjmp	.+22     	; 0x61e <EndGame+0x70>
		else
			AnnounceRes(0); //LOST -LED2
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	ac df       	rcall	.-168    	; 0x564 <AnnounceRes>
     60c:	08 c0       	rjmp	.+16     	; 0x61e <EndGame+0x70>
     60e:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <MyColor>
	}
	else
	{
		if(MyColor == 1) //white
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	11 f4       	brne	.+4      	; 0x61a <EndGame+0x6c>
		AnnounceRes(1);//WIN - LED1
     616:	a6 df       	rcall	.-180    	; 0x564 <AnnounceRes>
     618:	02 c0       	rjmp	.+4      	; 0x61e <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	a3 df       	rcall	.-186    	; 0x564 <AnnounceRes>
     61e:	82 e0       	ldi	r24, 0x02	; 2
	}

	//after announcement wait for ok in while loop(set move_done = 1)
	myTurn = 2;
     620:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     624:	08 95       	ret

00000626 <init_leds>:
     626:	b9 9a       	sbi	0x17, 1	; 23


 void init_leds()
 {
	DDRB |= (1<<DDB1);
	DDRB |= (1<<DDB2);
     628:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= (1<<DDB3);
     62a:	bb 9a       	sbi	0x17, 3	; 23
	PORTB |= (1<<PORTB1);
     62c:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
     62e:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
     630:	c3 9a       	sbi	0x18, 3	; 24
     632:	08 95       	ret

00000634 <init_timer>:

	 //////////Timer/Counter Initialization/////////
	 /* Timer starts from a specific value, 
		so we can take advantage of ISR
	 */
	TCNT1 = 3036;//2SECONDS // 34286;//49911  //2^16 = 65536 - (8,000,000/256) 
     634:	8c ed       	ldi	r24, 0xDC	; 220
     636:	9b e0       	ldi	r25, 0x0B	; 11
     638:	9d bd       	out	0x2d, r25	; 45
     63a:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00; //Default - Cleared
     63c:	1f bc       	out	0x2f, r1	; 47

	/*	The CLK/64 
	*/
	//TCCR1B &=  ~(1<<CS11);  
	TCCR1B |=  (1<<CS12);// |(1<<CS10);
     63e:	8e b5       	in	r24, 0x2e	; 46
     640:	84 60       	ori	r24, 0x04	; 4
     642:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
     644:	84 e0       	ldi	r24, 0x04	; 4
     646:	89 bf       	out	0x39, r24	; 57
     648:	08 95       	ret

0000064a <Algo>:
	myTurn = 2;
}

///////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
     64a:	2f 92       	push	r2
     64c:	3f 92       	push	r3
     64e:	4f 92       	push	r4
     650:	5f 92       	push	r5
     652:	6f 92       	push	r6
     654:	7f 92       	push	r7
     656:	8f 92       	push	r8
     658:	9f 92       	push	r9
     65a:	af 92       	push	r10
     65c:	bf 92       	push	r11
     65e:	cf 92       	push	r12
     660:	df 92       	push	r13
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	69 97       	sbiw	r28, 0x19	; 25
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
	
	myTurn = 1;		//Important - collision with  init_timer
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     684:	19 8e       	std	Y+25, r1	; 0x19
     686:	18 8e       	std	Y+24, r1	; 0x18
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	3e 8b       	std	Y+22, r19	; 0x16
     68e:	2d 8b       	std	Y+21, r18	; 0x15

	//CheckMove();
	//check enemy pass and my pass ....end game, Coming Soon
	char mymove[6];
	uint8_t mi,my,i,j,u,z,found,ibar,ybar,skip,istep,ystep;
	for(mi=0;mi<=7;mi++)
     690:	1f 8a       	std	Y+23, r1	; 0x17
     692:	5c c1       	rjmp	.+696    	; 0x94c <Algo+0x302>
	{
		for(my=0; my<=7; my++)
		{
			if(M[mi*8+my] == MyColor)
     694:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <M>
     698:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <M+0x1>
     69c:	89 89       	ldd	r24, Y+17	; 0x11
     69e:	9a 89       	ldd	r25, Y+18	; 0x12
     6a0:	e8 0f       	add	r30, r24
     6a2:	f9 1f       	adc	r31, r25
     6a4:	90 81       	ld	r25, Z
     6a6:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <MyColor>
     6aa:	98 13       	cpse	r25, r24
     6ac:	2b c1       	rjmp	.+598    	; 0x904 <Algo+0x2ba>
				mymove[2] = '\x20';
				mymove[3] = mi+65;
				mymove[4] = (my+1)+'0';
				mymove[5] = '\r';
				Transmit(mymove,0,6);			*/	
				for(i = mi - 1; i<=(mi+1); ++i)
     6ae:	2f 88       	ldd	r2, Y+23	; 0x17
     6b0:	2a 94       	dec	r2
     6b2:	c2 2c       	mov	r12, r2
     6b4:	d1 2c       	mov	r13, r1
     6b6:	2d 89       	ldd	r18, Y+21	; 0x15
     6b8:	3e 89       	ldd	r19, Y+22	; 0x16
     6ba:	2c 15       	cp	r18, r12
     6bc:	3d 05       	cpc	r19, r13
     6be:	0c f4       	brge	.+2      	; 0x6c2 <Algo+0x78>
     6c0:	21 c1       	rjmp	.+578    	; 0x904 <Algo+0x2ba>
				{
					for(j = my - 1; j<=(my+1); ++j)
     6c2:	4f 84       	ldd	r4, Y+15	; 0x0f
     6c4:	58 88       	ldd	r5, Y+16	; 0x10
								//check
								if( M[u*8 + z] == 2){
									skip = 0;
									M[u*8+z] = MyColor;
									
									mymove[0] = 'M';
     6c6:	7f 88       	ldd	r7, Y+23	; 0x17
				mymove[4] = (my+1)+'0';
				mymove[5] = '\r';
				Transmit(mymove,0,6);			*/	
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					for(j = my - 1; j<=(my+1); ++j)
     6c8:	0f ef       	ldi	r16, 0xFF	; 255
     6ca:	03 0d       	add	r16, r3
     6cc:	80 2f       	mov	r24, r16
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	2f 85       	ldd	r18, Y+15	; 0x0f
     6d2:	38 89       	ldd	r19, Y+16	; 0x10
     6d4:	28 17       	cp	r18, r24
     6d6:	39 07       	cpc	r19, r25
     6d8:	0c f4       	brge	.+2      	; 0x6dc <Algo+0x92>
     6da:	6e c1       	rjmp	.+732    	; 0x9b8 <Algo+0x36e>
					{
						if((M[i*8 + j] == !MyColor))		//our pawn has en enemy pawn adjacent to it
     6dc:	46 01       	movw	r8, r12
     6de:	88 0c       	add	r8, r8
     6e0:	99 1c       	adc	r9, r9
     6e2:	88 0c       	add	r8, r8
     6e4:	99 1c       	adc	r9, r9
     6e6:	88 0c       	add	r8, r8
     6e8:	99 1c       	adc	r9, r9
							mymove[4] = z+1+'0';
							mymove[5] = '\r';
							Transmit(mymove,0,6);

							skip = 1;
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     6ea:	22 2d       	mov	r18, r2
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	3a 87       	std	Y+10, r19	; 0x0a
     6f0:	29 87       	std	Y+9, r18	; 0x09
									mymove[3] = u+65;
									mymove[4] = (z+1)+'0';
									mymove[5] = '\r';
									Transmit(mymove,0,6);*/
								//check
								if( M[u*8 + z] == 2){
     6f2:	22 0f       	add	r18, r18
     6f4:	33 1f       	adc	r19, r19
     6f6:	22 0f       	add	r18, r18
     6f8:	33 1f       	adc	r19, r19
     6fa:	22 0f       	add	r18, r18
     6fc:	33 1f       	adc	r19, r19
     6fe:	3e 87       	std	Y+14, r19	; 0x0e
     700:	2d 87       	std	Y+13, r18	; 0x0d
							ybar = 10;
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
     702:	d2 2c       	mov	r13, r2
     704:	d7 18       	sub	r13, r7
							z=j;
							
							mymove[0] = ibar+65;
							mymove[1] = ybar+1+'0';
							mymove[2] = '\x20';
							mymove[3] = u+65;
     706:	0f 2e       	mov	r0, r31
     708:	f1 e4       	ldi	r31, 0x41	; 65
     70a:	6f 2e       	mov	r6, r31
     70c:	f0 2d       	mov	r31, r0
     70e:	62 0c       	add	r6, r2
							mymove[4] = z+1+'0';
							mymove[5] = '\r';
							Transmit(mymove,0,6);

							skip = 1;
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     710:	2d 2d       	mov	r18, r13
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	3c 87       	std	Y+12, r19	; 0x0c
     716:	2b 87       	std	Y+11, r18	; 0x0b
				Transmit(mymove,0,6);			*/	
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					for(j = my - 1; j<=(my+1); ++j)
					{
						if((M[i*8 + j] == !MyColor))		//our pawn has en enemy pawn adjacent to it
     718:	88 0d       	add	r24, r8
     71a:	99 1d       	adc	r25, r9
     71c:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <M>
     720:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <M+0x1>
     724:	f9 01       	movw	r30, r18
     726:	e8 0f       	add	r30, r24
     728:	f9 1f       	adc	r31, r25
     72a:	20 81       	ld	r18, Z
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	40 91 87 00 	lds	r20, 0x0087	; 0x800087 <MyColor>
     736:	41 11       	cpse	r20, r1
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	09 f0       	breq	.+2      	; 0x742 <Algo+0xf8>
     740:	cc c0       	rjmp	.+408    	; 0x8da <Algo+0x290>
								mymove[3] = i+65;
								mymove[4] = (j+1)+'0';
								mymove[5] = '\r';
								Transmit(mymove,0,6);*/
							//Setting up i barrier (board)
							if(i > mi)
     742:	72 14       	cp	r7, r2
     744:	20 f0       	brcs	.+8      	; 0x74e <Algo+0x104>
							ibar = 7 ;
							else if(i == mi)
     746:	72 14       	cp	r7, r2
     748:	39 f0       	breq	.+14     	; 0x758 <Algo+0x10e>
							ibar = 10;
							else
							ibar = 0;
     74a:	f1 2c       	mov	r15, r1
     74c:	09 c0       	rjmp	.+18     	; 0x760 <Algo+0x116>
								mymove[4] = (j+1)+'0';
								mymove[5] = '\r';
								Transmit(mymove,0,6);*/
							//Setting up i barrier (board)
							if(i > mi)
							ibar = 7 ;
     74e:	0f 2e       	mov	r0, r31
     750:	f7 e0       	ldi	r31, 0x07	; 7
     752:	ff 2e       	mov	r15, r31
     754:	f0 2d       	mov	r31, r0
     756:	04 c0       	rjmp	.+8      	; 0x760 <Algo+0x116>
							else if(i == mi)
							ibar = 10;
     758:	0f 2e       	mov	r0, r31
     75a:	fa e0       	ldi	r31, 0x0A	; 10
     75c:	ff 2e       	mov	r15, r31
     75e:	f0 2d       	mov	r31, r0
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
     760:	70 16       	cp	r7, r16
     762:	20 f0       	brcs	.+8      	; 0x76c <Algo+0x122>
							ybar = 7;
							else if(j == my)
     764:	30 16       	cp	r3, r16
     766:	39 f0       	breq	.+14     	; 0x776 <Algo+0x12c>
							ybar = 10;
							else
							ybar = 0;
     768:	e1 2c       	mov	r14, r1
     76a:	09 c0       	rjmp	.+18     	; 0x77e <Algo+0x134>
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
							ybar = 7;
     76c:	0f 2e       	mov	r0, r31
     76e:	f7 e0       	ldi	r31, 0x07	; 7
     770:	ef 2e       	mov	r14, r31
     772:	f0 2d       	mov	r31, r0
     774:	04 c0       	rjmp	.+8      	; 0x77e <Algo+0x134>
							else if(j == my)
							ybar = 10;
     776:	0f 2e       	mov	r0, r31
     778:	fa e0       	ldi	r31, 0x0A	; 10
     77a:	ef 2e       	mov	r14, r31
     77c:	f0 2d       	mov	r31, r0
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
							ystep = j - my;
     77e:	10 2f       	mov	r17, r16
     780:	13 19       	sub	r17, r3
							//start from the accepted neighbor
							u=i;
							z=j;
							
							mymove[0] = ibar+65;
     782:	81 e4       	ldi	r24, 0x41	; 65
     784:	8f 0d       	add	r24, r15
     786:	89 83       	std	Y+1, r24	; 0x01
							mymove[1] = ybar+1+'0';
     788:	81 e3       	ldi	r24, 0x31	; 49
     78a:	8e 0d       	add	r24, r14
     78c:	8a 83       	std	Y+2, r24	; 0x02
							mymove[2] = '\x20';
     78e:	30 e2       	ldi	r19, 0x20	; 32
     790:	3b 83       	std	Y+3, r19	; 0x03
							mymove[3] = u+65;
     792:	6c 82       	std	Y+4, r6	; 0x04
							mymove[4] = z+1+'0';
     794:	81 e3       	ldi	r24, 0x31	; 49
     796:	80 0f       	add	r24, r16
     798:	8d 83       	std	Y+5, r24	; 0x05
							mymove[5] = '\r';
     79a:	8d e0       	ldi	r24, 0x0D	; 13
     79c:	8e 83       	std	Y+6, r24	; 0x06
							Transmit(mymove,0,6);
     79e:	46 e0       	ldi	r20, 0x06	; 6
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	73 dc       	rcall	.-1818   	; 0x8e <Transmit>

							skip = 1;
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     7a8:	6b 85       	ldd	r22, Y+11	; 0x0b
     7aa:	7c 85       	ldd	r23, Y+12	; 0x0c
     7ac:	6f 0d       	add	r22, r15
     7ae:	71 1d       	adc	r23, r1
     7b0:	29 85       	ldd	r18, Y+9	; 0x09
     7b2:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b4:	26 17       	cp	r18, r22
     7b6:	37 07       	cpc	r19, r23
     7b8:	09 f4       	brne	.+2      	; 0x7bc <Algo+0x172>
     7ba:	8f c0       	rjmp	.+286    	; 0x8da <Algo+0x290>
     7bc:	a0 2f       	mov	r26, r16
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	41 2f       	mov	r20, r17
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	4e 0d       	add	r20, r14
     7c6:	51 1d       	adc	r21, r1
     7c8:	a4 17       	cp	r26, r20
     7ca:	b5 07       	cpc	r27, r21
     7cc:	09 f4       	brne	.+2      	; 0x7d0 <Algo+0x186>
     7ce:	85 c0       	rjmp	.+266    	; 0x8da <Algo+0x290>
									mymove[3] = u+65;
									mymove[4] = (z+1)+'0';
									mymove[5] = '\r';
									Transmit(mymove,0,6);*/
								//check
								if( M[u*8 + z] == 2){
     7d0:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <M>
     7d4:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <M+0x1>
     7d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     7da:	9e 85       	ldd	r25, Y+14	; 0x0e
     7dc:	8a 0f       	add	r24, r26
     7de:	9b 1f       	adc	r25, r27
     7e0:	98 87       	std	Y+8, r25	; 0x08
     7e2:	8f 83       	std	Y+7, r24	; 0x07
     7e4:	dc 01       	movw	r26, r24
     7e6:	ae 0f       	add	r26, r30
     7e8:	bf 1f       	adc	r27, r31
     7ea:	2c 91       	ld	r18, X
     7ec:	22 30       	cpi	r18, 0x02	; 2
     7ee:	b9 f0       	breq	.+46     	; 0x81e <Algo+0x1d4>
									
									break;
								
								
								}
								if(M[u*8 + z] == MyColor )
     7f0:	8c 91       	ld	r24, X
     7f2:	a0 90 87 00 	lds	r10, 0x0087	; 0x800087 <MyColor>
     7f6:	8a 15       	cp	r24, r10
     7f8:	09 f4       	brne	.+2      	; 0x7fc <Algo+0x1b2>
     7fa:	6f c0       	rjmp	.+222    	; 0x8da <Algo+0x290>
     7fc:	b0 2e       	mov	r11, r16
     7fe:	c2 2c       	mov	r12, r2
     800:	27 c0       	rjmp	.+78     	; 0x850 <Algo+0x206>
									mymove[3] = u+65;
									mymove[4] = (z+1)+'0';
									mymove[5] = '\r';
									Transmit(mymove,0,6);*/
								//check
								if( M[u*8 + z] == 2){
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	a8 0f       	add	r26, r24
     810:	b9 1f       	adc	r27, r25
     812:	ae 0f       	add	r26, r30
     814:	bf 1f       	adc	r27, r31
     816:	8c 91       	ld	r24, X
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	b1 f4       	brne	.+44     	; 0x848 <Algo+0x1fe>
     81c:	02 c0       	rjmp	.+4      	; 0x822 <Algo+0x1d8>
     81e:	b0 2e       	mov	r11, r16
     820:	c2 2c       	mov	r12, r2
									skip = 0;
									M[u*8+z] = MyColor;
     822:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <MyColor>
     826:	2c 93       	st	X, r18
									
									mymove[0] = 'M';
     828:	9d e4       	ldi	r25, 0x4D	; 77
     82a:	99 83       	std	Y+1, r25	; 0x01
									mymove[1] = 'M';
     82c:	9a 83       	std	Y+2, r25	; 0x02
									mymove[2] = '\x20';
     82e:	20 e2       	ldi	r18, 0x20	; 32
     830:	2b 83       	std	Y+3, r18	; 0x03
									mymove[3] = u+65;
     832:	81 e4       	ldi	r24, 0x41	; 65
     834:	8c 0d       	add	r24, r12
     836:	8c 83       	std	Y+4, r24	; 0x04
									mymove[4] = (z+1)+'0';
     838:	81 e3       	ldi	r24, 0x31	; 49
     83a:	8b 0d       	add	r24, r11
     83c:	8d 83       	std	Y+5, r24	; 0x05
									mymove[5] = '\r';
     83e:	3d e0       	ldi	r19, 0x0D	; 13
     840:	3e 83       	std	Y+6, r19	; 0x06
							
							if(!skip) //if a solution is found
							{
								u=i;
								z=j;
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     842:	f2 10       	cpse	r15, r2
     844:	13 c0       	rjmp	.+38     	; 0x86c <Algo+0x222>
     846:	3d c0       	rjmp	.+122    	; 0x8c2 <Algo+0x278>
									
									break;
								
								
								}
								if(M[u*8 + z] == MyColor )
     848:	8c 91       	ld	r24, X
     84a:	8a 15       	cp	r24, r10
     84c:	09 f4       	brne	.+2      	; 0x850 <Algo+0x206>
     84e:	45 c0       	rjmp	.+138    	; 0x8da <Algo+0x290>
								{
									break;
								}
								//if mycolor --> do nothing
								z+= ystep;
     850:	b1 0e       	add	r11, r17
								u+= istep;
     852:	cd 0c       	add	r12, r13
							mymove[4] = z+1+'0';
							mymove[5] = '\r';
							Transmit(mymove,0,6);

							skip = 1;
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     854:	8c 2d       	mov	r24, r12
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	86 17       	cp	r24, r22
     85a:	97 07       	cpc	r25, r23
     85c:	09 f4       	brne	.+2      	; 0x860 <Algo+0x216>
     85e:	3d c0       	rjmp	.+122    	; 0x8da <Algo+0x290>
     860:	ab 2d       	mov	r26, r11
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	a4 17       	cp	r26, r20
     866:	b5 07       	cpc	r27, r21
     868:	61 f6       	brne	.-104    	; 0x802 <Algo+0x1b8>
     86a:	37 c0       	rjmp	.+110    	; 0x8da <Algo+0x290>
							
							if(!skip) //if a solution is found
							{
								u=i;
								z=j;
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     86c:	e0 16       	cp	r14, r16
     86e:	49 f1       	breq	.+82     	; 0x8c2 <Algo+0x278>
								{
									if(M[u*8 + z] == MyColor )
     870:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <M>
     874:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <M+0x1>
     878:	af 81       	ldd	r26, Y+7	; 0x07
     87a:	b8 85       	ldd	r27, Y+8	; 0x08
     87c:	a8 0f       	add	r26, r24
     87e:	b9 1f       	adc	r27, r25
     880:	9c 91       	ld	r25, X
     882:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <MyColor>
     886:	98 17       	cp	r25, r24
     888:	e1 f0       	breq	.+56     	; 0x8c2 <Algo+0x278>
     88a:	30 2f       	mov	r19, r16
     88c:	22 2d       	mov	r18, r2
     88e:	12 c0       	rjmp	.+36     	; 0x8b4 <Algo+0x26a>
     890:	a3 2f       	mov	r26, r19
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	88 e0       	ldi	r24, 0x08	; 8
     896:	28 9f       	mul	r18, r24
     898:	a0 0d       	add	r26, r0
     89a:	b1 1d       	adc	r27, r1
     89c:	11 24       	eor	r1, r1
     89e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <M>
     8a2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <M+0x1>
     8a6:	a8 0f       	add	r26, r24
     8a8:	b9 1f       	adc	r27, r25
     8aa:	9c 91       	ld	r25, X
     8ac:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <MyColor>
     8b0:	98 17       	cp	r25, r24
     8b2:	39 f0       	breq	.+14     	; 0x8c2 <Algo+0x278>
									break;
									M[u*8 + z] = MyColor;
     8b4:	8c 93       	st	X, r24
									
									z+= ystep;
     8b6:	31 0f       	add	r19, r17
									u+= istep;
     8b8:	2d 0d       	add	r18, r13
							
							if(!skip) //if a solution is found
							{
								u=i;
								z=j;
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     8ba:	f2 16       	cp	r15, r18
     8bc:	11 f0       	breq	.+4      	; 0x8c2 <Algo+0x278>
     8be:	e3 12       	cpse	r14, r19
     8c0:	e7 cf       	rjmp	.-50     	; 0x890 <Algo+0x246>
									
									z+= ystep;
									u+= istep;
								}
								
								move_done=1;
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <move_done>
								Transmit(mymove,0,6);
     8c8:	46 e0       	ldi	r20, 0x06	; 6
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	de db       	rcall	.-2116   	; 0x8e <Transmit>
								if(move_done)
     8d2:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <move_done>
     8d6:	81 11       	cpse	r24, r1
     8d8:	48 c0       	rjmp	.+144    	; 0x96a <Algo+0x320>
				mymove[4] = (my+1)+'0';
				mymove[5] = '\r';
				Transmit(mymove,0,6);			*/	
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					for(j = my - 1; j<=(my+1); ++j)
     8da:	0f 5f       	subi	r16, 0xFF	; 255
     8dc:	80 2f       	mov	r24, r16
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	48 16       	cp	r4, r24
     8e2:	59 06       	cpc	r5, r25
     8e4:	0c f0       	brlt	.+2      	; 0x8e8 <Algo+0x29e>
     8e6:	18 cf       	rjmp	.-464    	; 0x718 <Algo+0xce>
									break;
							}
							
						}//if check neighbors
					}//j for
					if(move_done)
     8e8:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <move_done>
     8ec:	81 11       	cpse	r24, r1
     8ee:	3d c0       	rjmp	.+122    	; 0x96a <Algo+0x320>
				mymove[2] = '\x20';
				mymove[3] = mi+65;
				mymove[4] = (my+1)+'0';
				mymove[5] = '\r';
				Transmit(mymove,0,6);			*/	
				for(i = mi - 1; i<=(mi+1); ++i)
     8f0:	23 94       	inc	r2
     8f2:	c2 2c       	mov	r12, r2
     8f4:	d1 2c       	mov	r13, r1
     8f6:	2b 89       	ldd	r18, Y+19	; 0x13
     8f8:	3c 89       	ldd	r19, Y+20	; 0x14
     8fa:	2c 15       	cp	r18, r12
     8fc:	3d 05       	cpc	r19, r13
     8fe:	0c f0       	brlt	.+2      	; 0x902 <Algo+0x2b8>
     900:	e3 ce       	rjmp	.-570    	; 0x6c8 <Algo+0x7e>
     902:	04 c0       	rjmp	.+8      	; 0x90c <Algo+0x2c2>
					}//j for
					if(move_done)
						break;
				}//i for
			}//if  (find our pawn)
			if(move_done)
     904:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <move_done>
     908:	81 11       	cpse	r24, r1
     90a:	2f c0       	rjmp	.+94     	; 0x96a <Algo+0x320>
	//check enemy pass and my pass ....end game, Coming Soon
	char mymove[6];
	uint8_t mi,my,i,j,u,z,found,ibar,ybar,skip,istep,ystep;
	for(mi=0;mi<=7;mi++)
	{
		for(my=0; my<=7; my++)
     90c:	33 94       	inc	r3
     90e:	89 89       	ldd	r24, Y+17	; 0x11
     910:	9a 89       	ldd	r25, Y+18	; 0x12
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	9a 8b       	std	Y+18, r25	; 0x12
     916:	89 8b       	std	Y+17, r24	; 0x11
     918:	2f 85       	ldd	r18, Y+15	; 0x0f
     91a:	38 89       	ldd	r19, Y+16	; 0x10
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	38 8b       	std	Y+16, r19	; 0x10
     922:	2f 87       	std	Y+15, r18	; 0x0f
     924:	38 e0       	ldi	r19, 0x08	; 8
     926:	33 12       	cpse	r3, r19
     928:	b5 ce       	rjmp	.-662    	; 0x694 <Algo+0x4a>

	//CheckMove();
	//check enemy pass and my pass ....end game, Coming Soon
	char mymove[6];
	uint8_t mi,my,i,j,u,z,found,ibar,ybar,skip,istep,ystep;
	for(mi=0;mi<=7;mi++)
     92a:	8f 89       	ldd	r24, Y+23	; 0x17
     92c:	8f 5f       	subi	r24, 0xFF	; 255
     92e:	8f 8b       	std	Y+23, r24	; 0x17
     930:	2d 89       	ldd	r18, Y+21	; 0x15
     932:	3e 89       	ldd	r19, Y+22	; 0x16
     934:	2f 5f       	subi	r18, 0xFF	; 255
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	3e 8b       	std	Y+22, r19	; 0x16
     93a:	2d 8b       	std	Y+21, r18	; 0x15
     93c:	88 8d       	ldd	r24, Y+24	; 0x18
     93e:	99 8d       	ldd	r25, Y+25	; 0x19
     940:	08 96       	adiw	r24, 0x08	; 8
     942:	99 8f       	std	Y+25, r25	; 0x19
     944:	88 8f       	std	Y+24, r24	; 0x18
     946:	29 30       	cpi	r18, 0x09	; 9
     948:	31 05       	cpc	r19, r1
     94a:	79 f0       	breq	.+30     	; 0x96a <Algo+0x320>
	myTurn = 2;
}

///////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
     94c:	28 8d       	ldd	r18, Y+24	; 0x18
     94e:	39 8d       	ldd	r19, Y+25	; 0x19
     950:	3a 8b       	std	Y+18, r19	; 0x12
     952:	29 8b       	std	Y+17, r18	; 0x11
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	98 8b       	std	Y+16, r25	; 0x10
     95a:	8f 87       	std	Y+15, r24	; 0x0f
     95c:	21 2c       	mov	r2, r1
				mymove[2] = '\x20';
				mymove[3] = mi+65;
				mymove[4] = (my+1)+'0';
				mymove[5] = '\r';
				Transmit(mymove,0,6);			*/	
				for(i = mi - 1; i<=(mi+1); ++i)
     95e:	2d 89       	ldd	r18, Y+21	; 0x15
     960:	3e 89       	ldd	r19, Y+22	; 0x16
     962:	3c 8b       	std	Y+20, r19	; 0x14
     964:	2b 8b       	std	Y+19, r18	; 0x13
     966:	32 2c       	mov	r3, r2
     968:	95 ce       	rjmp	.-726    	; 0x694 <Algo+0x4a>
	//Transmit("MM G2\r",0,strlen("mv g2\r"));

	//while loop until 'OK' response
	
	while(1){		// Check_Input does not support "OK" response so we check it here
		if(move_done >= 1)
     96a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <move_done>
     96e:	88 23       	and	r24, r24
     970:	f1 f3       	breq	.-4      	; 0x96e <Algo+0x324>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     972:	8f e1       	ldi	r24, 0x1F	; 31
     974:	9e e4       	ldi	r25, 0x4E	; 78
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	f1 f7       	brne	.-4      	; 0x976 <Algo+0x32c>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <Algo+0x332>
     97c:	00 00       	nop
		{
			while(1)
			{
				_delay_ms(10);
				if(move_done == 2)
     97e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <move_done>
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	b1 f7       	brne	.-20     	; 0x972 <Algo+0x328>
				{ // we received the response we were waiting'
					move_done = 0;
     986:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <move_done>
					break;
				}
			}
			
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75) //Respone ok for our MM
     98a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <rxReadPos>
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	fc 01       	movw	r30, r24
     992:	e7 57       	subi	r30, 0x77	; 119
     994:	ff 4f       	sbci	r31, 0xFF	; 255
     996:	20 81       	ld	r18, Z
     998:	2f 34       	cpi	r18, 0x4F	; 79
     99a:	39 f7       	brne	.-50     	; 0x96a <Algo+0x320>
     99c:	fc 01       	movw	r30, r24
     99e:	e7 57       	subi	r30, 0x77	; 119
     9a0:	ff 4f       	sbci	r31, 0xFF	; 255
     9a2:	81 81       	ldd	r24, Z+1	; 0x01
     9a4:	8b 34       	cpi	r24, 0x4B	; 75
			{
				init_timer();
     9a6:	09 f7       	brne	.-62     	; 0x96a <Algo+0x320>
     9a8:	45 de       	rcall	.-886    	; 0x634 <init_timer>
				rxReadPos=rxWritePos;
     9aa:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <rxWritePos>
     9ae:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <rxReadPos>
				myTurn = 0;
     9b2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
				break;
			}//future update : else move_done=1 , wrong input avoidance
			
		}
	}
}
     9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <Algo+0x37a>
									break;
							}
							
						}//if check neighbors
					}//j for
					if(move_done)
     9b8:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <move_done>
     9bc:	88 23       	and	r24, r24
     9be:	09 f4       	brne	.+2      	; 0x9c2 <Algo+0x378>
     9c0:	97 cf       	rjmp	.-210    	; 0x8f0 <Algo+0x2a6>
     9c2:	d3 cf       	rjmp	.-90     	; 0x96a <Algo+0x320>
				break;
			}//future update : else move_done=1 , wrong input avoidance
			
		}
	}
}
     9c4:	69 96       	adiw	r28, 0x19	; 25
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	bf 90       	pop	r11
     9e2:	af 90       	pop	r10
     9e4:	9f 90       	pop	r9
     9e6:	8f 90       	pop	r8
     9e8:	7f 90       	pop	r7
     9ea:	6f 90       	pop	r6
     9ec:	5f 90       	pop	r5
     9ee:	4f 90       	pop	r4
     9f0:	3f 90       	pop	r3
     9f2:	2f 90       	pop	r2
     9f4:	08 95       	ret

000009f6 <main>:
volatile uint8_t *M ;



int main (void)
{
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <main+0x6>
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
	board_init();
     a00:	45 db       	rcall	.-2422   	; 0x8c <board_init>
	init_serial();
     a02:	66 dd       	rcall	.-1332   	; 0x4d0 <init_serial>
	init_leds();
     a04:	10 de       	rcall	.-992    	; 0x626 <init_leds>
     a06:	8d e0       	ldi	r24, 0x0D	; 13
	// delimiter carriage return
	strcpy(CR,"\xD");
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <enemy_pass>
     a0e:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <CR>
     a12:	c1 9a       	sbi	0x18, 1	; 24

	//Turning off leds(atmega16)
	PORTB |= (1<<PORTB1); 
     a14:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB2);
     a16:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= (1<<PORTB3);
		

	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
     a18:	80 e4       	ldi	r24, 0x40	; 64
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	ed d1       	rcall	.+986    	; 0xdf8 <malloc>
     a1e:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <M+0x1>
     a22:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <M>
     a26:	19 82       	std	Y+1, r1	; 0x01
	
	volatile uint8_t i=0;
     a28:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t y = 0 ;
     a2a:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0 ; i <= 7 ; i++)
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	88 30       	cpi	r24, 0x08	; 8
     a30:	00 f5       	brcc	.+64     	; 0xa72 <main+0x7c>
     a32:	22 e0       	ldi	r18, 0x02	; 2
	{
		for(y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     a34:	1a 82       	std	Y+2, r1	; 0x02
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
     a36:	8a 81       	ldd	r24, Y+2	; 0x02
     a38:	88 30       	cpi	r24, 0x08	; 8
     a3a:	a8 f4       	brcc	.+42     	; 0xa66 <main+0x70>
     a3c:	39 81       	ldd	r19, Y+1	; 0x01
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	48 e0       	ldi	r20, 0x08	; 8
     a44:	34 9f       	mul	r19, r20
     a46:	80 0d       	add	r24, r0
     a48:	91 1d       	adc	r25, r1
     a4a:	11 24       	eor	r1, r1
     a4c:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <M>
     a50:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <M+0x1>
     a54:	e8 0f       	add	r30, r24
     a56:	f9 1f       	adc	r31, r25
     a58:	20 83       	st	Z, r18
     a5a:	8a 81       	ldd	r24, Y+2	; 0x02
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
     a5c:	8f 5f       	subi	r24, 0xFF	; 255
     a5e:	8a 83       	std	Y+2, r24	; 0x02
     a60:	8a 81       	ldd	r24, Y+2	; 0x02
     a62:	88 30       	cpi	r24, 0x08	; 8
     a64:	58 f3       	brcs	.-42     	; 0xa3c <main+0x46>
     a66:	89 81       	ldd	r24, Y+1	; 0x01
	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
     a68:	8f 5f       	subi	r24, 0xFF	; 255
     a6a:	89 83       	std	Y+1, r24	; 0x01
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	88 30       	cpi	r24, 0x08	; 8
     a70:	08 f3       	brcs	.-62     	; 0xa34 <main+0x3e>
     a72:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <M>
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
	M[3*8+3] = 1 ;
     a76:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <M+0x1>
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	83 8f       	std	Z+27, r24	; 0x1b
     a7e:	14 8e       	std	Z+28, r1	; 0x1c
	M[3*8+4] = 0 ;
     a80:	13 a2       	std	Z+35, r1	; 0x23
	M[4*8+3] = 0 ;
     a82:	84 a3       	std	Z+36, r24	; 0x24
	M[4*8+4] = 1 ;
     a84:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <rxReadPos>

	//////////////////////////////////////////////////////////////////////
	

	//buffer pointers init
	rxReadPos=0;
     a88:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <rxWritePos>
	rxWritePos=0;
     a8c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
	//flag Initialization 
	ILflag =0;
     a90:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <move_done>
	move_done=0;
     a94:	92 e0       	ldi	r25, 0x02	; 2
	myTurn=2;
     a96:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <myTurn>
     a9a:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <MyColor>
	MyColor = 1;
     a9e:	78 94       	sei
	
	sei();
     aa0:	00 e0       	ldi	r16, 0x00	; 0
volatile uint8_t *M ;



int main (void)
{
     aa2:	68 94       	set
			
			}//future update : "else ILflag=1;" , wrong input avoidance

			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){ //"PL"
				AnnounceRes(0); //LOST - LED2								//WARNING: algo myturn=1 in case we want to continue playing
				myTurn=2;	
     aa4:	ff 24       	eor	r15, r15
     aa6:	f1 f8       	bld	r15, 1
     aa8:	10 2f       	mov	r17, r16
volatile uint8_t *M ;



int main (void)
{
     aaa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
	
	uint8_t mt=0;
	while(1){
		
		//Waiting for PC response - (ILLIGAL request)
		if(ILflag >= 1)
     aae:	88 23       	and	r24, r24
     ab0:	d1 f1       	breq	.+116    	; 0xb26 <main+0x130>
     ab2:	8f e1       	ldi	r24, 0x1F	; 31
     ab4:	9e e4       	ldi	r25, 0x4E	; 78
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <main+0xc0>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <main+0xc6>
     abc:	00 00       	nop
     abe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
		{
			//Transmit("Waiting OK for announcement\r",0,"Waiting OK for announcement\r");
			_delay_ms(10);
			while(1){		
				if(ILflag == 2){ // we received the response we were waiting
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	e1 f7       	brne	.-8      	; 0xabe <main+0xc8>
     ac6:	00 93 80 00 	sts	0x0080, r16	; 0x800080 <__data_end>
					ILflag = 0;
     aca:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <rxReadPos>
					break;
				}
			}
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75){ // "ok"
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	fc 01       	movw	r30, r24
     ad2:	e7 57       	subi	r30, 0x77	; 119
     ad4:	ff 4f       	sbci	r31, 0xFF	; 255
     ad6:	20 81       	ld	r18, Z
     ad8:	2f 34       	cpi	r18, 0x4F	; 79
     ada:	71 f4       	brne	.+28     	; 0xaf8 <main+0x102>
     adc:	fc 01       	movw	r30, r24
     ade:	e7 57       	subi	r30, 0x77	; 119
     ae0:	ff 4f       	sbci	r31, 0xFF	; 255
     ae2:	81 81       	ldd	r24, Z+1	; 0x01
     ae4:	8b 34       	cpi	r24, 0x4B	; 75
     ae6:	d9 f4       	brne	.+54     	; 0xb1e <main+0x128>
     ae8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <rxWritePos>
			   rxReadPos=rxWritePos;
     aec:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <rxReadPos>
				AnnounceRes(1); //WIN - LED1
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	38 dd       	rcall	.-1424   	; 0x564 <AnnounceRes>
     af4:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <myTurn>
				myTurn=2;
     af8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <rxReadPos>
			
			}//future update : "else ILflag=1;" , wrong input avoidance

			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){ //"PL"
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	fc 01       	movw	r30, r24
     b00:	e7 57       	subi	r30, 0x77	; 119
     b02:	ff 4f       	sbci	r31, 0xFF	; 255
     b04:	20 81       	ld	r18, Z
     b06:	20 35       	cpi	r18, 0x50	; 80
     b08:	51 f4       	brne	.+20     	; 0xb1e <main+0x128>
     b0a:	fc 01       	movw	r30, r24
     b0c:	e7 57       	subi	r30, 0x77	; 119
     b0e:	ff 4f       	sbci	r31, 0xFF	; 255
     b10:	81 81       	ldd	r24, Z+1	; 0x01
     b12:	8c 34       	cpi	r24, 0x4C	; 76
     b14:	21 f4       	brne	.+8      	; 0xb1e <main+0x128>
				AnnounceRes(0); //LOST - LED2								//WARNING: algo myturn=1 in case we want to continue playing
     b16:	80 2f       	mov	r24, r16
     b18:	25 dd       	rcall	.-1462   	; 0x564 <AnnounceRes>
     b1a:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <myTurn>
				myTurn=2;	
     b1e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <rxWritePos>
			}	//future update : "else ILflag=1;" , wrong input avoidance		

			rxReadPos=rxWritePos;
     b22:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <rxReadPos>
     b26:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
		
		
		if((myTurn == 0)&&(mt == 0)){
     b2a:	81 11       	cpse	r24, r1
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <main+0x140>
     b2e:	11 11       	cpse	r17, r1
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <main+0x140>
			//Possible speculation algo
			init_timer();
     b32:	80 dd       	rcall	.-1280   	; 0x634 <init_timer>
			mt = 1;
     b34:	11 e0       	ldi	r17, 0x01	; 1
		}
			
		
		if(myTurn==1){ //When its avr's turn
     b36:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	09 f0       	breq	.+2      	; 0xb40 <main+0x14a>
			mt = 0; //reset flag for HIS turn			
			init_timer(); //reset timer
     b3e:	b5 cf       	rjmp	.-150    	; 0xaaa <main+0xb4>
     b40:	79 dd       	rcall	.-1294   	; 0x634 <init_timer>
			myTurn = 1;  //Important - collision with  init_timer
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			Algo();		//The actual algorithm
     b48:	80 dd       	rcall	.-1280   	; 0x64a <Algo>
     b4a:	ae cf       	rjmp	.-164    	; 0xaa8 <main+0xb2>

00000b4c <Check_Input>:
     b4c:	9c 01       	movw	r18, r24

////////////////////////////////////////////   CHECK_INPUT    ///////////////////////////////////////////////

void Check_Input(char data[]){
	
		if(data[rxReadPos]==CR[0]){
     b4e:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <rxReadPos>
     b52:	40 91 83 00 	lds	r20, 0x0083	; 0x800083 <CR>
     b56:	f9 01       	movw	r30, r18
     b58:	e9 0f       	add	r30, r25
     b5a:	f1 1d       	adc	r31, r1
     b5c:	80 81       	ld	r24, Z
     b5e:	84 13       	cpse	r24, r20
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <Check_Input+0x1c>
			rxReadPos++;
     b62:	9f 5f       	subi	r25, 0xFF	; 255
     b64:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <rxReadPos>
		//flag = 0;
		//Space_num = 0;
		

		//ILFlag will help us spot "OK" or "PL" terminal answer
		if(ILflag == 1)
     b68:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	21 f4       	brne	.+8      	; 0xb78 <Check_Input+0x2c>
		{
			ILflag=2;  //answer spotted, you can proceed.
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
			return;	
     b76:	08 95       	ret
		}
		
		//it will help to spot "OK"  terminal answer
		if(move_done == 1)
     b78:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <move_done>
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	21 f4       	brne	.+8      	; 0xb88 <Check_Input+0x3c>
		{	
			move_done=2; //answer spotted, you can proceed.
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <move_done>
			return;	
     b86:	08 95       	ret
     b88:	b9 01       	movw	r22, r18
	


		//process
		// command AT
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
     b8a:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <rxReadPos>
     b8e:	29 2f       	mov	r18, r25
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	fb 01       	movw	r30, r22
     b94:	e2 0f       	add	r30, r18
     b96:	f3 1f       	adc	r31, r19
     b98:	90 81       	ld	r25, Z
     b9a:	91 34       	cpi	r25, 0x41	; 65
     b9c:	99 f4       	brne	.+38     	; 0xbc4 <Check_Input+0x78>
     b9e:	fb 01       	movw	r30, r22
     ba0:	e2 0f       	add	r30, r18
     ba2:	f3 1f       	adc	r31, r19
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	94 35       	cpi	r25, 0x54	; 84
     ba8:	09 f0       	breq	.+2      	; 0xbac <Check_Input+0x60>
     baa:	e2 c0       	rjmp	.+452    	; 0xd70 <Check_Input+0x224>
		{
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			if(data[rxReadPos+2] == CR[0]){
     bac:	fb 01       	movw	r30, r22
     bae:	e2 0f       	add	r30, r18
     bb0:	f3 1f       	adc	r31, r19
     bb2:	82 81       	ldd	r24, Z+2	; 0x02
     bb4:	48 13       	cpse	r20, r24
     bb6:	dc c0       	rjmp	.+440    	; 0xd70 <Check_Input+0x224>
				Transmit("OK\r",0 , strlen("OK\r"));
     bb8:	43 e0       	ldi	r20, 0x03	; 3
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	87 e6       	ldi	r24, 0x67	; 103
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	66 da       	rcall	.-2868   	; 0x8e <Transmit>
     bc2:	d6 c0       	rjmp	.+428    	; 0xd70 <Check_Input+0x224>
				rxReadPos = rxWritePos;
			}

		}
		//Checking for RST<CR> command.
		else if((data[rxReadPos] == 82)&&(data[rxReadPos + 1] == 83)&&(data[rxReadPos + 2] == 84))		
     bc4:	92 35       	cpi	r25, 0x52	; 82
     bc6:	09 f5       	brne	.+66     	; 0xc0a <Check_Input+0xbe>
     bc8:	fb 01       	movw	r30, r22
     bca:	e2 0f       	add	r30, r18
     bcc:	f3 1f       	adc	r31, r19
     bce:	91 81       	ldd	r25, Z+1	; 0x01
     bd0:	93 35       	cpi	r25, 0x53	; 83
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <Check_Input+0x8a>
     bd4:	cd c0       	rjmp	.+410    	; 0xd70 <Check_Input+0x224>
     bd6:	fb 01       	movw	r30, r22
     bd8:	e2 0f       	add	r30, r18
     bda:	f3 1f       	adc	r31, r19
     bdc:	82 81       	ldd	r24, Z+2	; 0x02
     bde:	84 35       	cpi	r24, 0x54	; 84
     be0:	09 f0       	breq	.+2      	; 0xbe4 <Check_Input+0x98>
     be2:	c6 c0       	rjmp	.+396    	; 0xd70 <Check_Input+0x224>
		{
			ILflag =0;
     be4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
			move_done=0;
     be8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <move_done>
			myTurn=2;
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			MyColor = 1;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <MyColor>
			PORTB |= (1<<PORTB1);
     bf8:	c1 9a       	sbi	0x18, 1	; 24
			PORTB |= (1<<PORTB2);
     bfa:	c2 9a       	sbi	0x18, 2	; 24
			PORTB |= (1<<PORTB3);
     bfc:	c3 9a       	sbi	0x18, 3	; 24
			Transmit("OK\r",0 , strlen("OK\r"));
     bfe:	43 e0       	ldi	r20, 0x03	; 3
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	87 e6       	ldi	r24, 0x67	; 103
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	43 da       	rcall	.-2938   	; 0x8e <Transmit>
			rxReadPos = rxWritePos; //
     c08:	b3 c0       	rjmp	.+358    	; 0xd70 <Check_Input+0x224>
		}	
		// SP<SPACE>{B/W}<CR>
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 80))
     c0a:	93 35       	cpi	r25, 0x53	; 83
     c0c:	d9 f4       	brne	.+54     	; 0xc44 <Check_Input+0xf8>
     c0e:	fb 01       	movw	r30, r22
     c10:	e2 0f       	add	r30, r18
     c12:	f3 1f       	adc	r31, r19
     c14:	91 81       	ldd	r25, Z+1	; 0x01
     c16:	90 35       	cpi	r25, 0x50	; 80
     c18:	09 f0       	breq	.+2      	; 0xc1c <Check_Input+0xd0>
     c1a:	41 c0       	rjmp	.+130    	; 0xc9e <Check_Input+0x152>
		{
			//(int)c - 65;
			if(data[rxReadPos + 3] == 66)		//B
     c1c:	fb 01       	movw	r30, r22
     c1e:	e2 0f       	add	r30, r18
     c20:	f3 1f       	adc	r31, r19
     c22:	83 81       	ldd	r24, Z+3	; 0x03
     c24:	82 34       	cpi	r24, 0x42	; 66
     c26:	19 f4       	brne	.+6      	; 0xc2e <Check_Input+0xe2>
				MyColor = 0;					//Saving myColor
     c28:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <MyColor>
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <Check_Input+0xec>
			else if(data[rxReadPos + 3] == 87)  //W
     c2e:	87 35       	cpi	r24, 0x57	; 87
     c30:	19 f4       	brne	.+6      	; 0xc38 <Check_Input+0xec>
				MyColor = 1;					//Saving myColor
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <MyColor>
			Transmit("OK\r",0 , strlen("OK\r"));
     c38:	43 e0       	ldi	r20, 0x03	; 3
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	87 e6       	ldi	r24, 0x67	; 103
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	26 da       	rcall	.-2996   	; 0x8e <Transmit>
			rxReadPos = rxWritePos;
     c42:	96 c0       	rjmp	.+300    	; 0xd70 <Check_Input+0x224>
		}
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
     c44:	9e 34       	cpi	r25, 0x4E	; 78
     c46:	b9 f4       	brne	.+46     	; 0xc76 <Check_Input+0x12a>
     c48:	fb 01       	movw	r30, r22
     c4a:	e2 0f       	add	r30, r18
     c4c:	f3 1f       	adc	r31, r19
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	87 34       	cpi	r24, 0x47	; 71
     c52:	09 f0       	breq	.+2      	; 0xc56 <Check_Input+0x10a>
     c54:	8d c0       	rjmp	.+282    	; 0xd70 <Check_Input+0x224>
		{
			if(MyColor == 0)// BLACK
     c56:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <MyColor>
     c5a:	81 11       	cpse	r24, r1
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <Check_Input+0x11a>
				myTurn=1;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <Check_Input+0x11e>
			else           //WHITE
				myTurn=0;
     c66:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			
			Transmit("OK\r",0 , strlen("OK\r"));
     c6a:	43 e0       	ldi	r20, 0x03	; 3
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	87 e6       	ldi	r24, 0x67	; 103
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0d da       	rcall	.-3046   	; 0x8e <Transmit>
			rxReadPos = rxWritePos;
     c74:	7d c0       	rjmp	.+250    	; 0xd70 <Check_Input+0x224>
		}
		        //EG<CR>
		else if((data[rxReadPos] == 69)&&(data[rxReadPos + 1] == 71))
     c76:	95 34       	cpi	r25, 0x45	; 69
     c78:	31 f5       	brne	.+76     	; 0xcc6 <Check_Input+0x17a>
     c7a:	fb 01       	movw	r30, r22
     c7c:	e2 0f       	add	r30, r18
     c7e:	f3 1f       	adc	r31, r19
     c80:	81 81       	ldd	r24, Z+1	; 0x01
     c82:	87 34       	cpi	r24, 0x47	; 71
     c84:	09 f0       	breq	.+2      	; 0xc88 <Check_Input+0x13c>
     c86:	74 c0       	rjmp	.+232    	; 0xd70 <Check_Input+0x224>
		{
			//EndGameFlag = 1; // check this flag during waiting/calculating loop
			Transmit("OK\r",0 , strlen("OK\r"));
     c88:	43 e0       	ldi	r20, 0x03	; 3
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	87 e6       	ldi	r24, 0x67	; 103
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	fe d9       	rcall	.-3076   	; 0x8e <Transmit>
			rxReadPos = rxWritePos;
     c92:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <rxWritePos>
     c96:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <rxReadPos>
			EndGame();
     c9a:	89 dc       	rcall	.-1774   	; 0x5ae <EndGame>
     c9c:	69 c0       	rjmp	.+210    	; 0xd70 <Check_Input+0x224>
     c9e:	fb 01       	movw	r30, r22
		}
			 //ST<CR>
        else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 84))
     ca0:	e2 0f       	add	r30, r18
     ca2:	f3 1f       	adc	r31, r19
     ca4:	81 81       	ldd	r24, Z+1	; 0x01
     ca6:	84 35       	cpi	r24, 0x54	; 84
     ca8:	09 f0       	breq	.+2      	; 0xcac <Check_Input+0x160>
     caa:	62 c0       	rjmp	.+196    	; 0xd70 <Check_Input+0x224>
     cac:	fb 01       	movw	r30, r22
        {
			Time = data[rxReadPos+3] - '0';    //String to Int
     cae:	e2 0f       	add	r30, r18
     cb0:	f3 1f       	adc	r31, r19
     cb2:	83 81       	ldd	r24, Z+3	; 0x03
     cb4:	80 53       	subi	r24, 0x30	; 48
     cb6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <Time>
			Transmit("OK\r",0 , strlen("OK\r"));
     cba:	43 e0       	ldi	r20, 0x03	; 3
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	87 e6       	ldi	r24, 0x67	; 103
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	e5 d9       	rcall	.-3126   	; 0x8e <Transmit>
     cc4:	55 c0       	rjmp	.+170    	; 0xd70 <Check_Input+0x224>
			rxReadPos = rxWritePos;
     cc6:	9d 34       	cpi	r25, 0x4D	; 77
        }
			//MV<SP>{[A-H],[1-8]}<CR>
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 86))
     cc8:	71 f5       	brne	.+92     	; 0xd26 <Check_Input+0x1da>
     cca:	fb 01       	movw	r30, r22
     ccc:	e2 0f       	add	r30, r18
     cce:	f3 1f       	adc	r31, r19
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	86 35       	cpi	r24, 0x56	; 86
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <Check_Input+0x18c>
     cd6:	4c c0       	rjmp	.+152    	; 0xd70 <Check_Input+0x224>
     cd8:	fb 01       	movw	r30, r22
		{
				if((data[rxReadPos+3] >= 65)&&(data[rxReadPos+3] <= 72)&&(data[rxReadPos+4] >= 49)&&(data[rxReadPos+4] <= 56))  // Checking input
     cda:	e2 0f       	add	r30, r18
     cdc:	f3 1f       	adc	r31, r19
     cde:	83 81       	ldd	r24, Z+3	; 0x03
     ce0:	81 54       	subi	r24, 0x41	; 65
     ce2:	88 30       	cpi	r24, 0x08	; 8
     ce4:	08 f0       	brcs	.+2      	; 0xce8 <Check_Input+0x19c>
     ce6:	44 c0       	rjmp	.+136    	; 0xd70 <Check_Input+0x224>
     ce8:	fb 01       	movw	r30, r22
     cea:	e2 0f       	add	r30, r18
     cec:	f3 1f       	adc	r31, r19
     cee:	84 81       	ldd	r24, Z+4	; 0x04
     cf0:	81 53       	subi	r24, 0x31	; 49
     cf2:	88 30       	cpi	r24, 0x08	; 8
     cf4:	08 f0       	brcs	.+2      	; 0xcf8 <Check_Input+0x1ac>
     cf6:	3c c0       	rjmp	.+120    	; 0xd70 <Check_Input+0x224>
				{
					uint8_t moveok = CheckMove(data);  //Check opponents move.
     cf8:	cb 01       	movw	r24, r22
     cfa:	d7 d9       	rcall	.-3154   	; 0xaa <CheckMove>
					//If opponent's move is legal, send ok and reset timer, else 
					//send IL and wait for PC response, if response OK --> I win else(PL) --> I LOSE
					if(moveok == 1)		
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	51 f4       	brne	.+20     	; 0xd14 <Check_Input+0x1c8>
					{
						// Saving opponent's move in my local game board
						//M[(((int)data[rxReadPos+3] - 65)*8) + (data[rxReadPos+4] - '0')] = !MyColor;  // Saving opponent's move in my local game board
						Transmit("OK\r",0 , strlen("OK\r"));
     d00:	43 e0       	ldi	r20, 0x03	; 3
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	87 e6       	ldi	r24, 0x67	; 103
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	c2 d9       	rcall	.-3196   	; 0x8e <Transmit>
     d0a:	94 dc       	rcall	.-1752   	; 0x634 <init_timer>
						init_timer();
     d0c:	81 e0       	ldi	r24, 0x01	; 1
						myTurn=1;
     d0e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     d12:	2e c0       	rjmp	.+92     	; 0xd70 <Check_Input+0x224>
     d14:	43 e0       	ldi	r20, 0x03	; 3
					}
					else{
						Transmit("IL\r",0 , strlen("IL\r"));
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	8b e7       	ldi	r24, 0x7B	; 123
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	b8 d9       	rcall	.-3216   	; 0x8e <Transmit>
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
						ILflag =  1;							//Waiting mode for PC's response
     d24:	25 c0       	rjmp	.+74     	; 0xd70 <Check_Input+0x224>
     d26:	90 35       	cpi	r25, 0x50	; 80
     d28:	89 f4       	brne	.+34     	; 0xd4c <Check_Input+0x200>
						
				} 	
		}

		//PASS
		else if ((data[rxReadPos] == 80)&&(data[rxReadPos + 1] == 83))
     d2a:	fb 01       	movw	r30, r22
     d2c:	e2 0f       	add	r30, r18
     d2e:	f3 1f       	adc	r31, r19
     d30:	81 81       	ldd	r24, Z+1	; 0x01
     d32:	83 35       	cpi	r24, 0x53	; 83
     d34:	e9 f4       	brne	.+58     	; 0xd70 <Check_Input+0x224>
     d36:	81 e0       	ldi	r24, 0x01	; 1
		{
			myTurn=1;
     d38:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     d3c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <enemy_pass>
			//This flag will help us end game in case we pass after opponent's pass
			enemy_pass = 1;   
     d40:	43 e0       	ldi	r20, 0x03	; 3
			Transmit("OK\r",0,strlen("OK\r"));
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	87 e6       	ldi	r24, 0x67	; 103
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a2 d9       	rcall	.-3260   	; 0x8e <Transmit>
     d4a:	12 c0       	rjmp	.+36     	; 0xd70 <Check_Input+0x224>
     d4c:	97 35       	cpi	r25, 0x57	; 87
		}
		//WN

		else if((data[rxReadPos] == 87)&&(data[rxReadPos + 1] == 78)){
     d4e:	81 f4       	brne	.+32     	; 0xd70 <Check_Input+0x224>
     d50:	fb 01       	movw	r30, r22
     d52:	e2 0f       	add	r30, r18
     d54:	f3 1f       	adc	r31, r19
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	8e 34       	cpi	r24, 0x4E	; 78
     d5a:	51 f4       	brne	.+20     	; 0xd70 <Check_Input+0x224>
			AnnounceRes(1);  //announce i win with led1
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	02 dc       	rcall	.-2044   	; 0x564 <AnnounceRes>
     d60:	82 e0       	ldi	r24, 0x02	; 2
			myTurn=2;			
     d62:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     d66:	43 e0       	ldi	r20, 0x03	; 3
			Transmit("OK\r",0,strlen("OK\r"));
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	87 e6       	ldi	r24, 0x67	; 103
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	8f d9       	rcall	.-3298   	; 0x8e <Transmit>
     d70:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <rxWritePos>
		}
		else
			NULL;
	rxReadPos=rxWritePos;		
	rxReadPos++;		//Ready for the next command (directs to the next letter, the one after <CR>) 
     d74:	8f 5f       	subi	r24, 0xFF	; 255
     d76:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <rxReadPos>
     d7a:	08 95       	ret

00000d7c <__vector_11>:
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
}




ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
     d86:	2f 93       	push	r18
     d88:	3f 93       	push	r19
     d8a:	4f 93       	push	r20
     d8c:	5f 93       	push	r21
     d8e:	6f 93       	push	r22
     d90:	7f 93       	push	r23
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	af 93       	push	r26
     d98:	bf 93       	push	r27
     d9a:	ef 93       	push	r30
     d9c:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
     d9e:	8c b1       	in	r24, 0x0c	; 12
     da0:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <rxWritePos>
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	e7 57       	subi	r30, 0x77	; 119
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
     dac:	5d 9b       	sbis	0x0b, 5	; 11
     dae:	fe cf       	rjmp	.-4      	; 0xdac <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
     db0:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
     db2:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <rxWritePos>
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	e7 57       	subi	r30, 0x77	; 119
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	90 81       	ld	r25, Z
     dbe:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <CR>
     dc2:	98 13       	cpse	r25, r24
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <__vector_11+0x50>
		Check_Input(myrxbuffer);
     dc6:	89 e8       	ldi	r24, 0x89	; 137
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	c0 de       	rcall	.-640    	; 0xb4c <Check_Input>
	
	
	

	rxWritePos++;
     dcc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <rxWritePos>
     dd0:	8f 5f       	subi	r24, 0xFF	; 255
     dd2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <rxWritePos>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <malloc>:
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	91 05       	cpc	r25, r1
     e04:	10 f4       	brcc	.+4      	; 0xe0a <malloc+0x12>
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <__flp>
     e0e:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <__flp+0x1>
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	a0 e0       	ldi	r26, 0x00	; 0
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	30 97       	sbiw	r30, 0x00	; 0
     e1c:	19 f1       	breq	.+70     	; 0xe64 <malloc+0x6c>
     e1e:	40 81       	ld	r20, Z
     e20:	51 81       	ldd	r21, Z+1	; 0x01
     e22:	02 81       	ldd	r16, Z+2	; 0x02
     e24:	13 81       	ldd	r17, Z+3	; 0x03
     e26:	48 17       	cp	r20, r24
     e28:	59 07       	cpc	r21, r25
     e2a:	c8 f0       	brcs	.+50     	; 0xe5e <malloc+0x66>
     e2c:	84 17       	cp	r24, r20
     e2e:	95 07       	cpc	r25, r21
     e30:	69 f4       	brne	.+26     	; 0xe4c <malloc+0x54>
     e32:	10 97       	sbiw	r26, 0x00	; 0
     e34:	31 f0       	breq	.+12     	; 0xe42 <malloc+0x4a>
     e36:	12 96       	adiw	r26, 0x02	; 2
     e38:	0c 93       	st	X, r16
     e3a:	12 97       	sbiw	r26, 0x02	; 2
     e3c:	13 96       	adiw	r26, 0x03	; 3
     e3e:	1c 93       	st	X, r17
     e40:	27 c0       	rjmp	.+78     	; 0xe90 <malloc+0x98>
     e42:	00 93 8e 01 	sts	0x018E, r16	; 0x80018e <__flp>
     e46:	10 93 8f 01 	sts	0x018F, r17	; 0x80018f <__flp+0x1>
     e4a:	22 c0       	rjmp	.+68     	; 0xe90 <malloc+0x98>
     e4c:	21 15       	cp	r18, r1
     e4e:	31 05       	cpc	r19, r1
     e50:	19 f0       	breq	.+6      	; 0xe58 <malloc+0x60>
     e52:	42 17       	cp	r20, r18
     e54:	53 07       	cpc	r21, r19
     e56:	18 f4       	brcc	.+6      	; 0xe5e <malloc+0x66>
     e58:	9a 01       	movw	r18, r20
     e5a:	bd 01       	movw	r22, r26
     e5c:	ef 01       	movw	r28, r30
     e5e:	df 01       	movw	r26, r30
     e60:	f8 01       	movw	r30, r16
     e62:	db cf       	rjmp	.-74     	; 0xe1a <malloc+0x22>
     e64:	21 15       	cp	r18, r1
     e66:	31 05       	cpc	r19, r1
     e68:	f9 f0       	breq	.+62     	; 0xea8 <malloc+0xb0>
     e6a:	28 1b       	sub	r18, r24
     e6c:	39 0b       	sbc	r19, r25
     e6e:	24 30       	cpi	r18, 0x04	; 4
     e70:	31 05       	cpc	r19, r1
     e72:	80 f4       	brcc	.+32     	; 0xe94 <malloc+0x9c>
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	9b 81       	ldd	r25, Y+3	; 0x03
     e78:	61 15       	cp	r22, r1
     e7a:	71 05       	cpc	r23, r1
     e7c:	21 f0       	breq	.+8      	; 0xe86 <malloc+0x8e>
     e7e:	fb 01       	movw	r30, r22
     e80:	93 83       	std	Z+3, r25	; 0x03
     e82:	82 83       	std	Z+2, r24	; 0x02
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <malloc+0x96>
     e86:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <__flp+0x1>
     e8a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__flp>
     e8e:	fe 01       	movw	r30, r28
     e90:	32 96       	adiw	r30, 0x02	; 2
     e92:	44 c0       	rjmp	.+136    	; 0xf1c <malloc+0x124>
     e94:	fe 01       	movw	r30, r28
     e96:	e2 0f       	add	r30, r18
     e98:	f3 1f       	adc	r31, r19
     e9a:	81 93       	st	Z+, r24
     e9c:	91 93       	st	Z+, r25
     e9e:	22 50       	subi	r18, 0x02	; 2
     ea0:	31 09       	sbc	r19, r1
     ea2:	39 83       	std	Y+1, r19	; 0x01
     ea4:	28 83       	st	Y, r18
     ea6:	3a c0       	rjmp	.+116    	; 0xf1c <malloc+0x124>
     ea8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__brkval>
     eac:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__brkval+0x1>
     eb0:	23 2b       	or	r18, r19
     eb2:	41 f4       	brne	.+16     	; 0xec4 <malloc+0xcc>
     eb4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
     eb8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     ebc:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__brkval+0x1>
     ec0:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__brkval>
     ec4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     ec8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     ecc:	21 15       	cp	r18, r1
     ece:	31 05       	cpc	r19, r1
     ed0:	41 f4       	brne	.+16     	; 0xee2 <malloc+0xea>
     ed2:	2d b7       	in	r18, 0x3d	; 61
     ed4:	3e b7       	in	r19, 0x3e	; 62
     ed6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     eda:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     ede:	24 1b       	sub	r18, r20
     ee0:	35 0b       	sbc	r19, r21
     ee2:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <__brkval>
     ee6:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <__brkval+0x1>
     eea:	e2 17       	cp	r30, r18
     eec:	f3 07       	cpc	r31, r19
     eee:	a0 f4       	brcc	.+40     	; 0xf18 <malloc+0x120>
     ef0:	2e 1b       	sub	r18, r30
     ef2:	3f 0b       	sbc	r19, r31
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	78 f0       	brcs	.+30     	; 0xf18 <malloc+0x120>
     efa:	ac 01       	movw	r20, r24
     efc:	4e 5f       	subi	r20, 0xFE	; 254
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	24 17       	cp	r18, r20
     f02:	35 07       	cpc	r19, r21
     f04:	48 f0       	brcs	.+18     	; 0xf18 <malloc+0x120>
     f06:	4e 0f       	add	r20, r30
     f08:	5f 1f       	adc	r21, r31
     f0a:	50 93 8d 01 	sts	0x018D, r21	; 0x80018d <__brkval+0x1>
     f0e:	40 93 8c 01 	sts	0x018C, r20	; 0x80018c <__brkval>
     f12:	81 93       	st	Z+, r24
     f14:	91 93       	st	Z+, r25
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <malloc+0x124>
     f18:	e0 e0       	ldi	r30, 0x00	; 0
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	cf 01       	movw	r24, r30
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	08 95       	ret

00000f28 <free>:
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	09 f4       	brne	.+2      	; 0xf32 <free+0xa>
     f30:	81 c0       	rjmp	.+258    	; 0x1034 <free+0x10c>
     f32:	fc 01       	movw	r30, r24
     f34:	32 97       	sbiw	r30, 0x02	; 2
     f36:	13 82       	std	Z+3, r1	; 0x03
     f38:	12 82       	std	Z+2, r1	; 0x02
     f3a:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <__flp>
     f3e:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <__flp+0x1>
     f42:	10 97       	sbiw	r26, 0x00	; 0
     f44:	81 f4       	brne	.+32     	; 0xf66 <free+0x3e>
     f46:	20 81       	ld	r18, Z
     f48:	31 81       	ldd	r19, Z+1	; 0x01
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__brkval>
     f52:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__brkval+0x1>
     f56:	28 17       	cp	r18, r24
     f58:	39 07       	cpc	r19, r25
     f5a:	51 f5       	brne	.+84     	; 0xfb0 <free+0x88>
     f5c:	f0 93 8d 01 	sts	0x018D, r31	; 0x80018d <__brkval+0x1>
     f60:	e0 93 8c 01 	sts	0x018C, r30	; 0x80018c <__brkval>
     f64:	67 c0       	rjmp	.+206    	; 0x1034 <free+0x10c>
     f66:	ed 01       	movw	r28, r26
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	ce 17       	cp	r28, r30
     f6e:	df 07       	cpc	r29, r31
     f70:	40 f4       	brcc	.+16     	; 0xf82 <free+0x5a>
     f72:	4a 81       	ldd	r20, Y+2	; 0x02
     f74:	5b 81       	ldd	r21, Y+3	; 0x03
     f76:	9e 01       	movw	r18, r28
     f78:	41 15       	cp	r20, r1
     f7a:	51 05       	cpc	r21, r1
     f7c:	f1 f0       	breq	.+60     	; 0xfba <free+0x92>
     f7e:	ea 01       	movw	r28, r20
     f80:	f5 cf       	rjmp	.-22     	; 0xf6c <free+0x44>
     f82:	d3 83       	std	Z+3, r29	; 0x03
     f84:	c2 83       	std	Z+2, r28	; 0x02
     f86:	40 81       	ld	r20, Z
     f88:	51 81       	ldd	r21, Z+1	; 0x01
     f8a:	84 0f       	add	r24, r20
     f8c:	95 1f       	adc	r25, r21
     f8e:	c8 17       	cp	r28, r24
     f90:	d9 07       	cpc	r29, r25
     f92:	59 f4       	brne	.+22     	; 0xfaa <free+0x82>
     f94:	88 81       	ld	r24, Y
     f96:	99 81       	ldd	r25, Y+1	; 0x01
     f98:	84 0f       	add	r24, r20
     f9a:	95 1f       	adc	r25, r21
     f9c:	02 96       	adiw	r24, 0x02	; 2
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	80 83       	st	Z, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	9b 81       	ldd	r25, Y+3	; 0x03
     fa6:	93 83       	std	Z+3, r25	; 0x03
     fa8:	82 83       	std	Z+2, r24	; 0x02
     faa:	21 15       	cp	r18, r1
     fac:	31 05       	cpc	r19, r1
     fae:	29 f4       	brne	.+10     	; 0xfba <free+0x92>
     fb0:	f0 93 8f 01 	sts	0x018F, r31	; 0x80018f <__flp+0x1>
     fb4:	e0 93 8e 01 	sts	0x018E, r30	; 0x80018e <__flp>
     fb8:	3d c0       	rjmp	.+122    	; 0x1034 <free+0x10c>
     fba:	e9 01       	movw	r28, r18
     fbc:	fb 83       	std	Y+3, r31	; 0x03
     fbe:	ea 83       	std	Y+2, r30	; 0x02
     fc0:	49 91       	ld	r20, Y+
     fc2:	59 91       	ld	r21, Y+
     fc4:	c4 0f       	add	r28, r20
     fc6:	d5 1f       	adc	r29, r21
     fc8:	ec 17       	cp	r30, r28
     fca:	fd 07       	cpc	r31, r29
     fcc:	61 f4       	brne	.+24     	; 0xfe6 <free+0xbe>
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	84 0f       	add	r24, r20
     fd4:	95 1f       	adc	r25, r21
     fd6:	02 96       	adiw	r24, 0x02	; 2
     fd8:	e9 01       	movw	r28, r18
     fda:	99 83       	std	Y+1, r25	; 0x01
     fdc:	88 83       	st	Y, r24
     fde:	82 81       	ldd	r24, Z+2	; 0x02
     fe0:	93 81       	ldd	r25, Z+3	; 0x03
     fe2:	9b 83       	std	Y+3, r25	; 0x03
     fe4:	8a 83       	std	Y+2, r24	; 0x02
     fe6:	e0 e0       	ldi	r30, 0x00	; 0
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	12 96       	adiw	r26, 0x02	; 2
     fec:	8d 91       	ld	r24, X+
     fee:	9c 91       	ld	r25, X
     ff0:	13 97       	sbiw	r26, 0x03	; 3
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	19 f0       	breq	.+6      	; 0xffc <free+0xd4>
     ff6:	fd 01       	movw	r30, r26
     ff8:	dc 01       	movw	r26, r24
     ffa:	f7 cf       	rjmp	.-18     	; 0xfea <free+0xc2>
     ffc:	8d 91       	ld	r24, X+
     ffe:	9c 91       	ld	r25, X
    1000:	11 97       	sbiw	r26, 0x01	; 1
    1002:	9d 01       	movw	r18, r26
    1004:	2e 5f       	subi	r18, 0xFE	; 254
    1006:	3f 4f       	sbci	r19, 0xFF	; 255
    1008:	82 0f       	add	r24, r18
    100a:	93 1f       	adc	r25, r19
    100c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__brkval>
    1010:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__brkval+0x1>
    1014:	28 17       	cp	r18, r24
    1016:	39 07       	cpc	r19, r25
    1018:	69 f4       	brne	.+26     	; 0x1034 <free+0x10c>
    101a:	30 97       	sbiw	r30, 0x00	; 0
    101c:	29 f4       	brne	.+10     	; 0x1028 <free+0x100>
    101e:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <__flp+0x1>
    1022:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__flp>
    1026:	02 c0       	rjmp	.+4      	; 0x102c <free+0x104>
    1028:	13 82       	std	Z+3, r1	; 0x03
    102a:	12 82       	std	Z+2, r1	; 0x02
    102c:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <__brkval+0x1>
    1030:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <__brkval>
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <_exit>:
    103a:	f8 94       	cli

0000103c <__stop_program>:
    103c:	ff cf       	rjmp	.-2      	; 0x103c <__stop_program>
