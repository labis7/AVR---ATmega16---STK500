
M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000109a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000109a  0000112e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000111  00800088  00800088  00001156  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001163  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000817  00000000  00000000  000023df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012cb  00000000  00000000  00002bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00003ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fdc7  00000000  00000000  0000419c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e1d  00000000  00000000  00013f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00014d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  00014e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	df c2       	rjmp	.+1470   	; 0x5e0 <__vector_8>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c0       	rjmp	.+98     	; 0x8c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	11 c6       	rjmp	.+3106   	; 0xc50 <__vector_11>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	eb c1       	rjmp	.+982    	; 0x40c <__vector_13>
      36:	00 00       	nop
      38:	29 c0       	rjmp	.+82     	; 0x8c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	37 d6       	rcall	.+3182   	; 0xcf6 <main>
      88:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
      8e:	08 95       	ret

00000090 <RST>:
 /*
 * This function transmits a single byte to the terminal
 */
 void Sendmsg(char *data){
	 if(UCSRA & (1 << UDRE)) //if UDR is empty(no data transfer at the moment)
	 UDR = data;
      90:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <mt>
      94:	28 e0       	ldi	r18, 0x08	; 8
      96:	30 e0       	ldi	r19, 0x00	; 0
      98:	42 e0       	ldi	r20, 0x02	; 2
      9a:	10 c0       	rjmp	.+32     	; 0xbc <RST+0x2c>
      9c:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <M>
      a0:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <M+0x1>
      a4:	e8 0f       	add	r30, r24
      a6:	f9 1f       	adc	r31, r25
      a8:	40 83       	st	Z, r20
      aa:	01 96       	adiw	r24, 0x01	; 1
      ac:	82 17       	cp	r24, r18
      ae:	93 07       	cpc	r25, r19
      b0:	a9 f7       	brne	.-22     	; 0x9c <RST+0xc>
      b2:	28 5f       	subi	r18, 0xF8	; 248
      b4:	3f 4f       	sbci	r19, 0xFF	; 255
      b6:	28 34       	cpi	r18, 0x48	; 72
      b8:	31 05       	cpc	r19, r1
      ba:	19 f0       	breq	.+6      	; 0xc2 <RST+0x32>
      bc:	c9 01       	movw	r24, r18
      be:	08 97       	sbiw	r24, 0x08	; 8
      c0:	ed cf       	rjmp	.-38     	; 0x9c <RST+0xc>
      c2:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <M>
      c6:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <M+0x1>
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	83 8f       	std	Z+27, r24	; 0x1b
      ce:	14 8e       	std	Z+28, r1	; 0x1c
      d0:	13 a2       	std	Z+35, r1	; 0x23
      d2:	84 a3       	std	Z+36, r24	; 0x24
      d4:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <enemy_pass>
      d8:	08 95       	ret

000000da <CheckMove>:
      da:	2f 92       	push	r2
      dc:	3f 92       	push	r3
      de:	4f 92       	push	r4
      e0:	5f 92       	push	r5
      e2:	6f 92       	push	r6
      e4:	7f 92       	push	r7
      e6:	8f 92       	push	r8
      e8:	9f 92       	push	r9
      ea:	af 92       	push	r10
      ec:	bf 92       	push	r11
      ee:	cf 92       	push	r12
      f0:	df 92       	push	r13
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	2c 97       	sbiw	r28, 0x0c	; 12
     104:	0f b6       	in	r0, 0x3f	; 63
     106:	f8 94       	cli
     108:	de bf       	out	0x3e, r29	; 62
     10a:	0f be       	out	0x3f, r0	; 63
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	b6 2e       	mov	r11, r22
     110:	68 2e       	mov	r6, r24
     112:	71 2c       	mov	r7, r1
     114:	93 01       	movw	r18, r6
     116:	21 50       	subi	r18, 0x01	; 1
     118:	31 09       	sbc	r19, r1
     11a:	3a 83       	std	Y+2, r19	; 0x02
     11c:	29 83       	std	Y+1, r18	; 0x01
     11e:	23 01       	movw	r4, r6
     120:	2f ef       	ldi	r18, 0xFF	; 255
     122:	42 1a       	sub	r4, r18
     124:	52 0a       	sbc	r5, r18
     126:	29 81       	ldd	r18, Y+1	; 0x01
     128:	3a 81       	ldd	r19, Y+2	; 0x02
     12a:	42 16       	cp	r4, r18
     12c:	53 06       	cpc	r5, r19
     12e:	0c f4       	brge	.+2      	; 0x132 <CheckMove+0x58>
     130:	4e c1       	rjmp	.+668    	; 0x3ce <CheckMove+0x2f4>
     132:	26 2e       	mov	r2, r22
     134:	31 2c       	mov	r3, r1
     136:	93 01       	movw	r18, r6
     138:	22 0f       	add	r18, r18
     13a:	33 1f       	adc	r19, r19
     13c:	22 0f       	add	r18, r18
     13e:	33 1f       	adc	r19, r19
     140:	22 0f       	add	r18, r18
     142:	33 1f       	adc	r19, r19
     144:	b9 01       	movw	r22, r18
     146:	62 0d       	add	r22, r2
     148:	73 1d       	adc	r23, r3
     14a:	79 87       	std	Y+9, r23	; 0x09
     14c:	68 87       	std	Y+8, r22	; 0x08
     14e:	1d 82       	std	Y+5, r1	; 0x05
     150:	91 01       	movw	r18, r2
     152:	21 50       	subi	r18, 0x01	; 1
     154:	31 09       	sbc	r19, r1
     156:	3f 83       	std	Y+7, r19	; 0x07
     158:	2e 83       	std	Y+6, r18	; 0x06
     15a:	41 01       	movw	r8, r2
     15c:	3f ef       	ldi	r19, 0xFF	; 255
     15e:	83 1a       	sub	r8, r19
     160:	93 0a       	sbc	r9, r19
     162:	0f 2e       	mov	r0, r31
     164:	f7 e0       	ldi	r31, 0x07	; 7
     166:	af 2e       	mov	r10, r31
     168:	f0 2d       	mov	r31, r0
     16a:	3b 86       	std	Y+11, r3	; 0x0b
     16c:	2a 86       	std	Y+10, r2	; 0x0a
     16e:	38 2e       	mov	r3, r24
     170:	bc 86       	std	Y+12, r11	; 0x0c
     172:	b4 2e       	mov	r11, r20
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	9a 81       	ldd	r25, Y+2	; 0x02
     178:	99 23       	and	r25, r25
     17a:	0c f4       	brge	.+2      	; 0x17e <CheckMove+0xa4>
     17c:	1c c1       	rjmp	.+568    	; 0x3b6 <CheckMove+0x2dc>
     17e:	89 81       	ldd	r24, Y+1	; 0x01
     180:	9a 81       	ldd	r25, Y+2	; 0x02
     182:	08 97       	sbiw	r24, 0x08	; 8
     184:	0c f0       	brlt	.+2      	; 0x188 <CheckMove+0xae>
     186:	17 c1       	rjmp	.+558    	; 0x3b6 <CheckMove+0x2dc>
     188:	6e 81       	ldd	r22, Y+6	; 0x06
     18a:	7f 81       	ldd	r23, Y+7	; 0x07
     18c:	7c 83       	std	Y+4, r23	; 0x04
     18e:	6b 83       	std	Y+3, r22	; 0x03
     190:	8b 81       	ldd	r24, Y+3	; 0x03
     192:	9c 81       	ldd	r25, Y+4	; 0x04
     194:	88 16       	cp	r8, r24
     196:	99 06       	cpc	r9, r25
     198:	0c f4       	brge	.+2      	; 0x19c <CheckMove+0xc2>
     19a:	0d c1       	rjmp	.+538    	; 0x3b6 <CheckMove+0x2dc>
     19c:	2c 84       	ldd	r2, Y+12	; 0x0c
     19e:	8b 81       	ldd	r24, Y+3	; 0x03
     1a0:	9c 81       	ldd	r25, Y+4	; 0x04
     1a2:	99 23       	and	r25, r25
     1a4:	0c f4       	brge	.+2      	; 0x1a8 <CheckMove+0xce>
     1a6:	fc c0       	rjmp	.+504    	; 0x3a0 <CheckMove+0x2c6>
     1a8:	8b 81       	ldd	r24, Y+3	; 0x03
     1aa:	9c 81       	ldd	r25, Y+4	; 0x04
     1ac:	08 97       	sbiw	r24, 0x08	; 8
     1ae:	0c f0       	brlt	.+2      	; 0x1b2 <CheckMove+0xd8>
     1b0:	f7 c0       	rjmp	.+494    	; 0x3a0 <CheckMove+0x2c6>
     1b2:	40 91 92 01 	lds	r20, 0x0192	; 0x800192 <M>
     1b6:	50 91 93 01 	lds	r21, 0x0193	; 0x800193 <M+0x1>
     1ba:	e9 81       	ldd	r30, Y+1	; 0x01
     1bc:	fa 81       	ldd	r31, Y+2	; 0x02
     1be:	8b 81       	ldd	r24, Y+3	; 0x03
     1c0:	9c 81       	ldd	r25, Y+4	; 0x04
     1c2:	ee 0f       	add	r30, r30
     1c4:	ff 1f       	adc	r31, r31
     1c6:	ee 0f       	add	r30, r30
     1c8:	ff 1f       	adc	r31, r31
     1ca:	ee 0f       	add	r30, r30
     1cc:	ff 1f       	adc	r31, r31
     1ce:	e8 0f       	add	r30, r24
     1d0:	f9 1f       	adc	r31, r25
     1d2:	e4 0f       	add	r30, r20
     1d4:	f5 1f       	adc	r31, r21
     1d6:	80 81       	ld	r24, Z
     1d8:	8b 15       	cp	r24, r11
     1da:	09 f4       	brne	.+2      	; 0x1de <CheckMove+0x104>
     1dc:	e1 c0       	rjmp	.+450    	; 0x3a0 <CheckMove+0x2c6>
     1de:	e9 81       	ldd	r30, Y+1	; 0x01
     1e0:	fa 81       	ldd	r31, Y+2	; 0x02
     1e2:	8b 81       	ldd	r24, Y+3	; 0x03
     1e4:	9c 81       	ldd	r25, Y+4	; 0x04
     1e6:	ee 0f       	add	r30, r30
     1e8:	ff 1f       	adc	r31, r31
     1ea:	ee 0f       	add	r30, r30
     1ec:	ff 1f       	adc	r31, r31
     1ee:	ee 0f       	add	r30, r30
     1f0:	ff 1f       	adc	r31, r31
     1f2:	e8 0f       	add	r30, r24
     1f4:	f9 1f       	adc	r31, r25
     1f6:	e4 0f       	add	r30, r20
     1f8:	f5 1f       	adc	r31, r21
     1fa:	80 81       	ld	r24, Z
     1fc:	82 30       	cpi	r24, 0x02	; 2
     1fe:	09 f4       	brne	.+2      	; 0x202 <CheckMove+0x128>
     200:	cf c0       	rjmp	.+414    	; 0x3a0 <CheckMove+0x2c6>
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	9a 81       	ldd	r25, Y+2	; 0x02
     206:	68 16       	cp	r6, r24
     208:	79 06       	cpc	r7, r25
     20a:	3c f0       	brlt	.+14     	; 0x21a <CheckMove+0x140>
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	9a 81       	ldd	r25, Y+2	; 0x02
     210:	68 16       	cp	r6, r24
     212:	79 06       	cpc	r7, r25
     214:	21 f0       	breq	.+8      	; 0x21e <CheckMove+0x144>
     216:	f1 2c       	mov	r15, r1
     218:	06 c0       	rjmp	.+12     	; 0x226 <CheckMove+0x14c>
     21a:	fa 2c       	mov	r15, r10
     21c:	04 c0       	rjmp	.+8      	; 0x226 <CheckMove+0x14c>
     21e:	0f 2e       	mov	r0, r31
     220:	f9 e0       	ldi	r31, 0x09	; 9
     222:	ff 2e       	mov	r15, r31
     224:	f0 2d       	mov	r31, r0
     226:	8b 81       	ldd	r24, Y+3	; 0x03
     228:	9c 81       	ldd	r25, Y+4	; 0x04
     22a:	68 16       	cp	r6, r24
     22c:	79 06       	cpc	r7, r25
     22e:	4c f0       	brlt	.+18     	; 0x242 <CheckMove+0x168>
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	9c 81       	ldd	r25, Y+4	; 0x04
     234:	2a 85       	ldd	r18, Y+10	; 0x0a
     236:	3b 85       	ldd	r19, Y+11	; 0x0b
     238:	28 17       	cp	r18, r24
     23a:	39 07       	cpc	r19, r25
     23c:	21 f0       	breq	.+8      	; 0x246 <CheckMove+0x16c>
     23e:	e1 2c       	mov	r14, r1
     240:	06 c0       	rjmp	.+12     	; 0x24e <CheckMove+0x174>
     242:	ea 2c       	mov	r14, r10
     244:	04 c0       	rjmp	.+8      	; 0x24e <CheckMove+0x174>
     246:	0f 2e       	mov	r0, r31
     248:	f9 e0       	ldi	r31, 0x09	; 9
     24a:	ef 2e       	mov	r14, r31
     24c:	f0 2d       	mov	r31, r0
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	18 2f       	mov	r17, r24
     254:	13 19       	sub	r17, r3
     256:	8b 81       	ldd	r24, Y+3	; 0x03
     258:	9c 81       	ldd	r25, Y+4	; 0x04
     25a:	08 2f       	mov	r16, r24
     25c:	02 19       	sub	r16, r2
     25e:	29 81       	ldd	r18, Y+1	; 0x01
     260:	3a 81       	ldd	r19, Y+2	; 0x02
     262:	a2 2f       	mov	r26, r18
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	9c 81       	ldd	r25, Y+4	; 0x04
     268:	b8 2f       	mov	r27, r24
     26a:	33 27       	eor	r19, r19
     26c:	c1 2e       	mov	r12, r17
     26e:	d1 2c       	mov	r13, r1
     270:	cf 0c       	add	r12, r15
     272:	d1 1c       	adc	r13, r1
     274:	2c 15       	cp	r18, r12
     276:	3d 05       	cpc	r19, r13
     278:	09 f4       	brne	.+2      	; 0x27c <CheckMove+0x1a2>
     27a:	92 c0       	rjmp	.+292    	; 0x3a0 <CheckMove+0x2c6>
     27c:	99 27       	eor	r25, r25
     27e:	60 2f       	mov	r22, r16
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	6e 0d       	add	r22, r14
     284:	71 1d       	adc	r23, r1
     286:	86 17       	cp	r24, r22
     288:	97 07       	cpc	r25, r23
     28a:	09 f4       	brne	.+2      	; 0x28e <CheckMove+0x1b4>
     28c:	89 c0       	rjmp	.+274    	; 0x3a0 <CheckMove+0x2c6>
     28e:	22 0f       	add	r18, r18
     290:	33 1f       	adc	r19, r19
     292:	22 0f       	add	r18, r18
     294:	33 1f       	adc	r19, r19
     296:	22 0f       	add	r18, r18
     298:	33 1f       	adc	r19, r19
     29a:	82 0f       	add	r24, r18
     29c:	93 1f       	adc	r25, r19
     29e:	fa 01       	movw	r30, r20
     2a0:	e8 0f       	add	r30, r24
     2a2:	f9 1f       	adc	r31, r25
     2a4:	80 81       	ld	r24, Z
     2a6:	82 30       	cpi	r24, 0x02	; 2
     2a8:	09 f4       	brne	.+2      	; 0x2ac <CheckMove+0x1d2>
     2aa:	7a c0       	rjmp	.+244    	; 0x3a0 <CheckMove+0x2c6>
     2ac:	80 81       	ld	r24, Z
     2ae:	b8 12       	cpse	r11, r24
     2b0:	22 c0       	rjmp	.+68     	; 0x2f6 <CheckMove+0x21c>
     2b2:	11 c0       	rjmp	.+34     	; 0x2d6 <CheckMove+0x1fc>
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	e8 0f       	add	r30, r24
     2c2:	f9 1f       	adc	r31, r25
     2c4:	e4 0f       	add	r30, r20
     2c6:	f5 1f       	adc	r31, r21
     2c8:	80 81       	ld	r24, Z
     2ca:	82 30       	cpi	r24, 0x02	; 2
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <CheckMove+0x1f6>
     2ce:	68 c0       	rjmp	.+208    	; 0x3a0 <CheckMove+0x2c6>
     2d0:	80 81       	ld	r24, Z
     2d2:	b8 12       	cpse	r11, r24
     2d4:	10 c0       	rjmp	.+32     	; 0x2f6 <CheckMove+0x21c>
     2d6:	e8 85       	ldd	r30, Y+8	; 0x08
     2d8:	f9 85       	ldd	r31, Y+9	; 0x09
     2da:	e4 0f       	add	r30, r20
     2dc:	f5 1f       	adc	r31, r21
     2de:	b0 82       	st	Z, r11
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	9a 81       	ldd	r25, Y+2	; 0x02
     2e4:	48 2f       	mov	r20, r24
     2e6:	2b 81       	ldd	r18, Y+3	; 0x03
     2e8:	3c 81       	ldd	r19, Y+4	; 0x04
     2ea:	52 2f       	mov	r21, r18
     2ec:	f8 12       	cpse	r15, r24
     2ee:	11 c0       	rjmp	.+34     	; 0x312 <CheckMove+0x238>
     2f0:	31 e0       	ldi	r19, 0x01	; 1
     2f2:	3d 83       	std	Y+5, r19	; 0x05
     2f4:	55 c0       	rjmp	.+170    	; 0x3a0 <CheckMove+0x2c6>
     2f6:	b0 0f       	add	r27, r16
     2f8:	a1 0f       	add	r26, r17
     2fa:	8a 2f       	mov	r24, r26
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	8c 15       	cp	r24, r12
     300:	9d 05       	cpc	r25, r13
     302:	09 f4       	brne	.+2      	; 0x306 <CheckMove+0x22c>
     304:	4d c0       	rjmp	.+154    	; 0x3a0 <CheckMove+0x2c6>
     306:	eb 2f       	mov	r30, r27
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	e6 17       	cp	r30, r22
     30c:	f7 07       	cpc	r31, r23
     30e:	91 f6       	brne	.-92     	; 0x2b4 <CheckMove+0x1da>
     310:	47 c0       	rjmp	.+142    	; 0x3a0 <CheckMove+0x2c6>
     312:	e2 16       	cp	r14, r18
     314:	a1 f1       	breq	.+104    	; 0x37e <CheckMove+0x2a4>
     316:	99 27       	eor	r25, r25
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	82 0f       	add	r24, r18
     326:	91 1d       	adc	r25, r1
     328:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <M>
     32c:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <M+0x1>
     330:	f9 01       	movw	r30, r18
     332:	e8 0f       	add	r30, r24
     334:	f9 1f       	adc	r31, r25
     336:	80 81       	ld	r24, Z
     338:	82 30       	cpi	r24, 0x02	; 2
     33a:	21 f1       	breq	.+72     	; 0x384 <CheckMove+0x2aa>
     33c:	80 81       	ld	r24, Z
     33e:	b8 12       	cpse	r11, r24
     340:	14 c0       	rjmp	.+40     	; 0x36a <CheckMove+0x290>
     342:	23 c0       	rjmp	.+70     	; 0x38a <CheckMove+0x2b0>
     344:	e5 2f       	mov	r30, r21
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	68 e0       	ldi	r22, 0x08	; 8
     34a:	46 9f       	mul	r20, r22
     34c:	e0 0d       	add	r30, r0
     34e:	f1 1d       	adc	r31, r1
     350:	11 24       	eor	r1, r1
     352:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <M>
     356:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <M+0x1>
     35a:	e8 0f       	add	r30, r24
     35c:	f9 1f       	adc	r31, r25
     35e:	80 81       	ld	r24, Z
     360:	82 30       	cpi	r24, 0x02	; 2
     362:	b1 f0       	breq	.+44     	; 0x390 <CheckMove+0x2b6>
     364:	80 81       	ld	r24, Z
     366:	b8 16       	cp	r11, r24
     368:	b1 f0       	breq	.+44     	; 0x396 <CheckMove+0x2bc>
     36a:	b0 82       	st	Z, r11
     36c:	50 0f       	add	r21, r16
     36e:	41 0f       	add	r20, r17
     370:	f4 16       	cp	r15, r20
     372:	a1 f0       	breq	.+40     	; 0x39c <CheckMove+0x2c2>
     374:	e5 12       	cpse	r14, r21
     376:	e6 cf       	rjmp	.-52     	; 0x344 <CheckMove+0x26a>
     378:	71 e0       	ldi	r23, 0x01	; 1
     37a:	7d 83       	std	Y+5, r23	; 0x05
     37c:	11 c0       	rjmp	.+34     	; 0x3a0 <CheckMove+0x2c6>
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	8d 83       	std	Y+5, r24	; 0x05
     382:	0e c0       	rjmp	.+28     	; 0x3a0 <CheckMove+0x2c6>
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	9d 83       	std	Y+5, r25	; 0x05
     388:	0b c0       	rjmp	.+22     	; 0x3a0 <CheckMove+0x2c6>
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	2d 83       	std	Y+5, r18	; 0x05
     38e:	08 c0       	rjmp	.+16     	; 0x3a0 <CheckMove+0x2c6>
     390:	31 e0       	ldi	r19, 0x01	; 1
     392:	3d 83       	std	Y+5, r19	; 0x05
     394:	05 c0       	rjmp	.+10     	; 0x3a0 <CheckMove+0x2c6>
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	6d 83       	std	Y+5, r22	; 0x05
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <CheckMove+0x2c6>
     39c:	71 e0       	ldi	r23, 0x01	; 1
     39e:	7d 83       	std	Y+5, r23	; 0x05
     3a0:	8b 81       	ldd	r24, Y+3	; 0x03
     3a2:	9c 81       	ldd	r25, Y+4	; 0x04
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	9c 83       	std	Y+4, r25	; 0x04
     3a8:	8b 83       	std	Y+3, r24	; 0x03
     3aa:	8b 81       	ldd	r24, Y+3	; 0x03
     3ac:	9c 81       	ldd	r25, Y+4	; 0x04
     3ae:	88 16       	cp	r8, r24
     3b0:	99 06       	cpc	r9, r25
     3b2:	0c f0       	brlt	.+2      	; 0x3b6 <CheckMove+0x2dc>
     3b4:	f4 ce       	rjmp	.-536    	; 0x19e <CheckMove+0xc4>
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	9a 83       	std	Y+2, r25	; 0x02
     3be:	89 83       	std	Y+1, r24	; 0x01
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	9a 81       	ldd	r25, Y+2	; 0x02
     3c4:	48 16       	cp	r4, r24
     3c6:	59 06       	cpc	r5, r25
     3c8:	0c f0       	brlt	.+2      	; 0x3cc <CheckMove+0x2f2>
     3ca:	d4 ce       	rjmp	.-600    	; 0x174 <CheckMove+0x9a>
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <CheckMove+0x2f6>
     3ce:	1d 82       	std	Y+5, r1	; 0x05
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	9d 81       	ldd	r25, Y+5	; 0x05
     3d4:	91 30       	cpi	r25, 0x01	; 1
     3d6:	09 f0       	breq	.+2      	; 0x3da <CheckMove+0x300>
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	2c 96       	adiw	r28, 0x0c	; 12
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	df 90       	pop	r13
     3f4:	cf 90       	pop	r12
     3f6:	bf 90       	pop	r11
     3f8:	af 90       	pop	r10
     3fa:	9f 90       	pop	r9
     3fc:	8f 90       	pop	r8
     3fe:	7f 90       	pop	r7
     400:	6f 90       	pop	r6
     402:	5f 90       	pop	r5
     404:	4f 90       	pop	r4
     406:	3f 90       	pop	r3
     408:	2f 90       	pop	r2
     40a:	08 95       	ret

0000040c <__vector_13>:
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <Transmit>:
 }


 // TRANSMIT function : transmits a string

 void Transmit(char data[],uint8_t x,uint8_t y){
     420:	9c 01       	movw	r18, r24
	 

	 for (uint8_t i = x ; i < y  ; i++ ){
     422:	64 17       	cp	r22, r20
     424:	50 f4       	brcc	.+20     	; 0x43a <Transmit+0x1a>
		 while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
     426:	5d 9b       	sbis	0x0b, 5	; 11
     428:	fe cf       	rjmp	.-4      	; 0x426 <Transmit+0x6>
		 ;
		 UDR = data[i];
     42a:	f9 01       	movw	r30, r18
     42c:	e6 0f       	add	r30, r22
     42e:	f1 1d       	adc	r31, r1
     430:	90 81       	ld	r25, Z
     432:	9c b9       	out	0x0c, r25	; 12
 // TRANSMIT function : transmits a string

 void Transmit(char data[],uint8_t x,uint8_t y){
	 

	 for (uint8_t i = x ; i < y  ; i++ ){
     434:	6f 5f       	subi	r22, 0xFF	; 255
     436:	46 13       	cpse	r20, r22
     438:	f6 cf       	rjmp	.-20     	; 0x426 <Transmit+0x6>
     43a:	08 95       	ret

0000043c <Board>:
	return 0;	
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Visualization of the board
void Board(){
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	00 d0       	rcall	.+0      	; 0x450 <Board+0x14>
     450:	00 d0       	rcall	.+0      	; 0x452 <Board+0x16>
     452:	00 d0       	rcall	.+0      	; 0x454 <Board+0x18>
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
     458:	41 e0       	ldi	r20, 0x01	; 1
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	87 e6       	ldi	r24, 0x67	; 103
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	df df       	rcall	.-66     	; 0x420 <Transmit>
     462:	11 e3       	ldi	r17, 0x31	; 49
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
     464:	0f 2e       	mov	r0, r31
     466:	fc e7       	ldi	r31, 0x7C	; 124
     468:	ff 2e       	mov	r15, r31
     46a:	f0 2d       	mov	r31, r0
		mymove[1] = '\x20';
     46c:	00 e2       	ldi	r16, 0x20	; 32
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
     46e:	f9 82       	std	Y+1, r15	; 0x01
		mymove[1] = '\x20';
     470:	0a 83       	std	Y+2, r16	; 0x02
		mymove[2] = s1+1+'0';
     472:	1b 83       	std	Y+3, r17	; 0x03
		mymove[3] = '\x20';
     474:	0c 83       	std	Y+4, r16	; 0x04
		Transmit(mymove,0,4);
     476:	44 e0       	ldi	r20, 0x04	; 4
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	ce 01       	movw	r24, r28
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	d0 df       	rcall	.-96     	; 0x420 <Transmit>
     480:	1f 5f       	subi	r17, 0xFF	; 255
//Visualization of the board
void Board(){
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
     482:	19 33       	cpi	r17, 0x39	; 57
     484:	a1 f7       	brne	.-24     	; 0x46e <__stack+0xf>
     486:	00 e0       	ldi	r16, 0x00	; 0
     488:	10 e0       	ldi	r17, 0x00	; 0
     48a:	0f 2e       	mov	r0, r31
     48c:	f1 e4       	ldi	r31, 0x41	; 65
     48e:	bf 2e       	mov	r11, r31
     490:	f0 2d       	mov	r31, r0
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
     492:	0f 2e       	mov	r0, r31
     494:	fc e7       	ldi	r31, 0x7C	; 124
     496:	cf 2e       	mov	r12, r31
     498:	f0 2d       	mov	r31, r0
			mymove[1] = '\x20';
     49a:	68 94       	set
     49c:	dd 24       	eor	r13, r13
     49e:	d5 f8       	bld	r13, 5
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
     4a0:	42 e0       	ldi	r20, 0x02	; 2
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	89 e6       	ldi	r24, 0x69	; 105
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	bb df       	rcall	.-138    	; 0x420 <Transmit>
		mymove[0] = s1+65;
     4aa:	b9 82       	std	Y+1, r11	; 0x01
		Transmit(mymove,0,1);
     4ac:	41 e0       	ldi	r20, 0x01	; 1
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	ce 01       	movw	r24, r28
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	b5 df       	rcall	.-150    	; 0x420 <Transmit>
     4b6:	78 01       	movw	r14, r16
     4b8:	88 e0       	ldi	r24, 0x08	; 8
     4ba:	e8 0e       	add	r14, r24
     4bc:	f1 1c       	adc	r15, r1
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
     4be:	c9 82       	std	Y+1, r12	; 0x01
			mymove[1] = '\x20';
     4c0:	da 82       	std	Y+2, r13	; 0x02
			mymove[2] = M[s1*8 + s2]+'0';
     4c2:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <M>
     4c6:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <M+0x1>
     4ca:	e0 0f       	add	r30, r16
     4cc:	f1 1f       	adc	r31, r17
     4ce:	80 81       	ld	r24, Z
     4d0:	80 5d       	subi	r24, 0xD0	; 208
     4d2:	8b 83       	std	Y+3, r24	; 0x03
			mymove[3] = '\x20';
     4d4:	dc 82       	std	Y+4, r13	; 0x04
			Transmit(mymove,0,4);
     4d6:	44 e0       	ldi	r20, 0x04	; 4
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	ce 01       	movw	r24, r28
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	a0 df       	rcall	.-192    	; 0x420 <Transmit>
     4e0:	0f 5f       	subi	r16, 0xFF	; 255
     4e2:	1f 4f       	sbci	r17, 0xFF	; 255
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
     4e4:	0e 15       	cp	r16, r14
     4e6:	1f 05       	cpc	r17, r15
     4e8:	51 f7       	brne	.-44     	; 0x4be <__stack+0x5f>
     4ea:	b3 94       	inc	r11
     4ec:	87 01       	movw	r16, r14
		mymove[1] = '\x20';
		mymove[2] = s1+1+'0';
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
     4ee:	00 34       	cpi	r16, 0x40	; 64
     4f0:	11 05       	cpc	r17, r1
			mymove[2] = M[s1*8 + s2]+'0';
			mymove[3] = '\x20';
			Transmit(mymove,0,4);
		}
	}
	Transmit("\n\r",0,strlen("\n\r"));
     4f2:	b1 f6       	brne	.-84     	; 0x4a0 <__stack+0x41>
     4f4:	42 e0       	ldi	r20, 0x02	; 2
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	89 e6       	ldi	r24, 0x69	; 105
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	91 df       	rcall	.-222    	; 0x420 <Transmit>
}
     4fe:	26 96       	adiw	r28, 0x06	; 6
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	df 90       	pop	r13
     518:	cf 90       	pop	r12
     51a:	bf 90       	pop	r11
     51c:	08 95       	ret

0000051e <AnnounceRes>:


void AnnounceRes(uint8_t res)
{
	//after announcement, timer interrupts are disabled.
	TIMSK &= ~(1 << TOIE1) ;
     51e:	99 b7       	in	r25, 0x39	; 57
     520:	9b 7f       	andi	r25, 0xFB	; 251
     522:	99 bf       	out	0x39, r25	; 57
	if(res == 1)
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	51 f4       	brne	.+20     	; 0x53c <AnnounceRes+0x1e>
	{
		Transmit("WN\r",0,strlen("WN\r"));
     528:	43 e0       	ldi	r20, 0x03	; 3
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	8c e6       	ldi	r24, 0x6C	; 108
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	77 df       	rcall	.-274    	; 0x420 <Transmit>
		PORTB ^= (1<<PORTB1);             //Toggle LED
     532:	98 b3       	in	r25, 0x18	; 24
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	89 27       	eor	r24, r25
     538:	88 bb       	out	0x18, r24	; 24
     53a:	08 95       	ret
	}
	else if(res == 0)
     53c:	81 11       	cpse	r24, r1
     53e:	0a c0       	rjmp	.+20     	; 0x554 <AnnounceRes+0x36>
	{
		Transmit("LS\r",0,strlen("LS\r"));
     540:	43 e0       	ldi	r20, 0x03	; 3
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	80 e7       	ldi	r24, 0x70	; 112
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	6b df       	rcall	.-298    	; 0x420 <Transmit>
		PORTB ^= (1<<PORTB2);			//Toggle LED
     54a:	98 b3       	in	r25, 0x18	; 24
     54c:	84 e0       	ldi	r24, 0x04	; 4
     54e:	89 27       	eor	r24, r25
     550:	88 bb       	out	0x18, r24	; 24
     552:	08 95       	ret
	}
	else
	{
		Transmit("TE\r",0,strlen("TE\r"));
     554:	43 e0       	ldi	r20, 0x03	; 3
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	84 e7       	ldi	r24, 0x74	; 116
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	61 df       	rcall	.-318    	; 0x420 <Transmit>
		PORTB ^= (1<<PORTB3);			//Toggle LED
     55e:	98 b3       	in	r25, 0x18	; 24
     560:	88 e0       	ldi	r24, 0x08	; 8
     562:	89 27       	eor	r24, r25
     564:	88 bb       	out	0x18, r24	; 24
     566:	08 95       	ret

00000568 <EndGame>:

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
     568:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <M>
     56c:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <M+0x1>
     570:	bf 01       	movw	r22, r30
     572:	60 5c       	subi	r22, 0xC0	; 192
     574:	7f 4f       	sbci	r23, 0xFF	; 255
/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;
     576:	40 e0       	ldi	r20, 0x00	; 0

/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	11 c0       	rjmp	.+34     	; 0x59e <EndGame+0x36>

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
     57c:	df 01       	movw	r26, r30
     57e:	80 81       	ld	r24, Z
     580:	81 11       	cpse	r24, r1
     582:	01 c0       	rjmp	.+2      	; 0x586 <EndGame+0x1e>
			b++;
     584:	9f 5f       	subi	r25, 0xFF	; 255
			if(M[i*8 + y] == 1)
     586:	8c 91       	ld	r24, X
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	09 f4       	brne	.+2      	; 0x58e <EndGame+0x26>
			w++;
     58c:	4f 5f       	subi	r20, 0xFF	; 255
     58e:	31 96       	adiw	r30, 0x01	; 1
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
     590:	2e 17       	cp	r18, r30
     592:	3f 07       	cpc	r19, r31
     594:	99 f7       	brne	.-26     	; 0x57c <EndGame+0x14>
     596:	f9 01       	movw	r30, r18
//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
     598:	26 17       	cp	r18, r22
     59a:	37 07       	cpc	r19, r23
     59c:	21 f0       	breq	.+8      	; 0x5a6 <EndGame+0x3e>
     59e:	9f 01       	movw	r18, r30
     5a0:	28 5f       	subi	r18, 0xF8	; 248
     5a2:	3f 4f       	sbci	r19, 0xFF	; 255
     5a4:	eb cf       	rjmp	.-42     	; 0x57c <EndGame+0x14>
			b++;
			if(M[i*8 + y] == 1)
			w++;
		}
	}
	if(b == w)
     5a6:	94 13       	cpse	r25, r20
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <EndGame+0x48>
	{
		AnnounceRes(2);	//TIE -LED3
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	b8 df       	rcall	.-144    	; 0x51e <AnnounceRes>
     5ae:	14 c0       	rjmp	.+40     	; 0x5d8 <EndGame+0x70>

	}
	else if(b>w)
     5b0:	49 17       	cp	r20, r25
     5b2:	50 f4       	brcc	.+20     	; 0x5c8 <EndGame+0x60>
	{
		if(MyColor == 0) //black
     5b4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <MyColor>
     5b8:	81 11       	cpse	r24, r1
     5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <EndGame+0x5a>
		AnnounceRes(1);//WIN - LED1
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	af df       	rcall	.-162    	; 0x51e <AnnounceRes>
     5c0:	0b c0       	rjmp	.+22     	; 0x5d8 <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	ac df       	rcall	.-168    	; 0x51e <AnnounceRes>
     5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <EndGame+0x70>
     5c8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <MyColor>
	}
	else
	{
		if(MyColor == 1) //white
     5cc:	81 30       	cpi	r24, 0x01	; 1
     5ce:	11 f4       	brne	.+4      	; 0x5d4 <EndGame+0x6c>
		AnnounceRes(1);//WIN - LED1
     5d0:	a6 df       	rcall	.-180    	; 0x51e <AnnounceRes>
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	a3 df       	rcall	.-186    	; 0x51e <AnnounceRes>
     5d8:	82 e0       	ldi	r24, 0x02	; 2
	}

	//after announcement wait for ok in while loop(set move_done = 1)
	myTurn = 2;
     5da:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     5de:	08 95       	ret

000005e0 <__vector_8>:
     5e0:	1f 92       	push	r1
}



 ISR (TIMER1_OVF_vect)    // Timer1 ISR
 {
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	2f 93       	push	r18
     5ec:	3f 93       	push	r19
     5ee:	4f 93       	push	r20
     5f0:	5f 93       	push	r21
     5f2:	6f 93       	push	r22
     5f4:	7f 93       	push	r23
     5f6:	8f 93       	push	r24
     5f8:	9f 93       	push	r25
     5fa:	af 93       	push	r26
     5fc:	bf 93       	push	r27
     5fe:	ef 93       	push	r30
     600:	ff 93       	push	r31
	 if(myTurn==1){
     602:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	19 f4       	brne	.+6      	; 0x610 <__vector_8+0x30>
		 // coming soon 
		 //last sec MM will save the day..eventually.		 
		 myTurn =0;
     60a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
     60e:	0c c0       	rjmp	.+24     	; 0x628 <__vector_8+0x48>
		// move_done = 1;
	 } 
	 else if(myTurn == 0){
     610:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     614:	81 11       	cpse	r24, r1
     616:	08 c0       	rjmp	.+16     	; 0x628 <__vector_8+0x48>
		  Transmit("IT\r",0,strlen("IT\r"));
     618:	43 e0       	ldi	r20, 0x03	; 3
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	88 e7       	ldi	r24, 0x78	; 120
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	ff de       	rcall	.-514    	; 0x420 <Transmit>
		  ILflag=1;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
	 }	 
 }
     628:	ff 91       	pop	r31
     62a:	ef 91       	pop	r30
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	7f 91       	pop	r23
     636:	6f 91       	pop	r22
     638:	5f 91       	pop	r21
     63a:	4f 91       	pop	r20
     63c:	3f 91       	pop	r19
     63e:	2f 91       	pop	r18
     640:	0f 90       	pop	r0
     642:	0f be       	out	0x3f, r0	; 63
     644:	0f 90       	pop	r0
     646:	1f 90       	pop	r1
     648:	18 95       	reti

0000064a <init_leds>:

 //////////////////////////////////////////////// INITIALIZATION ///////////////////////////////////////////////////////////

 void init_leds()
 {
	DDRB |= (1<<DDB1);
     64a:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1<<DDB2);
     64c:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= (1<<DDB3);
     64e:	bb 9a       	sbi	0x17, 3	; 23
	PORTB |= (1<<PORTB1);
     650:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
     652:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
     654:	c3 9a       	sbi	0x18, 3	; 24
     656:	08 95       	ret

00000658 <init_timer>:

	 //////////Timer/Counter Initialization/////////
	 /* Timer starts from a specific value, 
		so we can take advantage of ISR
	 */
	TCNT1 = 3036;//2SECONDS // 34286;//49911  //2^16 = 65536 - (8,000,000/256) 
     658:	8c ed       	ldi	r24, 0xDC	; 220
     65a:	9b e0       	ldi	r25, 0x0B	; 11
     65c:	9d bd       	out	0x2d, r25	; 45
     65e:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00; //Default - Cleared
     660:	1f bc       	out	0x2f, r1	; 47

	/*	The CLK/64 
	*/
	//TCCR1B &=  ~(1<<CS11);  
	
	TCCR1B |=  (1<<CS12);// |(1<<CS10);
     662:	8e b5       	in	r24, 0x2e	; 46
     664:	84 60       	ori	r24, 0x04	; 4
     666:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
     668:	84 e0       	ldi	r24, 0x04	; 4
     66a:	89 bf       	out	0x39, r24	; 57
     66c:	08 95       	ret

0000066e <Algo>:



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
     66e:	2f 92       	push	r2
     670:	3f 92       	push	r3
     672:	4f 92       	push	r4
     674:	5f 92       	push	r5
     676:	6f 92       	push	r6
     678:	7f 92       	push	r7
     67a:	8f 92       	push	r8
     67c:	9f 92       	push	r9
     67e:	af 92       	push	r10
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	69 97       	sbiw	r28, 0x19	; 25
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
	uint8_t mi,my,i,j,u,z,ibar,ybar,skip,istep,ystep;
	myTurn = 1;		//Important - collision with  init_timer
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	3c 8b       	std	Y+20, r19	; 0x14
     6ae:	2b 8b       	std	Y+19, r18	; 0x13
     6b0:	1e 8a       	std	Y+22, r1	; 0x16
     6b2:	1d 8a       	std	Y+21, r1	; 0x15
	
	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns
	for(mi=0;mi<=7;mi++)
     6b4:	41 2c       	mov	r4, r1
     6b6:	4f 8a       	std	Y+23, r4	; 0x17
     6b8:	49 c1       	rjmp	.+658    	; 0x94c <Algo+0x2de>
	{
		for(my=0; my<=7; my++)
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
     6ba:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <M>
     6be:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <M+0x1>
     6c2:	89 89       	ldd	r24, Y+17	; 0x11
     6c4:	9a 89       	ldd	r25, Y+18	; 0x12
     6c6:	e8 0f       	add	r30, r24
     6c8:	f9 1f       	adc	r31, r25
     6ca:	90 81       	ld	r25, Z
     6cc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <MyColor>
     6d0:	98 13       	cpse	r25, r24
     6d2:	18 c1       	rjmp	.+560    	; 0x904 <Algo+0x296>
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
     6d4:	22 24       	eor	r2, r2
     6d6:	2a 94       	dec	r2
     6d8:	23 0c       	add	r2, r3
     6da:	c2 2c       	mov	r12, r2
     6dc:	d1 2c       	mov	r13, r1
     6de:	eb 89       	ldd	r30, Y+19	; 0x13
     6e0:	fc 89       	ldd	r31, Y+20	; 0x14
     6e2:	ec 15       	cp	r30, r12
     6e4:	fd 05       	cpc	r31, r13
     6e6:	0c f4       	brge	.+2      	; 0x6ea <Algo+0x7c>
     6e8:	0d c1       	rjmp	.+538    	; 0x904 <Algo+0x296>
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     6ea:	4d 84       	ldd	r4, Y+13	; 0x0d
     6ec:	5e 84       	ldd	r5, Y+14	; 0x0e
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
     6ee:	f7 e0       	ldi	r31, 0x07	; 7
     6f0:	f2 15       	cp	r31, r2
     6f2:	08 f4       	brcc	.+2      	; 0x6f6 <Algo+0x88>
     6f4:	fe c0       	rjmp	.+508    	; 0x8f2 <Algo+0x284>
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     6f6:	99 24       	eor	r9, r9
     6f8:	9a 94       	dec	r9
     6fa:	98 0c       	add	r9, r8
     6fc:	89 2d       	mov	r24, r9
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	2d 85       	ldd	r18, Y+13	; 0x0d
     702:	3e 85       	ldd	r19, Y+14	; 0x0e
     704:	28 17       	cp	r18, r24
     706:	39 07       	cpc	r19, r25
     708:	0c f4       	brge	.+2      	; 0x70c <Algo+0x9e>
     70a:	ef c0       	rjmp	.+478    	; 0x8ea <Algo+0x27c>
						if(j<0||j>7) //Matrix out of border protection 
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
     70c:	36 01       	movw	r6, r12
     70e:	66 0c       	add	r6, r6
     710:	77 1c       	adc	r7, r7
     712:	66 0c       	add	r6, r6
     714:	77 1c       	adc	r7, r7
     716:	66 0c       	add	r6, r6
     718:	77 1c       	adc	r7, r7


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     71a:	e2 2d       	mov	r30, r2
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	f8 87       	std	Y+8, r31	; 0x08
     720:	ef 83       	std	Y+7, r30	; 0x07
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	ee 0f       	add	r30, r30
     72c:	ff 1f       	adc	r31, r31
     72e:	fc 87       	std	Y+12, r31	; 0x0c
     730:	eb 87       	std	Y+11, r30	; 0x0b
							ybar = 10;
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
     732:	c2 2c       	mov	r12, r2
     734:	c3 18       	sub	r12, r3


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     736:	2c 2d       	mov	r18, r12
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	3a 87       	std	Y+10, r19	; 0x0a
     73c:	29 87       	std	Y+9, r18	; 0x09
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
					{
						if(j<0||j>7) //Matrix out of border protection 
     73e:	37 e0       	ldi	r19, 0x07	; 7
     740:	39 15       	cp	r19, r9
     742:	08 f4       	brcc	.+2      	; 0x746 <Algo+0xd8>
     744:	cb c0       	rjmp	.+406    	; 0x8dc <Algo+0x26e>
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
     746:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <M>
     74a:	70 91 93 01 	lds	r23, 0x0193	; 0x800193 <M+0x1>
     74e:	86 0d       	add	r24, r6
     750:	97 1d       	adc	r25, r7
     752:	fb 01       	movw	r30, r22
     754:	e8 0f       	add	r30, r24
     756:	f9 1f       	adc	r31, r25
     758:	20 81       	ld	r18, Z
     75a:	40 91 90 00 	lds	r20, 0x0090	; 0x800090 <MyColor>
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	41 11       	cpse	r20, r1
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	28 17       	cp	r18, r24
     76a:	39 07       	cpc	r19, r25
     76c:	09 f0       	breq	.+2      	; 0x770 <Algo+0x102>
     76e:	b6 c0       	rjmp	.+364    	; 0x8dc <Algo+0x26e>
						{

							//Setting up i barrier (board)
							if(i > mi)
     770:	32 14       	cp	r3, r2
     772:	20 f0       	brcs	.+8      	; 0x77c <Algo+0x10e>
							ibar = 7 ;
							else if(i == mi)
     774:	32 14       	cp	r3, r2
     776:	39 f0       	breq	.+14     	; 0x786 <Algo+0x118>
							ibar = 10;   //big enough, so the other axis will break while below
							else
							ibar = 0;
     778:	e1 2c       	mov	r14, r1
     77a:	09 c0       	rjmp	.+18     	; 0x78e <Algo+0x120>
						if((M[i*8 + j] == !MyColor))		
						{

							//Setting up i barrier (board)
							if(i > mi)
							ibar = 7 ;
     77c:	0f 2e       	mov	r0, r31
     77e:	f7 e0       	ldi	r31, 0x07	; 7
     780:	ef 2e       	mov	r14, r31
     782:	f0 2d       	mov	r31, r0
     784:	04 c0       	rjmp	.+8      	; 0x78e <Algo+0x120>
							else if(i == mi)
							ibar = 10;   //big enough, so the other axis will break while below
     786:	0f 2e       	mov	r0, r31
     788:	fa e0       	ldi	r31, 0x0A	; 10
     78a:	ef 2e       	mov	r14, r31
     78c:	f0 2d       	mov	r31, r0
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
     78e:	39 14       	cp	r3, r9
     790:	20 f0       	brcs	.+8      	; 0x79a <Algo+0x12c>
							ybar = 7;
							else if(j == my)
     792:	89 14       	cp	r8, r9
     794:	39 f0       	breq	.+14     	; 0x7a4 <Algo+0x136>
							ybar = 10;
							else
							ybar = 0;
     796:	d1 2c       	mov	r13, r1
     798:	09 c0       	rjmp	.+18     	; 0x7ac <Algo+0x13e>
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
							ybar = 7;
     79a:	0f 2e       	mov	r0, r31
     79c:	f7 e0       	ldi	r31, 0x07	; 7
     79e:	df 2e       	mov	r13, r31
     7a0:	f0 2d       	mov	r31, r0
     7a2:	04 c0       	rjmp	.+8      	; 0x7ac <Algo+0x13e>
							else if(j == my)
							ybar = 10;
     7a4:	0f 2e       	mov	r0, r31
     7a6:	fa e0       	ldi	r31, 0x0A	; 10
     7a8:	df 2e       	mov	r13, r31
     7aa:	f0 2d       	mov	r31, r0
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
							ystep = j - my;
     7ac:	f9 2c       	mov	r15, r9
     7ae:	f8 18       	sub	r15, r8


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     7b0:	a9 85       	ldd	r26, Y+9	; 0x09
     7b2:	ba 85       	ldd	r27, Y+10	; 0x0a
     7b4:	ae 0d       	add	r26, r14
     7b6:	b1 1d       	adc	r27, r1
     7b8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ba:	98 85       	ldd	r25, Y+8	; 0x08
     7bc:	8a 17       	cp	r24, r26
     7be:	9b 07       	cpc	r25, r27
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <Algo+0x156>
     7c2:	8c c0       	rjmp	.+280    	; 0x8dc <Algo+0x26e>
     7c4:	89 2d       	mov	r24, r9
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	ef 2d       	mov	r30, r15
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	9f 01       	movw	r18, r30
     7ce:	2d 0d       	add	r18, r13
     7d0:	31 1d       	adc	r19, r1
     7d2:	39 8f       	std	Y+25, r19	; 0x19
     7d4:	28 8f       	std	Y+24, r18	; 0x18
     7d6:	82 17       	cp	r24, r18
     7d8:	93 07       	cpc	r25, r19
     7da:	09 f4       	brne	.+2      	; 0x7de <Algo+0x170>
     7dc:	7f c0       	rjmp	.+254    	; 0x8dc <Algo+0x26e>
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
     7de:	ab 84       	ldd	r10, Y+11	; 0x0b
     7e0:	bc 84       	ldd	r11, Y+12	; 0x0c
     7e2:	a8 0e       	add	r10, r24
     7e4:	b9 1e       	adc	r11, r25
     7e6:	cb 01       	movw	r24, r22
     7e8:	8a 0d       	add	r24, r10
     7ea:	9b 1d       	adc	r25, r11
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 81       	ld	r18, Z
     7f0:	42 17       	cp	r20, r18
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <Algo+0x188>
     7f4:	73 c0       	rjmp	.+230    	; 0x8dc <Algo+0x26e>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
     7f6:	80 81       	ld	r24, Z
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	b1 f0       	breq	.+44     	; 0x828 <Algo+0x1ba>
     7fc:	09 2d       	mov	r16, r9
     7fe:	12 2d       	mov	r17, r2
     800:	26 c0       	rjmp	.+76     	; 0x84e <Algo+0x1e0>
							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	82 0f       	add	r24, r18
     810:	93 1f       	adc	r25, r19
     812:	86 0f       	add	r24, r22
     814:	97 1f       	adc	r25, r23
     816:	fc 01       	movw	r30, r24
     818:	20 81       	ld	r18, Z
     81a:	42 17       	cp	r20, r18
     81c:	09 f4       	brne	.+2      	; 0x820 <Algo+0x1b2>
     81e:	5e c0       	rjmp	.+188    	; 0x8dc <Algo+0x26e>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
     820:	80 81       	ld	r24, Z
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	a1 f4       	brne	.+40     	; 0x84e <Algo+0x1e0>
     826:	02 c0       	rjmp	.+4      	; 0x82c <Algo+0x1be>
     828:	09 2d       	mov	r16, r9
     82a:	12 2d       	mov	r17, r2
									skip = 0;
									CheckMove(u, z, MyColor);  //Coloring adjacent paths, according to the rules
     82c:	60 2f       	mov	r22, r16
     82e:	81 2f       	mov	r24, r17
     830:	54 dc       	rcall	.-1880   	; 0xda <CheckMove>
									//Building message
									mymove[0] = 'M';
     832:	fd e4       	ldi	r31, 0x4D	; 77
     834:	f9 83       	std	Y+1, r31	; 0x01
									mymove[1] = 'M';
     836:	fa 83       	std	Y+2, r31	; 0x02
									mymove[2] = '\x20';
     838:	20 e2       	ldi	r18, 0x20	; 32
     83a:	2b 83       	std	Y+3, r18	; 0x03
									mymove[3] = u+65;
     83c:	1f 5b       	subi	r17, 0xBF	; 191
     83e:	1c 83       	std	Y+4, r17	; 0x04
									mymove[4] = (z+1)+'0';
     840:	0f 5c       	subi	r16, 0xCF	; 207
     842:	0d 83       	std	Y+5, r16	; 0x05
									mymove[5] = '\r';
     844:	3d e0       	ldi	r19, 0x0D	; 13
     846:	3e 83       	std	Y+6, r19	; 0x06
							if(!skip) 
							{
								u=i;
								z=j;
								//Same iteration, this time we color the path
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     848:	e2 10       	cpse	r14, r2
     84a:	11 c0       	rjmp	.+34     	; 0x86e <Algo+0x200>
     84c:	3a c0       	rjmp	.+116    	; 0x8c2 <Algo+0x254>
									mymove[5] = '\r';
										
									break;
								}

								z+= ystep;
     84e:	0f 0d       	add	r16, r15
								u+= istep;
     850:	1c 0d       	add	r17, r12


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     852:	81 2f       	mov	r24, r17
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	8a 17       	cp	r24, r26
     858:	9b 07       	cpc	r25, r27
     85a:	09 f4       	brne	.+2      	; 0x85e <Algo+0x1f0>
     85c:	3f c0       	rjmp	.+126    	; 0x8dc <Algo+0x26e>
     85e:	20 2f       	mov	r18, r16
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	e8 8d       	ldd	r30, Y+24	; 0x18
     864:	f9 8d       	ldd	r31, Y+25	; 0x19
     866:	2e 17       	cp	r18, r30
     868:	3f 07       	cpc	r19, r31
     86a:	59 f6       	brne	.-106    	; 0x802 <Algo+0x194>
     86c:	37 c0       	rjmp	.+110    	; 0x8dc <Algo+0x26e>
							if(!skip) 
							{
								u=i;
								z=j;
								//Same iteration, this time we color the path
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     86e:	d9 14       	cp	r13, r9
     870:	41 f1       	breq	.+80     	; 0x8c2 <Algo+0x254>
								{
									if(M[u*8 + z] == MyColor )
     872:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <M>
     876:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <M+0x1>
     87a:	fc 01       	movw	r30, r24
     87c:	ea 0d       	add	r30, r10
     87e:	fb 1d       	adc	r31, r11
     880:	90 81       	ld	r25, Z
     882:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <MyColor>
     886:	98 17       	cp	r25, r24
     888:	e1 f0       	breq	.+56     	; 0x8c2 <Algo+0x254>
     88a:	39 2d       	mov	r19, r9
     88c:	22 2d       	mov	r18, r2
     88e:	12 c0       	rjmp	.+36     	; 0x8b4 <Algo+0x246>
     890:	e3 2f       	mov	r30, r19
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	88 e0       	ldi	r24, 0x08	; 8
     896:	28 9f       	mul	r18, r24
     898:	e0 0d       	add	r30, r0
     89a:	f1 1d       	adc	r31, r1
     89c:	11 24       	eor	r1, r1
     89e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <M>
     8a2:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <M+0x1>
     8a6:	e8 0f       	add	r30, r24
     8a8:	f9 1f       	adc	r31, r25
     8aa:	90 81       	ld	r25, Z
     8ac:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <MyColor>
     8b0:	98 17       	cp	r25, r24
     8b2:	39 f0       	breq	.+14     	; 0x8c2 <Algo+0x254>
										break;
									M[u*8 + z] = MyColor;
     8b4:	80 83       	st	Z, r24
									
									z+= ystep;
     8b6:	3f 0d       	add	r19, r15
									u+= istep;
     8b8:	2c 0d       	add	r18, r12
							if(!skip) 
							{
								u=i;
								z=j;
								//Same iteration, this time we color the path
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     8ba:	e2 16       	cp	r14, r18
     8bc:	11 f0       	breq	.+4      	; 0x8c2 <Algo+0x254>
     8be:	d3 12       	cpse	r13, r19
     8c0:	e7 cf       	rjmp	.-50     	; 0x890 <Algo+0x222>
									
									z+= ystep;
									u+= istep;
								}
								
								move_done=1;
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <move_done>
								Board(); //Board Visualization
     8c8:	b9 dd       	rcall	.-1166   	; 0x43c <Board>
								Transmit(mymove,0,6); //Transmit our Move
     8ca:	46 e0       	ldi	r20, 0x06	; 6
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	ce 01       	movw	r24, r28
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	a6 dd       	rcall	.-1204   	; 0x420 <Transmit>
								if(move_done)
     8d4:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <move_done>
     8d8:	81 11       	cpse	r24, r1
     8da:	48 c0       	rjmp	.+144    	; 0x96c <Algo+0x2fe>
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     8dc:	93 94       	inc	r9
     8de:	89 2d       	mov	r24, r9
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	48 16       	cp	r4, r24
     8e4:	59 06       	cpc	r5, r25
     8e6:	0c f0       	brlt	.+2      	; 0x8ea <Algo+0x27c>
     8e8:	2a cf       	rjmp	.-428    	; 0x73e <Algo+0xd0>
									break;
							}
							
						}//if check neighbors
					}//j for
					if(move_done)
     8ea:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <move_done>
     8ee:	81 11       	cpse	r24, r1
     8f0:	3d c0       	rjmp	.+122    	; 0x96c <Algo+0x2fe>
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
     8f2:	23 94       	inc	r2
     8f4:	c2 2c       	mov	r12, r2
     8f6:	d1 2c       	mov	r13, r1
     8f8:	ef 85       	ldd	r30, Y+15	; 0x0f
     8fa:	f8 89       	ldd	r31, Y+16	; 0x10
     8fc:	ec 15       	cp	r30, r12
     8fe:	fd 05       	cpc	r31, r13
     900:	0c f0       	brlt	.+2      	; 0x904 <Algo+0x296>
     902:	f5 ce       	rjmp	.-534    	; 0x6ee <Algo+0x80>
					}//j for
					if(move_done)
						break;
				}//i for
			}//if  (find our pawn)
			if(move_done)
     904:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <move_done>
     908:	81 11       	cpse	r24, r1
     90a:	30 c0       	rjmp	.+96     	; 0x96c <Algo+0x2fe>
	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns
	for(mi=0;mi<=7;mi++)
	{
		for(my=0; my<=7; my++)
     90c:	83 94       	inc	r8
     90e:	29 89       	ldd	r18, Y+17	; 0x11
     910:	3a 89       	ldd	r19, Y+18	; 0x12
     912:	2f 5f       	subi	r18, 0xFF	; 255
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	3a 8b       	std	Y+18, r19	; 0x12
     918:	29 8b       	std	Y+17, r18	; 0x11
     91a:	8d 85       	ldd	r24, Y+13	; 0x0d
     91c:	9e 85       	ldd	r25, Y+14	; 0x0e
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	9e 87       	std	Y+14, r25	; 0x0e
     922:	8d 87       	std	Y+13, r24	; 0x0d
     924:	98 e0       	ldi	r25, 0x08	; 8
     926:	89 12       	cpse	r8, r25
     928:	c8 ce       	rjmp	.-624    	; 0x6ba <Algo+0x4c>
	myTurn = 1;		//Important - collision with  init_timer
	
	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns
	for(mi=0;mi<=7;mi++)
     92a:	ef 89       	ldd	r30, Y+23	; 0x17
     92c:	ef 5f       	subi	r30, 0xFF	; 255
     92e:	ef 8b       	std	Y+23, r30	; 0x17
     930:	2d 89       	ldd	r18, Y+21	; 0x15
     932:	3e 89       	ldd	r19, Y+22	; 0x16
     934:	28 5f       	subi	r18, 0xF8	; 248
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	3e 8b       	std	Y+22, r19	; 0x16
     93a:	2d 8b       	std	Y+21, r18	; 0x15
     93c:	8b 89       	ldd	r24, Y+19	; 0x13
     93e:	9c 89       	ldd	r25, Y+20	; 0x14
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	9c 8b       	std	Y+20, r25	; 0x14
     944:	8b 8b       	std	Y+19, r24	; 0x13
     946:	20 34       	cpi	r18, 0x40	; 64
     948:	31 05       	cpc	r19, r1
     94a:	81 f0       	breq	.+32     	; 0x96c <Algo+0x2fe>



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
     94c:	ed 89       	ldd	r30, Y+21	; 0x15
     94e:	fe 89       	ldd	r31, Y+22	; 0x16
     950:	fa 8b       	std	Y+18, r31	; 0x12
     952:	e9 8b       	std	Y+17, r30	; 0x11
     954:	21 e0       	ldi	r18, 0x01	; 1
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	3e 87       	std	Y+14, r19	; 0x0e
     95a:	2d 87       	std	Y+13, r18	; 0x0d
     95c:	31 2c       	mov	r3, r1
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
     95e:	8b 89       	ldd	r24, Y+19	; 0x13
     960:	9c 89       	ldd	r25, Y+20	; 0x14
     962:	98 8b       	std	Y+16, r25	; 0x10
     964:	8f 87       	std	Y+15, r24	; 0x0f
     966:	83 2c       	mov	r8, r3
     968:	3f 88       	ldd	r3, Y+23	; 0x17
     96a:	a7 ce       	rjmp	.-690    	; 0x6ba <Algo+0x4c>
	

	//while loop until 'OK' response
	while(1)
	{		// Check_Input does not support "OK" response so we check it here
		if(move_done >= 1)
     96c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <move_done>
     970:	88 23       	and	r24, r24
     972:	19 f1       	breq	.+70     	; 0x9ba <Algo+0x34c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     974:	ef e1       	ldi	r30, 0x1F	; 31
     976:	fe e4       	ldi	r31, 0x4E	; 78
     978:	31 97       	sbiw	r30, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <Algo+0x30a>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <Algo+0x310>
     97e:	00 00       	nop
		{
			while(1)
			{
				_delay_ms(10);
				if(move_done == 2)
     980:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <move_done>
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	b1 f7       	brne	.-20     	; 0x974 <Algo+0x306>
				{ // we received the response we were waiting'
					move_done = 0;
     988:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <move_done>
					break;
				}
			}
			
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75) //Respone ok for our MM
     98c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <rxReadPos>
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	fc 01       	movw	r30, r24
     994:	ee 56       	subi	r30, 0x6E	; 110
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	20 81       	ld	r18, Z
     99a:	2f 34       	cpi	r18, 0x4F	; 79
     99c:	39 f7       	brne	.-50     	; 0x96c <Algo+0x2fe>
     99e:	fc 01       	movw	r30, r24
     9a0:	ee 56       	subi	r30, 0x6E	; 110
     9a2:	ff 4f       	sbci	r31, 0xFF	; 255
     9a4:	81 81       	ldd	r24, Z+1	; 0x01
     9a6:	8b 34       	cpi	r24, 0x4B	; 75
			{
				init_timer();
     9a8:	09 f7       	brne	.-62     	; 0x96c <Algo+0x2fe>
     9aa:	56 de       	rcall	.-852    	; 0x658 <init_timer>
				rxReadPos=rxWritePos;
     9ac:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <rxWritePos>
     9b0:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <rxReadPos>
				myTurn = 0;
     9b4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
				break;
     9b8:	0b c0       	rjmp	.+22     	; 0x9d0 <Algo+0x362>
			}//future update : else move_done=1 , wrong input avoidance
			
		}
		else if(move_done == 0)//No solution was found
		{
			if (enemy_pass == 1) //Enemy sent pass too
     9ba:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <enemy_pass>
     9be:	81 30       	cpi	r24, 0x01	; 1
			{
				EndGame();		//Go count pawns and announce the winner
     9c0:	11 f4       	brne	.+4      	; 0x9c6 <Algo+0x358>
     9c2:	d2 dd       	rcall	.-1116   	; 0x568 <EndGame>
				break;
			}
			else
			{
				Transmit("MP\r",0,strlen("MP\r")); //Transmit MYPASS
     9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <Algo+0x362>
     9c6:	43 e0       	ldi	r20, 0x03	; 3
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	8c e7       	ldi	r24, 0x7C	; 124
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	28 dd       	rcall	.-1456   	; 0x420 <Transmit>
				break;
			}
		}
	}
	
}
     9d0:	69 96       	adiw	r28, 0x19	; 25
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	9f 90       	pop	r9
     9f2:	8f 90       	pop	r8
     9f4:	7f 90       	pop	r7
     9f6:	6f 90       	pop	r6
     9f8:	5f 90       	pop	r5
     9fa:	4f 90       	pop	r4
     9fc:	3f 90       	pop	r3
     9fe:	2f 90       	pop	r2
     a00:	08 95       	ret

00000a02 <Check_Input>:



///////////////////////////////////////////////////////////////////////////////////////////   CHECK_INPUT    /////////////////////////////////////////////////////////////////////////////////////////

void Check_Input(char data[]){
     a02:	9c 01       	movw	r18, r24
	
		if(data[rxReadPos]==CR[0]){
     a04:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <rxReadPos>
     a08:	40 91 8c 00 	lds	r20, 0x008C	; 0x80008c <CR>
     a0c:	f9 01       	movw	r30, r18
     a0e:	e9 0f       	add	r30, r25
     a10:	f1 1d       	adc	r31, r1
     a12:	80 81       	ld	r24, Z
     a14:	84 13       	cpse	r24, r20
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <Check_Input+0x1c>
			rxReadPos++;
     a18:	9f 5f       	subi	r25, 0xFF	; 255
     a1a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <rxReadPos>
		//flag = 0;
		//Space_num = 0;
		

		//ILFlag will help us spot "OK" or "PL" terminal answer
		if(ILflag == 1)
     a1e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	21 f4       	brne	.+8      	; 0xa2e <Check_Input+0x2c>
		{
			ILflag=2;  //answer spotted, you can proceed.
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
			return;	
     a2c:	08 95       	ret
		}
		
		//it will help to spot "OK"  terminal answer
		if(move_done == 1)
     a2e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <move_done>
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	21 f4       	brne	.+8      	; 0xa3e <Check_Input+0x3c>
		{	
			move_done=2; //answer spotted, you can proceed.
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <move_done>
			return;	
     a3c:	08 95       	ret
     a3e:	b9 01       	movw	r22, r18
	


		//process
		// command AT
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
     a40:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <rxReadPos>
     a44:	29 2f       	mov	r18, r25
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	fb 01       	movw	r30, r22
     a4a:	e2 0f       	add	r30, r18
     a4c:	f3 1f       	adc	r31, r19
     a4e:	90 81       	ld	r25, Z
     a50:	91 34       	cpi	r25, 0x41	; 65
     a52:	99 f4       	brne	.+38     	; 0xa7a <Check_Input+0x78>
     a54:	fb 01       	movw	r30, r22
     a56:	e2 0f       	add	r30, r18
     a58:	f3 1f       	adc	r31, r19
     a5a:	91 81       	ldd	r25, Z+1	; 0x01
     a5c:	94 35       	cpi	r25, 0x54	; 84
     a5e:	09 f0       	breq	.+2      	; 0xa62 <Check_Input+0x60>
     a60:	f1 c0       	rjmp	.+482    	; 0xc44 <Check_Input+0x242>
		{
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			if(data[rxReadPos+2] == CR[0]){
     a62:	fb 01       	movw	r30, r22
     a64:	e2 0f       	add	r30, r18
     a66:	f3 1f       	adc	r31, r19
     a68:	82 81       	ldd	r24, Z+2	; 0x02
     a6a:	48 13       	cpse	r20, r24
     a6c:	eb c0       	rjmp	.+470    	; 0xc44 <Check_Input+0x242>
				Transmit("OK\r",0 , strlen("OK\r"));
     a6e:	43 e0       	ldi	r20, 0x03	; 3
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	80 e8       	ldi	r24, 0x80	; 128
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	d4 dc       	rcall	.-1624   	; 0x420 <Transmit>
     a78:	e5 c0       	rjmp	.+458    	; 0xc44 <Check_Input+0x242>
				rxReadPos = rxWritePos;
			}

		}
		//Checking for RST<CR> command.
		else if((data[rxReadPos] == 82)&&(data[rxReadPos + 1] == 83)&&(data[rxReadPos + 2] == 84))		
     a7a:	92 35       	cpi	r25, 0x52	; 82
     a7c:	11 f5       	brne	.+68     	; 0xac2 <Check_Input+0xc0>
     a7e:	fb 01       	movw	r30, r22
     a80:	e2 0f       	add	r30, r18
     a82:	f3 1f       	adc	r31, r19
     a84:	91 81       	ldd	r25, Z+1	; 0x01
     a86:	93 35       	cpi	r25, 0x53	; 83
     a88:	09 f0       	breq	.+2      	; 0xa8c <Check_Input+0x8a>
     a8a:	dc c0       	rjmp	.+440    	; 0xc44 <Check_Input+0x242>
     a8c:	fb 01       	movw	r30, r22
     a8e:	e2 0f       	add	r30, r18
     a90:	f3 1f       	adc	r31, r19
     a92:	82 81       	ldd	r24, Z+2	; 0x02
     a94:	84 35       	cpi	r24, 0x54	; 84
     a96:	09 f0       	breq	.+2      	; 0xa9a <Check_Input+0x98>
     a98:	d5 c0       	rjmp	.+426    	; 0xc44 <Check_Input+0x242>
		{
			ILflag =0;
     a9a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
			move_done=0;
     a9e:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <move_done>
			myTurn=2;
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			PORTB |= (1<<PORTB1);
     aa8:	c1 9a       	sbi	0x18, 1	; 24
			PORTB |= (1<<PORTB2);
     aaa:	c2 9a       	sbi	0x18, 2	; 24
			PORTB |= (1<<PORTB3);
			RST();
     aac:	c3 9a       	sbi	0x18, 3	; 24
     aae:	f0 da       	rcall	.-2592   	; 0x90 <RST>
			TCCR1B = 0x00;         //Clearing timer -- total reset
     ab0:	1e bc       	out	0x2e, r1	; 46
			TIMSK = (1 << TOIE1) ; //Overflow interrupts -- disabled
     ab2:	84 e0       	ldi	r24, 0x04	; 4
     ab4:	89 bf       	out	0x39, r24	; 57
			Transmit("OK\r",0 , strlen("OK\r"));
     ab6:	43 e0       	ldi	r20, 0x03	; 3
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	80 e8       	ldi	r24, 0x80	; 128
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	b0 dc       	rcall	.-1696   	; 0x420 <Transmit>
			rxReadPos = rxWritePos; 
     ac0:	c1 c0       	rjmp	.+386    	; 0xc44 <Check_Input+0x242>
			//
		}	
		// SP<SPACE>{B/W}<CR>
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 80))
     ac2:	93 35       	cpi	r25, 0x53	; 83
     ac4:	d9 f4       	brne	.+54     	; 0xafc <Check_Input+0xfa>
     ac6:	fb 01       	movw	r30, r22
     ac8:	e2 0f       	add	r30, r18
     aca:	f3 1f       	adc	r31, r19
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	90 35       	cpi	r25, 0x50	; 80
     ad0:	09 f0       	breq	.+2      	; 0xad4 <Check_Input+0xd2>
     ad2:	41 c0       	rjmp	.+130    	; 0xb56 <Check_Input+0x154>
		{
			//(int)c - 65;
			if(data[rxReadPos + 3] == 66)		//B
     ad4:	fb 01       	movw	r30, r22
     ad6:	e2 0f       	add	r30, r18
     ad8:	f3 1f       	adc	r31, r19
     ada:	83 81       	ldd	r24, Z+3	; 0x03
     adc:	82 34       	cpi	r24, 0x42	; 66
     ade:	19 f4       	brne	.+6      	; 0xae6 <Check_Input+0xe4>
				MyColor = 0;					//Saving myColor
     ae0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <MyColor>
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <Check_Input+0xee>
			else if(data[rxReadPos + 3] == 87)  //W
     ae6:	87 35       	cpi	r24, 0x57	; 87
     ae8:	19 f4       	brne	.+6      	; 0xaf0 <Check_Input+0xee>
				MyColor = 1;					//Saving myColor
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <MyColor>
			Transmit("OK\r",0 , strlen("OK\r"));
     af0:	43 e0       	ldi	r20, 0x03	; 3
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	80 e8       	ldi	r24, 0x80	; 128
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	93 dc       	rcall	.-1754   	; 0x420 <Transmit>
			rxReadPos = rxWritePos;
     afa:	a4 c0       	rjmp	.+328    	; 0xc44 <Check_Input+0x242>
		}
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
     afc:	9e 34       	cpi	r25, 0x4E	; 78
     afe:	b9 f4       	brne	.+46     	; 0xb2e <Check_Input+0x12c>
     b00:	fb 01       	movw	r30, r22
     b02:	e2 0f       	add	r30, r18
     b04:	f3 1f       	adc	r31, r19
     b06:	81 81       	ldd	r24, Z+1	; 0x01
     b08:	87 34       	cpi	r24, 0x47	; 71
     b0a:	09 f0       	breq	.+2      	; 0xb0e <Check_Input+0x10c>
     b0c:	9b c0       	rjmp	.+310    	; 0xc44 <Check_Input+0x242>
		{
			
			if(MyColor == 0)// BLACK
     b0e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <MyColor>
     b12:	81 11       	cpse	r24, r1
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <Check_Input+0x11c>
				myTurn=1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <Check_Input+0x120>
			else           //WHITE
				myTurn=0;
     b1e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			
			Transmit("OK\r",0 , strlen("OK\r"));
     b22:	43 e0       	ldi	r20, 0x03	; 3
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	7a dc       	rcall	.-1804   	; 0x420 <Transmit>
			rxReadPos = rxWritePos;
     b2c:	8b c0       	rjmp	.+278    	; 0xc44 <Check_Input+0x242>
		}
		        //EG<CR>
		else if((data[rxReadPos] == 69)&&(data[rxReadPos + 1] == 71))
     b2e:	95 34       	cpi	r25, 0x45	; 69
     b30:	31 f5       	brne	.+76     	; 0xb7e <Check_Input+0x17c>
     b32:	fb 01       	movw	r30, r22
     b34:	e2 0f       	add	r30, r18
     b36:	f3 1f       	adc	r31, r19
     b38:	81 81       	ldd	r24, Z+1	; 0x01
     b3a:	87 34       	cpi	r24, 0x47	; 71
     b3c:	09 f0       	breq	.+2      	; 0xb40 <Check_Input+0x13e>
		{
			//EndGameFlag = 1; // check this flag during waiting/calculating loop
			Transmit("OK\r",0 , strlen("OK\r"));
     b3e:	82 c0       	rjmp	.+260    	; 0xc44 <Check_Input+0x242>
     b40:	43 e0       	ldi	r20, 0x03	; 3
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	80 e8       	ldi	r24, 0x80	; 128
     b46:	90 e0       	ldi	r25, 0x00	; 0
			rxReadPos = rxWritePos;
     b48:	6b dc       	rcall	.-1834   	; 0x420 <Transmit>
     b4a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <rxWritePos>
     b4e:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <rxReadPos>
			EndGame();
     b52:	0a dd       	rcall	.-1516   	; 0x568 <EndGame>
     b54:	77 c0       	rjmp	.+238    	; 0xc44 <Check_Input+0x242>
		}
			 //ST<CR>
        else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 84))
     b56:	fb 01       	movw	r30, r22
     b58:	e2 0f       	add	r30, r18
     b5a:	f3 1f       	adc	r31, r19
     b5c:	81 81       	ldd	r24, Z+1	; 0x01
     b5e:	84 35       	cpi	r24, 0x54	; 84
     b60:	09 f0       	breq	.+2      	; 0xb64 <Check_Input+0x162>
     b62:	70 c0       	rjmp	.+224    	; 0xc44 <Check_Input+0x242>
        {
			Time = data[rxReadPos+3] - '0';    //String to Int
     b64:	fb 01       	movw	r30, r22
     b66:	e2 0f       	add	r30, r18
     b68:	f3 1f       	adc	r31, r19
     b6a:	83 81       	ldd	r24, Z+3	; 0x03
     b6c:	80 53       	subi	r24, 0x30	; 48
     b6e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <Time>
			Transmit("OK\r",0 , strlen("OK\r"));
     b72:	43 e0       	ldi	r20, 0x03	; 3
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	52 dc       	rcall	.-1884   	; 0x420 <Transmit>
			rxReadPos = rxWritePos;
     b7c:	63 c0       	rjmp	.+198    	; 0xc44 <Check_Input+0x242>
        }
			//MV<SP>{[A-H],[1-8]}<CR>
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 86))
     b7e:	9d 34       	cpi	r25, 0x4D	; 77
     b80:	09 f0       	breq	.+2      	; 0xb84 <Check_Input+0x182>
     b82:	3b c0       	rjmp	.+118    	; 0xbfa <Check_Input+0x1f8>
     b84:	fb 01       	movw	r30, r22
     b86:	e2 0f       	add	r30, r18
     b88:	f3 1f       	adc	r31, r19
     b8a:	81 81       	ldd	r24, Z+1	; 0x01
     b8c:	86 35       	cpi	r24, 0x56	; 86
     b8e:	09 f0       	breq	.+2      	; 0xb92 <Check_Input+0x190>
     b90:	59 c0       	rjmp	.+178    	; 0xc44 <Check_Input+0x242>
		{
				if((data[rxReadPos+3] >= 65)&&(data[rxReadPos+3] <= 72)&&(data[rxReadPos+4] >= 49)&&(data[rxReadPos+4] <= 56))  // Checking input
     b92:	f9 01       	movw	r30, r18
     b94:	33 96       	adiw	r30, 0x03	; 3
     b96:	e6 0f       	add	r30, r22
     b98:	f7 1f       	adc	r31, r23
     b9a:	80 81       	ld	r24, Z
     b9c:	81 54       	subi	r24, 0x41	; 65
     b9e:	88 30       	cpi	r24, 0x08	; 8
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <Check_Input+0x1a2>
     ba2:	50 c0       	rjmp	.+160    	; 0xc44 <Check_Input+0x242>
     ba4:	2c 5f       	subi	r18, 0xFC	; 252
     ba6:	3f 4f       	sbci	r19, 0xFF	; 255
     ba8:	db 01       	movw	r26, r22
     baa:	a2 0f       	add	r26, r18
     bac:	b3 1f       	adc	r27, r19
     bae:	8c 91       	ld	r24, X
     bb0:	81 53       	subi	r24, 0x31	; 49
     bb2:	88 30       	cpi	r24, 0x08	; 8
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <Check_Input+0x1b6>
     bb6:	46 c0       	rjmp	.+140    	; 0xc44 <Check_Input+0x242>
				{
					enemy_pass = 0;
     bb8:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <enemy_pass>
					uint8_t moveok = CheckMove(((int)data[rxReadPos+3] - 65),((data[rxReadPos+4] - '0') - 1), !MyColor );  //Check opponents move.
     bbc:	41 e0       	ldi	r20, 0x01	; 1
     bbe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <MyColor>
     bc2:	81 11       	cpse	r24, r1
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	6c 91       	ld	r22, X
     bc8:	61 53       	subi	r22, 0x31	; 49
     bca:	80 81       	ld	r24, Z
     bcc:	81 54       	subi	r24, 0x41	; 65
					//If opponent's move is legal, send ok and reset timer, else 
					//send IL and wait for PC response, if response OK --> I win else(PL) --> I LOSE
					if(moveok == 1)		
     bce:	85 da       	rcall	.-2806   	; 0xda <CheckMove>
     bd0:	81 30       	cpi	r24, 0x01	; 1
					{
						// Saving opponent's move in my local game board
						//M[(((int)data[rxReadPos+3] - 65)*8) + (data[rxReadPos+4] - '0')] = !MyColor;  // Saving opponent's move in my local game board
						Transmit("OK\r",0 , strlen("OK\r"));
     bd2:	51 f4       	brne	.+20     	; 0xbe8 <Check_Input+0x1e6>
     bd4:	43 e0       	ldi	r20, 0x03	; 3
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	80 e8       	ldi	r24, 0x80	; 128
     bda:	90 e0       	ldi	r25, 0x00	; 0
						init_timer();
     bdc:	21 dc       	rcall	.-1982   	; 0x420 <Transmit>
     bde:	3c dd       	rcall	.-1416   	; 0x658 <init_timer>
						myTurn=1;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     be6:	2e c0       	rjmp	.+92     	; 0xc44 <Check_Input+0x242>
					}
					else{
						Transmit("IL\r",0 , strlen("IL\r"));
     be8:	43 e0       	ldi	r20, 0x03	; 3
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	84 e8       	ldi	r24, 0x84	; 132
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	17 dc       	rcall	.-2002   	; 0x420 <Transmit>
     bf2:	81 e0       	ldi	r24, 0x01	; 1
						ILflag =  1;							//Waiting mode for PC's response
     bf4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
     bf8:	25 c0       	rjmp	.+74     	; 0xc44 <Check_Input+0x242>
     bfa:	90 35       	cpi	r25, 0x50	; 80
						
				} 	
		}

		//PASS
		else if ((data[rxReadPos] == 80)&&(data[rxReadPos + 1] == 83))
     bfc:	89 f4       	brne	.+34     	; 0xc20 <Check_Input+0x21e>
     bfe:	fb 01       	movw	r30, r22
     c00:	e2 0f       	add	r30, r18
     c02:	f3 1f       	adc	r31, r19
     c04:	81 81       	ldd	r24, Z+1	; 0x01
     c06:	83 35       	cpi	r24, 0x53	; 83
     c08:	e9 f4       	brne	.+58     	; 0xc44 <Check_Input+0x242>
		{
			myTurn=1;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			//This flag will help us end game in case we pass after opponent's pass
			enemy_pass = 1;   
     c10:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <enemy_pass>
			Transmit("OK\r",0,strlen("OK\r"));
     c14:	43 e0       	ldi	r20, 0x03	; 3
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	80 e8       	ldi	r24, 0x80	; 128
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	01 dc       	rcall	.-2046   	; 0x420 <Transmit>
     c1e:	12 c0       	rjmp	.+36     	; 0xc44 <Check_Input+0x242>
		}
		//WN

		else if((data[rxReadPos] == 87)&&(data[rxReadPos + 1] == 78)){
     c20:	97 35       	cpi	r25, 0x57	; 87
     c22:	81 f4       	brne	.+32     	; 0xc44 <Check_Input+0x242>
     c24:	fb 01       	movw	r30, r22
     c26:	e2 0f       	add	r30, r18
     c28:	f3 1f       	adc	r31, r19
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	8e 34       	cpi	r24, 0x4E	; 78
			AnnounceRes(1);  //announce i win with led1
     c2e:	51 f4       	brne	.+20     	; 0xc44 <Check_Input+0x242>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	75 dc       	rcall	.-1814   	; 0x51e <AnnounceRes>
			myTurn=2;			
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			Transmit("OK\r",0,strlen("OK\r"));
     c3a:	43 e0       	ldi	r20, 0x03	; 3
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	80 e8       	ldi	r24, 0x80	; 128
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	ee db       	rcall	.-2084   	; 0x420 <Transmit>
     c44:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <rxWritePos>
		}
		else
			NULL;
	rxReadPos=rxWritePos;		
	rxReadPos++;		//Ready for the next command (directs to the next letter, the one after <CR>) 
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <rxReadPos>
     c4e:	08 95       	ret

00000c50 <__vector_11>:
     c50:	1f 92       	push	r1

//////////////////////////////////////////////////////////////////////////////////////////



ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	4f 93       	push	r20
     c60:	5f 93       	push	r21
     c62:	6f 93       	push	r22
     c64:	7f 93       	push	r23
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
     c6e:	ef 93       	push	r30
     c70:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
     c72:	8c b1       	in	r24, 0x0c	; 12
     c74:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <rxWritePos>
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	ee 56       	subi	r30, 0x6E	; 110
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
     c80:	5d 9b       	sbis	0x0b, 5	; 11
     c82:	fe cf       	rjmp	.-4      	; 0xc80 <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
     c84:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
     c86:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <rxWritePos>
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	ee 56       	subi	r30, 0x6E	; 110
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	90 81       	ld	r25, Z
     c92:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <CR>
     c96:	98 13       	cpse	r25, r24
     c98:	03 c0       	rjmp	.+6      	; 0xca0 <__vector_11+0x50>
		Check_Input(myrxbuffer);
     c9a:	82 e9       	ldi	r24, 0x92	; 146
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	b1 de       	rcall	.-670    	; 0xa02 <Check_Input>


	rxWritePos++;
     ca0:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <rxWritePos>
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <rxWritePos>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
     caa:	ff 91       	pop	r31
     cac:	ef 91       	pop	r30
     cae:	bf 91       	pop	r27
     cb0:	af 91       	pop	r26
     cb2:	9f 91       	pop	r25
     cb4:	8f 91       	pop	r24
     cb6:	7f 91       	pop	r23
     cb8:	6f 91       	pop	r22
     cba:	5f 91       	pop	r21
     cbc:	4f 91       	pop	r20
     cbe:	3f 91       	pop	r19
     cc0:	2f 91       	pop	r18
     cc2:	0f 90       	pop	r0
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	0f 90       	pop	r0
     cc8:	1f 90       	pop	r1
     cca:	18 95       	reti

00000ccc <init_serial>:
}


void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
     ccc:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
     cce:	83 e3       	ldi	r24, 0x33	; 51
     cd0:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
     cd2:	80 b5       	in	r24, 0x20	; 32
     cd4:	8f 7e       	andi	r24, 0xEF	; 239
     cd6:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
     cd8:	80 b5       	in	r24, 0x20	; 32
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
     cde:	80 b5       	in	r24, 0x20	; 32
     ce0:	87 7f       	andi	r24, 0xF7	; 247
     ce2:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
     ce4:	86 e8       	ldi	r24, 0x86	; 134
     ce6:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
     ce8:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
     cea:	8a b1       	in	r24, 0x0a	; 10
     cec:	88 61       	ori	r24, 0x18	; 24
     cee:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
     cf0:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
     cf2:	57 9a       	sbi	0x0a, 7	; 10
     cf4:	08 95       	ret

00000cf6 <main>:
volatile uint8_t *M ;



int main (void)
{
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <main+0x6>
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
	board_init();
     d00:	c6 d9       	rcall	.-3188   	; 0x8e <board_init>
	init_serial();
     d02:	e4 df       	rcall	.-56     	; 0xccc <init_serial>
	init_leds();
     d04:	a2 dc       	rcall	.-1724   	; 0x64a <init_leds>
     d06:	8d e0       	ldi	r24, 0x0D	; 13
	// delimiter carriage return
	strcpy(CR,"\xD");
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <enemy_pass>
     d0e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <CR>
     d12:	c1 9a       	sbi	0x18, 1	; 24

	//Turning off leds(atmega16)
	PORTB |= (1<<PORTB1); 
     d14:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB2);
     d16:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= (1<<PORTB3);
		

	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
     d18:	80 e4       	ldi	r24, 0x40	; 64
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9b d0       	rcall	.+310    	; 0xe54 <malloc>
     d1e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <M+0x1>
     d22:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <M>
     d26:	19 82       	std	Y+1, r1	; 0x01
	
	volatile uint8_t i=0;
     d28:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t y = 0 ;
     d2a:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0 ; i <= 7 ; i++)
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	88 30       	cpi	r24, 0x08	; 8
     d30:	00 f5       	brcc	.+64     	; 0xd72 <main+0x7c>
     d32:	22 e0       	ldi	r18, 0x02	; 2
	{
		for(y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     d34:	1a 82       	std	Y+2, r1	; 0x02
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	88 30       	cpi	r24, 0x08	; 8
     d3a:	a8 f4       	brcc	.+42     	; 0xd66 <main+0x70>
     d3c:	39 81       	ldd	r19, Y+1	; 0x01
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	48 e0       	ldi	r20, 0x08	; 8
     d44:	34 9f       	mul	r19, r20
     d46:	80 0d       	add	r24, r0
     d48:	91 1d       	adc	r25, r1
     d4a:	11 24       	eor	r1, r1
     d4c:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <M>
     d50:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <M+0x1>
     d54:	e8 0f       	add	r30, r24
     d56:	f9 1f       	adc	r31, r25
     d58:	20 83       	st	Z, r18
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	8a 83       	std	Y+2, r24	; 0x02
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	88 30       	cpi	r24, 0x08	; 8
     d64:	58 f3       	brcs	.-42     	; 0xd3c <main+0x46>
     d66:	89 81       	ldd	r24, Y+1	; 0x01
	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	88 30       	cpi	r24, 0x08	; 8
     d70:	08 f3       	brcs	.-62     	; 0xd34 <main+0x3e>
     d72:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <M>
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
	M[3*8+3] = 1 ;
     d76:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <M+0x1>
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	83 8f       	std	Z+27, r24	; 0x1b
     d7e:	14 8e       	std	Z+28, r1	; 0x1c
	M[3*8+4] = 0 ;
     d80:	13 a2       	std	Z+35, r1	; 0x23
	M[4*8+3] = 0 ;
     d82:	84 a3       	std	Z+36, r24	; 0x24
	M[4*8+4] = 1 ;
     d84:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <rxReadPos>

	//////////////////////////////////////////////////////////////////////
	

	//buffer pointers init
	rxReadPos=0;
     d88:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <rxWritePos>
	rxWritePos=0;
     d8c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
	//flag Initialization 
	ILflag =0;
     d90:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <move_done>
	move_done=0;
     d94:	92 e0       	ldi	r25, 0x02	; 2
	myTurn=2;
     d96:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <myTurn>
     d9a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <MyColor>
	MyColor = 1;
     d9e:	78 94       	sei
	
	sei();
     da0:	12 e0       	ldi	r17, 0x02	; 2
			
			}//future update : "else ILflag=1;" , wrong input avoidance

			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){ //"PL"
				AnnounceRes(0); //LOST - LED2								//WARNING: algo myturn=1 in case we want to continue playing
				myTurn=2;	
     da2:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
	
	
	while(1){
		
		//Waiting for PC response - (ILLIGAL request)
		if(ILflag >= 1)
     da6:	88 23       	and	r24, r24
     da8:	d1 f1       	breq	.+116    	; 0xe1e <main+0x128>
     daa:	8f e1       	ldi	r24, 0x1F	; 31
     dac:	9e e4       	ldi	r25, 0x4E	; 78
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <main+0xb8>
     db2:	00 c0       	rjmp	.+0      	; 0xdb4 <main+0xbe>
     db4:	00 00       	nop
     db6:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
		{
			//Transmit("Waiting OK for announcement\r",0,"Waiting OK for announcement\r");
			_delay_ms(10);
			while(1){		
				if(ILflag == 2){ // we received the response we were waiting
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <main+0xc0>
     dbe:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
					ILflag = 0;
     dc2:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <rxReadPos>
					break;
				}
			}
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75){ // "ok"
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	fc 01       	movw	r30, r24
     dca:	ee 56       	subi	r30, 0x6E	; 110
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	20 81       	ld	r18, Z
     dd0:	2f 34       	cpi	r18, 0x4F	; 79
     dd2:	71 f4       	brne	.+28     	; 0xdf0 <main+0xfa>
     dd4:	fc 01       	movw	r30, r24
     dd6:	ee 56       	subi	r30, 0x6E	; 110
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	81 81       	ldd	r24, Z+1	; 0x01
     ddc:	8b 34       	cpi	r24, 0x4B	; 75
     dde:	d9 f4       	brne	.+54     	; 0xe16 <main+0x120>
     de0:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <rxWritePos>
			   rxReadPos=rxWritePos;
     de4:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <rxReadPos>
				AnnounceRes(1); //WIN - LED1
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	99 db       	rcall	.-2254   	; 0x51e <AnnounceRes>
     dec:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
				myTurn=2;
     df0:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <rxReadPos>
				
			
			}//future update : "else ILflag=1;" , wrong input avoidance

			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){ //"PL"
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	fc 01       	movw	r30, r24
     df8:	ee 56       	subi	r30, 0x6E	; 110
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	20 81       	ld	r18, Z
     dfe:	20 35       	cpi	r18, 0x50	; 80
     e00:	51 f4       	brne	.+20     	; 0xe16 <main+0x120>
     e02:	fc 01       	movw	r30, r24
     e04:	ee 56       	subi	r30, 0x6E	; 110
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	81 81       	ldd	r24, Z+1	; 0x01
     e0a:	8c 34       	cpi	r24, 0x4C	; 76
     e0c:	21 f4       	brne	.+8      	; 0xe16 <main+0x120>
				AnnounceRes(0); //LOST - LED2								//WARNING: algo myturn=1 in case we want to continue playing
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	86 db       	rcall	.-2292   	; 0x51e <AnnounceRes>
     e12:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
				myTurn=2;	
     e16:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <rxWritePos>
			}	//future update : "else ILflag=1;" , wrong input avoidance		

			rxReadPos=rxWritePos;
     e1a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <rxReadPos>
     e1e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
		
		
		if((myTurn == 0)&&(mt == 0)){
     e22:	81 11       	cpse	r24, r1
     e24:	0a c0       	rjmp	.+20     	; 0xe3a <main+0x144>
     e26:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <mt>
     e2a:	81 11       	cpse	r24, r1
     e2c:	06 c0       	rjmp	.+12     	; 0xe3a <main+0x144>
			//Possible speculation algo
			mt = 1;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <mt>
			init_timer();
     e34:	11 dc       	rcall	.-2014   	; 0x658 <init_timer>
     e36:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			myTurn = 0;
     e3a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
			
		
		if(myTurn==1){ //When its avr's turn
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	09 f0       	breq	.+2      	; 0xe44 <main+0x14e>
     e42:	af cf       	rjmp	.-162    	; 0xda2 <main+0xac>
			mt = 0; //reset flag for HIS turn			
     e44:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <mt>
			init_timer(); //reset timer
     e48:	07 dc       	rcall	.-2034   	; 0x658 <init_timer>
     e4a:	81 e0       	ldi	r24, 0x01	; 1
			myTurn = 1;  //Important - collision with  init_timer
     e4c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     e50:	0e dc       	rcall	.-2020   	; 0x66e <Algo>
			Algo();		//The actual algorithm
     e52:	a7 cf       	rjmp	.-178    	; 0xda2 <main+0xac>

00000e54 <malloc>:
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	82 30       	cpi	r24, 0x02	; 2
     e5e:	91 05       	cpc	r25, r1
     e60:	10 f4       	brcc	.+4      	; 0xe66 <malloc+0x12>
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <__flp>
     e6a:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <__flp+0x1>
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	a0 e0       	ldi	r26, 0x00	; 0
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	30 97       	sbiw	r30, 0x00	; 0
     e78:	19 f1       	breq	.+70     	; 0xec0 <malloc+0x6c>
     e7a:	40 81       	ld	r20, Z
     e7c:	51 81       	ldd	r21, Z+1	; 0x01
     e7e:	02 81       	ldd	r16, Z+2	; 0x02
     e80:	13 81       	ldd	r17, Z+3	; 0x03
     e82:	48 17       	cp	r20, r24
     e84:	59 07       	cpc	r21, r25
     e86:	c8 f0       	brcs	.+50     	; 0xeba <malloc+0x66>
     e88:	84 17       	cp	r24, r20
     e8a:	95 07       	cpc	r25, r21
     e8c:	69 f4       	brne	.+26     	; 0xea8 <malloc+0x54>
     e8e:	10 97       	sbiw	r26, 0x00	; 0
     e90:	31 f0       	breq	.+12     	; 0xe9e <malloc+0x4a>
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	0c 93       	st	X, r16
     e96:	12 97       	sbiw	r26, 0x02	; 2
     e98:	13 96       	adiw	r26, 0x03	; 3
     e9a:	1c 93       	st	X, r17
     e9c:	27 c0       	rjmp	.+78     	; 0xeec <malloc+0x98>
     e9e:	00 93 97 01 	sts	0x0197, r16	; 0x800197 <__flp>
     ea2:	10 93 98 01 	sts	0x0198, r17	; 0x800198 <__flp+0x1>
     ea6:	22 c0       	rjmp	.+68     	; 0xeec <malloc+0x98>
     ea8:	21 15       	cp	r18, r1
     eaa:	31 05       	cpc	r19, r1
     eac:	19 f0       	breq	.+6      	; 0xeb4 <malloc+0x60>
     eae:	42 17       	cp	r20, r18
     eb0:	53 07       	cpc	r21, r19
     eb2:	18 f4       	brcc	.+6      	; 0xeba <malloc+0x66>
     eb4:	9a 01       	movw	r18, r20
     eb6:	bd 01       	movw	r22, r26
     eb8:	ef 01       	movw	r28, r30
     eba:	df 01       	movw	r26, r30
     ebc:	f8 01       	movw	r30, r16
     ebe:	db cf       	rjmp	.-74     	; 0xe76 <malloc+0x22>
     ec0:	21 15       	cp	r18, r1
     ec2:	31 05       	cpc	r19, r1
     ec4:	f9 f0       	breq	.+62     	; 0xf04 <malloc+0xb0>
     ec6:	28 1b       	sub	r18, r24
     ec8:	39 0b       	sbc	r19, r25
     eca:	24 30       	cpi	r18, 0x04	; 4
     ecc:	31 05       	cpc	r19, r1
     ece:	80 f4       	brcc	.+32     	; 0xef0 <malloc+0x9c>
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	9b 81       	ldd	r25, Y+3	; 0x03
     ed4:	61 15       	cp	r22, r1
     ed6:	71 05       	cpc	r23, r1
     ed8:	21 f0       	breq	.+8      	; 0xee2 <malloc+0x8e>
     eda:	fb 01       	movw	r30, r22
     edc:	93 83       	std	Z+3, r25	; 0x03
     ede:	82 83       	std	Z+2, r24	; 0x02
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <malloc+0x96>
     ee2:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <__flp+0x1>
     ee6:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <__flp>
     eea:	fe 01       	movw	r30, r28
     eec:	32 96       	adiw	r30, 0x02	; 2
     eee:	44 c0       	rjmp	.+136    	; 0xf78 <malloc+0x124>
     ef0:	fe 01       	movw	r30, r28
     ef2:	e2 0f       	add	r30, r18
     ef4:	f3 1f       	adc	r31, r19
     ef6:	81 93       	st	Z+, r24
     ef8:	91 93       	st	Z+, r25
     efa:	22 50       	subi	r18, 0x02	; 2
     efc:	31 09       	sbc	r19, r1
     efe:	39 83       	std	Y+1, r19	; 0x01
     f00:	28 83       	st	Y, r18
     f02:	3a c0       	rjmp	.+116    	; 0xf78 <malloc+0x124>
     f04:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
     f08:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
     f0c:	23 2b       	or	r18, r19
     f0e:	41 f4       	brne	.+16     	; 0xf20 <malloc+0xcc>
     f10:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
     f14:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     f18:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <__brkval+0x1>
     f1c:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <__brkval>
     f20:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     f24:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	41 f4       	brne	.+16     	; 0xf3e <malloc+0xea>
     f2e:	2d b7       	in	r18, 0x3d	; 61
     f30:	3e b7       	in	r19, 0x3e	; 62
     f32:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     f36:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     f3a:	24 1b       	sub	r18, r20
     f3c:	35 0b       	sbc	r19, r21
     f3e:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <__brkval>
     f42:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <__brkval+0x1>
     f46:	e2 17       	cp	r30, r18
     f48:	f3 07       	cpc	r31, r19
     f4a:	a0 f4       	brcc	.+40     	; 0xf74 <malloc+0x120>
     f4c:	2e 1b       	sub	r18, r30
     f4e:	3f 0b       	sbc	r19, r31
     f50:	28 17       	cp	r18, r24
     f52:	39 07       	cpc	r19, r25
     f54:	78 f0       	brcs	.+30     	; 0xf74 <malloc+0x120>
     f56:	ac 01       	movw	r20, r24
     f58:	4e 5f       	subi	r20, 0xFE	; 254
     f5a:	5f 4f       	sbci	r21, 0xFF	; 255
     f5c:	24 17       	cp	r18, r20
     f5e:	35 07       	cpc	r19, r21
     f60:	48 f0       	brcs	.+18     	; 0xf74 <malloc+0x120>
     f62:	4e 0f       	add	r20, r30
     f64:	5f 1f       	adc	r21, r31
     f66:	50 93 96 01 	sts	0x0196, r21	; 0x800196 <__brkval+0x1>
     f6a:	40 93 95 01 	sts	0x0195, r20	; 0x800195 <__brkval>
     f6e:	81 93       	st	Z+, r24
     f70:	91 93       	st	Z+, r25
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <malloc+0x124>
     f74:	e0 e0       	ldi	r30, 0x00	; 0
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	cf 01       	movw	r24, r30
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	08 95       	ret

00000f84 <free>:
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	09 f4       	brne	.+2      	; 0xf8e <free+0xa>
     f8c:	81 c0       	rjmp	.+258    	; 0x1090 <free+0x10c>
     f8e:	fc 01       	movw	r30, r24
     f90:	32 97       	sbiw	r30, 0x02	; 2
     f92:	13 82       	std	Z+3, r1	; 0x03
     f94:	12 82       	std	Z+2, r1	; 0x02
     f96:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <__flp>
     f9a:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <__flp+0x1>
     f9e:	10 97       	sbiw	r26, 0x00	; 0
     fa0:	81 f4       	brne	.+32     	; 0xfc2 <free+0x3e>
     fa2:	20 81       	ld	r18, Z
     fa4:	31 81       	ldd	r19, Z+1	; 0x01
     fa6:	82 0f       	add	r24, r18
     fa8:	93 1f       	adc	r25, r19
     faa:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
     fae:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
     fb2:	28 17       	cp	r18, r24
     fb4:	39 07       	cpc	r19, r25
     fb6:	51 f5       	brne	.+84     	; 0x100c <free+0x88>
     fb8:	f0 93 96 01 	sts	0x0196, r31	; 0x800196 <__brkval+0x1>
     fbc:	e0 93 95 01 	sts	0x0195, r30	; 0x800195 <__brkval>
     fc0:	67 c0       	rjmp	.+206    	; 0x1090 <free+0x10c>
     fc2:	ed 01       	movw	r28, r26
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	ce 17       	cp	r28, r30
     fca:	df 07       	cpc	r29, r31
     fcc:	40 f4       	brcc	.+16     	; 0xfde <free+0x5a>
     fce:	4a 81       	ldd	r20, Y+2	; 0x02
     fd0:	5b 81       	ldd	r21, Y+3	; 0x03
     fd2:	9e 01       	movw	r18, r28
     fd4:	41 15       	cp	r20, r1
     fd6:	51 05       	cpc	r21, r1
     fd8:	f1 f0       	breq	.+60     	; 0x1016 <free+0x92>
     fda:	ea 01       	movw	r28, r20
     fdc:	f5 cf       	rjmp	.-22     	; 0xfc8 <free+0x44>
     fde:	d3 83       	std	Z+3, r29	; 0x03
     fe0:	c2 83       	std	Z+2, r28	; 0x02
     fe2:	40 81       	ld	r20, Z
     fe4:	51 81       	ldd	r21, Z+1	; 0x01
     fe6:	84 0f       	add	r24, r20
     fe8:	95 1f       	adc	r25, r21
     fea:	c8 17       	cp	r28, r24
     fec:	d9 07       	cpc	r29, r25
     fee:	59 f4       	brne	.+22     	; 0x1006 <free+0x82>
     ff0:	88 81       	ld	r24, Y
     ff2:	99 81       	ldd	r25, Y+1	; 0x01
     ff4:	84 0f       	add	r24, r20
     ff6:	95 1f       	adc	r25, r21
     ff8:	02 96       	adiw	r24, 0x02	; 2
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	80 83       	st	Z, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	9b 81       	ldd	r25, Y+3	; 0x03
    1002:	93 83       	std	Z+3, r25	; 0x03
    1004:	82 83       	std	Z+2, r24	; 0x02
    1006:	21 15       	cp	r18, r1
    1008:	31 05       	cpc	r19, r1
    100a:	29 f4       	brne	.+10     	; 0x1016 <free+0x92>
    100c:	f0 93 98 01 	sts	0x0198, r31	; 0x800198 <__flp+0x1>
    1010:	e0 93 97 01 	sts	0x0197, r30	; 0x800197 <__flp>
    1014:	3d c0       	rjmp	.+122    	; 0x1090 <free+0x10c>
    1016:	e9 01       	movw	r28, r18
    1018:	fb 83       	std	Y+3, r31	; 0x03
    101a:	ea 83       	std	Y+2, r30	; 0x02
    101c:	49 91       	ld	r20, Y+
    101e:	59 91       	ld	r21, Y+
    1020:	c4 0f       	add	r28, r20
    1022:	d5 1f       	adc	r29, r21
    1024:	ec 17       	cp	r30, r28
    1026:	fd 07       	cpc	r31, r29
    1028:	61 f4       	brne	.+24     	; 0x1042 <free+0xbe>
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	84 0f       	add	r24, r20
    1030:	95 1f       	adc	r25, r21
    1032:	02 96       	adiw	r24, 0x02	; 2
    1034:	e9 01       	movw	r28, r18
    1036:	99 83       	std	Y+1, r25	; 0x01
    1038:	88 83       	st	Y, r24
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	9b 83       	std	Y+3, r25	; 0x03
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	e0 e0       	ldi	r30, 0x00	; 0
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	12 96       	adiw	r26, 0x02	; 2
    1048:	8d 91       	ld	r24, X+
    104a:	9c 91       	ld	r25, X
    104c:	13 97       	sbiw	r26, 0x03	; 3
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	19 f0       	breq	.+6      	; 0x1058 <free+0xd4>
    1052:	fd 01       	movw	r30, r26
    1054:	dc 01       	movw	r26, r24
    1056:	f7 cf       	rjmp	.-18     	; 0x1046 <free+0xc2>
    1058:	8d 91       	ld	r24, X+
    105a:	9c 91       	ld	r25, X
    105c:	11 97       	sbiw	r26, 0x01	; 1
    105e:	9d 01       	movw	r18, r26
    1060:	2e 5f       	subi	r18, 0xFE	; 254
    1062:	3f 4f       	sbci	r19, 0xFF	; 255
    1064:	82 0f       	add	r24, r18
    1066:	93 1f       	adc	r25, r19
    1068:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
    106c:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
    1070:	28 17       	cp	r18, r24
    1072:	39 07       	cpc	r19, r25
    1074:	69 f4       	brne	.+26     	; 0x1090 <free+0x10c>
    1076:	30 97       	sbiw	r30, 0x00	; 0
    1078:	29 f4       	brne	.+10     	; 0x1084 <free+0x100>
    107a:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <__flp+0x1>
    107e:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__flp>
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <free+0x104>
    1084:	13 82       	std	Z+3, r1	; 0x03
    1086:	12 82       	std	Z+2, r1	; 0x02
    1088:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <__brkval+0x1>
    108c:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <__brkval>
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <_exit>:
    1096:	f8 94       	cli

00001098 <__stop_program>:
    1098:	ff cf       	rjmp	.-2      	; 0x1098 <__stop_program>
