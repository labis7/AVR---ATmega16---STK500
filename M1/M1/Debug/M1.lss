
M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00001c6e  00001d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000122  008000cc  008000cc  00001d6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001da0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c2  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fd  00000000  00000000  0000356e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000198e  00000000  00000000  00003d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  000056fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fe8e  00000000  00000000  00005acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ae8  00000000  00000000  0001595a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00017442  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  00017522  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
       6:	00 00       	nop
       8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
       a:	00 00       	nop
       c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
       e:	00 00       	nop
      10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
      12:	00 00       	nop
      14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
      16:	00 00       	nop
      18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_8>
      24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
      26:	00 00       	nop
      28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__vector_11>
      30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
      32:	00 00       	nop
      34:	c2 c6       	rjmp	.+3460   	; 0xdba <__vector_13>
      36:	00 00       	nop
      38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
      3e:	00 00       	nop
      40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
      42:	00 00       	nop
      44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
      46:	00 00       	nop
      48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
      4e:	00 00       	nop
      50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3e       	cpi	r26, 0xEE	; 238
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 0c 	call	0x188a	; 0x188a <main>
      8a:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <_exit>

0000008e <__bad_interrupt>:
      8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
      90:	08 95       	ret

00000092 <checkmove_sim>:
 /*
 * This function transmits a single byte to the terminal
 */
 void Sendmsg(char *data){
	 if(UCSRA & (1 << UDRE)) //if UDR is empty(no data transfer at the moment)
	 UDR = data;
      92:	2f 92       	push	r2
      94:	3f 92       	push	r3
      96:	4f 92       	push	r4
      98:	5f 92       	push	r5
      9a:	6f 92       	push	r6
      9c:	7f 92       	push	r7
      9e:	8f 92       	push	r8
      a0:	9f 92       	push	r9
      a2:	af 92       	push	r10
      a4:	bf 92       	push	r11
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	0f 93       	push	r16
      b0:	1f 93       	push	r17
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	2e 97       	sbiw	r28, 0x0e	; 14
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61
      c6:	88 2e       	mov	r8, r24
      c8:	96 2e       	mov	r9, r22
      ca:	2d 83       	std	Y+5, r18	; 0x05
      cc:	48 2e       	mov	r4, r24
      ce:	51 2c       	mov	r5, r1
      d0:	c2 01       	movw	r24, r4
      d2:	01 97       	sbiw	r24, 0x01	; 1
      d4:	9a 83       	std	Y+2, r25	; 0x02
      d6:	89 83       	std	Y+1, r24	; 0x01
      d8:	32 01       	movw	r6, r4
      da:	2f ef       	ldi	r18, 0xFF	; 255
      dc:	62 1a       	sub	r6, r18
      de:	72 0a       	sbc	r7, r18
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	9a 81       	ldd	r25, Y+2	; 0x02
      e4:	68 16       	cp	r6, r24
      e6:	79 06       	cpc	r7, r25
      e8:	0c f4       	brge	.+2      	; 0xec <checkmove_sim+0x5a>
      ea:	ee c1       	rjmp	.+988    	; 0x4c8 <__stack+0x69>
      ec:	26 2e       	mov	r2, r22
      ee:	31 2c       	mov	r3, r1
      f0:	c2 01       	movw	r24, r4
      f2:	88 0f       	add	r24, r24
      f4:	99 1f       	adc	r25, r25
      f6:	88 0f       	add	r24, r24
      f8:	99 1f       	adc	r25, r25
      fa:	88 0f       	add	r24, r24
      fc:	99 1f       	adc	r25, r25
      fe:	dc 01       	movw	r26, r24
     100:	a2 0d       	add	r26, r2
     102:	b3 1d       	adc	r27, r3
     104:	bb 87       	std	Y+11, r27	; 0x0b
     106:	aa 87       	std	Y+10, r26	; 0x0a
     108:	c1 2c       	mov	r12, r1
     10a:	1e 86       	std	Y+14, r1	; 0x0e
     10c:	f1 01       	movw	r30, r2
     10e:	31 97       	sbiw	r30, 0x01	; 1
     110:	ff 83       	std	Y+7, r31	; 0x07
     112:	ee 83       	std	Y+6, r30	; 0x06
     114:	51 01       	movw	r10, r2
     116:	ff ef       	ldi	r31, 0xFF	; 255
     118:	af 1a       	sub	r10, r31
     11a:	bf 0a       	sbc	r11, r31
     11c:	39 86       	std	Y+9, r3	; 0x09
     11e:	28 86       	std	Y+8, r2	; 0x08
     120:	38 2c       	mov	r3, r8
     122:	8c 2c       	mov	r8, r12
     124:	26 2e       	mov	r2, r22
     126:	94 2e       	mov	r9, r20
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	9a 81       	ldd	r25, Y+2	; 0x02
     12c:	99 23       	and	r25, r25
     12e:	0c f4       	brge	.+2      	; 0x132 <checkmove_sim+0xa0>
     130:	bc c1       	rjmp	.+888    	; 0x4aa <__stack+0x4b>
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	9a 81       	ldd	r25, Y+2	; 0x02
     136:	08 97       	sbiw	r24, 0x08	; 8
     138:	0c f0       	brlt	.+2      	; 0x13c <checkmove_sim+0xaa>
     13a:	b7 c1       	rjmp	.+878    	; 0x4aa <__stack+0x4b>
     13c:	ce 80       	ldd	r12, Y+6	; 0x06
     13e:	df 80       	ldd	r13, Y+7	; 0x07
     140:	dc 82       	std	Y+4, r13	; 0x04
     142:	cb 82       	std	Y+3, r12	; 0x03
     144:	8b 81       	ldd	r24, Y+3	; 0x03
     146:	9c 81       	ldd	r25, Y+4	; 0x04
     148:	a8 16       	cp	r10, r24
     14a:	b9 06       	cpc	r11, r25
     14c:	0c f4       	brge	.+2      	; 0x150 <checkmove_sim+0xbe>
     14e:	ad c1       	rjmp	.+858    	; 0x4aa <__stack+0x4b>
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	9c 81       	ldd	r25, Y+4	; 0x04
     154:	99 23       	and	r25, r25
     156:	0c f4       	brge	.+2      	; 0x15a <checkmove_sim+0xc8>
     158:	9d c1       	rjmp	.+826    	; 0x494 <__stack+0x35>
     15a:	8b 81       	ldd	r24, Y+3	; 0x03
     15c:	9c 81       	ldd	r25, Y+4	; 0x04
     15e:	08 97       	sbiw	r24, 0x08	; 8
     160:	0c f0       	brlt	.+2      	; 0x164 <checkmove_sim+0xd2>
     162:	98 c1       	rjmp	.+816    	; 0x494 <__stack+0x35>
     164:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <M>
     168:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <M+0x1>
     16c:	e9 81       	ldd	r30, Y+1	; 0x01
     16e:	fa 81       	ldd	r31, Y+2	; 0x02
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	9c 81       	ldd	r25, Y+4	; 0x04
     174:	ee 0f       	add	r30, r30
     176:	ff 1f       	adc	r31, r31
     178:	ee 0f       	add	r30, r30
     17a:	ff 1f       	adc	r31, r31
     17c:	ee 0f       	add	r30, r30
     17e:	ff 1f       	adc	r31, r31
     180:	e8 0f       	add	r30, r24
     182:	f9 1f       	adc	r31, r25
     184:	e6 0f       	add	r30, r22
     186:	f7 1f       	adc	r31, r23
     188:	80 81       	ld	r24, Z
     18a:	89 15       	cp	r24, r9
     18c:	09 f4       	brne	.+2      	; 0x190 <checkmove_sim+0xfe>
     18e:	82 c1       	rjmp	.+772    	; 0x494 <__stack+0x35>
     190:	e9 81       	ldd	r30, Y+1	; 0x01
     192:	fa 81       	ldd	r31, Y+2	; 0x02
     194:	8b 81       	ldd	r24, Y+3	; 0x03
     196:	9c 81       	ldd	r25, Y+4	; 0x04
     198:	ee 0f       	add	r30, r30
     19a:	ff 1f       	adc	r31, r31
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	ee 0f       	add	r30, r30
     1a2:	ff 1f       	adc	r31, r31
     1a4:	e8 0f       	add	r30, r24
     1a6:	f9 1f       	adc	r31, r25
     1a8:	e6 0f       	add	r30, r22
     1aa:	f7 1f       	adc	r31, r23
     1ac:	80 81       	ld	r24, Z
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	08 f0       	brcs	.+2      	; 0x1b4 <checkmove_sim+0x122>
     1b2:	70 c1       	rjmp	.+736    	; 0x494 <__stack+0x35>
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	9a 81       	ldd	r25, Y+2	; 0x02
     1b8:	48 16       	cp	r4, r24
     1ba:	59 06       	cpc	r5, r25
     1bc:	3c f0       	brlt	.+14     	; 0x1cc <checkmove_sim+0x13a>
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	9a 81       	ldd	r25, Y+2	; 0x02
     1c2:	48 16       	cp	r4, r24
     1c4:	59 06       	cpc	r5, r25
     1c6:	39 f0       	breq	.+14     	; 0x1d6 <checkmove_sim+0x144>
     1c8:	f1 2c       	mov	r15, r1
     1ca:	09 c0       	rjmp	.+18     	; 0x1de <checkmove_sim+0x14c>
     1cc:	0f 2e       	mov	r0, r31
     1ce:	f7 e0       	ldi	r31, 0x07	; 7
     1d0:	ff 2e       	mov	r15, r31
     1d2:	f0 2d       	mov	r31, r0
     1d4:	04 c0       	rjmp	.+8      	; 0x1de <checkmove_sim+0x14c>
     1d6:	0f 2e       	mov	r0, r31
     1d8:	f9 e0       	ldi	r31, 0x09	; 9
     1da:	ff 2e       	mov	r15, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	9c 81       	ldd	r25, Y+4	; 0x04
     1e2:	48 16       	cp	r4, r24
     1e4:	59 06       	cpc	r5, r25
     1e6:	4c f0       	brlt	.+18     	; 0x1fa <checkmove_sim+0x168>
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	9c 81       	ldd	r25, Y+4	; 0x04
     1ec:	28 85       	ldd	r18, Y+8	; 0x08
     1ee:	39 85       	ldd	r19, Y+9	; 0x09
     1f0:	28 17       	cp	r18, r24
     1f2:	39 07       	cpc	r19, r25
     1f4:	39 f0       	breq	.+14     	; 0x204 <checkmove_sim+0x172>
     1f6:	e1 2c       	mov	r14, r1
     1f8:	09 c0       	rjmp	.+18     	; 0x20c <checkmove_sim+0x17a>
     1fa:	0f 2e       	mov	r0, r31
     1fc:	f7 e0       	ldi	r31, 0x07	; 7
     1fe:	ef 2e       	mov	r14, r31
     200:	f0 2d       	mov	r31, r0
     202:	04 c0       	rjmp	.+8      	; 0x20c <checkmove_sim+0x17a>
     204:	0f 2e       	mov	r0, r31
     206:	f9 e0       	ldi	r31, 0x09	; 9
     208:	ef 2e       	mov	r14, r31
     20a:	f0 2d       	mov	r31, r0
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	9a 81       	ldd	r25, Y+2	; 0x02
     210:	18 2f       	mov	r17, r24
     212:	13 19       	sub	r17, r3
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	9c 81       	ldd	r25, Y+4	; 0x04
     218:	08 2f       	mov	r16, r24
     21a:	02 19       	sub	r16, r2
     21c:	29 81       	ldd	r18, Y+1	; 0x01
     21e:	3a 81       	ldd	r19, Y+2	; 0x02
     220:	42 2f       	mov	r20, r18
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	9c 81       	ldd	r25, Y+4	; 0x04
     226:	58 2f       	mov	r21, r24
     228:	ad 81       	ldd	r26, Y+5	; 0x05
     22a:	aa 23       	and	r26, r26
     22c:	41 f1       	breq	.+80     	; 0x27e <checkmove_sim+0x1ec>
     22e:	33 27       	eor	r19, r19
     230:	e1 2f       	mov	r30, r17
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	ef 0d       	add	r30, r15
     236:	f1 1d       	adc	r31, r1
     238:	2e 17       	cp	r18, r30
     23a:	3f 07       	cpc	r19, r31
     23c:	09 f4       	brne	.+2      	; 0x240 <checkmove_sim+0x1ae>
     23e:	2a c1       	rjmp	.+596    	; 0x494 <__stack+0x35>
     240:	99 27       	eor	r25, r25
     242:	a0 2f       	mov	r26, r16
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	6d 01       	movw	r12, r26
     248:	ce 0c       	add	r12, r14
     24a:	d1 1c       	adc	r13, r1
     24c:	dd 86       	std	Y+13, r13	; 0x0d
     24e:	cc 86       	std	Y+12, r12	; 0x0c
     250:	8c 15       	cp	r24, r12
     252:	9d 05       	cpc	r25, r13
     254:	09 f4       	brne	.+2      	; 0x258 <checkmove_sim+0x1c6>
     256:	1e c1       	rjmp	.+572    	; 0x494 <__stack+0x35>
     258:	22 0f       	add	r18, r18
     25a:	33 1f       	adc	r19, r19
     25c:	22 0f       	add	r18, r18
     25e:	33 1f       	adc	r19, r19
     260:	22 0f       	add	r18, r18
     262:	33 1f       	adc	r19, r19
     264:	82 0f       	add	r24, r18
     266:	93 1f       	adc	r25, r19
     268:	86 0f       	add	r24, r22
     26a:	97 1f       	adc	r25, r23
     26c:	dc 01       	movw	r26, r24
     26e:	2c 91       	ld	r18, X
     270:	22 30       	cpi	r18, 0x02	; 2
     272:	08 f0       	brcs	.+2      	; 0x276 <checkmove_sim+0x1e4>
     274:	0f c1       	rjmp	.+542    	; 0x494 <__stack+0x35>
     276:	8c 91       	ld	r24, X
     278:	98 12       	cpse	r9, r24
     27a:	a2 c0       	rjmp	.+324    	; 0x3c0 <checkmove_sim+0x32e>
     27c:	91 c0       	rjmp	.+290    	; 0x3a0 <checkmove_sim+0x30e>
     27e:	33 27       	eor	r19, r19
     280:	a1 2f       	mov	r26, r17
     282:	b0 e0       	ldi	r27, 0x00	; 0
     284:	af 0d       	add	r26, r15
     286:	b1 1d       	adc	r27, r1
     288:	2a 17       	cp	r18, r26
     28a:	3b 07       	cpc	r19, r27
     28c:	09 f4       	brne	.+2      	; 0x290 <checkmove_sim+0x1fe>
     28e:	02 c1       	rjmp	.+516    	; 0x494 <__stack+0x35>
     290:	99 27       	eor	r25, r25
     292:	e0 2f       	mov	r30, r16
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	6f 01       	movw	r12, r30
     298:	ce 0c       	add	r12, r14
     29a:	d1 1c       	adc	r13, r1
     29c:	dd 86       	std	Y+13, r13	; 0x0d
     29e:	cc 86       	std	Y+12, r12	; 0x0c
     2a0:	8c 15       	cp	r24, r12
     2a2:	9d 05       	cpc	r25, r13
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <checkmove_sim+0x216>
     2a6:	f6 c0       	rjmp	.+492    	; 0x494 <__stack+0x35>
     2a8:	22 0f       	add	r18, r18
     2aa:	33 1f       	adc	r19, r19
     2ac:	22 0f       	add	r18, r18
     2ae:	33 1f       	adc	r19, r19
     2b0:	22 0f       	add	r18, r18
     2b2:	33 1f       	adc	r19, r19
     2b4:	82 0f       	add	r24, r18
     2b6:	93 1f       	adc	r25, r19
     2b8:	86 0f       	add	r24, r22
     2ba:	97 1f       	adc	r25, r23
     2bc:	fc 01       	movw	r30, r24
     2be:	20 81       	ld	r18, Z
     2c0:	22 30       	cpi	r18, 0x02	; 2
     2c2:	08 f0       	brcs	.+2      	; 0x2c6 <checkmove_sim+0x234>
     2c4:	e7 c0       	rjmp	.+462    	; 0x494 <__stack+0x35>
     2c6:	80 81       	ld	r24, Z
     2c8:	98 12       	cpse	r9, r24
     2ca:	15 c0       	rjmp	.+42     	; 0x2f6 <checkmove_sim+0x264>
     2cc:	5e c1       	rjmp	.+700    	; 0x58a <__stack+0x12b>
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	82 0f       	add	r24, r18
     2dc:	93 1f       	adc	r25, r19
     2de:	86 0f       	add	r24, r22
     2e0:	97 1f       	adc	r25, r23
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 81       	ld	r18, Z
     2e6:	22 30       	cpi	r18, 0x02	; 2
     2e8:	08 f0       	brcs	.+2      	; 0x2ec <checkmove_sim+0x25a>
     2ea:	d4 c0       	rjmp	.+424    	; 0x494 <__stack+0x35>
     2ec:	80 81       	ld	r24, Z
     2ee:	98 16       	cp	r9, r24
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <checkmove_sim+0x262>
     2f2:	4b c1       	rjmp	.+662    	; 0x58a <__stack+0x12b>
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <checkmove_sim+0x268>
     2f6:	cc 84       	ldd	r12, Y+12	; 0x0c
     2f8:	dd 84       	ldd	r13, Y+13	; 0x0d
     2fa:	50 0f       	add	r21, r16
     2fc:	41 0f       	add	r20, r17
     2fe:	84 2f       	mov	r24, r20
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	8a 17       	cp	r24, r26
     304:	9b 07       	cpc	r25, r27
     306:	09 f4       	brne	.+2      	; 0x30a <checkmove_sim+0x278>
     308:	c5 c0       	rjmp	.+394    	; 0x494 <__stack+0x35>
     30a:	25 2f       	mov	r18, r21
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	2c 15       	cp	r18, r12
     310:	3d 05       	cpc	r19, r13
     312:	e9 f6       	brne	.-70     	; 0x2ce <checkmove_sim+0x23c>
     314:	bf c0       	rjmp	.+382    	; 0x494 <__stack+0x35>
     316:	e9 16       	cp	r14, r25
     318:	09 f4       	brne	.+2      	; 0x31c <checkmove_sim+0x28a>
     31a:	99 c0       	rjmp	.+306    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     31c:	f9 01       	movw	r30, r18
     31e:	ff 27       	eor	r31, r31
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	ee 0f       	add	r30, r30
     326:	ff 1f       	adc	r31, r31
     328:	ee 0f       	add	r30, r30
     32a:	ff 1f       	adc	r31, r31
     32c:	e4 0f       	add	r30, r20
     32e:	f1 1d       	adc	r31, r1
     330:	e6 0f       	add	r30, r22
     332:	f7 1f       	adc	r31, r23
     334:	20 81       	ld	r18, Z
     336:	22 30       	cpi	r18, 0x02	; 2
     338:	08 f0       	brcs	.+2      	; 0x33c <checkmove_sim+0x2aa>
     33a:	8c c0       	rjmp	.+280    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     33c:	20 81       	ld	r18, Z
     33e:	92 12       	cpse	r9, r18
     340:	12 c0       	rjmp	.+36     	; 0x366 <checkmove_sim+0x2d4>
     342:	8b c0       	rjmp	.+278    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     344:	e9 2f       	mov	r30, r25
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	28 e0       	ldi	r18, 0x08	; 8
     34a:	82 9f       	mul	r24, r18
     34c:	e0 0d       	add	r30, r0
     34e:	f1 1d       	adc	r31, r1
     350:	11 24       	eor	r1, r1
     352:	e6 0f       	add	r30, r22
     354:	f7 1f       	adc	r31, r23
     356:	20 81       	ld	r18, Z
     358:	22 30       	cpi	r18, 0x02	; 2
     35a:	08 f0       	brcs	.+2      	; 0x35e <checkmove_sim+0x2cc>
     35c:	81 c0       	rjmp	.+258    	; 0x460 <__stack+0x1>
     35e:	20 81       	ld	r18, Z
     360:	92 16       	cp	r9, r18
     362:	09 f4       	brne	.+2      	; 0x366 <checkmove_sim+0x2d4>
     364:	80 c0       	rjmp	.+256    	; 0x466 <__stack+0x7>
     366:	83 94       	inc	r8
     368:	90 0f       	add	r25, r16
     36a:	81 0f       	add	r24, r17
     36c:	f8 16       	cp	r15, r24
     36e:	09 f4       	brne	.+2      	; 0x372 <checkmove_sim+0x2e0>
     370:	7d c0       	rjmp	.+250    	; 0x46c <__stack+0xd>
     372:	e9 12       	cpse	r14, r25
     374:	e7 cf       	rjmp	.-50     	; 0x344 <checkmove_sim+0x2b2>
     376:	31 e0       	ldi	r19, 0x01	; 1
     378:	3e 87       	std	Y+14, r19	; 0x0e
     37a:	8c c0       	rjmp	.+280    	; 0x494 <__stack+0x35>
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	82 0f       	add	r24, r18
     38a:	93 1f       	adc	r25, r19
     38c:	86 0f       	add	r24, r22
     38e:	97 1f       	adc	r25, r23
     390:	dc 01       	movw	r26, r24
     392:	2c 91       	ld	r18, X
     394:	22 30       	cpi	r18, 0x02	; 2
     396:	08 f0       	brcs	.+2      	; 0x39a <checkmove_sim+0x308>
     398:	7d c0       	rjmp	.+250    	; 0x494 <__stack+0x35>
     39a:	8c 91       	ld	r24, X
     39c:	98 12       	cpse	r9, r24
     39e:	12 c0       	rjmp	.+36     	; 0x3c4 <checkmove_sim+0x332>
     3a0:	ea 85       	ldd	r30, Y+10	; 0x0a
     3a2:	fb 85       	ldd	r31, Y+11	; 0x0b
     3a4:	e6 0f       	add	r30, r22
     3a6:	f7 1f       	adc	r31, r23
     3a8:	90 82       	st	Z, r9
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	48 2f       	mov	r20, r24
     3b0:	6b 81       	ldd	r22, Y+3	; 0x03
     3b2:	7c 81       	ldd	r23, Y+4	; 0x04
     3b4:	56 2f       	mov	r21, r22
     3b6:	f8 12       	cpse	r15, r24
     3b8:	13 c0       	rjmp	.+38     	; 0x3e0 <checkmove_sim+0x34e>
     3ba:	b1 e0       	ldi	r27, 0x01	; 1
     3bc:	be 87       	std	Y+14, r27	; 0x0e
     3be:	6a c0       	rjmp	.+212    	; 0x494 <__stack+0x35>
     3c0:	cc 84       	ldd	r12, Y+12	; 0x0c
     3c2:	dd 84       	ldd	r13, Y+13	; 0x0d
     3c4:	50 0f       	add	r21, r16
     3c6:	41 0f       	add	r20, r17
     3c8:	84 2f       	mov	r24, r20
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	8e 17       	cp	r24, r30
     3ce:	9f 07       	cpc	r25, r31
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <checkmove_sim+0x342>
     3d2:	60 c0       	rjmp	.+192    	; 0x494 <__stack+0x35>
     3d4:	25 2f       	mov	r18, r21
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	2c 15       	cp	r18, r12
     3da:	3d 05       	cpc	r19, r13
     3dc:	79 f6       	brne	.-98     	; 0x37c <checkmove_sim+0x2ea>
     3de:	5a c0       	rjmp	.+180    	; 0x494 <__stack+0x35>
     3e0:	e6 16       	cp	r14, r22
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <checkmove_sim+0x354>
     3e4:	46 c0       	rjmp	.+140    	; 0x472 <__stack+0x13>
     3e6:	99 27       	eor	r25, r25
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	86 0f       	add	r24, r22
     3f6:	91 1d       	adc	r25, r1
     3f8:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <M>
     3fc:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <M+0x1>
     400:	f9 01       	movw	r30, r18
     402:	e8 0f       	add	r30, r24
     404:	f9 1f       	adc	r31, r25
     406:	80 81       	ld	r24, Z
     408:	82 30       	cpi	r24, 0x02	; 2
     40a:	b0 f5       	brcc	.+108    	; 0x478 <__stack+0x19>
     40c:	80 81       	ld	r24, Z
     40e:	98 12       	cpse	r9, r24
     410:	14 c0       	rjmp	.+40     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     412:	35 c0       	rjmp	.+106    	; 0x47e <__stack+0x1f>
     414:	e5 2f       	mov	r30, r21
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	28 e0       	ldi	r18, 0x08	; 8
     41a:	42 9f       	mul	r20, r18
     41c:	e0 0d       	add	r30, r0
     41e:	f1 1d       	adc	r31, r1
     420:	11 24       	eor	r1, r1
     422:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <M>
     426:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <M+0x1>
     42a:	e8 0f       	add	r30, r24
     42c:	f9 1f       	adc	r31, r25
     42e:	80 81       	ld	r24, Z
     430:	82 30       	cpi	r24, 0x02	; 2
     432:	40 f5       	brcc	.+80     	; 0x484 <__stack+0x25>
     434:	80 81       	ld	r24, Z
     436:	98 16       	cp	r9, r24
     438:	41 f1       	breq	.+80     	; 0x48a <__stack+0x2b>
     43a:	90 82       	st	Z, r9
     43c:	50 0f       	add	r21, r16
     43e:	41 0f       	add	r20, r17
     440:	f4 16       	cp	r15, r20
     442:	31 f1       	breq	.+76     	; 0x490 <__stack+0x31>
     444:	e5 12       	cpse	r14, r21
     446:	e6 cf       	rjmp	.-52     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     448:	31 e0       	ldi	r19, 0x01	; 1
     44a:	3e 87       	std	Y+14, r19	; 0x0e
     44c:	23 c0       	rjmp	.+70     	; 0x494 <__stack+0x35>
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	4e 87       	std	Y+14, r20	; 0x0e
     452:	20 c0       	rjmp	.+64     	; 0x494 <__stack+0x35>
     454:	51 e0       	ldi	r21, 0x01	; 1
     456:	5e 87       	std	Y+14, r21	; 0x0e
     458:	1d c0       	rjmp	.+58     	; 0x494 <__stack+0x35>
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	8e 87       	std	Y+14, r24	; 0x0e
     45e:	1a c0       	rjmp	.+52     	; 0x494 <__stack+0x35>
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	9e 87       	std	Y+14, r25	; 0x0e
     464:	17 c0       	rjmp	.+46     	; 0x494 <__stack+0x35>
     466:	a1 e0       	ldi	r26, 0x01	; 1
     468:	ae 87       	std	Y+14, r26	; 0x0e
     46a:	14 c0       	rjmp	.+40     	; 0x494 <__stack+0x35>
     46c:	b1 e0       	ldi	r27, 0x01	; 1
     46e:	be 87       	std	Y+14, r27	; 0x0e
     470:	11 c0       	rjmp	.+34     	; 0x494 <__stack+0x35>
     472:	e1 e0       	ldi	r30, 0x01	; 1
     474:	ee 87       	std	Y+14, r30	; 0x0e
     476:	0e c0       	rjmp	.+28     	; 0x494 <__stack+0x35>
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	fe 87       	std	Y+14, r31	; 0x0e
     47c:	0b c0       	rjmp	.+22     	; 0x494 <__stack+0x35>
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	2e 87       	std	Y+14, r18	; 0x0e
     482:	08 c0       	rjmp	.+16     	; 0x494 <__stack+0x35>
     484:	31 e0       	ldi	r19, 0x01	; 1
     486:	3e 87       	std	Y+14, r19	; 0x0e
     488:	05 c0       	rjmp	.+10     	; 0x494 <__stack+0x35>
     48a:	41 e0       	ldi	r20, 0x01	; 1
     48c:	4e 87       	std	Y+14, r20	; 0x0e
     48e:	02 c0       	rjmp	.+4      	; 0x494 <__stack+0x35>
     490:	51 e0       	ldi	r21, 0x01	; 1
     492:	5e 87       	std	Y+14, r21	; 0x0e
     494:	8b 81       	ldd	r24, Y+3	; 0x03
     496:	9c 81       	ldd	r25, Y+4	; 0x04
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	9c 83       	std	Y+4, r25	; 0x04
     49c:	8b 83       	std	Y+3, r24	; 0x03
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
     4a0:	9c 81       	ldd	r25, Y+4	; 0x04
     4a2:	a8 16       	cp	r10, r24
     4a4:	b9 06       	cpc	r11, r25
     4a6:	0c f0       	brlt	.+2      	; 0x4aa <__stack+0x4b>
     4a8:	53 ce       	rjmp	.-858    	; 0x150 <checkmove_sim+0xbe>
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	9a 83       	std	Y+2, r25	; 0x02
     4b2:	89 83       	std	Y+1, r24	; 0x01
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	68 16       	cp	r6, r24
     4ba:	79 06       	cpc	r7, r25
     4bc:	0c f0       	brlt	.+2      	; 0x4c0 <__stack+0x61>
     4be:	34 ce       	rjmp	.-920    	; 0x128 <checkmove_sim+0x96>
     4c0:	c8 2c       	mov	r12, r8
     4c2:	83 2c       	mov	r8, r3
     4c4:	92 2c       	mov	r9, r2
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__stack+0x6d>
     4c8:	c1 2c       	mov	r12, r1
     4ca:	1e 86       	std	Y+14, r1	; 0x0e
     4cc:	8d 81       	ldd	r24, Y+5	; 0x05
     4ce:	81 11       	cpse	r24, r1
     4d0:	56 c0       	rjmp	.+172    	; 0x57e <__stack+0x11f>
     4d2:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <M>
     4d6:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <M+0x1>
     4da:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <vi_max>
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	ee 0f       	add	r30, r30
     4e6:	ff 1f       	adc	r31, r31
     4e8:	ee 0f       	add	r30, r30
     4ea:	ff 1f       	adc	r31, r31
     4ec:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <vj_max>
     4f0:	e8 0f       	add	r30, r24
     4f2:	f1 1d       	adc	r31, r1
     4f4:	e2 0f       	add	r30, r18
     4f6:	f3 1f       	adc	r31, r19
     4f8:	e0 81       	ld	r30, Z
     4fa:	44 0c       	add	r4, r4
     4fc:	55 1c       	adc	r5, r5
     4fe:	44 0c       	add	r4, r4
     500:	55 1c       	adc	r5, r5
     502:	44 0c       	add	r4, r4
     504:	55 1c       	adc	r5, r5
     506:	c2 01       	movw	r24, r4
     508:	89 0d       	add	r24, r9
     50a:	91 1d       	adc	r25, r1
     50c:	dc 01       	movw	r26, r24
     50e:	a9 59       	subi	r26, 0x99	; 153
     510:	bf 4f       	sbci	r27, 0xFF	; 255
     512:	6c 91       	ld	r22, X
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	4c 2d       	mov	r20, r12
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	42 5f       	subi	r20, 0xF2	; 242
     51c:	5f 4f       	sbci	r21, 0xFF	; 255
     51e:	46 0f       	add	r20, r22
     520:	51 1d       	adc	r21, r1
     522:	4e 17       	cp	r20, r30
     524:	5f 07       	cpc	r21, r31
     526:	5c f1       	brlt	.+86     	; 0x57e <__stack+0x11f>
     528:	f9 01       	movw	r30, r18
     52a:	e8 0f       	add	r30, r24
     52c:	f9 1f       	adc	r31, r25
     52e:	62 5f       	subi	r22, 0xF2	; 242
     530:	6c 0d       	add	r22, r12
     532:	60 83       	st	Z, r22
     534:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <vi_max>
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	ee 0f       	add	r30, r30
     53c:	ff 1f       	adc	r31, r31
     53e:	ee 0f       	add	r30, r30
     540:	ff 1f       	adc	r31, r31
     542:	ee 0f       	add	r30, r30
     544:	ff 1f       	adc	r31, r31
     546:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <vj_max>
     54a:	df 01       	movw	r26, r30
     54c:	a2 0f       	add	r26, r18
     54e:	b1 1d       	adc	r27, r1
     550:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
     554:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
     558:	ea 0f       	add	r30, r26
     55a:	fb 1f       	adc	r31, r27
     55c:	20 81       	ld	r18, Z
     55e:	23 30       	cpi	r18, 0x03	; 3
     560:	10 f0       	brcs	.+4      	; 0x566 <__stack+0x107>
     562:	22 e0       	ldi	r18, 0x02	; 2
     564:	20 83       	st	Z, r18
     566:	80 92 e8 01 	sts	0x01E8, r8	; 0x8001e8 <vi_max>
     56a:	90 92 de 00 	sts	0x00DE, r9	; 0x8000de <vj_max>
     56e:	fc 01       	movw	r30, r24
     570:	e9 59       	subi	r30, 0x99	; 153
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	80 81       	ld	r24, Z
     576:	82 5f       	subi	r24, 0xF2	; 242
     578:	c8 0e       	add	r12, r24
     57a:	c0 92 d8 00 	sts	0x00D8, r12	; 0x8000d8 <v_max>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	be 85       	ldd	r27, Y+14	; 0x0e
     582:	b1 30       	cpi	r27, 0x01	; 1
     584:	69 f0       	breq	.+26     	; 0x5a0 <__stack+0x141>
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0b c0       	rjmp	.+22     	; 0x5a0 <__stack+0x141>
     58a:	29 81       	ldd	r18, Y+1	; 0x01
     58c:	3a 81       	ldd	r19, Y+2	; 0x02
     58e:	82 2f       	mov	r24, r18
     590:	4b 81       	ldd	r20, Y+3	; 0x03
     592:	5c 81       	ldd	r21, Y+4	; 0x04
     594:	94 2f       	mov	r25, r20
     596:	f2 12       	cpse	r15, r18
     598:	be ce       	rjmp	.-644    	; 0x316 <checkmove_sim+0x284>
     59a:	e1 e0       	ldi	r30, 0x01	; 1
     59c:	ee 87       	std	Y+14, r30	; 0x0e
     59e:	7a cf       	rjmp	.-268    	; 0x494 <__stack+0x35>
     5a0:	2e 96       	adiw	r28, 0x0e	; 14
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	bf 90       	pop	r11
     5be:	af 90       	pop	r10
     5c0:	9f 90       	pop	r9
     5c2:	8f 90       	pop	r8
     5c4:	7f 90       	pop	r7
     5c6:	6f 90       	pop	r6
     5c8:	5f 90       	pop	r5
     5ca:	4f 90       	pop	r4
     5cc:	3f 90       	pop	r3
     5ce:	2f 90       	pop	r2
     5d0:	08 95       	ret

000005d2 <algo_sim>:
     5d2:	2f 92       	push	r2
     5d4:	3f 92       	push	r3
     5d6:	4f 92       	push	r4
     5d8:	5f 92       	push	r5
     5da:	6f 92       	push	r6
     5dc:	7f 92       	push	r7
     5de:	8f 92       	push	r8
     5e0:	9f 92       	push	r9
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	61 97       	sbiw	r28, 0x11	; 17
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     60c:	83 e0       	ldi	r24, 0x03	; 3
     60e:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <vi_max>
     612:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <vj_max>
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	3d 87       	std	Y+13, r19	; 0x0d
     61c:	2c 87       	std	Y+12, r18	; 0x0c
     61e:	1f 86       	std	Y+15, r1	; 0x0f
     620:	1e 86       	std	Y+14, r1	; 0x0e
     622:	31 2c       	mov	r3, r1
     624:	f3 c0       	rjmp	.+486    	; 0x80c <algo_sim+0x23a>
     626:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
     62a:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
     62e:	4d 81       	ldd	r20, Y+5	; 0x05
     630:	5e 81       	ldd	r21, Y+6	; 0x06
     632:	e4 0f       	add	r30, r20
     634:	f5 1f       	adc	r31, r21
     636:	20 81       	ld	r18, Z
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	40 91 e0 00 	lds	r20, 0x00E0	; 0x8000e0 <MyColor>
     642:	41 11       	cpse	r20, r1
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	28 17       	cp	r18, r24
     648:	39 07       	cpc	r19, r25
     64a:	09 f0       	breq	.+2      	; 0x64e <algo_sim+0x7c>
     64c:	c2 c0       	rjmp	.+388    	; 0x7d2 <algo_sim+0x200>
     64e:	2f 80       	ldd	r2, Y+7	; 0x07
     650:	2a 94       	dec	r2
     652:	02 2d       	mov	r16, r2
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	8c 85       	ldd	r24, Y+12	; 0x0c
     658:	9d 85       	ldd	r25, Y+13	; 0x0d
     65a:	80 17       	cp	r24, r16
     65c:	91 07       	cpc	r25, r17
     65e:	0c f4       	brge	.+2      	; 0x662 <algo_sim+0x90>
     660:	b8 c0       	rjmp	.+368    	; 0x7d2 <algo_sim+0x200>
     662:	32 01       	movw	r6, r4
     664:	5b 86       	std	Y+11, r5	; 0x0b
     666:	4a 86       	std	Y+10, r4	; 0x0a
     668:	97 e0       	ldi	r25, 0x07	; 7
     66a:	92 15       	cp	r25, r2
     66c:	08 f4       	brcc	.+2      	; 0x670 <algo_sim+0x9e>
     66e:	a6 c0       	rjmp	.+332    	; 0x7bc <algo_sim+0x1ea>
     670:	dd 24       	eor	r13, r13
     672:	da 94       	dec	r13
     674:	d3 0c       	add	r13, r3
     676:	8d 2d       	mov	r24, r13
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	2a 85       	ldd	r18, Y+10	; 0x0a
     67c:	3b 85       	ldd	r19, Y+11	; 0x0b
     67e:	28 17       	cp	r18, r24
     680:	39 07       	cpc	r19, r25
     682:	0c f4       	brge	.+2      	; 0x686 <algo_sim+0xb4>
     684:	9b c0       	rjmp	.+310    	; 0x7bc <algo_sim+0x1ea>
     686:	48 01       	movw	r8, r16
     688:	88 0c       	add	r8, r8
     68a:	99 1c       	adc	r9, r9
     68c:	88 0c       	add	r8, r8
     68e:	99 1c       	adc	r9, r9
     690:	88 0c       	add	r8, r8
     692:	99 1c       	adc	r9, r9
     694:	a2 2c       	mov	r10, r2
     696:	b1 2c       	mov	r11, r1
     698:	a5 01       	movw	r20, r10
     69a:	44 0f       	add	r20, r20
     69c:	55 1f       	adc	r21, r21
     69e:	44 0f       	add	r20, r20
     6a0:	55 1f       	adc	r21, r21
     6a2:	44 0f       	add	r20, r20
     6a4:	55 1f       	adc	r21, r21
     6a6:	5c 83       	std	Y+4, r21	; 0x04
     6a8:	4b 83       	std	Y+3, r20	; 0x03
     6aa:	c2 2c       	mov	r12, r2
     6ac:	5f 81       	ldd	r21, Y+7	; 0x07
     6ae:	c5 1a       	sub	r12, r21
     6b0:	2c 2d       	mov	r18, r12
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	3a 83       	std	Y+2, r19	; 0x02
     6b6:	29 83       	std	Y+1, r18	; 0x01
     6b8:	55 2e       	mov	r5, r21
     6ba:	37 e0       	ldi	r19, 0x07	; 7
     6bc:	3d 15       	cp	r19, r13
     6be:	08 f4       	brcc	.+2      	; 0x6c2 <algo_sim+0xf0>
     6c0:	76 c0       	rjmp	.+236    	; 0x7ae <algo_sim+0x1dc>
     6c2:	e0 90 e5 01 	lds	r14, 0x01E5	; 0x8001e5 <M>
     6c6:	f0 90 e6 01 	lds	r15, 0x01E6	; 0x8001e6 <M+0x1>
     6ca:	88 0d       	add	r24, r8
     6cc:	99 1d       	adc	r25, r9
     6ce:	f7 01       	movw	r30, r14
     6d0:	e8 0f       	add	r30, r24
     6d2:	f9 1f       	adc	r31, r25
     6d4:	80 81       	ld	r24, Z
     6d6:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <MyColor>
     6da:	89 13       	cpse	r24, r25
     6dc:	68 c0       	rjmp	.+208    	; 0x7ae <algo_sim+0x1dc>
     6de:	52 14       	cp	r5, r2
     6e0:	20 f0       	brcs	.+8      	; 0x6ea <algo_sim+0x118>
     6e2:	52 14       	cp	r5, r2
     6e4:	21 f0       	breq	.+8      	; 0x6ee <algo_sim+0x11c>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <algo_sim+0x11e>
     6ea:	27 e0       	ldi	r18, 0x07	; 7
     6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <algo_sim+0x11e>
     6ee:	2a e0       	ldi	r18, 0x0A	; 10
     6f0:	5d 14       	cp	r5, r13
     6f2:	20 f0       	brcs	.+8      	; 0x6fc <algo_sim+0x12a>
     6f4:	3d 14       	cp	r3, r13
     6f6:	21 f0       	breq	.+8      	; 0x700 <algo_sim+0x12e>
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <algo_sim+0x130>
     6fc:	37 e0       	ldi	r19, 0x07	; 7
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <algo_sim+0x130>
     700:	3a e0       	ldi	r19, 0x0A	; 10
     702:	9d 2d       	mov	r25, r13
     704:	93 19       	sub	r25, r3
     706:	49 81       	ldd	r20, Y+1	; 0x01
     708:	5a 81       	ldd	r21, Y+2	; 0x02
     70a:	42 0f       	add	r20, r18
     70c:	51 1d       	adc	r21, r1
     70e:	59 8b       	std	Y+17, r21	; 0x11
     710:	48 8b       	std	Y+16, r20	; 0x10
     712:	a4 16       	cp	r10, r20
     714:	b5 06       	cpc	r11, r21
     716:	09 f4       	brne	.+2      	; 0x71a <algo_sim+0x148>
     718:	4a c0       	rjmp	.+148    	; 0x7ae <algo_sim+0x1dc>
     71a:	ed 2d       	mov	r30, r13
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	a9 2f       	mov	r26, r25
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	a3 0f       	add	r26, r19
     724:	b1 1d       	adc	r27, r1
     726:	ea 17       	cp	r30, r26
     728:	fb 07       	cpc	r31, r27
     72a:	09 f4       	brne	.+2      	; 0x72e <algo_sim+0x15c>
     72c:	40 c0       	rjmp	.+128    	; 0x7ae <algo_sim+0x1dc>
     72e:	2b 81       	ldd	r18, Y+3	; 0x03
     730:	3c 81       	ldd	r19, Y+4	; 0x04
     732:	e2 0f       	add	r30, r18
     734:	f3 1f       	adc	r31, r19
     736:	ee 0d       	add	r30, r14
     738:	ff 1d       	adc	r31, r15
     73a:	20 81       	ld	r18, Z
     73c:	71 e0       	ldi	r23, 0x01	; 1
     73e:	81 11       	cpse	r24, r1
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	07 2f       	mov	r16, r23
     744:	10 e0       	ldi	r17, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	20 17       	cp	r18, r16
     74a:	31 07       	cpc	r19, r17
     74c:	81 f1       	breq	.+96     	; 0x7ae <algo_sim+0x1dc>
     74e:	80 81       	ld	r24, Z
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	b1 f0       	breq	.+44     	; 0x780 <algo_sim+0x1ae>
     754:	6d 2d       	mov	r22, r13
     756:	82 2d       	mov	r24, r2
     758:	1c c0       	rjmp	.+56     	; 0x792 <algo_sim+0x1c0>
     75a:	22 0f       	add	r18, r18
     75c:	33 1f       	adc	r19, r19
     75e:	22 0f       	add	r18, r18
     760:	33 1f       	adc	r19, r19
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	e2 0f       	add	r30, r18
     768:	f3 1f       	adc	r31, r19
     76a:	ee 0d       	add	r30, r14
     76c:	ff 1d       	adc	r31, r15
     76e:	20 81       	ld	r18, Z
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	20 17       	cp	r18, r16
     774:	31 07       	cpc	r19, r17
     776:	d9 f0       	breq	.+54     	; 0x7ae <algo_sim+0x1dc>
     778:	20 81       	ld	r18, Z
     77a:	22 30       	cpi	r18, 0x02	; 2
     77c:	51 f4       	brne	.+20     	; 0x792 <algo_sim+0x1c0>
     77e:	02 c0       	rjmp	.+4      	; 0x784 <algo_sim+0x1b2>
     780:	6d 2d       	mov	r22, r13
     782:	82 2d       	mov	r24, r2
     784:	51 e0       	ldi	r21, 0x01	; 1
     786:	50 93 d9 00 	sts	0x00D9, r21	; 0x8000d9 <move_done>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	47 2f       	mov	r20, r23
     78e:	81 dc       	rcall	.-1790   	; 0x92 <checkmove_sim>
     790:	0e c0       	rjmp	.+28     	; 0x7ae <algo_sim+0x1dc>
     792:	69 0f       	add	r22, r25
     794:	8c 0d       	add	r24, r12
     796:	28 2f       	mov	r18, r24
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	48 89       	ldd	r20, Y+16	; 0x10
     79c:	59 89       	ldd	r21, Y+17	; 0x11
     79e:	24 17       	cp	r18, r20
     7a0:	35 07       	cpc	r19, r21
     7a2:	29 f0       	breq	.+10     	; 0x7ae <algo_sim+0x1dc>
     7a4:	e6 2f       	mov	r30, r22
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	ea 17       	cp	r30, r26
     7aa:	fb 07       	cpc	r31, r27
     7ac:	b1 f6       	brne	.-84     	; 0x75a <algo_sim+0x188>
     7ae:	d3 94       	inc	r13
     7b0:	8d 2d       	mov	r24, r13
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	68 16       	cp	r6, r24
     7b6:	79 06       	cpc	r7, r25
     7b8:	0c f0       	brlt	.+2      	; 0x7bc <algo_sim+0x1ea>
     7ba:	7f cf       	rjmp	.-258    	; 0x6ba <algo_sim+0xe8>
     7bc:	23 94       	inc	r2
     7be:	02 2d       	mov	r16, r2
     7c0:	10 e0       	ldi	r17, 0x00	; 0
     7c2:	88 85       	ldd	r24, Y+8	; 0x08
     7c4:	99 85       	ldd	r25, Y+9	; 0x09
     7c6:	80 17       	cp	r24, r16
     7c8:	91 07       	cpc	r25, r17
     7ca:	0c f0       	brlt	.+2      	; 0x7ce <algo_sim+0x1fc>
     7cc:	4d cf       	rjmp	.-358    	; 0x668 <algo_sim+0x96>
     7ce:	4a 84       	ldd	r4, Y+10	; 0x0a
     7d0:	5b 84       	ldd	r5, Y+11	; 0x0b
     7d2:	33 94       	inc	r3
     7d4:	2d 81       	ldd	r18, Y+5	; 0x05
     7d6:	3e 81       	ldd	r19, Y+6	; 0x06
     7d8:	2f 5f       	subi	r18, 0xFF	; 255
     7da:	3f 4f       	sbci	r19, 0xFF	; 255
     7dc:	3e 83       	std	Y+6, r19	; 0x06
     7de:	2d 83       	std	Y+5, r18	; 0x05
     7e0:	3f ef       	ldi	r19, 0xFF	; 255
     7e2:	43 1a       	sub	r4, r19
     7e4:	53 0a       	sbc	r5, r19
     7e6:	48 e0       	ldi	r20, 0x08	; 8
     7e8:	34 12       	cpse	r3, r20
     7ea:	1d cf       	rjmp	.-454    	; 0x626 <algo_sim+0x54>
     7ec:	3f 80       	ldd	r3, Y+7	; 0x07
     7ee:	33 94       	inc	r3
     7f0:	8e 85       	ldd	r24, Y+14	; 0x0e
     7f2:	9f 85       	ldd	r25, Y+15	; 0x0f
     7f4:	08 96       	adiw	r24, 0x08	; 8
     7f6:	9f 87       	std	Y+15, r25	; 0x0f
     7f8:	8e 87       	std	Y+14, r24	; 0x0e
     7fa:	2c 85       	ldd	r18, Y+12	; 0x0c
     7fc:	3d 85       	ldd	r19, Y+13	; 0x0d
     7fe:	2f 5f       	subi	r18, 0xFF	; 255
     800:	3f 4f       	sbci	r19, 0xFF	; 255
     802:	3d 87       	std	Y+13, r19	; 0x0d
     804:	2c 87       	std	Y+12, r18	; 0x0c
     806:	80 34       	cpi	r24, 0x40	; 64
     808:	91 05       	cpc	r25, r1
     80a:	79 f0       	breq	.+30     	; 0x82a <algo_sim+0x258>
     80c:	4e 85       	ldd	r20, Y+14	; 0x0e
     80e:	5f 85       	ldd	r21, Y+15	; 0x0f
     810:	5e 83       	std	Y+6, r21	; 0x06
     812:	4d 83       	std	Y+5, r20	; 0x05
     814:	44 24       	eor	r4, r4
     816:	43 94       	inc	r4
     818:	51 2c       	mov	r5, r1
     81a:	a1 2c       	mov	r10, r1
     81c:	8c 85       	ldd	r24, Y+12	; 0x0c
     81e:	9d 85       	ldd	r25, Y+13	; 0x0d
     820:	99 87       	std	Y+9, r25	; 0x09
     822:	88 87       	std	Y+8, r24	; 0x08
     824:	3f 82       	std	Y+7, r3	; 0x07
     826:	3a 2c       	mov	r3, r10
     828:	fe ce       	rjmp	.-516    	; 0x626 <algo_sim+0x54>
     82a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <move_done>
     82e:	81 11       	cpse	r24, r1
     830:	02 c0       	rjmp	.+4      	; 0x836 <algo_sim+0x264>
     832:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <v_max>
     836:	61 96       	adiw	r28, 0x11	; 17
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	9f 90       	pop	r9
     858:	8f 90       	pop	r8
     85a:	7f 90       	pop	r7
     85c:	6f 90       	pop	r6
     85e:	5f 90       	pop	r5
     860:	4f 90       	pop	r4
     862:	3f 90       	pop	r3
     864:	2f 90       	pop	r2
     866:	08 95       	ret

00000868 <CheckMove>:
     868:	2f 92       	push	r2
     86a:	3f 92       	push	r3
     86c:	4f 92       	push	r4
     86e:	5f 92       	push	r5
     870:	6f 92       	push	r6
     872:	7f 92       	push	r7
     874:	8f 92       	push	r8
     876:	9f 92       	push	r9
     878:	af 92       	push	r10
     87a:	bf 92       	push	r11
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	2e 97       	sbiw	r28, 0x0e	; 14
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	de bf       	out	0x3e, r29	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	88 2e       	mov	r8, r24
     89e:	96 2e       	mov	r9, r22
     8a0:	2d 83       	std	Y+5, r18	; 0x05
     8a2:	48 2e       	mov	r4, r24
     8a4:	51 2c       	mov	r5, r1
     8a6:	c2 01       	movw	r24, r4
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	9a 83       	std	Y+2, r25	; 0x02
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	32 01       	movw	r6, r4
     8b0:	2f ef       	ldi	r18, 0xFF	; 255
     8b2:	62 1a       	sub	r6, r18
     8b4:	72 0a       	sbc	r7, r18
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ba:	68 16       	cp	r6, r24
     8bc:	79 06       	cpc	r7, r25
     8be:	0c f4       	brge	.+2      	; 0x8c2 <CheckMove+0x5a>
     8c0:	ee c1       	rjmp	.+988    	; 0xc9e <CheckMove+0x436>
     8c2:	26 2e       	mov	r2, r22
     8c4:	31 2c       	mov	r3, r1
     8c6:	c2 01       	movw	r24, r4
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	dc 01       	movw	r26, r24
     8d6:	a2 0d       	add	r26, r2
     8d8:	b3 1d       	adc	r27, r3
     8da:	bb 87       	std	Y+11, r27	; 0x0b
     8dc:	aa 87       	std	Y+10, r26	; 0x0a
     8de:	c1 2c       	mov	r12, r1
     8e0:	1e 86       	std	Y+14, r1	; 0x0e
     8e2:	f1 01       	movw	r30, r2
     8e4:	31 97       	sbiw	r30, 0x01	; 1
     8e6:	ff 83       	std	Y+7, r31	; 0x07
     8e8:	ee 83       	std	Y+6, r30	; 0x06
     8ea:	51 01       	movw	r10, r2
     8ec:	ff ef       	ldi	r31, 0xFF	; 255
     8ee:	af 1a       	sub	r10, r31
     8f0:	bf 0a       	sbc	r11, r31
     8f2:	39 86       	std	Y+9, r3	; 0x09
     8f4:	28 86       	std	Y+8, r2	; 0x08
     8f6:	38 2c       	mov	r3, r8
     8f8:	8c 2c       	mov	r8, r12
     8fa:	26 2e       	mov	r2, r22
     8fc:	94 2e       	mov	r9, r20
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	9a 81       	ldd	r25, Y+2	; 0x02
     902:	99 23       	and	r25, r25
     904:	0c f4       	brge	.+2      	; 0x908 <CheckMove+0xa0>
     906:	bc c1       	rjmp	.+888    	; 0xc80 <CheckMove+0x418>
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	08 97       	sbiw	r24, 0x08	; 8
     90e:	0c f0       	brlt	.+2      	; 0x912 <CheckMove+0xaa>
     910:	b7 c1       	rjmp	.+878    	; 0xc80 <CheckMove+0x418>
     912:	ce 80       	ldd	r12, Y+6	; 0x06
     914:	df 80       	ldd	r13, Y+7	; 0x07
     916:	dc 82       	std	Y+4, r13	; 0x04
     918:	cb 82       	std	Y+3, r12	; 0x03
     91a:	8b 81       	ldd	r24, Y+3	; 0x03
     91c:	9c 81       	ldd	r25, Y+4	; 0x04
     91e:	a8 16       	cp	r10, r24
     920:	b9 06       	cpc	r11, r25
     922:	0c f4       	brge	.+2      	; 0x926 <CheckMove+0xbe>
     924:	ad c1       	rjmp	.+858    	; 0xc80 <CheckMove+0x418>
     926:	8b 81       	ldd	r24, Y+3	; 0x03
     928:	9c 81       	ldd	r25, Y+4	; 0x04
     92a:	99 23       	and	r25, r25
     92c:	0c f4       	brge	.+2      	; 0x930 <CheckMove+0xc8>
     92e:	9d c1       	rjmp	.+826    	; 0xc6a <CheckMove+0x402>
     930:	8b 81       	ldd	r24, Y+3	; 0x03
     932:	9c 81       	ldd	r25, Y+4	; 0x04
     934:	08 97       	sbiw	r24, 0x08	; 8
     936:	0c f0       	brlt	.+2      	; 0x93a <CheckMove+0xd2>
     938:	98 c1       	rjmp	.+816    	; 0xc6a <CheckMove+0x402>
     93a:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <M>
     93e:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <M+0x1>
     942:	e9 81       	ldd	r30, Y+1	; 0x01
     944:	fa 81       	ldd	r31, Y+2	; 0x02
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	9c 81       	ldd	r25, Y+4	; 0x04
     94a:	ee 0f       	add	r30, r30
     94c:	ff 1f       	adc	r31, r31
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	e8 0f       	add	r30, r24
     958:	f9 1f       	adc	r31, r25
     95a:	e6 0f       	add	r30, r22
     95c:	f7 1f       	adc	r31, r23
     95e:	80 81       	ld	r24, Z
     960:	89 15       	cp	r24, r9
     962:	09 f4       	brne	.+2      	; 0x966 <CheckMove+0xfe>
     964:	82 c1       	rjmp	.+772    	; 0xc6a <CheckMove+0x402>
     966:	e9 81       	ldd	r30, Y+1	; 0x01
     968:	fa 81       	ldd	r31, Y+2	; 0x02
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	e8 0f       	add	r30, r24
     97c:	f9 1f       	adc	r31, r25
     97e:	e6 0f       	add	r30, r22
     980:	f7 1f       	adc	r31, r23
     982:	80 81       	ld	r24, Z
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	08 f0       	brcs	.+2      	; 0x98a <CheckMove+0x122>
     988:	70 c1       	rjmp	.+736    	; 0xc6a <CheckMove+0x402>
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	9a 81       	ldd	r25, Y+2	; 0x02
     98e:	48 16       	cp	r4, r24
     990:	59 06       	cpc	r5, r25
     992:	3c f0       	brlt	.+14     	; 0x9a2 <CheckMove+0x13a>
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	9a 81       	ldd	r25, Y+2	; 0x02
     998:	48 16       	cp	r4, r24
     99a:	59 06       	cpc	r5, r25
     99c:	39 f0       	breq	.+14     	; 0x9ac <CheckMove+0x144>
     99e:	f1 2c       	mov	r15, r1
     9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <CheckMove+0x14c>
     9a2:	0f 2e       	mov	r0, r31
     9a4:	f7 e0       	ldi	r31, 0x07	; 7
     9a6:	ff 2e       	mov	r15, r31
     9a8:	f0 2d       	mov	r31, r0
     9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <CheckMove+0x14c>
     9ac:	0f 2e       	mov	r0, r31
     9ae:	f9 e0       	ldi	r31, 0x09	; 9
     9b0:	ff 2e       	mov	r15, r31
     9b2:	f0 2d       	mov	r31, r0
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	9c 81       	ldd	r25, Y+4	; 0x04
     9b8:	48 16       	cp	r4, r24
     9ba:	59 06       	cpc	r5, r25
     9bc:	4c f0       	brlt	.+18     	; 0x9d0 <CheckMove+0x168>
     9be:	8b 81       	ldd	r24, Y+3	; 0x03
     9c0:	9c 81       	ldd	r25, Y+4	; 0x04
     9c2:	28 85       	ldd	r18, Y+8	; 0x08
     9c4:	39 85       	ldd	r19, Y+9	; 0x09
     9c6:	28 17       	cp	r18, r24
     9c8:	39 07       	cpc	r19, r25
     9ca:	39 f0       	breq	.+14     	; 0x9da <CheckMove+0x172>
     9cc:	e1 2c       	mov	r14, r1
     9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <CheckMove+0x17a>
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f7 e0       	ldi	r31, 0x07	; 7
     9d4:	ef 2e       	mov	r14, r31
     9d6:	f0 2d       	mov	r31, r0
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <CheckMove+0x17a>
     9da:	0f 2e       	mov	r0, r31
     9dc:	f9 e0       	ldi	r31, 0x09	; 9
     9de:	ef 2e       	mov	r14, r31
     9e0:	f0 2d       	mov	r31, r0
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	9a 81       	ldd	r25, Y+2	; 0x02
     9e6:	18 2f       	mov	r17, r24
     9e8:	13 19       	sub	r17, r3
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	08 2f       	mov	r16, r24
     9f0:	02 19       	sub	r16, r2
     9f2:	29 81       	ldd	r18, Y+1	; 0x01
     9f4:	3a 81       	ldd	r19, Y+2	; 0x02
     9f6:	42 2f       	mov	r20, r18
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	58 2f       	mov	r21, r24
     9fe:	ad 81       	ldd	r26, Y+5	; 0x05
     a00:	aa 23       	and	r26, r26
     a02:	41 f1       	breq	.+80     	; 0xa54 <CheckMove+0x1ec>
     a04:	33 27       	eor	r19, r19
     a06:	e1 2f       	mov	r30, r17
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	ef 0d       	add	r30, r15
     a0c:	f1 1d       	adc	r31, r1
     a0e:	2e 17       	cp	r18, r30
     a10:	3f 07       	cpc	r19, r31
     a12:	09 f4       	brne	.+2      	; 0xa16 <CheckMove+0x1ae>
     a14:	2a c1       	rjmp	.+596    	; 0xc6a <CheckMove+0x402>
     a16:	99 27       	eor	r25, r25
     a18:	a0 2f       	mov	r26, r16
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	6d 01       	movw	r12, r26
     a1e:	ce 0c       	add	r12, r14
     a20:	d1 1c       	adc	r13, r1
     a22:	dd 86       	std	Y+13, r13	; 0x0d
     a24:	cc 86       	std	Y+12, r12	; 0x0c
     a26:	8c 15       	cp	r24, r12
     a28:	9d 05       	cpc	r25, r13
     a2a:	09 f4       	brne	.+2      	; 0xa2e <CheckMove+0x1c6>
     a2c:	1e c1       	rjmp	.+572    	; 0xc6a <CheckMove+0x402>
     a2e:	22 0f       	add	r18, r18
     a30:	33 1f       	adc	r19, r19
     a32:	22 0f       	add	r18, r18
     a34:	33 1f       	adc	r19, r19
     a36:	22 0f       	add	r18, r18
     a38:	33 1f       	adc	r19, r19
     a3a:	82 0f       	add	r24, r18
     a3c:	93 1f       	adc	r25, r19
     a3e:	86 0f       	add	r24, r22
     a40:	97 1f       	adc	r25, r23
     a42:	dc 01       	movw	r26, r24
     a44:	2c 91       	ld	r18, X
     a46:	22 30       	cpi	r18, 0x02	; 2
     a48:	08 f0       	brcs	.+2      	; 0xa4c <CheckMove+0x1e4>
     a4a:	0f c1       	rjmp	.+542    	; 0xc6a <CheckMove+0x402>
     a4c:	8c 91       	ld	r24, X
     a4e:	98 12       	cpse	r9, r24
     a50:	a2 c0       	rjmp	.+324    	; 0xb96 <CheckMove+0x32e>
     a52:	91 c0       	rjmp	.+290    	; 0xb76 <CheckMove+0x30e>
     a54:	33 27       	eor	r19, r19
     a56:	a1 2f       	mov	r26, r17
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	af 0d       	add	r26, r15
     a5c:	b1 1d       	adc	r27, r1
     a5e:	2a 17       	cp	r18, r26
     a60:	3b 07       	cpc	r19, r27
     a62:	09 f4       	brne	.+2      	; 0xa66 <CheckMove+0x1fe>
     a64:	02 c1       	rjmp	.+516    	; 0xc6a <CheckMove+0x402>
     a66:	99 27       	eor	r25, r25
     a68:	e0 2f       	mov	r30, r16
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	6f 01       	movw	r12, r30
     a6e:	ce 0c       	add	r12, r14
     a70:	d1 1c       	adc	r13, r1
     a72:	dd 86       	std	Y+13, r13	; 0x0d
     a74:	cc 86       	std	Y+12, r12	; 0x0c
     a76:	8c 15       	cp	r24, r12
     a78:	9d 05       	cpc	r25, r13
     a7a:	09 f4       	brne	.+2      	; 0xa7e <CheckMove+0x216>
     a7c:	f6 c0       	rjmp	.+492    	; 0xc6a <CheckMove+0x402>
     a7e:	22 0f       	add	r18, r18
     a80:	33 1f       	adc	r19, r19
     a82:	22 0f       	add	r18, r18
     a84:	33 1f       	adc	r19, r19
     a86:	22 0f       	add	r18, r18
     a88:	33 1f       	adc	r19, r19
     a8a:	82 0f       	add	r24, r18
     a8c:	93 1f       	adc	r25, r19
     a8e:	86 0f       	add	r24, r22
     a90:	97 1f       	adc	r25, r23
     a92:	fc 01       	movw	r30, r24
     a94:	20 81       	ld	r18, Z
     a96:	22 30       	cpi	r18, 0x02	; 2
     a98:	08 f0       	brcs	.+2      	; 0xa9c <CheckMove+0x234>
     a9a:	e7 c0       	rjmp	.+462    	; 0xc6a <CheckMove+0x402>
     a9c:	80 81       	ld	r24, Z
     a9e:	98 12       	cpse	r9, r24
     aa0:	15 c0       	rjmp	.+42     	; 0xacc <CheckMove+0x264>
     aa2:	67 c1       	rjmp	.+718    	; 0xd72 <CheckMove+0x50a>
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	88 0f       	add	r24, r24
     aaa:	99 1f       	adc	r25, r25
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	82 0f       	add	r24, r18
     ab2:	93 1f       	adc	r25, r19
     ab4:	86 0f       	add	r24, r22
     ab6:	97 1f       	adc	r25, r23
     ab8:	fc 01       	movw	r30, r24
     aba:	20 81       	ld	r18, Z
     abc:	22 30       	cpi	r18, 0x02	; 2
     abe:	08 f0       	brcs	.+2      	; 0xac2 <CheckMove+0x25a>
     ac0:	d4 c0       	rjmp	.+424    	; 0xc6a <CheckMove+0x402>
     ac2:	80 81       	ld	r24, Z
     ac4:	98 16       	cp	r9, r24
     ac6:	09 f4       	brne	.+2      	; 0xaca <CheckMove+0x262>
     ac8:	54 c1       	rjmp	.+680    	; 0xd72 <CheckMove+0x50a>
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <CheckMove+0x268>
     acc:	cc 84       	ldd	r12, Y+12	; 0x0c
     ace:	dd 84       	ldd	r13, Y+13	; 0x0d
     ad0:	50 0f       	add	r21, r16
     ad2:	41 0f       	add	r20, r17
     ad4:	84 2f       	mov	r24, r20
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	8a 17       	cp	r24, r26
     ada:	9b 07       	cpc	r25, r27
     adc:	09 f4       	brne	.+2      	; 0xae0 <CheckMove+0x278>
     ade:	c5 c0       	rjmp	.+394    	; 0xc6a <CheckMove+0x402>
     ae0:	25 2f       	mov	r18, r21
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	2c 15       	cp	r18, r12
     ae6:	3d 05       	cpc	r19, r13
     ae8:	e9 f6       	brne	.-70     	; 0xaa4 <CheckMove+0x23c>
     aea:	bf c0       	rjmp	.+382    	; 0xc6a <CheckMove+0x402>
     aec:	e9 16       	cp	r14, r25
     aee:	09 f4       	brne	.+2      	; 0xaf2 <CheckMove+0x28a>
     af0:	99 c0       	rjmp	.+306    	; 0xc24 <CheckMove+0x3bc>
     af2:	f9 01       	movw	r30, r18
     af4:	ff 27       	eor	r31, r31
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	e4 0f       	add	r30, r20
     b04:	f1 1d       	adc	r31, r1
     b06:	e6 0f       	add	r30, r22
     b08:	f7 1f       	adc	r31, r23
     b0a:	20 81       	ld	r18, Z
     b0c:	22 30       	cpi	r18, 0x02	; 2
     b0e:	08 f0       	brcs	.+2      	; 0xb12 <CheckMove+0x2aa>
     b10:	8c c0       	rjmp	.+280    	; 0xc2a <CheckMove+0x3c2>
     b12:	20 81       	ld	r18, Z
     b14:	92 12       	cpse	r9, r18
     b16:	12 c0       	rjmp	.+36     	; 0xb3c <CheckMove+0x2d4>
     b18:	8b c0       	rjmp	.+278    	; 0xc30 <CheckMove+0x3c8>
     b1a:	e9 2f       	mov	r30, r25
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	28 e0       	ldi	r18, 0x08	; 8
     b20:	82 9f       	mul	r24, r18
     b22:	e0 0d       	add	r30, r0
     b24:	f1 1d       	adc	r31, r1
     b26:	11 24       	eor	r1, r1
     b28:	e6 0f       	add	r30, r22
     b2a:	f7 1f       	adc	r31, r23
     b2c:	20 81       	ld	r18, Z
     b2e:	22 30       	cpi	r18, 0x02	; 2
     b30:	08 f0       	brcs	.+2      	; 0xb34 <CheckMove+0x2cc>
     b32:	81 c0       	rjmp	.+258    	; 0xc36 <CheckMove+0x3ce>
     b34:	20 81       	ld	r18, Z
     b36:	92 16       	cp	r9, r18
     b38:	09 f4       	brne	.+2      	; 0xb3c <CheckMove+0x2d4>
     b3a:	80 c0       	rjmp	.+256    	; 0xc3c <CheckMove+0x3d4>
     b3c:	83 94       	inc	r8
     b3e:	90 0f       	add	r25, r16
     b40:	81 0f       	add	r24, r17
     b42:	f8 16       	cp	r15, r24
     b44:	09 f4       	brne	.+2      	; 0xb48 <CheckMove+0x2e0>
     b46:	7d c0       	rjmp	.+250    	; 0xc42 <CheckMove+0x3da>
     b48:	e9 12       	cpse	r14, r25
     b4a:	e7 cf       	rjmp	.-50     	; 0xb1a <CheckMove+0x2b2>
     b4c:	31 e0       	ldi	r19, 0x01	; 1
     b4e:	3e 87       	std	Y+14, r19	; 0x0e
     b50:	8c c0       	rjmp	.+280    	; 0xc6a <CheckMove+0x402>
     b52:	88 0f       	add	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	88 0f       	add	r24, r24
     b5c:	99 1f       	adc	r25, r25
     b5e:	82 0f       	add	r24, r18
     b60:	93 1f       	adc	r25, r19
     b62:	86 0f       	add	r24, r22
     b64:	97 1f       	adc	r25, r23
     b66:	dc 01       	movw	r26, r24
     b68:	2c 91       	ld	r18, X
     b6a:	22 30       	cpi	r18, 0x02	; 2
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <CheckMove+0x308>
     b6e:	7d c0       	rjmp	.+250    	; 0xc6a <CheckMove+0x402>
     b70:	8c 91       	ld	r24, X
     b72:	98 12       	cpse	r9, r24
     b74:	12 c0       	rjmp	.+36     	; 0xb9a <CheckMove+0x332>
     b76:	ea 85       	ldd	r30, Y+10	; 0x0a
     b78:	fb 85       	ldd	r31, Y+11	; 0x0b
     b7a:	e6 0f       	add	r30, r22
     b7c:	f7 1f       	adc	r31, r23
     b7e:	90 82       	st	Z, r9
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	48 2f       	mov	r20, r24
     b86:	6b 81       	ldd	r22, Y+3	; 0x03
     b88:	7c 81       	ldd	r23, Y+4	; 0x04
     b8a:	56 2f       	mov	r21, r22
     b8c:	f8 12       	cpse	r15, r24
     b8e:	13 c0       	rjmp	.+38     	; 0xbb6 <CheckMove+0x34e>
     b90:	b1 e0       	ldi	r27, 0x01	; 1
     b92:	be 87       	std	Y+14, r27	; 0x0e
     b94:	6a c0       	rjmp	.+212    	; 0xc6a <CheckMove+0x402>
     b96:	cc 84       	ldd	r12, Y+12	; 0x0c
     b98:	dd 84       	ldd	r13, Y+13	; 0x0d
     b9a:	50 0f       	add	r21, r16
     b9c:	41 0f       	add	r20, r17
     b9e:	84 2f       	mov	r24, r20
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	8e 17       	cp	r24, r30
     ba4:	9f 07       	cpc	r25, r31
     ba6:	09 f4       	brne	.+2      	; 0xbaa <CheckMove+0x342>
     ba8:	60 c0       	rjmp	.+192    	; 0xc6a <CheckMove+0x402>
     baa:	25 2f       	mov	r18, r21
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	2c 15       	cp	r18, r12
     bb0:	3d 05       	cpc	r19, r13
     bb2:	79 f6       	brne	.-98     	; 0xb52 <CheckMove+0x2ea>
     bb4:	5a c0       	rjmp	.+180    	; 0xc6a <CheckMove+0x402>
     bb6:	e6 16       	cp	r14, r22
     bb8:	09 f4       	brne	.+2      	; 0xbbc <CheckMove+0x354>
     bba:	46 c0       	rjmp	.+140    	; 0xc48 <CheckMove+0x3e0>
     bbc:	99 27       	eor	r25, r25
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	86 0f       	add	r24, r22
     bcc:	91 1d       	adc	r25, r1
     bce:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <M>
     bd2:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <M+0x1>
     bd6:	f9 01       	movw	r30, r18
     bd8:	e8 0f       	add	r30, r24
     bda:	f9 1f       	adc	r31, r25
     bdc:	80 81       	ld	r24, Z
     bde:	82 30       	cpi	r24, 0x02	; 2
     be0:	b0 f5       	brcc	.+108    	; 0xc4e <CheckMove+0x3e6>
     be2:	80 81       	ld	r24, Z
     be4:	98 12       	cpse	r9, r24
     be6:	14 c0       	rjmp	.+40     	; 0xc10 <CheckMove+0x3a8>
     be8:	35 c0       	rjmp	.+106    	; 0xc54 <CheckMove+0x3ec>
     bea:	e5 2f       	mov	r30, r21
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	28 e0       	ldi	r18, 0x08	; 8
     bf0:	42 9f       	mul	r20, r18
     bf2:	e0 0d       	add	r30, r0
     bf4:	f1 1d       	adc	r31, r1
     bf6:	11 24       	eor	r1, r1
     bf8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <M>
     bfc:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <M+0x1>
     c00:	e8 0f       	add	r30, r24
     c02:	f9 1f       	adc	r31, r25
     c04:	80 81       	ld	r24, Z
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	40 f5       	brcc	.+80     	; 0xc5a <CheckMove+0x3f2>
     c0a:	80 81       	ld	r24, Z
     c0c:	98 16       	cp	r9, r24
     c0e:	41 f1       	breq	.+80     	; 0xc60 <CheckMove+0x3f8>
     c10:	90 82       	st	Z, r9
     c12:	50 0f       	add	r21, r16
     c14:	41 0f       	add	r20, r17
     c16:	f4 16       	cp	r15, r20
     c18:	31 f1       	breq	.+76     	; 0xc66 <CheckMove+0x3fe>
     c1a:	e5 12       	cpse	r14, r21
     c1c:	e6 cf       	rjmp	.-52     	; 0xbea <CheckMove+0x382>
     c1e:	31 e0       	ldi	r19, 0x01	; 1
     c20:	3e 87       	std	Y+14, r19	; 0x0e
     c22:	23 c0       	rjmp	.+70     	; 0xc6a <CheckMove+0x402>
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	8e 87       	std	Y+14, r24	; 0x0e
     c28:	20 c0       	rjmp	.+64     	; 0xc6a <CheckMove+0x402>
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	9e 87       	std	Y+14, r25	; 0x0e
     c2e:	1d c0       	rjmp	.+58     	; 0xc6a <CheckMove+0x402>
     c30:	a1 e0       	ldi	r26, 0x01	; 1
     c32:	ae 87       	std	Y+14, r26	; 0x0e
     c34:	1a c0       	rjmp	.+52     	; 0xc6a <CheckMove+0x402>
     c36:	b1 e0       	ldi	r27, 0x01	; 1
     c38:	be 87       	std	Y+14, r27	; 0x0e
     c3a:	17 c0       	rjmp	.+46     	; 0xc6a <CheckMove+0x402>
     c3c:	e1 e0       	ldi	r30, 0x01	; 1
     c3e:	ee 87       	std	Y+14, r30	; 0x0e
     c40:	14 c0       	rjmp	.+40     	; 0xc6a <CheckMove+0x402>
     c42:	f1 e0       	ldi	r31, 0x01	; 1
     c44:	fe 87       	std	Y+14, r31	; 0x0e
     c46:	11 c0       	rjmp	.+34     	; 0xc6a <CheckMove+0x402>
     c48:	21 e0       	ldi	r18, 0x01	; 1
     c4a:	2e 87       	std	Y+14, r18	; 0x0e
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <CheckMove+0x402>
     c4e:	31 e0       	ldi	r19, 0x01	; 1
     c50:	3e 87       	std	Y+14, r19	; 0x0e
     c52:	0b c0       	rjmp	.+22     	; 0xc6a <CheckMove+0x402>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	8e 87       	std	Y+14, r24	; 0x0e
     c58:	08 c0       	rjmp	.+16     	; 0xc6a <CheckMove+0x402>
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	9e 87       	std	Y+14, r25	; 0x0e
     c5e:	05 c0       	rjmp	.+10     	; 0xc6a <CheckMove+0x402>
     c60:	a1 e0       	ldi	r26, 0x01	; 1
     c62:	ae 87       	std	Y+14, r26	; 0x0e
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <CheckMove+0x402>
     c66:	b1 e0       	ldi	r27, 0x01	; 1
     c68:	be 87       	std	Y+14, r27	; 0x0e
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	9c 83       	std	Y+4, r25	; 0x04
     c72:	8b 83       	std	Y+3, r24	; 0x03
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	9c 81       	ldd	r25, Y+4	; 0x04
     c78:	a8 16       	cp	r10, r24
     c7a:	b9 06       	cpc	r11, r25
     c7c:	0c f0       	brlt	.+2      	; 0xc80 <CheckMove+0x418>
     c7e:	53 ce       	rjmp	.-858    	; 0x926 <CheckMove+0xbe>
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	9a 83       	std	Y+2, r25	; 0x02
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	68 16       	cp	r6, r24
     c90:	79 06       	cpc	r7, r25
     c92:	0c f0       	brlt	.+2      	; 0xc96 <CheckMove+0x42e>
     c94:	34 ce       	rjmp	.-920    	; 0x8fe <CheckMove+0x96>
     c96:	c8 2c       	mov	r12, r8
     c98:	83 2c       	mov	r8, r3
     c9a:	92 2c       	mov	r9, r2
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <CheckMove+0x43a>
     c9e:	c1 2c       	mov	r12, r1
     ca0:	1e 86       	std	Y+14, r1	; 0x0e
     ca2:	ed 81       	ldd	r30, Y+5	; 0x05
     ca4:	e1 11       	cpse	r30, r1
     ca6:	5f c0       	rjmp	.+190    	; 0xd66 <CheckMove+0x4fe>
     ca8:	30 91 da 00 	lds	r19, 0x00DA	; 0x8000da <v1_max>
     cac:	f2 01       	movw	r30, r4
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	e9 59       	subi	r30, 0x99	; 153
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	e9 0d       	add	r30, r9
     cc0:	f1 1d       	adc	r31, r1
     cc2:	20 81       	ld	r18, Z
     cc4:	8c 2d       	mov	r24, r12
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 96       	adiw	r24, 0x0e	; 14
     cca:	82 0f       	add	r24, r18
     ccc:	91 1d       	adc	r25, r1
     cce:	43 2f       	mov	r20, r19
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	48 17       	cp	r20, r24
     cd4:	59 07       	cpc	r21, r25
     cd6:	fc f4       	brge	.+62     	; 0xd16 <CheckMove+0x4ae>
     cd8:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <v2_max>
     cdc:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <v3_max>
     ce0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <vi2_max>
     ce4:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <vi3_max>
     ce8:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <vj2_max>
     cec:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <vj3_max>
     cf0:	30 93 df 00 	sts	0x00DF, r19	; 0x8000df <v2_max>
     cf4:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <vi1_max>
     cf8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <vi2_max>
     cfc:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <vj1_max>
     d00:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <vj2_max>
     d04:	22 5f       	subi	r18, 0xF2	; 242
     d06:	c2 0e       	add	r12, r18
     d08:	c0 92 da 00 	sts	0x00DA, r12	; 0x8000da <v1_max>
     d0c:	80 92 d4 00 	sts	0x00D4, r8	; 0x8000d4 <vi1_max>
     d10:	90 92 dc 00 	sts	0x00DC, r9	; 0x8000dc <vj1_max>
     d14:	28 c0       	rjmp	.+80     	; 0xd66 <CheckMove+0x4fe>
     d16:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <v2_max>
     d1a:	43 2f       	mov	r20, r19
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	48 17       	cp	r20, r24
     d20:	59 07       	cpc	r21, r25
     d22:	9c f4       	brge	.+38     	; 0xd4a <CheckMove+0x4e2>
     d24:	30 93 cf 00 	sts	0x00CF, r19	; 0x8000cf <v3_max>
     d28:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <vi2_max>
     d2c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <vi3_max>
     d30:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <vj2_max>
     d34:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <vj3_max>
     d38:	22 5f       	subi	r18, 0xF2	; 242
     d3a:	c2 0e       	add	r12, r18
     d3c:	c0 92 df 00 	sts	0x00DF, r12	; 0x8000df <v2_max>
     d40:	80 92 e3 00 	sts	0x00E3, r8	; 0x8000e3 <vi2_max>
     d44:	90 92 e9 01 	sts	0x01E9, r9	; 0x8001e9 <vj2_max>
     d48:	0e c0       	rjmp	.+28     	; 0xd66 <CheckMove+0x4fe>
     d4a:	40 91 cf 00 	lds	r20, 0x00CF	; 0x8000cf <v3_max>
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	48 17       	cp	r20, r24
     d52:	59 07       	cpc	r21, r25
     d54:	44 f4       	brge	.+16     	; 0xd66 <CheckMove+0x4fe>
     d56:	22 5f       	subi	r18, 0xF2	; 242
     d58:	c2 0e       	add	r12, r18
     d5a:	c0 92 cf 00 	sts	0x00CF, r12	; 0x8000cf <v3_max>
     d5e:	80 92 d1 00 	sts	0x00D1, r8	; 0x8000d1 <vi3_max>
     d62:	90 92 d0 00 	sts	0x00D0, r9	; 0x8000d0 <vj3_max>
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	fe 85       	ldd	r31, Y+14	; 0x0e
     d6a:	f1 30       	cpi	r31, 0x01	; 1
     d6c:	69 f0       	breq	.+26     	; 0xd88 <CheckMove+0x520>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0b c0       	rjmp	.+22     	; 0xd88 <CheckMove+0x520>
     d72:	29 81       	ldd	r18, Y+1	; 0x01
     d74:	3a 81       	ldd	r19, Y+2	; 0x02
     d76:	82 2f       	mov	r24, r18
     d78:	4b 81       	ldd	r20, Y+3	; 0x03
     d7a:	5c 81       	ldd	r21, Y+4	; 0x04
     d7c:	94 2f       	mov	r25, r20
     d7e:	f2 12       	cpse	r15, r18
     d80:	b5 ce       	rjmp	.-662    	; 0xaec <CheckMove+0x284>
     d82:	21 e0       	ldi	r18, 0x01	; 1
     d84:	2e 87       	std	Y+14, r18	; 0x0e
     d86:	71 cf       	rjmp	.-286    	; 0xc6a <CheckMove+0x402>
     d88:	2e 96       	adiw	r28, 0x0e	; 14
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	bf 90       	pop	r11
     da6:	af 90       	pop	r10
     da8:	9f 90       	pop	r9
     daa:	8f 90       	pop	r8
     dac:	7f 90       	pop	r7
     dae:	6f 90       	pop	r6
     db0:	5f 90       	pop	r5
     db2:	4f 90       	pop	r4
     db4:	3f 90       	pop	r3
     db6:	2f 90       	pop	r2
     db8:	08 95       	ret

00000dba <__vector_13>:
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <Transmit>:
 }


 // TRANSMIT function : transmits a string

 void Transmit(char data[],uint8_t x,uint8_t y){
     dce:	9c 01       	movw	r18, r24
	 

	 for (uint8_t i = x ; i < y  ; i++ ){
     dd0:	64 17       	cp	r22, r20
     dd2:	50 f4       	brcc	.+20     	; 0xde8 <Transmit+0x1a>
		 while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
     dd4:	5d 9b       	sbis	0x0b, 5	; 11
     dd6:	fe cf       	rjmp	.-4      	; 0xdd4 <Transmit+0x6>
		 ;
		 UDR = data[i];
     dd8:	f9 01       	movw	r30, r18
     dda:	e6 0f       	add	r30, r22
     ddc:	f1 1d       	adc	r31, r1
     dde:	90 81       	ld	r25, Z
     de0:	9c b9       	out	0x0c, r25	; 12
 // TRANSMIT function : transmits a string

 void Transmit(char data[],uint8_t x,uint8_t y){
	 

	 for (uint8_t i = x ; i < y  ; i++ ){
     de2:	6f 5f       	subi	r22, 0xFF	; 255
     de4:	46 13       	cpse	r20, r22
     de6:	f6 cf       	rjmp	.-20     	; 0xdd4 <Transmit+0x6>
     de8:	08 95       	ret

00000dea <RST>:

// RESET FUNCTION: initializing game board and turning off leds
void RST(void)
{
	
	ILflag =0;
     dea:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
	move_done=0;
     dee:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <move_done>
	myTurn=2;
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
	PORTB |= (1<<PORTB1);
     df8:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
     dfa:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
     dfc:	c3 9a       	sbi	0x18, 3	; 24

	mt = 0; //flag reset
     dfe:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <mt>
	myTurn=2;
     e02:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     e06:	28 e0       	ldi	r18, 0x08	; 8
     e08:	30 e0       	ldi	r19, 0x00	; 0
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = 2 ; // 0 == black , 1 == white, 2 == empty
     e0a:	42 e0       	ldi	r20, 0x02	; 2
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <RST+0x44>
     e0e:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
     e12:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
     e16:	e8 0f       	add	r30, r24
     e18:	f9 1f       	adc	r31, r25
     e1a:	40 83       	st	Z, r20
     e1c:	01 96       	adiw	r24, 0x01	; 1
	mt = 0; //flag reset
	myTurn=2;
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
     e1e:	82 17       	cp	r24, r18
     e20:	93 07       	cpc	r25, r19
     e22:	a9 f7       	brne	.-22     	; 0xe0e <RST+0x24>
     e24:	28 5f       	subi	r18, 0xF8	; 248
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
	PORTB |= (1<<PORTB3);

	mt = 0; //flag reset
	myTurn=2;
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
     e28:	28 34       	cpi	r18, 0x48	; 72
     e2a:	31 05       	cpc	r19, r1
     e2c:	19 f0       	breq	.+6      	; 0xe34 <RST+0x4a>
     e2e:	c9 01       	movw	r24, r18
     e30:	08 97       	sbiw	r24, 0x08	; 8
     e32:	ed cf       	rjmp	.-38     	; 0xe0e <RST+0x24>
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = 2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	M[3*8+3] = 1 ;
     e34:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
     e38:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	83 8f       	std	Z+27, r24	; 0x1b
	M[3*8+4] = 0 ;
     e40:	14 8e       	std	Z+28, r1	; 0x1c
	M[4*8+3] = 0 ;
     e42:	13 a2       	std	Z+35, r1	; 0x23
	M[4*8+4] = 1 ;
     e44:	84 a3       	std	Z+36, r24	; 0x24
	enemy_pass = 0;
     e46:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <enemy_pass>

	TCCR1B = 0x00;         //Clearing timer -- total reset
     e4a:	1e bc       	out	0x2e, r1	; 46
	TIMSK = (1 << TOIE1) ; //Overflow interrupts -- disabled
     e4c:	84 e0       	ldi	r24, 0x04	; 4
     e4e:	89 bf       	out	0x39, r24	; 57
	Transmit("OK\r",0 , strlen("OK\r"));
     e50:	43 e0       	ldi	r20, 0x03	; 3
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	87 ea       	ldi	r24, 0xA7	; 167
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	ba df       	rcall	.-140    	; 0xdce <Transmit>
	rxReadPos = rxWritePos;
     e5a:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <rxWritePos>
     e5e:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <rxReadPos>
     e62:	08 95       	ret

00000e64 <Board>:
	return 0;	
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Visualization of the board
void Board(){
     e64:	bf 92       	push	r11
     e66:	cf 92       	push	r12
     e68:	df 92       	push	r13
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	00 d0       	rcall	.+0      	; 0xe78 <Board+0x14>
     e78:	00 d0       	rcall	.+0      	; 0xe7a <Board+0x16>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <Board+0x18>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	8b ea       	ldi	r24, 0xAB	; 171
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a2 df       	rcall	.-188    	; 0xdce <Transmit>
     e8a:	11 e3       	ldi	r17, 0x31	; 49
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
     e8c:	0f 2e       	mov	r0, r31
     e8e:	fc e7       	ldi	r31, 0x7C	; 124
     e90:	ff 2e       	mov	r15, r31
     e92:	f0 2d       	mov	r31, r0
		mymove[1] = '\x20';
     e94:	00 e2       	ldi	r16, 0x20	; 32
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
     e96:	f9 82       	std	Y+1, r15	; 0x01
		mymove[1] = '\x20';
     e98:	0a 83       	std	Y+2, r16	; 0x02
		mymove[2] = s1+1+'0';
     e9a:	1b 83       	std	Y+3, r17	; 0x03
		mymove[3] = '\x20';
     e9c:	0c 83       	std	Y+4, r16	; 0x04
		Transmit(mymove,0,4);
     e9e:	44 e0       	ldi	r20, 0x04	; 4
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	ce 01       	movw	r24, r28
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	93 df       	rcall	.-218    	; 0xdce <Transmit>
     ea8:	1f 5f       	subi	r17, 0xFF	; 255
//Visualization of the board
void Board(){
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
     eaa:	19 33       	cpi	r17, 0x39	; 57
     eac:	a1 f7       	brne	.-24     	; 0xe96 <Board+0x32>
     eae:	00 e0       	ldi	r16, 0x00	; 0
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	0f 2e       	mov	r0, r31
     eb4:	f1 e4       	ldi	r31, 0x41	; 65
     eb6:	bf 2e       	mov	r11, r31
     eb8:	f0 2d       	mov	r31, r0
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
     eba:	0f 2e       	mov	r0, r31
     ebc:	fc e7       	ldi	r31, 0x7C	; 124
     ebe:	cf 2e       	mov	r12, r31
     ec0:	f0 2d       	mov	r31, r0
			mymove[1] = '\x20';
     ec2:	68 94       	set
     ec4:	dd 24       	eor	r13, r13
     ec6:	d5 f8       	bld	r13, 5
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
     ec8:	42 e0       	ldi	r20, 0x02	; 2
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	8d ea       	ldi	r24, 0xAD	; 173
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	7e df       	rcall	.-260    	; 0xdce <Transmit>
		mymove[0] = s1+65;
     ed2:	b9 82       	std	Y+1, r11	; 0x01
		Transmit(mymove,0,1);
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	78 df       	rcall	.-272    	; 0xdce <Transmit>
     ede:	78 01       	movw	r14, r16
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	e8 0e       	add	r14, r24
     ee4:	f1 1c       	adc	r15, r1
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
     ee6:	c9 82       	std	Y+1, r12	; 0x01
			mymove[1] = '\x20';
     ee8:	da 82       	std	Y+2, r13	; 0x02
			mymove[2] = M[s1*8 + s2]+'0';
     eea:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
     eee:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
     ef2:	e0 0f       	add	r30, r16
     ef4:	f1 1f       	adc	r31, r17
     ef6:	80 81       	ld	r24, Z
     ef8:	80 5d       	subi	r24, 0xD0	; 208
     efa:	8b 83       	std	Y+3, r24	; 0x03
			mymove[3] = '\x20';
     efc:	dc 82       	std	Y+4, r13	; 0x04
			Transmit(mymove,0,4);
     efe:	44 e0       	ldi	r20, 0x04	; 4
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	ce 01       	movw	r24, r28
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	63 df       	rcall	.-314    	; 0xdce <Transmit>
     f08:	0f 5f       	subi	r16, 0xFF	; 255
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
     f0c:	0e 15       	cp	r16, r14
     f0e:	1f 05       	cpc	r17, r15
     f10:	51 f7       	brne	.-44     	; 0xee6 <Board+0x82>
     f12:	b3 94       	inc	r11
     f14:	87 01       	movw	r16, r14
		mymove[1] = '\x20';
		mymove[2] = s1+1+'0';
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
     f16:	00 34       	cpi	r16, 0x40	; 64
     f18:	11 05       	cpc	r17, r1
			mymove[2] = M[s1*8 + s2]+'0';
			mymove[3] = '\x20';
			Transmit(mymove,0,4);
		}
	}
	Transmit("\n\r",0,strlen("\n\r"));
     f1a:	b1 f6       	brne	.-84     	; 0xec8 <Board+0x64>
     f1c:	42 e0       	ldi	r20, 0x02	; 2
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	8d ea       	ldi	r24, 0xAD	; 173
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	54 df       	rcall	.-344    	; 0xdce <Transmit>
}
     f26:	26 96       	adiw	r28, 0x06	; 6
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	df 90       	pop	r13
     f40:	cf 90       	pop	r12
     f42:	bf 90       	pop	r11
     f44:	08 95       	ret

00000f46 <simulate_opponent>:
}



void simulate_opponent(void)
{
     f46:	cf 93       	push	r28
					mymove[3] = '\x20';
					mymove[4] = (v3_max-28)+'0';
					mymove[5] = '\r';
					Transmit(mymove,0,6);*/
	uint8_t worst_op_move_value;
	if( v1_max > 0 )
     f48:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <v1_max>
     f4c:	81 11       	cpse	r24, r1
     f4e:	19 c0       	rjmp	.+50     	; 0xf82 <simulate_opponent+0x3c>
     f50:	bf c0       	rjmp	.+382    	; 0x10d0 <simulate_opponent+0x18a>
						mymove[5] = '\r';
						Transmit(mymove,0,6);*/
		
		for(uint8_t i=0; i<8; i++){
			for(uint8_t j=0; j<8; j++){	
				MB[i*8+j]=M[i*8+j];
     f52:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <MB>
     f56:	f0 91 e2 00 	lds	r31, 0x00E2	; 0x8000e2 <MB+0x1>
     f5a:	e8 0f       	add	r30, r24
     f5c:	f9 1f       	adc	r31, r25
     f5e:	a0 91 e5 01 	lds	r26, 0x01E5	; 0x8001e5 <M>
     f62:	b0 91 e6 01 	lds	r27, 0x01E6	; 0x8001e6 <M+0x1>
     f66:	a8 0f       	add	r26, r24
     f68:	b9 1f       	adc	r27, r25
     f6a:	2c 91       	ld	r18, X
     f6c:	20 83       	st	Z, r18
     f6e:	01 96       	adiw	r24, 0x01	; 1
						mymove[4] = (vj1_max+1)+'0';
						mymove[5] = '\r';
						Transmit(mymove,0,6);*/
		
		for(uint8_t i=0; i<8; i++){
			for(uint8_t j=0; j<8; j++){	
     f70:	84 17       	cp	r24, r20
     f72:	95 07       	cpc	r25, r21
     f74:	71 f7       	brne	.-36     	; 0xf52 <simulate_opponent+0xc>
     f76:	48 5f       	subi	r20, 0xF8	; 248
     f78:	5f 4f       	sbci	r21, 0xFF	; 255
						mymove[3] = '\x20';
						mymove[4] = (vj1_max+1)+'0';
						mymove[5] = '\r';
						Transmit(mymove,0,6);*/
		
		for(uint8_t i=0; i<8; i++){
     f7a:	48 34       	cpi	r20, 0x48	; 72
     f7c:	51 05       	cpc	r21, r1
     f7e:	19 f4       	brne	.+6      	; 0xf86 <simulate_opponent+0x40>
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <simulate_opponent+0x46>
     f82:	48 e0       	ldi	r20, 0x08	; 8
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	ca 01       	movw	r24, r20
     f88:	08 97       	sbiw	r24, 0x08	; 8
     f8a:	e3 cf       	rjmp	.-58     	; 0xf52 <simulate_opponent+0xc>
			}
		}
						
						
		
		checkmove_sim(vi1_max, vj1_max, MyColor, 1);   // we make 1 of our best 3 possible moves
     f8c:	21 e0       	ldi	r18, 0x01	; 1
     f8e:	40 91 e0 00 	lds	r20, 0x00E0	; 0x8000e0 <MyColor>
     f92:	60 91 dc 00 	lds	r22, 0x00DC	; 0x8000dc <vj1_max>
     f96:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <vi1_max>
     f9a:	7b d8       	rcall	.-3850   	; 0x92 <checkmove_sim>
		Board();
     f9c:	63 df       	rcall	.-314    	; 0xe64 <Board>
		algo_sim();                              //finding the best possible solution(without speculation)
     f9e:	19 db       	rcall	.-2510   	; 0x5d2 <algo_sim>
     fa0:	61 df       	rcall	.-318    	; 0xe64 <Board>
		Board();
     fa2:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <vi1_max>
		
		vi_final = vi1_max;
     fa6:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <vi_final>
     faa:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <vj1_max>
		vj_final = vj1_max;
     fae:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <vj_final>
     fb2:	c0 91 d8 00 	lds	r28, 0x00D8	; 0x8000d8 <v_max>
		worst_op_move_value = v_max;
     fb6:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <v2_max>
				mymove[3] = '\x20';
				mymove[4] = (vj_final+1)+'0';
				mymove[5] = '\r';
				Transmit(mymove,0,6);*/
	}
	if( v2_max > 0 )
     fba:	81 11       	cpse	r24, r1
     fbc:	19 c0       	rjmp	.+50     	; 0xff0 <simulate_opponent+0xaa>
     fbe:	8d c0       	rjmp	.+282    	; 0x10da <simulate_opponent+0x194>
     fc0:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
	{
			for(uint8_t i=0; i<8; i++){
				for(uint8_t j=0; j<8; j++){
					M[i*8+j]=MB[i*8+j];
     fc4:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
     fc8:	e8 0f       	add	r30, r24
     fca:	f9 1f       	adc	r31, r25
     fcc:	a0 91 e1 00 	lds	r26, 0x00E1	; 0x8000e1 <MB>
     fd0:	b0 91 e2 00 	lds	r27, 0x00E2	; 0x8000e2 <MB+0x1>
     fd4:	a8 0f       	add	r26, r24
     fd6:	b9 1f       	adc	r27, r25
     fd8:	2c 91       	ld	r18, X
     fda:	20 83       	st	Z, r18
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	84 17       	cp	r24, r20
     fe0:	95 07       	cpc	r25, r21
				Transmit(mymove,0,6);*/
	}
	if( v2_max > 0 )
	{
			for(uint8_t i=0; i<8; i++){
				for(uint8_t j=0; j<8; j++){
     fe2:	71 f7       	brne	.-36     	; 0xfc0 <simulate_opponent+0x7a>
     fe4:	48 5f       	subi	r20, 0xF8	; 248
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	48 34       	cpi	r20, 0x48	; 72
     fea:	51 05       	cpc	r21, r1
				mymove[5] = '\r';
				Transmit(mymove,0,6);*/
	}
	if( v2_max > 0 )
	{
			for(uint8_t i=0; i<8; i++){
     fec:	19 f4       	brne	.+6      	; 0xff4 <simulate_opponent+0xae>
     fee:	05 c0       	rjmp	.+10     	; 0xffa <simulate_opponent+0xb4>
     ff0:	48 e0       	ldi	r20, 0x08	; 8
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	ca 01       	movw	r24, r20
     ff6:	08 97       	sbiw	r24, 0x08	; 8
     ff8:	e3 cf       	rjmp	.-58     	; 0xfc0 <simulate_opponent+0x7a>
     ffa:	21 e0       	ldi	r18, 0x01	; 1
     ffc:	40 91 e0 00 	lds	r20, 0x00E0	; 0x8000e0 <MyColor>
				for(uint8_t j=0; j<8; j++){
					M[i*8+j]=MB[i*8+j];
				}
			}
		checkmove_sim(vi2_max, vj2_max, MyColor, 1);   // we make 1 of our best 3 possible moves
    1000:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <vj2_max>
    1004:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <vi2_max>
    1008:	44 d8       	rcall	.-3960   	; 0x92 <checkmove_sim>
    100a:	e3 da       	rcall	.-2618   	; 0x5d2 <algo_sim>
		algo_sim();                              //finding the best possible solution(without speculation)
    100c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <v_max>
		if(worst_op_move_value > v_max)
    1010:	8c 17       	cp	r24, r28
    1012:	48 f4       	brcc	.+18     	; 0x1026 <simulate_opponent+0xe0>
    1014:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <vi2_max>
		{
			vi_final = vi2_max;
    1018:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <vi_final>
    101c:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <vj2_max>
			vj_final = vj2_max;
    1020:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <vj_final>
    1024:	c8 2f       	mov	r28, r24
    1026:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <v3_max>
			worst_op_move_value = v_max;
		}
	}
	if( v3_max > 0 )
    102a:	81 11       	cpse	r24, r1
    102c:	19 c0       	rjmp	.+50     	; 0x1060 <simulate_opponent+0x11a>
    102e:	4b c0       	rjmp	.+150    	; 0x10c6 <simulate_opponent+0x180>
    1030:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
	{
		for(uint8_t i=0; i<8; i++){
			for(uint8_t j=0; j<8; j++){
				M[i*8+j]=MB[i*8+j];
    1034:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
    1038:	e8 0f       	add	r30, r24
    103a:	f9 1f       	adc	r31, r25
    103c:	a0 91 e1 00 	lds	r26, 0x00E1	; 0x8000e1 <MB>
    1040:	b0 91 e2 00 	lds	r27, 0x00E2	; 0x8000e2 <MB+0x1>
    1044:	a8 0f       	add	r26, r24
    1046:	b9 1f       	adc	r27, r25
    1048:	2c 91       	ld	r18, X
    104a:	20 83       	st	Z, r18
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	84 17       	cp	r24, r20
    1050:	95 07       	cpc	r25, r21
		}
	}
	if( v3_max > 0 )
	{
		for(uint8_t i=0; i<8; i++){
			for(uint8_t j=0; j<8; j++){
    1052:	71 f7       	brne	.-36     	; 0x1030 <simulate_opponent+0xea>
    1054:	48 5f       	subi	r20, 0xF8	; 248
    1056:	5f 4f       	sbci	r21, 0xFF	; 255
    1058:	48 34       	cpi	r20, 0x48	; 72
    105a:	51 05       	cpc	r21, r1
			worst_op_move_value = v_max;
		}
	}
	if( v3_max > 0 )
	{
		for(uint8_t i=0; i<8; i++){
    105c:	19 f4       	brne	.+6      	; 0x1064 <simulate_opponent+0x11e>
    105e:	05 c0       	rjmp	.+10     	; 0x106a <simulate_opponent+0x124>
    1060:	48 e0       	ldi	r20, 0x08	; 8
    1062:	50 e0       	ldi	r21, 0x00	; 0
		algo_sim();                              //finding the best possible solution(without speculation)
		if(worst_op_move_value > v_max)
		{
			vi_final = vi2_max;
			vj_final = vj2_max;
			worst_op_move_value = v_max;
    1064:	ca 01       	movw	r24, r20
    1066:	08 97       	sbiw	r24, 0x08	; 8
    1068:	e3 cf       	rjmp	.-58     	; 0x1030 <simulate_opponent+0xea>
    106a:	21 e0       	ldi	r18, 0x01	; 1
    106c:	40 91 e0 00 	lds	r20, 0x00E0	; 0x8000e0 <MyColor>
		for(uint8_t i=0; i<8; i++){
			for(uint8_t j=0; j<8; j++){
				M[i*8+j]=MB[i*8+j];
			}
		}
		checkmove_sim(vi3_max, vj3_max, MyColor, 1);   // we make 1 of our best 3 possible moves
    1070:	60 91 d0 00 	lds	r22, 0x00D0	; 0x8000d0 <vj3_max>
    1074:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <vi3_max>
    1078:	0c d8       	rcall	.-4072   	; 0x92 <checkmove_sim>
    107a:	ab da       	rcall	.-2730   	; 0x5d2 <algo_sim>
		algo_sim();                              //finding the best possible solution(without speculation)
    107c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <v_max>
		if(worst_op_move_value > v_max)
    1080:	8c 17       	cp	r24, r28
    1082:	08 f5       	brcc	.+66     	; 0x10c6 <simulate_opponent+0x180>
    1084:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <vi3_max>
		{
			vi_final = vi3_max;
    1088:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <vi_final>
    108c:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <vj3_max>
			vj_final = vj3_max;
    1090:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <vj_final>
    1094:	18 c0       	rjmp	.+48     	; 0x10c6 <simulate_opponent+0x180>
    1096:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
	}

	
	for(uint8_t i=0; i<8; i++){
		for(uint8_t j=0; j<8; j++){
			M[i*8+j]=MB[i*8+j];
    109a:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
    109e:	e8 0f       	add	r30, r24
    10a0:	f9 1f       	adc	r31, r25
    10a2:	a0 91 e1 00 	lds	r26, 0x00E1	; 0x8000e1 <MB>
    10a6:	b0 91 e2 00 	lds	r27, 0x00E2	; 0x8000e2 <MB+0x1>
    10aa:	a8 0f       	add	r26, r24
    10ac:	b9 1f       	adc	r27, r25
    10ae:	2c 91       	ld	r18, X
    10b0:	20 83       	st	Z, r18
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	84 17       	cp	r24, r20
    10b6:	95 07       	cpc	r25, r21
		}
	}

	
	for(uint8_t i=0; i<8; i++){
		for(uint8_t j=0; j<8; j++){
    10b8:	71 f7       	brne	.-36     	; 0x1096 <simulate_opponent+0x150>
    10ba:	48 5f       	subi	r20, 0xF8	; 248
    10bc:	5f 4f       	sbci	r21, 0xFF	; 255
    10be:	48 34       	cpi	r20, 0x48	; 72
    10c0:	51 05       	cpc	r21, r1
			worst_op_move_value = v_max;
		}
	}

	
	for(uint8_t i=0; i<8; i++){
    10c2:	19 f4       	brne	.+6      	; 0x10ca <simulate_opponent+0x184>
    10c4:	0f c0       	rjmp	.+30     	; 0x10e4 <simulate_opponent+0x19e>
    10c6:	48 e0       	ldi	r20, 0x08	; 8
    10c8:	50 e0       	ldi	r21, 0x00	; 0
		algo_sim();                              //finding the best possible solution(without speculation)
		if(worst_op_move_value > v_max)
		{
			vi_final = vi2_max;
			vj_final = vj2_max;
			worst_op_move_value = v_max;
    10ca:	ca 01       	movw	r24, r20
    10cc:	08 97       	sbiw	r24, 0x08	; 8
    10ce:	e3 cf       	rjmp	.-58     	; 0x1096 <simulate_opponent+0x150>
    10d0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <v2_max>
				mymove[3] = '\x20';
				mymove[4] = (vj_final+1)+'0';
				mymove[5] = '\r';
				Transmit(mymove,0,6);*/
	}
	if( v2_max > 0 )
    10d4:	81 11       	cpse	r24, r1
    10d6:	8c cf       	rjmp	.-232    	; 0xff0 <simulate_opponent+0xaa>
    10d8:	a6 cf       	rjmp	.-180    	; 0x1026 <simulate_opponent+0xe0>
    10da:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <v3_max>
			vi_final = vi2_max;
			vj_final = vj2_max;
			worst_op_move_value = v_max;
		}
	}
	if( v3_max > 0 )
    10de:	81 11       	cpse	r24, r1
    10e0:	bf cf       	rjmp	.-130    	; 0x1060 <simulate_opponent+0x11a>
    10e2:	f1 cf       	rjmp	.-30     	; 0x10c6 <simulate_opponent+0x180>
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <AnnounceRes>:
	for(uint8_t i=0; i<8; i++){
		for(uint8_t j=0; j<8; j++){
			M[i*8+j]=MB[i*8+j];
		}
	}
}
    10e8:	99 b7       	in	r25, 0x39	; 57
    10ea:	9b 7f       	andi	r25, 0xFB	; 251


void AnnounceRes(uint8_t res)
{
	//after announcement, timer interrupts are disabled.
	TIMSK &= ~(1 << TOIE1) ;
    10ec:	99 bf       	out	0x39, r25	; 57
	if(res == 1)
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	51 f4       	brne	.+20     	; 0x1106 <AnnounceRes+0x1e>
	{
		Transmit("WN\r",0,strlen("WN\r"));
    10f2:	43 e0       	ldi	r20, 0x03	; 3
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	80 eb       	ldi	r24, 0xB0	; 176
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	69 de       	rcall	.-814    	; 0xdce <Transmit>
		PORTB ^= (1<<PORTB1);             //Toggle LED
    10fc:	98 b3       	in	r25, 0x18	; 24
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	89 27       	eor	r24, r25
    1102:	88 bb       	out	0x18, r24	; 24
    1104:	15 c0       	rjmp	.+42     	; 0x1130 <AnnounceRes+0x48>
	}
	else if(res == 0)
    1106:	81 11       	cpse	r24, r1
    1108:	0a c0       	rjmp	.+20     	; 0x111e <AnnounceRes+0x36>
	{
		Transmit("LS\r",0,strlen("LS\r"));
    110a:	43 e0       	ldi	r20, 0x03	; 3
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	84 eb       	ldi	r24, 0xB4	; 180
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	5d de       	rcall	.-838    	; 0xdce <Transmit>
		PORTB ^= (1<<PORTB2);			//Toggle LED
    1114:	98 b3       	in	r25, 0x18	; 24
    1116:	84 e0       	ldi	r24, 0x04	; 4
    1118:	89 27       	eor	r24, r25
    111a:	88 bb       	out	0x18, r24	; 24
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <AnnounceRes+0x48>
	}
	else
	{
		Transmit("TE\r",0,strlen("TE\r"));
    111e:	43 e0       	ldi	r20, 0x03	; 3
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	88 eb       	ldi	r24, 0xB8	; 184
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	53 de       	rcall	.-858    	; 0xdce <Transmit>
		PORTB ^= (1<<PORTB3);			//Toggle LED
    1128:	98 b3       	in	r25, 0x18	; 24
    112a:	88 e0       	ldi	r24, 0x08	; 8
    112c:	89 27       	eor	r24, r25
    112e:	88 bb       	out	0x18, r24	; 24
	}
	TCCR1B = 0x00;         //Clearing timer -- total reset
    1130:	1e bc       	out	0x2e, r1	; 46
	TIMSK = (1 << TOIE1) ; //Overflow interrupts -- disabled
    1132:	84 e0       	ldi	r24, 0x04	; 4
    1134:	89 bf       	out	0x39, r24	; 57
    1136:	08 95       	ret

00001138 <EndGame>:

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
    1138:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
    113c:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
    1140:	bf 01       	movw	r22, r30
    1142:	60 5c       	subi	r22, 0xC0	; 192
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;
    1146:	40 e0       	ldi	r20, 0x00	; 0

/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	11 c0       	rjmp	.+34     	; 0x116e <EndGame+0x36>

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
    114c:	df 01       	movw	r26, r30
    114e:	80 81       	ld	r24, Z
    1150:	81 11       	cpse	r24, r1
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <EndGame+0x1e>
			b++;
    1154:	9f 5f       	subi	r25, 0xFF	; 255
			if(M[i*8 + y] == 1)
    1156:	8c 91       	ld	r24, X
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	09 f4       	brne	.+2      	; 0x115e <EndGame+0x26>
			w++;
    115c:	4f 5f       	subi	r20, 0xFF	; 255
    115e:	31 96       	adiw	r30, 0x01	; 1
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
    1160:	2e 17       	cp	r18, r30
    1162:	3f 07       	cpc	r19, r31
    1164:	99 f7       	brne	.-26     	; 0x114c <EndGame+0x14>
    1166:	f9 01       	movw	r30, r18
//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
    1168:	26 17       	cp	r18, r22
    116a:	37 07       	cpc	r19, r23
    116c:	21 f0       	breq	.+8      	; 0x1176 <EndGame+0x3e>
    116e:	9f 01       	movw	r18, r30
    1170:	28 5f       	subi	r18, 0xF8	; 248
    1172:	3f 4f       	sbci	r19, 0xFF	; 255
    1174:	eb cf       	rjmp	.-42     	; 0x114c <EndGame+0x14>
			b++;
			if(M[i*8 + y] == 1)
			w++;
		}
	}
	if(b == w)
    1176:	94 13       	cpse	r25, r20
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <EndGame+0x48>
	{
		AnnounceRes(2);	//TIE -LED3
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	b5 df       	rcall	.-150    	; 0x10e8 <AnnounceRes>
    117e:	14 c0       	rjmp	.+40     	; 0x11a8 <EndGame+0x70>

	}
	else if(b>w)
    1180:	49 17       	cp	r20, r25
    1182:	50 f4       	brcc	.+20     	; 0x1198 <EndGame+0x60>
	{
		if(MyColor == 0) //black
    1184:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <MyColor>
    1188:	81 11       	cpse	r24, r1
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <EndGame+0x5a>
		AnnounceRes(1);//WIN - LED1
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	ac df       	rcall	.-168    	; 0x10e8 <AnnounceRes>
    1190:	0b c0       	rjmp	.+22     	; 0x11a8 <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	a9 df       	rcall	.-174    	; 0x10e8 <AnnounceRes>
    1196:	08 c0       	rjmp	.+16     	; 0x11a8 <EndGame+0x70>
    1198:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <MyColor>
	}
	else
	{
		if(MyColor == 1) //white
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	11 f4       	brne	.+4      	; 0x11a4 <EndGame+0x6c>
		AnnounceRes(1);//WIN - LED1
    11a0:	a3 df       	rcall	.-186    	; 0x10e8 <AnnounceRes>
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	a0 df       	rcall	.-192    	; 0x10e8 <AnnounceRes>
    11a8:	82 e0       	ldi	r24, 0x02	; 2
	}

	//after announcement wait for ok in while loop(set move_done = 1)
	myTurn = 2;
    11aa:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    11ae:	08 95       	ret

000011b0 <__vector_8>:
    11b0:	1f 92       	push	r1
}



 ISR (TIMER1_OVF_vect)    // Timer1 ISR
 {
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
	 if(myTurn==1){
    11d2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	19 f4       	brne	.+6      	; 0x11e0 <__vector_8+0x30>
		 // coming soon 
		 //last sec MM will save the day..eventually.		 
		 myTurn =0;
    11da:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
    11de:	0e c0       	rjmp	.+28     	; 0x11fc <__vector_8+0x4c>
		// move_done = 1;
	 } 
	 else if(myTurn == 0){
    11e0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
    11e4:	81 11       	cpse	r24, r1
    11e6:	0a c0       	rjmp	.+20     	; 0x11fc <__vector_8+0x4c>
		  Transmit("IT\r",0,strlen("IT\r"));
    11e8:	43 e0       	ldi	r20, 0x03	; 3
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	8c eb       	ldi	r24, 0xBC	; 188
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	ee dd       	rcall	.-1060   	; 0xdce <Transmit>
		  ITflag = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <ITflag>
		  ILflag = 1;
    11f8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
	 }	 
 }
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <init_leds>:

 //////////////////////////////////////////////// INITIALIZATION ///////////////////////////////////////////////////////////

 void init_leds()
 {
	DDRB |= (1<<DDB1);
    121e:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1<<DDB2);
    1220:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= (1<<DDB3);
    1222:	bb 9a       	sbi	0x17, 3	; 23
	PORTB |= (1<<PORTB1);
    1224:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
    1226:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
    1228:	c3 9a       	sbi	0x18, 3	; 24
    122a:	08 95       	ret

0000122c <init_timer>:

	 //////////Timer/Counter Initialization/////////
	 /* Timer starts from a specific value, 
		so we can take advantage of ISR
	 */
	TCNT1 = 3036;//2SECONDS // 34286;//49911  //2^16 = 65536 - (8,000,000/256) 
    122c:	8c ed       	ldi	r24, 0xDC	; 220
    122e:	9b e0       	ldi	r25, 0x0B	; 11
    1230:	9d bd       	out	0x2d, r25	; 45
    1232:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00; //Default - Cleared
    1234:	1f bc       	out	0x2f, r1	; 47

	/*	The CLK/64 
	*/
	//TCCR1B &=  ~(1<<CS11);  
	
	TCCR1B |=  (1<<CS12);// |(1<<CS10);
    1236:	8e b5       	in	r24, 0x2e	; 46
    1238:	84 60       	ori	r24, 0x04	; 4
    123a:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
    123c:	84 e0       	ldi	r24, 0x04	; 4
    123e:	89 bf       	out	0x39, r24	; 57
    1240:	08 95       	ret

00001242 <Algo>:



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
    1242:	2f 92       	push	r2
    1244:	3f 92       	push	r3
    1246:	4f 92       	push	r4
    1248:	5f 92       	push	r5
    124a:	6f 92       	push	r6
    124c:	7f 92       	push	r7
    124e:	8f 92       	push	r8
    1250:	9f 92       	push	r9
    1252:	af 92       	push	r10
    1254:	bf 92       	push	r11
    1256:	cf 92       	push	r12
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	64 97       	sbiw	r28, 0x14	; 20
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
	uint8_t mi,my,i,j,u,z,ibar,ybar,skip,istep,ystep;
	myTurn = 1;		//Important - collision with  init_timer
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
	
	v1_max = 0;
    127c:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <v1_max>
	v2_max = 0;
    1280:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <v2_max>
	v3_max = 0;
    1284:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <v3_max>
    1288:	21 e0       	ldi	r18, 0x01	; 1
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3a 8b       	std	Y+18, r19	; 0x12
    128e:	29 8b       	std	Y+17, r18	; 0x11
    1290:	1c 8a       	std	Y+20, r1	; 0x14
    1292:	1b 8a       	std	Y+19, r1	; 0x13


	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
    1294:	81 2c       	mov	r8, r1
    1296:	e6 c0       	rjmp	.+460    	; 0x1464 <Algo+0x222>
	{
		for(my=0; my<=7; my++)
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
    1298:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
    129c:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
    12a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    12a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    12a4:	e6 0f       	add	r30, r22
    12a6:	f7 1f       	adc	r31, r23
    12a8:	90 81       	ld	r25, Z
    12aa:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <MyColor>
    12ae:	98 13       	cpse	r25, r24
    12b0:	b9 c0       	rjmp	.+370    	; 0x1424 <Algo+0x1e2>
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
    12b2:	33 24       	eor	r3, r3
    12b4:	3a 94       	dec	r3
    12b6:	3b 0c       	add	r3, r11
    12b8:	e3 2c       	mov	r14, r3
    12ba:	f1 2c       	mov	r15, r1
    12bc:	89 89       	ldd	r24, Y+17	; 0x11
    12be:	9a 89       	ldd	r25, Y+18	; 0x12
    12c0:	8e 15       	cp	r24, r14
    12c2:	9f 05       	cpc	r25, r15
    12c4:	0c f4       	brge	.+2      	; 0x12c8 <Algo+0x86>
    12c6:	ae c0       	rjmp	.+348    	; 0x1424 <Algo+0x1e2>
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
    12c8:	4f 80       	ldd	r4, Y+7	; 0x07
    12ca:	58 84       	ldd	r5, Y+8	; 0x08
							
							//Setting up y barrier
							if(j > mi)
							ybar = 7;
							else if(j == my)
							ybar = 10;
    12cc:	0f 2e       	mov	r0, r31
    12ce:	fa e0       	ldi	r31, 0x0A	; 10
    12d0:	af 2e       	mov	r10, r31
    12d2:	f0 2d       	mov	r31, r0
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
    12d4:	97 e0       	ldi	r25, 0x07	; 7
    12d6:	93 15       	cp	r25, r3
    12d8:	08 f4       	brcc	.+2      	; 0x12dc <Algo+0x9a>
    12da:	9b c0       	rjmp	.+310    	; 0x1412 <Algo+0x1d0>
						continue;
					for(j = my - 1; j<=(my+1); ++j)
    12dc:	1f ef       	ldi	r17, 0xFF	; 255
    12de:	12 0d       	add	r17, r2
    12e0:	81 2f       	mov	r24, r17
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	2f 81       	ldd	r18, Y+7	; 0x07
    12e6:	38 85       	ldd	r19, Y+8	; 0x08
    12e8:	28 17       	cp	r18, r24
    12ea:	39 07       	cpc	r19, r25
    12ec:	0c f4       	brge	.+2      	; 0x12f0 <Algo+0xae>
    12ee:	91 c0       	rjmp	.+290    	; 0x1412 <Algo+0x1d0>
						if(j<0||j>7) //Matrix out of border protection 
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
    12f0:	47 01       	movw	r8, r14
    12f2:	88 0c       	add	r8, r8
    12f4:	99 1c       	adc	r9, r9
    12f6:	88 0c       	add	r8, r8
    12f8:	99 1c       	adc	r9, r9
    12fa:	88 0c       	add	r8, r8
    12fc:	99 1c       	adc	r9, r9


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    12fe:	63 2c       	mov	r6, r3
    1300:	71 2c       	mov	r7, r1
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
    1302:	b3 01       	movw	r22, r6
    1304:	66 0f       	add	r22, r22
    1306:	77 1f       	adc	r23, r23
    1308:	66 0f       	add	r22, r22
    130a:	77 1f       	adc	r23, r23
    130c:	66 0f       	add	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	7c 87       	std	Y+12, r23	; 0x0c
    1312:	6b 87       	std	Y+11, r22	; 0x0b
							ybar = 10;
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
    1314:	03 2d       	mov	r16, r3
    1316:	0b 19       	sub	r16, r11


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    1318:	20 2f       	mov	r18, r16
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3a 87       	std	Y+10, r19	; 0x0a
    131e:	29 87       	std	Y+9, r18	; 0x09
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
					{
						if(j<0||j>7) //Matrix out of border protection 
    1320:	18 30       	cpi	r17, 0x08	; 8
    1322:	08 f0       	brcs	.+2      	; 0x1326 <Algo+0xe4>
    1324:	6f c0       	rjmp	.+222    	; 0x1404 <Algo+0x1c2>
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
    1326:	a0 91 e5 01 	lds	r26, 0x01E5	; 0x8001e5 <M>
    132a:	b0 91 e6 01 	lds	r27, 0x01E6	; 0x8001e6 <M+0x1>
    132e:	88 0d       	add	r24, r8
    1330:	99 1d       	adc	r25, r9
    1332:	fd 01       	movw	r30, r26
    1334:	e8 0f       	add	r30, r24
    1336:	f9 1f       	adc	r31, r25
    1338:	20 81       	ld	r18, Z
    133a:	40 91 e0 00 	lds	r20, 0x00E0	; 0x8000e0 <MyColor>
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	41 11       	cpse	r20, r1
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	28 17       	cp	r18, r24
    134a:	39 07       	cpc	r19, r25
    134c:	09 f0       	breq	.+2      	; 0x1350 <Algo+0x10e>
    134e:	5a c0       	rjmp	.+180    	; 0x1404 <Algo+0x1c2>
						{

							//Setting up i barrier (board)
							if(i > mi)
    1350:	b3 14       	cp	r11, r3
    1352:	20 f0       	brcs	.+8      	; 0x135c <Algo+0x11a>
							ibar = 7 ;
							else if(i == mi)
    1354:	b3 14       	cp	r11, r3
    1356:	21 f0       	breq	.+8      	; 0x1360 <Algo+0x11e>
							ibar = 10;   //big enough, so the other axis will break while below
							else
							ibar = 0;
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <Algo+0x120>
						if((M[i*8 + j] == !MyColor))		
						{

							//Setting up i barrier (board)
							if(i > mi)
							ibar = 7 ;
    135c:	87 e0       	ldi	r24, 0x07	; 7
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <Algo+0x120>
							else if(i == mi)
							ibar = 10;   //big enough, so the other axis will break while below
    1360:	8a 2d       	mov	r24, r10
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
    1362:	b1 16       	cp	r11, r17
    1364:	20 f0       	brcs	.+8      	; 0x136e <Algo+0x12c>
							ybar = 7;
							else if(j == my)
    1366:	21 16       	cp	r2, r17
    1368:	21 f0       	breq	.+8      	; 0x1372 <Algo+0x130>
							ybar = 10;
							else
							ybar = 0;
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <Algo+0x132>
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
							ybar = 7;
    136e:	57 e0       	ldi	r21, 0x07	; 7
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <Algo+0x132>
							else if(j == my)
							ybar = 10;
    1372:	5a 2d       	mov	r21, r10
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
							ystep = j - my;
    1374:	91 2f       	mov	r25, r17
    1376:	92 19       	sub	r25, r2


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    1378:	c9 84       	ldd	r12, Y+9	; 0x09
    137a:	da 84       	ldd	r13, Y+10	; 0x0a
    137c:	c8 0e       	add	r12, r24
    137e:	d1 1c       	adc	r13, r1
    1380:	6c 14       	cp	r6, r12
    1382:	7d 04       	cpc	r7, r13
    1384:	09 f4       	brne	.+2      	; 0x1388 <Algo+0x146>
    1386:	3e c0       	rjmp	.+124    	; 0x1404 <Algo+0x1c2>
    1388:	21 2f       	mov	r18, r17
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	e9 2e       	mov	r14, r25
    138e:	f1 2c       	mov	r15, r1
    1390:	e5 0e       	add	r14, r21
    1392:	f1 1c       	adc	r15, r1
    1394:	2e 15       	cp	r18, r14
    1396:	3f 05       	cpc	r19, r15
    1398:	a9 f1       	breq	.+106    	; 0x1404 <Algo+0x1c2>
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
    139a:	6b 85       	ldd	r22, Y+11	; 0x0b
    139c:	7c 85       	ldd	r23, Y+12	; 0x0c
    139e:	26 0f       	add	r18, r22
    13a0:	37 1f       	adc	r19, r23
    13a2:	fd 01       	movw	r30, r26
    13a4:	e2 0f       	add	r30, r18
    13a6:	f3 1f       	adc	r31, r19
    13a8:	80 81       	ld	r24, Z
    13aa:	48 17       	cp	r20, r24
    13ac:	59 f1       	breq	.+86     	; 0x1404 <Algo+0x1c2>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
    13ae:	80 81       	ld	r24, Z
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	a1 f0       	breq	.+40     	; 0x13dc <Algo+0x19a>
    13b4:	61 2f       	mov	r22, r17
    13b6:	83 2d       	mov	r24, r3
    13b8:	19 c0       	rjmp	.+50     	; 0x13ec <Algo+0x1aa>
							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
    13ba:	22 0f       	add	r18, r18
    13bc:	33 1f       	adc	r19, r19
    13be:	22 0f       	add	r18, r18
    13c0:	33 1f       	adc	r19, r19
    13c2:	22 0f       	add	r18, r18
    13c4:	33 1f       	adc	r19, r19
    13c6:	e2 0f       	add	r30, r18
    13c8:	f3 1f       	adc	r31, r19
    13ca:	ea 0f       	add	r30, r26
    13cc:	fb 1f       	adc	r31, r27
    13ce:	20 81       	ld	r18, Z
    13d0:	42 17       	cp	r20, r18
    13d2:	c1 f0       	breq	.+48     	; 0x1404 <Algo+0x1c2>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
    13d4:	20 81       	ld	r18, Z
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	49 f4       	brne	.+18     	; 0x13ec <Algo+0x1aa>
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <Algo+0x19e>
    13dc:	61 2f       	mov	r22, r17
    13de:	83 2d       	mov	r24, r3
									skip = 0;
									move_done=1;
    13e0:	71 e0       	ldi	r23, 0x01	; 1
    13e2:	70 93 d9 00 	sts	0x00D9, r23	; 0x8000d9 <move_done>
									//CheckMove(u, z, MyColor, 1);  //Coloring adjacent paths, according to the rules  ////////-- OLD VERSION --////////////
									CheckMove(u, z, MyColor, 0); //Calculate and 'write'(if its the greatest till now) on board(in the specific slot we found) the result score of this possible move.
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	3f da       	rcall	.-2946   	; 0x868 <CheckMove>
									mymove[2] = '\x20';
									mymove[3] = u+65;
									mymove[4] = (z+1)+'0';
									mymove[5] = '\r';
									Transmit(mymove,0,6);*/
									break;
    13ea:	0c c0       	rjmp	.+24     	; 0x1404 <Algo+0x1c2>
								}

								z+= ystep;
    13ec:	69 0f       	add	r22, r25
								u+= istep;
    13ee:	80 0f       	add	r24, r16


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	2c 15       	cp	r18, r12
    13f6:	3d 05       	cpc	r19, r13
    13f8:	29 f0       	breq	.+10     	; 0x1404 <Algo+0x1c2>
    13fa:	e6 2f       	mov	r30, r22
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	ee 15       	cp	r30, r14
    1400:	ff 05       	cpc	r31, r15
    1402:	d9 f6       	brne	.-74     	; 0x13ba <Algo+0x178>
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
    1404:	1f 5f       	subi	r17, 0xFF	; 255
    1406:	81 2f       	mov	r24, r17
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	48 16       	cp	r4, r24
    140c:	59 06       	cpc	r5, r25
    140e:	0c f0       	brlt	.+2      	; 0x1412 <Algo+0x1d0>
    1410:	87 cf       	rjmp	.-242    	; 0x1320 <Algo+0xde>
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
    1412:	33 94       	inc	r3
    1414:	e3 2c       	mov	r14, r3
    1416:	f1 2c       	mov	r15, r1
    1418:	8f 85       	ldd	r24, Y+15	; 0x0f
    141a:	98 89       	ldd	r25, Y+16	; 0x10
    141c:	8e 15       	cp	r24, r14
    141e:	9f 05       	cpc	r25, r15
    1420:	0c f0       	brlt	.+2      	; 0x1424 <Algo+0x1e2>
    1422:	58 cf       	rjmp	.-336    	; 0x12d4 <Algo+0x92>
	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
	{
		for(my=0; my<=7; my++)
    1424:	23 94       	inc	r2
    1426:	2d 85       	ldd	r18, Y+13	; 0x0d
    1428:	3e 85       	ldd	r19, Y+14	; 0x0e
    142a:	2f 5f       	subi	r18, 0xFF	; 255
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	3e 87       	std	Y+14, r19	; 0x0e
    1430:	2d 87       	std	Y+13, r18	; 0x0d
    1432:	6f 81       	ldd	r22, Y+7	; 0x07
    1434:	78 85       	ldd	r23, Y+8	; 0x08
    1436:	6f 5f       	subi	r22, 0xFF	; 255
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	78 87       	std	Y+8, r23	; 0x08
    143c:	6f 83       	std	Y+7, r22	; 0x07
    143e:	78 e0       	ldi	r23, 0x08	; 8
    1440:	27 12       	cpse	r2, r23
    1442:	2a cf       	rjmp	.-428    	; 0x1298 <Algo+0x56>
    1444:	8b 2c       	mov	r8, r11


	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
    1446:	83 94       	inc	r8
    1448:	8b 89       	ldd	r24, Y+19	; 0x13
    144a:	9c 89       	ldd	r25, Y+20	; 0x14
    144c:	08 96       	adiw	r24, 0x08	; 8
    144e:	9c 8b       	std	Y+20, r25	; 0x14
    1450:	8b 8b       	std	Y+19, r24	; 0x13
    1452:	29 89       	ldd	r18, Y+17	; 0x11
    1454:	3a 89       	ldd	r19, Y+18	; 0x12
    1456:	2f 5f       	subi	r18, 0xFF	; 255
    1458:	3f 4f       	sbci	r19, 0xFF	; 255
    145a:	3a 8b       	std	Y+18, r19	; 0x12
    145c:	29 8b       	std	Y+17, r18	; 0x11
    145e:	80 34       	cpi	r24, 0x40	; 64
    1460:	91 05       	cpc	r25, r1
    1462:	81 f0       	breq	.+32     	; 0x1484 <Algo+0x242>



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
    1464:	6b 89       	ldd	r22, Y+19	; 0x13
    1466:	7c 89       	ldd	r23, Y+20	; 0x14
    1468:	7e 87       	std	Y+14, r23	; 0x0e
    146a:	6d 87       	std	Y+13, r22	; 0x0d
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	98 87       	std	Y+8, r25	; 0x08
    1472:	8f 83       	std	Y+7, r24	; 0x07
    1474:	31 2c       	mov	r3, r1
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
    1476:	29 89       	ldd	r18, Y+17	; 0x11
    1478:	3a 89       	ldd	r19, Y+18	; 0x12
    147a:	38 8b       	std	Y+16, r19	; 0x10
    147c:	2f 87       	std	Y+15, r18	; 0x0f
    147e:	23 2c       	mov	r2, r3
    1480:	b8 2c       	mov	r11, r8
    1482:	0a cf       	rjmp	.-492    	; 0x1298 <Algo+0x56>
			}//if  (find our pawn)

		}//for my

	}//for mi
	if(move_done)
    1484:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <move_done>
    1488:	88 23       	and	r24, r24
    148a:	09 f4       	brne	.+2      	; 0x148e <Algo+0x24c>
				mymove[4] = (vj_final+1)+'0';
				mymove[5] = '\r';
		Transmit(mymove,0,6);
		
		*/
		simulate_opponent();
    148c:	49 c0       	rjmp	.+146    	; 0x1520 <Algo+0x2de>
    148e:	5b dd       	rcall	.-1354   	; 0xf46 <simulate_opponent>
				mymove[5] = '\r';
				Transmit(mymove,0,6);
*/
		//vi_final and vj_final are the final move decision after the speculation 
		
		CheckMove(vi_final, vj_final, MyColor ,1); // Paint the best possible slot
    1490:	21 e0       	ldi	r18, 0x01	; 1
    1492:	40 91 e0 00 	lds	r20, 0x00E0	; 0x8000e0 <MyColor>
    1496:	60 91 d5 00 	lds	r22, 0x00D5	; 0x8000d5 <vj_final>
    149a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <vi_final>
    149e:	e4 d9       	rcall	.-3128   	; 0x868 <CheckMove>
		mymove[0] = 'M';
    14a0:	8d e4       	ldi	r24, 0x4D	; 77
    14a2:	89 83       	std	Y+1, r24	; 0x01
		mymove[1] = 'M';
    14a4:	8a 83       	std	Y+2, r24	; 0x02
		mymove[2] = '\x20';
    14a6:	80 e2       	ldi	r24, 0x20	; 32
    14a8:	8b 83       	std	Y+3, r24	; 0x03
		mymove[3] = vi_final+65;
    14aa:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <vi_final>
    14ae:	8f 5b       	subi	r24, 0xBF	; 191
    14b0:	8c 83       	std	Y+4, r24	; 0x04
		mymove[4] = (vj_final+1)+'0';
    14b2:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <vj_final>
    14b6:	8f 5c       	subi	r24, 0xCF	; 207
		mymove[5] = '\r';
    14b8:	8d 83       	std	Y+5, r24	; 0x05
    14ba:	8d e0       	ldi	r24, 0x0D	; 13
		Board();
    14bc:	8e 83       	std	Y+6, r24	; 0x06
    14be:	d2 dc       	rcall	.-1628   	; 0xe64 <Board>
		Transmit(mymove,0,6); //Transmit our Move
    14c0:	46 e0       	ldi	r20, 0x06	; 6
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	ce 01       	movw	r24, r28
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	82 dc       	rcall	.-1788   	; 0xdce <Transmit>
	
	//if move_done == 0 , that means that we cant find solution, we pass                           
	//while loop until 'OK' response
	while(1)
	{		// Check_Input does not support "OK" response so we check it here
		if(move_done >= 1)
    14ca:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <move_done>
    14ce:	88 23       	and	r24, r24
    14d0:	39 f1       	breq	.+78     	; 0x1520 <Algo+0x2de>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14d2:	8f e1       	ldi	r24, 0x1F	; 31
    14d4:	9e e4       	ldi	r25, 0x4E	; 78
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <Algo+0x294>
    14da:	00 c0       	rjmp	.+0      	; 0x14dc <Algo+0x29a>
    14dc:	00 00       	nop
		{
			while(1)
			{
				_delay_ms(10);
				if((move_done == 2)||(myTurn==2))  //myturn==2 means that a RST was made. and we can break this loop.
    14de:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <move_done>
    14e2:	82 30       	cpi	r24, 0x02	; 2
    14e4:	21 f0       	breq	.+8      	; 0x14ee <Algo+0x2ac>
    14e6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
    14ea:	82 30       	cpi	r24, 0x02	; 2
    14ec:	91 f7       	brne	.-28     	; 0x14d2 <Algo+0x290>
				{ // we received the response we were waiting'
					move_done = 0;
    14ee:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <move_done>
					break;
				}
			}
			
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75) //Respone ok for our MM
    14f2:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <rxReadPos>
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	fc 01       	movw	r30, r24
    14fa:	eb 51       	subi	r30, 0x1B	; 27
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	20 81       	ld	r18, Z
    1500:	2f 34       	cpi	r18, 0x4F	; 79
    1502:	19 f7       	brne	.-58     	; 0x14ca <Algo+0x288>
    1504:	fc 01       	movw	r30, r24
    1506:	eb 51       	subi	r30, 0x1B	; 27
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	81 81       	ldd	r24, Z+1	; 0x01
    150c:	8b 34       	cpi	r24, 0x4B	; 75
			{
				init_timer();
    150e:	e9 f6       	brne	.-70     	; 0x14ca <Algo+0x288>
    1510:	8d de       	rcall	.-742    	; 0x122c <init_timer>
				rxReadPos=rxWritePos;
    1512:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <rxWritePos>
    1516:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <rxReadPos>
				myTurn = 0;
    151a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			}

		}
		else if(move_done == 0)//No solution was found
		{
			if (enemy_pass == 1) //Enemy sent pass too
    151e:	0b c0       	rjmp	.+22     	; 0x1536 <Algo+0x2f4>
    1520:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <enemy_pass>
    1524:	81 30       	cpi	r24, 0x01	; 1
			{
				EndGame();		//Go count pawns and announce the winner
    1526:	11 f4       	brne	.+4      	; 0x152c <Algo+0x2ea>
				break;
    1528:	07 de       	rcall	.-1010   	; 0x1138 <EndGame>
			}
			else
			{
				Transmit("MP\r",0,strlen("MP\r")); //Transmit MYPASS
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <Algo+0x2f4>
    152c:	43 e0       	ldi	r20, 0x03	; 3
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	80 ec       	ldi	r24, 0xC0	; 192
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	4c dc       	rcall	.-1896   	; 0xdce <Transmit>
				break;
			}
		}
	}
	
}
    1536:	64 96       	adiw	r28, 0x14	; 20
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	bf 90       	pop	r11
    1554:	af 90       	pop	r10
    1556:	9f 90       	pop	r9
    1558:	8f 90       	pop	r8
    155a:	7f 90       	pop	r7
    155c:	6f 90       	pop	r6
    155e:	5f 90       	pop	r5
    1560:	4f 90       	pop	r4
    1562:	3f 90       	pop	r3
    1564:	2f 90       	pop	r2
    1566:	08 95       	ret

00001568 <Check_Input>:



///////////////////////////////////////////////////////////////////////////////////////////   CHECK_INPUT    /////////////////////////////////////////////////////////////////////////////////////////

void Check_Input(char data[]){
    1568:	9c 01       	movw	r18, r24
	
		if(data[rxReadPos]==CR[0]){
    156a:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <rxReadPos>
    156e:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <CR>
    1572:	f9 01       	movw	r30, r18
    1574:	e9 0f       	add	r30, r25
    1576:	f1 1d       	adc	r31, r1
    1578:	80 81       	ld	r24, Z
    157a:	84 13       	cpse	r24, r20
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <Check_Input+0x1c>
			rxReadPos++;
    157e:	9f 5f       	subi	r25, 0xFF	; 255
    1580:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <rxReadPos>
		//flag = 0;
		//Space_num = 0;
		

		//ILFlag will help us spot "OK" or "PL" terminal answer
		if(ILflag == 1)
    1584:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	21 f4       	brne	.+8      	; 0x1594 <Check_Input+0x2c>
		{
			ILflag=2;  //answer spotted, you can proceed.
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
			return;	
    1592:	08 95       	ret
		}
		
		//it will help to spot "OK"  terminal answer
		if(move_done == 1)
    1594:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <move_done>
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	21 f4       	brne	.+8      	; 0x15a4 <Check_Input+0x3c>
		{	
			move_done=2; //answer spotted, you can proceed.
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <move_done>
			return;	
    15a2:	08 95       	ret
    15a4:	b9 01       	movw	r22, r18
	


		//process
		// command AT
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
    15a6:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <rxReadPos>
    15aa:	29 2f       	mov	r18, r25
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	fb 01       	movw	r30, r22
    15b0:	e2 0f       	add	r30, r18
    15b2:	f3 1f       	adc	r31, r19
    15b4:	90 81       	ld	r25, Z
    15b6:	91 34       	cpi	r25, 0x41	; 65
    15b8:	99 f4       	brne	.+38     	; 0x15e0 <Check_Input+0x78>
    15ba:	fb 01       	movw	r30, r22
    15bc:	e2 0f       	add	r30, r18
    15be:	f3 1f       	adc	r31, r19
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	94 35       	cpi	r25, 0x54	; 84
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <Check_Input+0x60>
    15c6:	08 c1       	rjmp	.+528    	; 0x17d8 <Check_Input+0x270>
		{
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			if(data[rxReadPos+2] == CR[0]){
    15c8:	fb 01       	movw	r30, r22
    15ca:	e2 0f       	add	r30, r18
    15cc:	f3 1f       	adc	r31, r19
    15ce:	82 81       	ldd	r24, Z+2	; 0x02
    15d0:	48 13       	cpse	r20, r24
    15d2:	02 c1       	rjmp	.+516    	; 0x17d8 <Check_Input+0x270>
				Transmit("OK\r",0 , strlen("OK\r"));
    15d4:	43 e0       	ldi	r20, 0x03	; 3
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	87 ea       	ldi	r24, 0xA7	; 167
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	f8 db       	rcall	.-2064   	; 0xdce <Transmit>
    15de:	fc c0       	rjmp	.+504    	; 0x17d8 <Check_Input+0x270>
				rxReadPos = rxWritePos;
			}

		}
		//Checking for RST<CR> command.
		else if((data[rxReadPos] == 82)&&(data[rxReadPos + 1] == 83)&&(data[rxReadPos + 2] == 84))		
    15e0:	92 35       	cpi	r25, 0x52	; 82
    15e2:	81 f4       	brne	.+32     	; 0x1604 <Check_Input+0x9c>
    15e4:	fb 01       	movw	r30, r22
    15e6:	e2 0f       	add	r30, r18
    15e8:	f3 1f       	adc	r31, r19
    15ea:	91 81       	ldd	r25, Z+1	; 0x01
    15ec:	93 35       	cpi	r25, 0x53	; 83
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <Check_Input+0x8a>
    15f0:	f3 c0       	rjmp	.+486    	; 0x17d8 <Check_Input+0x270>
    15f2:	fb 01       	movw	r30, r22
    15f4:	e2 0f       	add	r30, r18
    15f6:	f3 1f       	adc	r31, r19
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	84 35       	cpi	r24, 0x54	; 84
    15fc:	09 f0       	breq	.+2      	; 0x1600 <Check_Input+0x98>
		{
			RST();
    15fe:	ec c0       	rjmp	.+472    	; 0x17d8 <Check_Input+0x270>
    1600:	f4 db       	rcall	.-2072   	; 0xdea <RST>
    1602:	ea c0       	rjmp	.+468    	; 0x17d8 <Check_Input+0x270>
		}	
		// SP<SPACE>{B/W}<CR>
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 80))
    1604:	93 35       	cpi	r25, 0x53	; 83
    1606:	d9 f4       	brne	.+54     	; 0x163e <Check_Input+0xd6>
    1608:	fb 01       	movw	r30, r22
    160a:	e2 0f       	add	r30, r18
    160c:	f3 1f       	adc	r31, r19
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	90 35       	cpi	r25, 0x50	; 80
    1612:	09 f0       	breq	.+2      	; 0x1616 <Check_Input+0xae>
    1614:	64 c0       	rjmp	.+200    	; 0x16de <Check_Input+0x176>
		{
			//(int)c - 65;
			if(data[rxReadPos + 3] == 66)		//B
    1616:	fb 01       	movw	r30, r22
    1618:	e2 0f       	add	r30, r18
    161a:	f3 1f       	adc	r31, r19
    161c:	83 81       	ldd	r24, Z+3	; 0x03
    161e:	82 34       	cpi	r24, 0x42	; 66
    1620:	19 f4       	brne	.+6      	; 0x1628 <Check_Input+0xc0>
				MyColor = 0;					//Saving myColor
    1622:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <MyColor>
    1626:	05 c0       	rjmp	.+10     	; 0x1632 <Check_Input+0xca>
			else if(data[rxReadPos + 3] == 87)  //W
    1628:	87 35       	cpi	r24, 0x57	; 87
    162a:	19 f4       	brne	.+6      	; 0x1632 <Check_Input+0xca>
				MyColor = 1;					//Saving myColor
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <MyColor>
			Transmit("OK\r",0 , strlen("OK\r"));
    1632:	43 e0       	ldi	r20, 0x03	; 3
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	87 ea       	ldi	r24, 0xA7	; 167
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	c9 db       	rcall	.-2158   	; 0xdce <Transmit>
			rxReadPos = rxWritePos;
    163c:	cd c0       	rjmp	.+410    	; 0x17d8 <Check_Input+0x270>
		}
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
    163e:	9e 34       	cpi	r25, 0x4E	; 78
    1640:	d1 f5       	brne	.+116    	; 0x16b6 <Check_Input+0x14e>
    1642:	fb 01       	movw	r30, r22
    1644:	e2 0f       	add	r30, r18
    1646:	f3 1f       	adc	r31, r19
    1648:	81 81       	ldd	r24, Z+1	; 0x01
    164a:	87 34       	cpi	r24, 0x47	; 71
    164c:	09 f0       	breq	.+2      	; 0x1650 <Check_Input+0xe8>
    164e:	c4 c0       	rjmp	.+392    	; 0x17d8 <Check_Input+0x270>
		{
			//RST();
			move_done=0;
    1650:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <move_done>
    1654:	28 e0       	ldi	r18, 0x08	; 8
    1656:	30 e0       	ldi	r19, 0x00	; 0
			for(uint8_t i = 0 ; i <= 7 ; i++)
			{
				for(uint8_t y = 0 ; y <= 7 ; y++)
				{
					M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
    1658:	42 e0       	ldi	r20, 0x02	; 2
    165a:	10 c0       	rjmp	.+32     	; 0x167c <Check_Input+0x114>
    165c:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
    1660:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
    1664:	e8 0f       	add	r30, r24
    1666:	f9 1f       	adc	r31, r25
    1668:	40 83       	st	Z, r20
    166a:	01 96       	adiw	r24, 0x01	; 1
		{
			//RST();
			move_done=0;
			for(uint8_t i = 0 ; i <= 7 ; i++)
			{
				for(uint8_t y = 0 ; y <= 7 ; y++)
    166c:	82 17       	cp	r24, r18
    166e:	93 07       	cpc	r25, r19
    1670:	a9 f7       	brne	.-22     	; 0x165c <Check_Input+0xf4>
    1672:	28 5f       	subi	r18, 0xF8	; 248
    1674:	3f 4f       	sbci	r19, 0xFF	; 255
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
		{
			//RST();
			move_done=0;
			for(uint8_t i = 0 ; i <= 7 ; i++)
    1676:	28 34       	cpi	r18, 0x48	; 72
    1678:	31 05       	cpc	r19, r1
    167a:	19 f0       	breq	.+6      	; 0x1682 <Check_Input+0x11a>
    167c:	c9 01       	movw	r24, r18
    167e:	08 97       	sbiw	r24, 0x08	; 8
    1680:	ed cf       	rjmp	.-38     	; 0x165c <Check_Input+0xf4>
				{
					M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
				}
			}
			//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
			M[3*8+3] = 1 ;
    1682:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
    1686:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	83 8f       	std	Z+27, r24	; 0x1b
			M[3*8+4] = 0 ;
    168e:	14 8e       	std	Z+28, r1	; 0x1c
			M[4*8+3] = 0 ;
    1690:	13 a2       	std	Z+35, r1	; 0x23
			M[4*8+4] = 1 ;
    1692:	84 a3       	std	Z+36, r24	; 0x24
			if(MyColor == 0)// BLACK
    1694:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <MyColor>
    1698:	81 11       	cpse	r24, r1
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <Check_Input+0x146>
			{
				myTurn=1;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
				Transmit("OK\r",0 , strlen("OK\r"));
    16a2:	43 e0       	ldi	r20, 0x03	; 3
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	87 ea       	ldi	r24, 0xA7	; 167
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	91 db       	rcall	.-2270   	; 0xdce <Transmit>
			}
			else           //WHITE
			{
				RST();  //FIXING bug with whites(rst contains OK Transmit)
    16ac:	95 c0       	rjmp	.+298    	; 0x17d8 <Check_Input+0x270>
    16ae:	9d db       	rcall	.-2246   	; 0xdea <RST>
				myTurn=0;
    16b0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			}
			
			//init_timer();
			//Transmit("OK\r",0 , strlen("OK\r"));           This is the 2nd OK, not important, RST contains OK transmit
			rxReadPos = rxWritePos;
    16b4:	91 c0       	rjmp	.+290    	; 0x17d8 <Check_Input+0x270>
		}
		        //EG<CR>
		else if((data[rxReadPos] == 69)&&(data[rxReadPos + 1] == 71))
    16b6:	95 34       	cpi	r25, 0x45	; 69
    16b8:	31 f5       	brne	.+76     	; 0x1706 <Check_Input+0x19e>
    16ba:	fb 01       	movw	r30, r22
    16bc:	e2 0f       	add	r30, r18
    16be:	f3 1f       	adc	r31, r19
    16c0:	81 81       	ldd	r24, Z+1	; 0x01
    16c2:	87 34       	cpi	r24, 0x47	; 71
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <Check_Input+0x160>
		{
			//EndGameFlag = 1; // check this flag during waiting/calculating loop
			Transmit("OK\r",0 , strlen("OK\r"));
    16c6:	88 c0       	rjmp	.+272    	; 0x17d8 <Check_Input+0x270>
    16c8:	43 e0       	ldi	r20, 0x03	; 3
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	87 ea       	ldi	r24, 0xA7	; 167
    16ce:	90 e0       	ldi	r25, 0x00	; 0
			rxReadPos = rxWritePos;
    16d0:	7e db       	rcall	.-2308   	; 0xdce <Transmit>
    16d2:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <rxWritePos>
    16d6:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <rxReadPos>
			EndGame();
    16da:	2e dd       	rcall	.-1444   	; 0x1138 <EndGame>
    16dc:	7d c0       	rjmp	.+250    	; 0x17d8 <Check_Input+0x270>
		}
			 //ST<CR>
        else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 84))
    16de:	fb 01       	movw	r30, r22
    16e0:	e2 0f       	add	r30, r18
    16e2:	f3 1f       	adc	r31, r19
    16e4:	81 81       	ldd	r24, Z+1	; 0x01
    16e6:	84 35       	cpi	r24, 0x54	; 84
    16e8:	09 f0       	breq	.+2      	; 0x16ec <Check_Input+0x184>
    16ea:	76 c0       	rjmp	.+236    	; 0x17d8 <Check_Input+0x270>
        {
			Time = data[rxReadPos+3] - '0';    //String to Int
    16ec:	fb 01       	movw	r30, r22
    16ee:	e2 0f       	add	r30, r18
    16f0:	f3 1f       	adc	r31, r19
    16f2:	83 81       	ldd	r24, Z+3	; 0x03
    16f4:	80 53       	subi	r24, 0x30	; 48
    16f6:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <Time>
			Transmit("OK\r",0 , strlen("OK\r"));
    16fa:	43 e0       	ldi	r20, 0x03	; 3
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	87 ea       	ldi	r24, 0xA7	; 167
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	65 db       	rcall	.-2358   	; 0xdce <Transmit>
			rxReadPos = rxWritePos;
    1704:	69 c0       	rjmp	.+210    	; 0x17d8 <Check_Input+0x270>
        }
			//MV<SP>{[A-H],[1-8]}<CR>
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 86))
    1706:	9d 34       	cpi	r25, 0x4D	; 77
    1708:	09 f0       	breq	.+2      	; 0x170c <Check_Input+0x1a4>
    170a:	41 c0       	rjmp	.+130    	; 0x178e <Check_Input+0x226>
    170c:	fb 01       	movw	r30, r22
    170e:	e2 0f       	add	r30, r18
    1710:	f3 1f       	adc	r31, r19
    1712:	81 81       	ldd	r24, Z+1	; 0x01
    1714:	86 35       	cpi	r24, 0x56	; 86
    1716:	09 f0       	breq	.+2      	; 0x171a <Check_Input+0x1b2>
    1718:	5f c0       	rjmp	.+190    	; 0x17d8 <Check_Input+0x270>
		{
				if((data[rxReadPos+3] >= 65)&&(data[rxReadPos+3] <= 72)&&(data[rxReadPos+4] >= 49)&&(data[rxReadPos+4] <= 56))  // Checking input
    171a:	f9 01       	movw	r30, r18
    171c:	33 96       	adiw	r30, 0x03	; 3
    171e:	e6 0f       	add	r30, r22
    1720:	f7 1f       	adc	r31, r23
    1722:	80 81       	ld	r24, Z
    1724:	81 54       	subi	r24, 0x41	; 65
    1726:	88 30       	cpi	r24, 0x08	; 8
    1728:	08 f0       	brcs	.+2      	; 0x172c <Check_Input+0x1c4>
    172a:	56 c0       	rjmp	.+172    	; 0x17d8 <Check_Input+0x270>
    172c:	2c 5f       	subi	r18, 0xFC	; 252
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	db 01       	movw	r26, r22
    1732:	a2 0f       	add	r26, r18
    1734:	b3 1f       	adc	r27, r19
    1736:	8c 91       	ld	r24, X
    1738:	81 53       	subi	r24, 0x31	; 49
    173a:	88 30       	cpi	r24, 0x08	; 8
    173c:	08 f0       	brcs	.+2      	; 0x1740 <Check_Input+0x1d8>
    173e:	4c c0       	rjmp	.+152    	; 0x17d8 <Check_Input+0x270>
				{
					enemy_pass = 0;
    1740:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <enemy_pass>
					uint8_t moveok = CheckMove(((int)data[rxReadPos+3] - 65),((data[rxReadPos+4] - '0') - 1), !MyColor, 1 );  //Check opponents move.
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <MyColor>
    174a:	81 11       	cpse	r24, r1
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	6c 91       	ld	r22, X
    1750:	61 53       	subi	r22, 0x31	; 49
    1752:	80 81       	ld	r24, Z
    1754:	21 e0       	ldi	r18, 0x01	; 1
    1756:	81 54       	subi	r24, 0x41	; 65
					//If opponent's move is legal, send ok and reset timer, else 
					//send IL and wait for PC response, if response OK --> I win else(PL) --> I LOSE
					if(moveok == 1)		
    1758:	87 d8       	rcall	.-3826   	; 0x868 <CheckMove>
    175a:	81 30       	cpi	r24, 0x01	; 1
					{
						// Saving opponent's move in my local game board
						//M[(((int)data[rxReadPos+3] - 65)*8) + (data[rxReadPos+4] - '0')] = !MyColor;  // Saving opponent's move in my local game board
						Transmit("OK\r",0 , strlen("OK\r"));
    175c:	51 f4       	brne	.+20     	; 0x1772 <Check_Input+0x20a>
    175e:	43 e0       	ldi	r20, 0x03	; 3
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	87 ea       	ldi	r24, 0xA7	; 167
    1764:	90 e0       	ldi	r25, 0x00	; 0
						init_timer();
    1766:	33 db       	rcall	.-2458   	; 0xdce <Transmit>
    1768:	61 dd       	rcall	.-1342   	; 0x122c <init_timer>
						myTurn=1;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    1770:	33 c0       	rjmp	.+102    	; 0x17d8 <Check_Input+0x270>
					}
					else{
						Transmit("IL\r",0 , strlen("IL\r"));
    1772:	43 e0       	ldi	r20, 0x03	; 3
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	84 ec       	ldi	r24, 0xC4	; 196
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	29 db       	rcall	.-2478   	; 0xdce <Transmit>
    177c:	81 e0       	ldi	r24, 0x01	; 1
						ILflag =  1;							//Waiting mode for PC's response
    177e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
    1782:	82 e0       	ldi	r24, 0x02	; 2
						myTurn=2;
    1784:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    1788:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <mt>
						mt=0;
    178c:	25 c0       	rjmp	.+74     	; 0x17d8 <Check_Input+0x270>
    178e:	90 35       	cpi	r25, 0x50	; 80
						
				} 	
		}

		//PASS
		else if ((data[rxReadPos] == 80)&&(data[rxReadPos + 1] == 83))
    1790:	89 f4       	brne	.+34     	; 0x17b4 <Check_Input+0x24c>
    1792:	fb 01       	movw	r30, r22
    1794:	e2 0f       	add	r30, r18
    1796:	f3 1f       	adc	r31, r19
    1798:	81 81       	ldd	r24, Z+1	; 0x01
    179a:	83 35       	cpi	r24, 0x53	; 83
    179c:	e9 f4       	brne	.+58     	; 0x17d8 <Check_Input+0x270>
		{
			myTurn=1;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			//This flag will help us end game in case we pass after opponent's pass
			enemy_pass = 1;   
    17a4:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <enemy_pass>
			Transmit("OK\r",0,strlen("OK\r"));
    17a8:	43 e0       	ldi	r20, 0x03	; 3
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	87 ea       	ldi	r24, 0xA7	; 167
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e db       	rcall	.-2532   	; 0xdce <Transmit>
    17b2:	12 c0       	rjmp	.+36     	; 0x17d8 <Check_Input+0x270>
		}
		//WN

		else if((data[rxReadPos] == 87)&&(data[rxReadPos + 1] == 78)){
    17b4:	97 35       	cpi	r25, 0x57	; 87
    17b6:	81 f4       	brne	.+32     	; 0x17d8 <Check_Input+0x270>
    17b8:	fb 01       	movw	r30, r22
    17ba:	e2 0f       	add	r30, r18
    17bc:	f3 1f       	adc	r31, r19
    17be:	81 81       	ldd	r24, Z+1	; 0x01
    17c0:	8e 34       	cpi	r24, 0x4E	; 78
			AnnounceRes(1);  //announce i win with led1
    17c2:	51 f4       	brne	.+20     	; 0x17d8 <Check_Input+0x270>
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 dc       	rcall	.-1760   	; 0x10e8 <AnnounceRes>
			myTurn=2;			
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			Transmit("OK\r",0,strlen("OK\r"));
    17ce:	43 e0       	ldi	r20, 0x03	; 3
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	87 ea       	ldi	r24, 0xA7	; 167
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	fb da       	rcall	.-2570   	; 0xdce <Transmit>
    17d8:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <rxWritePos>
		}
		else
			NULL;
	rxReadPos=rxWritePos;		
	rxReadPos++;		//Ready for the next command (directs to the next letter, the one after <CR>) 
    17dc:	8f 5f       	subi	r24, 0xFF	; 255
    17de:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <rxReadPos>
    17e2:	08 95       	ret

000017e4 <__vector_11>:
    17e4:	1f 92       	push	r1

//////////////////////////////////////////////////////////////////////////////////////////



ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
    17e6:	0f 92       	push	r0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	0f 92       	push	r0
    17ec:	11 24       	eor	r1, r1
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	ef 93       	push	r30
    1804:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
    1806:	8c b1       	in	r24, 0x0c	; 12
    1808:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <rxWritePos>
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	eb 51       	subi	r30, 0x1B	; 27
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
    1814:	5d 9b       	sbis	0x0b, 5	; 11
    1816:	fe cf       	rjmp	.-4      	; 0x1814 <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
    1818:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
    181a:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <rxWritePos>
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	eb 51       	subi	r30, 0x1B	; 27
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	90 81       	ld	r25, Z
    1826:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <CR>
    182a:	98 13       	cpse	r25, r24
    182c:	03 c0       	rjmp	.+6      	; 0x1834 <__vector_11+0x50>
		Check_Input(myrxbuffer);
    182e:	85 ee       	ldi	r24, 0xE5	; 229
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	9a de       	rcall	.-716    	; 0x1568 <Check_Input>


	rxWritePos++;
    1834:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <rxWritePos>
    1838:	8f 5f       	subi	r24, 0xFF	; 255
    183a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <rxWritePos>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
    183e:	ff 91       	pop	r31
    1840:	ef 91       	pop	r30
    1842:	bf 91       	pop	r27
    1844:	af 91       	pop	r26
    1846:	9f 91       	pop	r25
    1848:	8f 91       	pop	r24
    184a:	7f 91       	pop	r23
    184c:	6f 91       	pop	r22
    184e:	5f 91       	pop	r21
    1850:	4f 91       	pop	r20
    1852:	3f 91       	pop	r19
    1854:	2f 91       	pop	r18
    1856:	0f 90       	pop	r0
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	0f 90       	pop	r0
    185c:	1f 90       	pop	r1
    185e:	18 95       	reti

00001860 <init_serial>:
}


void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
    1860:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
    1862:	83 e3       	ldi	r24, 0x33	; 51
    1864:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
    1866:	80 b5       	in	r24, 0x20	; 32
    1868:	8f 7e       	andi	r24, 0xEF	; 239
    186a:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
    186c:	80 b5       	in	r24, 0x20	; 32
    186e:	8f 7d       	andi	r24, 0xDF	; 223
    1870:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
    1872:	80 b5       	in	r24, 0x20	; 32
    1874:	87 7f       	andi	r24, 0xF7	; 247
    1876:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
    1878:	86 e8       	ldi	r24, 0x86	; 134
    187a:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
    187c:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
    187e:	8a b1       	in	r24, 0x0a	; 10
    1880:	88 61       	ori	r24, 0x18	; 24
    1882:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
    1884:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
    1886:	57 9a       	sbi	0x0a, 7	; 10
    1888:	08 95       	ret

0000188a <main>:




int main (void)
{
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	00 d0       	rcall	.+0      	; 0x1890 <main+0x6>
    1890:	1f 92       	push	r1
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	board_init();
    1896:	0e 94 48 00 	call	0x90	; 0x90 <board_init>
	init_serial();
    189a:	e2 df       	rcall	.-60     	; 0x1860 <init_serial>
	init_leds();
    189c:	c0 dc       	rcall	.-1664   	; 0x121e <init_leds>
    189e:	8d e0       	ldi	r24, 0x0D	; 13
	// delimiter carriage return
	strcpy(CR,"\xD");
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <enemy_pass>
    18a6:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <CR>
    18aa:	c1 9a       	sbi	0x18, 1	; 24

	//Turning off leds(atmega16)
	PORTB |= (1<<PORTB1); 
    18ac:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB2);
    18ae:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= (1<<PORTB3);
    18b0:	80 e4       	ldi	r24, 0x40	; 64
		

	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	b9 d0       	rcall	.+370    	; 0x1a28 <malloc>
    18b6:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <M+0x1>
    18ba:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <M>
    18be:	80 e4       	ldi	r24, 0x40	; 64
	MB = (uint8_t *)malloc(sizeof(uint8_t)*64);
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	b2 d0       	rcall	.+356    	; 0x1a28 <malloc>
    18c4:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <MB+0x1>
    18c8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <MB>
    18cc:	1a 82       	std	Y+2, r1	; 0x02
    18ce:	19 82       	std	Y+1, r1	; 0x01

	volatile int i=0;
    18d0:	1b 82       	std	Y+3, r1	; 0x03
    18d2:	1a 82       	std	Y+2, r1	; 0x02

	}
	*/
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
    18d4:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0 ; i <= 7 ; i++)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	08 97       	sbiw	r24, 0x08	; 8
    18dc:	34 f5       	brge	.+76     	; 0x192a <main+0xa0>
    18de:	22 e0       	ldi	r18, 0x02	; 2
    18e0:	1b 82       	std	Y+3, r1	; 0x03
	{
		for(y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
    18e4:	88 30       	cpi	r24, 0x08	; 8
    18e6:	c0 f4       	brcc	.+48     	; 0x1918 <main+0x8e>
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	9a 81       	ldd	r25, Y+2	; 0x02
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
    18ec:	3b 81       	ldd	r19, Y+3	; 0x03
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	83 0f       	add	r24, r19
    18fc:	91 1d       	adc	r25, r1
    18fe:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
    1902:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
    1906:	e8 0f       	add	r30, r24
    1908:	f9 1f       	adc	r31, r25
    190a:	20 83       	st	Z, r18
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	8f 5f       	subi	r24, 0xFF	; 255
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
    1910:	8b 83       	std	Y+3, r24	; 0x03
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	88 30       	cpi	r24, 0x08	; 8
    1916:	40 f3       	brcs	.-48     	; 0x18e8 <main+0x5e>
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
	}
	*/
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	9a 83       	std	Y+2, r25	; 0x02
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	9a 81       	ldd	r25, Y+2	; 0x02
    1926:	08 97       	sbiw	r24, 0x08	; 8
    1928:	dc f2       	brlt	.-74     	; 0x18e0 <main+0x56>
    192a:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <M>
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
	M[3*8+3] = 1 ;
    192e:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <M+0x1>
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	83 8f       	std	Z+27, r24	; 0x1b
    1936:	14 8e       	std	Z+28, r1	; 0x1c
    1938:	13 a2       	std	Z+35, r1	; 0x23
	M[3*8+4] = 0 ;
    193a:	84 a3       	std	Z+36, r24	; 0x24
	M[4*8+3] = 0 ;
    193c:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <rxReadPos>

	/////////////////////////////////////////////////////////////////////////////
	

	//buffer pointers init
	rxReadPos=0;
    1940:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <rxWritePos>
	rxWritePos=0;
    1944:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <ITflag>
	//flag Initialization 
	ITflag = 0;
    1948:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
	ILflag = 0;
    194c:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <move_done>
	move_done = 0;
    1950:	92 e0       	ldi	r25, 0x02	; 2
    1952:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <myTurn>
	myTurn = 2;
    1956:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <MyColor>
	MyColor = 1;
    195a:	78 94       	sei
    195c:	12 e0       	ldi	r17, 0x02	; 2
	

	sei();
    195e:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
	
	while(1){


		//Waiting for PC response - (ILLIGAL request)
		if(ILflag >= 1)
    1962:	88 23       	and	r24, r24
    1964:	09 f4       	brne	.+2      	; 0x1968 <main+0xde>
    1966:	45 c0       	rjmp	.+138    	; 0x19f2 <main+0x168>
    1968:	8f e1       	ldi	r24, 0x1F	; 31
    196a:	9e e4       	ldi	r25, 0x4E	; 78
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <main+0xe2>
    1970:	00 c0       	rjmp	.+0      	; 0x1972 <main+0xe8>
    1972:	00 00       	nop
    1974:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
		{
			//Transmit("Waiting OK for announcement\r",0,"Waiting OK for announcement\r");
			_delay_ms(10);
			while(1){		
				if(ILflag == 2){ // we received the response we were waiting
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	e1 f7       	brne	.-8      	; 0x1974 <main+0xea>
    197c:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
					ILflag = 0;
    1980:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <rxReadPos>
					break;
				}
			}
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75){ // "ok"
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	fc 01       	movw	r30, r24
    1988:	eb 51       	subi	r30, 0x1B	; 27
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	20 81       	ld	r18, Z
    198e:	2f 34       	cpi	r18, 0x4F	; 79
    1990:	71 f4       	brne	.+28     	; 0x19ae <main+0x124>
    1992:	fc 01       	movw	r30, r24
    1994:	eb 51       	subi	r30, 0x1B	; 27
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	81 81       	ldd	r24, Z+1	; 0x01
    199a:	8b 34       	cpi	r24, 0x4B	; 75
    199c:	31 f5       	brne	.+76     	; 0x19ea <main+0x160>
    199e:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <rxWritePos>
			   rxReadPos=rxWritePos;
    19a2:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <rxReadPos>
    19a6:	81 e0       	ldi	r24, 0x01	; 1
				AnnounceRes(1); //WIN - LED1
    19a8:	9f db       	rcall	.-2242   	; 0x10e8 <AnnounceRes>
    19aa:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
				myTurn=2;
    19ae:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <rxReadPos>
				
			
			}//future update : "else ILflag=1;" , wrong input avoidance

			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){ //"PL"
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	fc 01       	movw	r30, r24
    19b6:	eb 51       	subi	r30, 0x1B	; 27
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	20 81       	ld	r18, Z
    19bc:	20 35       	cpi	r18, 0x50	; 80
    19be:	a9 f4       	brne	.+42     	; 0x19ea <main+0x160>
    19c0:	fc 01       	movw	r30, r24
    19c2:	eb 51       	subi	r30, 0x1B	; 27
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	81 81       	ldd	r24, Z+1	; 0x01
    19c8:	8c 34       	cpi	r24, 0x4C	; 76
    19ca:	79 f4       	brne	.+30     	; 0x19ea <main+0x160>
    19cc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <ITflag>
				if(ITflag==1)
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	21 f4       	brne	.+8      	; 0x19dc <main+0x152>
    19d4:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <ITflag>
				{
					ITflag = 0;
    19d8:	29 dc       	rcall	.-1966   	; 0x122c <init_timer>
					init_timer();
    19da:	07 c0       	rjmp	.+14     	; 0x19ea <main+0x160>
    19dc:	43 e0       	ldi	r20, 0x03	; 3
					
				}
				else
				{
					Transmit("QT\r",0 , strlen("QT\r"));
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	88 ec       	ldi	r24, 0xC8	; 200
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	f4 d9       	rcall	.-3096   	; 0xdce <Transmit>
    19e6:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
					myTurn=2;
    19ea:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <rxWritePos>
				}						
					
			}	//future update : "else ILflag=1;" , wrong input avoidance		

			rxReadPos=rxWritePos;
    19ee:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <rxReadPos>
    19f2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
		
		
		if((myTurn == 0)&&(mt == 0)){
    19f6:	81 11       	cpse	r24, r1
    19f8:	0a c0       	rjmp	.+20     	; 0x1a0e <main+0x184>
    19fa:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <mt>
    19fe:	81 11       	cpse	r24, r1
    1a00:	06 c0       	rjmp	.+12     	; 0x1a0e <main+0x184>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
			//Possible speculation algo
			mt = 1;
    1a04:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <mt>
    1a08:	11 dc       	rcall	.-2014   	; 0x122c <init_timer>
			init_timer();
    1a0a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			myTurn = 0;
    1a0e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
			
		
		if(myTurn==1){ //When its avr's turn
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <main+0x18e>
    1a16:	a3 cf       	rjmp	.-186    	; 0x195e <main+0xd4>
			mt = 0; //reset flag for HIS turn			
    1a18:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <mt>
			init_timer(); //reset timer
    1a1c:	07 dc       	rcall	.-2034   	; 0x122c <init_timer>
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
			myTurn = 1;  //Important - collision with  init_timer
    1a20:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    1a24:	0e dc       	rcall	.-2020   	; 0x1242 <Algo>
			Algo();		//The actual algorithm
    1a26:	9b cf       	rjmp	.-202    	; 0x195e <main+0xd4>

00001a28 <malloc>:
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	82 30       	cpi	r24, 0x02	; 2
    1a32:	91 05       	cpc	r25, r1
    1a34:	10 f4       	brcc	.+4      	; 0x1a3a <malloc+0x12>
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <__flp>
    1a3e:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <__flp+0x1>
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	a0 e0       	ldi	r26, 0x00	; 0
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	30 97       	sbiw	r30, 0x00	; 0
    1a4c:	19 f1       	breq	.+70     	; 0x1a94 <malloc+0x6c>
    1a4e:	40 81       	ld	r20, Z
    1a50:	51 81       	ldd	r21, Z+1	; 0x01
    1a52:	02 81       	ldd	r16, Z+2	; 0x02
    1a54:	13 81       	ldd	r17, Z+3	; 0x03
    1a56:	48 17       	cp	r20, r24
    1a58:	59 07       	cpc	r21, r25
    1a5a:	c8 f0       	brcs	.+50     	; 0x1a8e <malloc+0x66>
    1a5c:	84 17       	cp	r24, r20
    1a5e:	95 07       	cpc	r25, r21
    1a60:	69 f4       	brne	.+26     	; 0x1a7c <malloc+0x54>
    1a62:	10 97       	sbiw	r26, 0x00	; 0
    1a64:	31 f0       	breq	.+12     	; 0x1a72 <malloc+0x4a>
    1a66:	12 96       	adiw	r26, 0x02	; 2
    1a68:	0c 93       	st	X, r16
    1a6a:	12 97       	sbiw	r26, 0x02	; 2
    1a6c:	13 96       	adiw	r26, 0x03	; 3
    1a6e:	1c 93       	st	X, r17
    1a70:	27 c0       	rjmp	.+78     	; 0x1ac0 <malloc+0x98>
    1a72:	00 93 ec 01 	sts	0x01EC, r16	; 0x8001ec <__flp>
    1a76:	10 93 ed 01 	sts	0x01ED, r17	; 0x8001ed <__flp+0x1>
    1a7a:	22 c0       	rjmp	.+68     	; 0x1ac0 <malloc+0x98>
    1a7c:	21 15       	cp	r18, r1
    1a7e:	31 05       	cpc	r19, r1
    1a80:	19 f0       	breq	.+6      	; 0x1a88 <malloc+0x60>
    1a82:	42 17       	cp	r20, r18
    1a84:	53 07       	cpc	r21, r19
    1a86:	18 f4       	brcc	.+6      	; 0x1a8e <malloc+0x66>
    1a88:	9a 01       	movw	r18, r20
    1a8a:	bd 01       	movw	r22, r26
    1a8c:	ef 01       	movw	r28, r30
    1a8e:	df 01       	movw	r26, r30
    1a90:	f8 01       	movw	r30, r16
    1a92:	db cf       	rjmp	.-74     	; 0x1a4a <malloc+0x22>
    1a94:	21 15       	cp	r18, r1
    1a96:	31 05       	cpc	r19, r1
    1a98:	f9 f0       	breq	.+62     	; 0x1ad8 <malloc+0xb0>
    1a9a:	28 1b       	sub	r18, r24
    1a9c:	39 0b       	sbc	r19, r25
    1a9e:	24 30       	cpi	r18, 0x04	; 4
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	80 f4       	brcc	.+32     	; 0x1ac4 <malloc+0x9c>
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa8:	61 15       	cp	r22, r1
    1aaa:	71 05       	cpc	r23, r1
    1aac:	21 f0       	breq	.+8      	; 0x1ab6 <malloc+0x8e>
    1aae:	fb 01       	movw	r30, r22
    1ab0:	93 83       	std	Z+3, r25	; 0x03
    1ab2:	82 83       	std	Z+2, r24	; 0x02
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <malloc+0x96>
    1ab6:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <__flp+0x1>
    1aba:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__flp>
    1abe:	fe 01       	movw	r30, r28
    1ac0:	32 96       	adiw	r30, 0x02	; 2
    1ac2:	44 c0       	rjmp	.+136    	; 0x1b4c <malloc+0x124>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e2 0f       	add	r30, r18
    1ac8:	f3 1f       	adc	r31, r19
    1aca:	81 93       	st	Z+, r24
    1acc:	91 93       	st	Z+, r25
    1ace:	22 50       	subi	r18, 0x02	; 2
    1ad0:	31 09       	sbc	r19, r1
    1ad2:	39 83       	std	Y+1, r19	; 0x01
    1ad4:	28 83       	st	Y, r18
    1ad6:	3a c0       	rjmp	.+116    	; 0x1b4c <malloc+0x124>
    1ad8:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <__brkval>
    1adc:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <__brkval+0x1>
    1ae0:	23 2b       	or	r18, r19
    1ae2:	41 f4       	brne	.+16     	; 0x1af4 <malloc+0xcc>
    1ae4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1ae8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1aec:	30 93 eb 01 	sts	0x01EB, r19	; 0x8001eb <__brkval+0x1>
    1af0:	20 93 ea 01 	sts	0x01EA, r18	; 0x8001ea <__brkval>
    1af4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    1af8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    1afc:	21 15       	cp	r18, r1
    1afe:	31 05       	cpc	r19, r1
    1b00:	41 f4       	brne	.+16     	; 0x1b12 <malloc+0xea>
    1b02:	2d b7       	in	r18, 0x3d	; 61
    1b04:	3e b7       	in	r19, 0x3e	; 62
    1b06:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1b0a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1b0e:	24 1b       	sub	r18, r20
    1b10:	35 0b       	sbc	r19, r21
    1b12:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <__brkval>
    1b16:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <__brkval+0x1>
    1b1a:	e2 17       	cp	r30, r18
    1b1c:	f3 07       	cpc	r31, r19
    1b1e:	a0 f4       	brcc	.+40     	; 0x1b48 <malloc+0x120>
    1b20:	2e 1b       	sub	r18, r30
    1b22:	3f 0b       	sbc	r19, r31
    1b24:	28 17       	cp	r18, r24
    1b26:	39 07       	cpc	r19, r25
    1b28:	78 f0       	brcs	.+30     	; 0x1b48 <malloc+0x120>
    1b2a:	ac 01       	movw	r20, r24
    1b2c:	4e 5f       	subi	r20, 0xFE	; 254
    1b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b30:	24 17       	cp	r18, r20
    1b32:	35 07       	cpc	r19, r21
    1b34:	48 f0       	brcs	.+18     	; 0x1b48 <malloc+0x120>
    1b36:	4e 0f       	add	r20, r30
    1b38:	5f 1f       	adc	r21, r31
    1b3a:	50 93 eb 01 	sts	0x01EB, r21	; 0x8001eb <__brkval+0x1>
    1b3e:	40 93 ea 01 	sts	0x01EA, r20	; 0x8001ea <__brkval>
    1b42:	81 93       	st	Z+, r24
    1b44:	91 93       	st	Z+, r25
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <malloc+0x124>
    1b48:	e0 e0       	ldi	r30, 0x00	; 0
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	cf 01       	movw	r24, r30
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	08 95       	ret

00001b58 <free>:
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <free+0xa>
    1b60:	81 c0       	rjmp	.+258    	; 0x1c64 <free+0x10c>
    1b62:	fc 01       	movw	r30, r24
    1b64:	32 97       	sbiw	r30, 0x02	; 2
    1b66:	13 82       	std	Z+3, r1	; 0x03
    1b68:	12 82       	std	Z+2, r1	; 0x02
    1b6a:	a0 91 ec 01 	lds	r26, 0x01EC	; 0x8001ec <__flp>
    1b6e:	b0 91 ed 01 	lds	r27, 0x01ED	; 0x8001ed <__flp+0x1>
    1b72:	10 97       	sbiw	r26, 0x00	; 0
    1b74:	81 f4       	brne	.+32     	; 0x1b96 <free+0x3e>
    1b76:	20 81       	ld	r18, Z
    1b78:	31 81       	ldd	r19, Z+1	; 0x01
    1b7a:	82 0f       	add	r24, r18
    1b7c:	93 1f       	adc	r25, r19
    1b7e:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <__brkval>
    1b82:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <__brkval+0x1>
    1b86:	28 17       	cp	r18, r24
    1b88:	39 07       	cpc	r19, r25
    1b8a:	51 f5       	brne	.+84     	; 0x1be0 <free+0x88>
    1b8c:	f0 93 eb 01 	sts	0x01EB, r31	; 0x8001eb <__brkval+0x1>
    1b90:	e0 93 ea 01 	sts	0x01EA, r30	; 0x8001ea <__brkval>
    1b94:	67 c0       	rjmp	.+206    	; 0x1c64 <free+0x10c>
    1b96:	ed 01       	movw	r28, r26
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	ce 17       	cp	r28, r30
    1b9e:	df 07       	cpc	r29, r31
    1ba0:	40 f4       	brcc	.+16     	; 0x1bb2 <free+0x5a>
    1ba2:	4a 81       	ldd	r20, Y+2	; 0x02
    1ba4:	5b 81       	ldd	r21, Y+3	; 0x03
    1ba6:	9e 01       	movw	r18, r28
    1ba8:	41 15       	cp	r20, r1
    1baa:	51 05       	cpc	r21, r1
    1bac:	f1 f0       	breq	.+60     	; 0x1bea <free+0x92>
    1bae:	ea 01       	movw	r28, r20
    1bb0:	f5 cf       	rjmp	.-22     	; 0x1b9c <free+0x44>
    1bb2:	d3 83       	std	Z+3, r29	; 0x03
    1bb4:	c2 83       	std	Z+2, r28	; 0x02
    1bb6:	40 81       	ld	r20, Z
    1bb8:	51 81       	ldd	r21, Z+1	; 0x01
    1bba:	84 0f       	add	r24, r20
    1bbc:	95 1f       	adc	r25, r21
    1bbe:	c8 17       	cp	r28, r24
    1bc0:	d9 07       	cpc	r29, r25
    1bc2:	59 f4       	brne	.+22     	; 0x1bda <free+0x82>
    1bc4:	88 81       	ld	r24, Y
    1bc6:	99 81       	ldd	r25, Y+1	; 0x01
    1bc8:	84 0f       	add	r24, r20
    1bca:	95 1f       	adc	r25, r21
    1bcc:	02 96       	adiw	r24, 0x02	; 2
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd6:	93 83       	std	Z+3, r25	; 0x03
    1bd8:	82 83       	std	Z+2, r24	; 0x02
    1bda:	21 15       	cp	r18, r1
    1bdc:	31 05       	cpc	r19, r1
    1bde:	29 f4       	brne	.+10     	; 0x1bea <free+0x92>
    1be0:	f0 93 ed 01 	sts	0x01ED, r31	; 0x8001ed <__flp+0x1>
    1be4:	e0 93 ec 01 	sts	0x01EC, r30	; 0x8001ec <__flp>
    1be8:	3d c0       	rjmp	.+122    	; 0x1c64 <free+0x10c>
    1bea:	e9 01       	movw	r28, r18
    1bec:	fb 83       	std	Y+3, r31	; 0x03
    1bee:	ea 83       	std	Y+2, r30	; 0x02
    1bf0:	49 91       	ld	r20, Y+
    1bf2:	59 91       	ld	r21, Y+
    1bf4:	c4 0f       	add	r28, r20
    1bf6:	d5 1f       	adc	r29, r21
    1bf8:	ec 17       	cp	r30, r28
    1bfa:	fd 07       	cpc	r31, r29
    1bfc:	61 f4       	brne	.+24     	; 0x1c16 <free+0xbe>
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	84 0f       	add	r24, r20
    1c04:	95 1f       	adc	r25, r21
    1c06:	02 96       	adiw	r24, 0x02	; 2
    1c08:	e9 01       	movw	r28, r18
    1c0a:	99 83       	std	Y+1, r25	; 0x01
    1c0c:	88 83       	st	Y, r24
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	9b 83       	std	Y+3, r25	; 0x03
    1c14:	8a 83       	std	Y+2, r24	; 0x02
    1c16:	e0 e0       	ldi	r30, 0x00	; 0
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	12 96       	adiw	r26, 0x02	; 2
    1c1c:	8d 91       	ld	r24, X+
    1c1e:	9c 91       	ld	r25, X
    1c20:	13 97       	sbiw	r26, 0x03	; 3
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	19 f0       	breq	.+6      	; 0x1c2c <free+0xd4>
    1c26:	fd 01       	movw	r30, r26
    1c28:	dc 01       	movw	r26, r24
    1c2a:	f7 cf       	rjmp	.-18     	; 0x1c1a <free+0xc2>
    1c2c:	8d 91       	ld	r24, X+
    1c2e:	9c 91       	ld	r25, X
    1c30:	11 97       	sbiw	r26, 0x01	; 1
    1c32:	9d 01       	movw	r18, r26
    1c34:	2e 5f       	subi	r18, 0xFE	; 254
    1c36:	3f 4f       	sbci	r19, 0xFF	; 255
    1c38:	82 0f       	add	r24, r18
    1c3a:	93 1f       	adc	r25, r19
    1c3c:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <__brkval>
    1c40:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <__brkval+0x1>
    1c44:	28 17       	cp	r18, r24
    1c46:	39 07       	cpc	r19, r25
    1c48:	69 f4       	brne	.+26     	; 0x1c64 <free+0x10c>
    1c4a:	30 97       	sbiw	r30, 0x00	; 0
    1c4c:	29 f4       	brne	.+10     	; 0x1c58 <free+0x100>
    1c4e:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <__flp+0x1>
    1c52:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <__flp>
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <free+0x104>
    1c58:	13 82       	std	Z+3, r1	; 0x03
    1c5a:	12 82       	std	Z+2, r1	; 0x02
    1c5c:	b0 93 eb 01 	sts	0x01EB, r27	; 0x8001eb <__brkval+0x1>
    1c60:	a0 93 ea 01 	sts	0x01EA, r26	; 0x8001ea <__brkval>
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	08 95       	ret

00001c6a <_exit>:
    1c6a:	f8 94       	cli

00001c6c <__stop_program>:
    1c6c:	ff cf       	rjmp	.-2      	; 0x1c6c <__stop_program>
