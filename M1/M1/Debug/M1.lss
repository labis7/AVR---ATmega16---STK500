
M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00001cac  00001d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000121  008000ce  008000ce  00001dae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001de0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c2  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fd  00000000  00000000  000035ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b3  00000000  00000000  00003dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00005760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fe97  00000000  00000000  00005b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c93  00000000  00000000  000159c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0001765a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  0001773a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
       6:	00 00       	nop
       8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
       a:	00 00       	nop
       c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
       e:	00 00       	nop
      10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
      12:	00 00       	nop
      14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
      16:	00 00       	nop
      18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__vector_8>
      24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
      26:	00 00       	nop
      28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__vector_11>
      30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
      32:	00 00       	nop
      34:	9b c7       	rjmp	.+3894   	; 0xf6c <__vector_13>
      36:	00 00       	nop
      38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
      3e:	00 00       	nop
      40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
      42:	00 00       	nop
      44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
      46:	00 00       	nop
      48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
      4e:	00 00       	nop
      50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3e       	cpi	r26, 0xEF	; 239
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <main>
      8a:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <_exit>

0000008e <__bad_interrupt>:
      8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
      90:	08 95       	ret

00000092 <checkmove_sim>:
 /*
 * This function transmits a single byte to the terminal
 */
 void Sendmsg(char *data){
	 if(UCSRA & (1 << UDRE)) //if UDR is empty(no data transfer at the moment)
	 UDR = data;
      92:	2f 92       	push	r2
      94:	3f 92       	push	r3
      96:	4f 92       	push	r4
      98:	5f 92       	push	r5
      9a:	6f 92       	push	r6
      9c:	7f 92       	push	r7
      9e:	8f 92       	push	r8
      a0:	9f 92       	push	r9
      a2:	af 92       	push	r10
      a4:	bf 92       	push	r11
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	0f 93       	push	r16
      b0:	1f 93       	push	r17
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	2e 97       	sbiw	r28, 0x0e	; 14
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61
      c6:	88 2e       	mov	r8, r24
      c8:	96 2e       	mov	r9, r22
      ca:	2d 83       	std	Y+5, r18	; 0x05
      cc:	28 2e       	mov	r2, r24
      ce:	31 2c       	mov	r3, r1
      d0:	c1 01       	movw	r24, r2
      d2:	01 97       	sbiw	r24, 0x01	; 1
      d4:	9a 83       	std	Y+2, r25	; 0x02
      d6:	89 83       	std	Y+1, r24	; 0x01
      d8:	31 01       	movw	r6, r2
      da:	2f ef       	ldi	r18, 0xFF	; 255
      dc:	62 1a       	sub	r6, r18
      de:	72 0a       	sbc	r7, r18
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	9a 81       	ldd	r25, Y+2	; 0x02
      e4:	68 16       	cp	r6, r24
      e6:	79 06       	cpc	r7, r25
      e8:	0c f4       	brge	.+2      	; 0xec <checkmove_sim+0x5a>
      ea:	f0 c1       	rjmp	.+992    	; 0x4cc <__stack+0x6d>
      ec:	46 2e       	mov	r4, r22
      ee:	51 2c       	mov	r5, r1
      f0:	c1 01       	movw	r24, r2
      f2:	88 0f       	add	r24, r24
      f4:	99 1f       	adc	r25, r25
      f6:	88 0f       	add	r24, r24
      f8:	99 1f       	adc	r25, r25
      fa:	88 0f       	add	r24, r24
      fc:	99 1f       	adc	r25, r25
      fe:	fc 01       	movw	r30, r24
     100:	e4 0d       	add	r30, r4
     102:	f5 1d       	adc	r31, r5
     104:	fb 87       	std	Y+11, r31	; 0x0b
     106:	ea 87       	std	Y+10, r30	; 0x0a
     108:	c1 2c       	mov	r12, r1
     10a:	1e 86       	std	Y+14, r1	; 0x0e
     10c:	92 01       	movw	r18, r4
     10e:	21 50       	subi	r18, 0x01	; 1
     110:	31 09       	sbc	r19, r1
     112:	3f 83       	std	Y+7, r19	; 0x07
     114:	2e 83       	std	Y+6, r18	; 0x06
     116:	52 01       	movw	r10, r4
     118:	3f ef       	ldi	r19, 0xFF	; 255
     11a:	a3 1a       	sub	r10, r19
     11c:	b3 0a       	sbc	r11, r19
     11e:	88 86       	std	Y+8, r8	; 0x08
     120:	8c 2c       	mov	r8, r12
     122:	69 87       	std	Y+9, r22	; 0x09
     124:	94 2e       	mov	r9, r20
     126:	89 81       	ldd	r24, Y+1	; 0x01
     128:	9a 81       	ldd	r25, Y+2	; 0x02
     12a:	99 23       	and	r25, r25
     12c:	0c f4       	brge	.+2      	; 0x130 <checkmove_sim+0x9e>
     12e:	bf c1       	rjmp	.+894    	; 0x4ae <__stack+0x4f>
     130:	89 81       	ldd	r24, Y+1	; 0x01
     132:	9a 81       	ldd	r25, Y+2	; 0x02
     134:	08 97       	sbiw	r24, 0x08	; 8
     136:	0c f0       	brlt	.+2      	; 0x13a <checkmove_sim+0xa8>
     138:	ba c1       	rjmp	.+884    	; 0x4ae <__stack+0x4f>
     13a:	4e 81       	ldd	r20, Y+6	; 0x06
     13c:	5f 81       	ldd	r21, Y+7	; 0x07
     13e:	5c 83       	std	Y+4, r21	; 0x04
     140:	4b 83       	std	Y+3, r20	; 0x03
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	9c 81       	ldd	r25, Y+4	; 0x04
     146:	a8 16       	cp	r10, r24
     148:	b9 06       	cpc	r11, r25
     14a:	0c f4       	brge	.+2      	; 0x14e <checkmove_sim+0xbc>
     14c:	b0 c1       	rjmp	.+864    	; 0x4ae <__stack+0x4f>
     14e:	8b 81       	ldd	r24, Y+3	; 0x03
     150:	9c 81       	ldd	r25, Y+4	; 0x04
     152:	99 23       	and	r25, r25
     154:	0c f4       	brge	.+2      	; 0x158 <checkmove_sim+0xc6>
     156:	a0 c1       	rjmp	.+832    	; 0x498 <__stack+0x39>
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	08 97       	sbiw	r24, 0x08	; 8
     15e:	0c f0       	brlt	.+2      	; 0x162 <checkmove_sim+0xd0>
     160:	9b c1       	rjmp	.+822    	; 0x498 <__stack+0x39>
     162:	40 91 e7 01 	lds	r20, 0x01E7	; 0x8001e7 <M>
     166:	50 91 e8 01 	lds	r21, 0x01E8	; 0x8001e8 <M+0x1>
     16a:	e9 81       	ldd	r30, Y+1	; 0x01
     16c:	fa 81       	ldd	r31, Y+2	; 0x02
     16e:	8b 81       	ldd	r24, Y+3	; 0x03
     170:	9c 81       	ldd	r25, Y+4	; 0x04
     172:	ee 0f       	add	r30, r30
     174:	ff 1f       	adc	r31, r31
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	ee 0f       	add	r30, r30
     17c:	ff 1f       	adc	r31, r31
     17e:	e8 0f       	add	r30, r24
     180:	f9 1f       	adc	r31, r25
     182:	e4 0f       	add	r30, r20
     184:	f5 1f       	adc	r31, r21
     186:	80 81       	ld	r24, Z
     188:	89 15       	cp	r24, r9
     18a:	09 f4       	brne	.+2      	; 0x18e <checkmove_sim+0xfc>
     18c:	85 c1       	rjmp	.+778    	; 0x498 <__stack+0x39>
     18e:	e9 81       	ldd	r30, Y+1	; 0x01
     190:	fa 81       	ldd	r31, Y+2	; 0x02
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	9c 81       	ldd	r25, Y+4	; 0x04
     196:	ee 0f       	add	r30, r30
     198:	ff 1f       	adc	r31, r31
     19a:	ee 0f       	add	r30, r30
     19c:	ff 1f       	adc	r31, r31
     19e:	ee 0f       	add	r30, r30
     1a0:	ff 1f       	adc	r31, r31
     1a2:	e8 0f       	add	r30, r24
     1a4:	f9 1f       	adc	r31, r25
     1a6:	e4 0f       	add	r30, r20
     1a8:	f5 1f       	adc	r31, r21
     1aa:	80 81       	ld	r24, Z
     1ac:	82 30       	cpi	r24, 0x02	; 2
     1ae:	08 f0       	brcs	.+2      	; 0x1b2 <checkmove_sim+0x120>
     1b0:	73 c1       	rjmp	.+742    	; 0x498 <__stack+0x39>
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	9a 81       	ldd	r25, Y+2	; 0x02
     1b6:	28 16       	cp	r2, r24
     1b8:	39 06       	cpc	r3, r25
     1ba:	3c f0       	brlt	.+14     	; 0x1ca <checkmove_sim+0x138>
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	9a 81       	ldd	r25, Y+2	; 0x02
     1c0:	28 16       	cp	r2, r24
     1c2:	39 06       	cpc	r3, r25
     1c4:	39 f0       	breq	.+14     	; 0x1d4 <checkmove_sim+0x142>
     1c6:	f1 2c       	mov	r15, r1
     1c8:	09 c0       	rjmp	.+18     	; 0x1dc <checkmove_sim+0x14a>
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f7 e0       	ldi	r31, 0x07	; 7
     1ce:	ff 2e       	mov	r15, r31
     1d0:	f0 2d       	mov	r31, r0
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <checkmove_sim+0x14a>
     1d4:	0f 2e       	mov	r0, r31
     1d6:	f9 e0       	ldi	r31, 0x09	; 9
     1d8:	ff 2e       	mov	r15, r31
     1da:	f0 2d       	mov	r31, r0
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	9c 81       	ldd	r25, Y+4	; 0x04
     1e0:	48 16       	cp	r4, r24
     1e2:	59 06       	cpc	r5, r25
     1e4:	3c f0       	brlt	.+14     	; 0x1f4 <checkmove_sim+0x162>
     1e6:	8b 81       	ldd	r24, Y+3	; 0x03
     1e8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ea:	48 16       	cp	r4, r24
     1ec:	59 06       	cpc	r5, r25
     1ee:	39 f0       	breq	.+14     	; 0x1fe <checkmove_sim+0x16c>
     1f0:	e1 2c       	mov	r14, r1
     1f2:	09 c0       	rjmp	.+18     	; 0x206 <checkmove_sim+0x174>
     1f4:	0f 2e       	mov	r0, r31
     1f6:	f7 e0       	ldi	r31, 0x07	; 7
     1f8:	ef 2e       	mov	r14, r31
     1fa:	f0 2d       	mov	r31, r0
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <checkmove_sim+0x174>
     1fe:	0f 2e       	mov	r0, r31
     200:	f9 e0       	ldi	r31, 0x09	; 9
     202:	ef 2e       	mov	r14, r31
     204:	f0 2d       	mov	r31, r0
     206:	a9 81       	ldd	r26, Y+1	; 0x01
     208:	ba 81       	ldd	r27, Y+2	; 0x02
     20a:	88 85       	ldd	r24, Y+8	; 0x08
     20c:	a8 1b       	sub	r26, r24
     20e:	8b 81       	ldd	r24, Y+3	; 0x03
     210:	9c 81       	ldd	r25, Y+4	; 0x04
     212:	b8 2f       	mov	r27, r24
     214:	e9 85       	ldd	r30, Y+9	; 0x09
     216:	be 1b       	sub	r27, r30
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	68 2f       	mov	r22, r24
     21e:	2b 81       	ldd	r18, Y+3	; 0x03
     220:	3c 81       	ldd	r19, Y+4	; 0x04
     222:	72 2f       	mov	r23, r18
     224:	fd 81       	ldd	r31, Y+5	; 0x05
     226:	ff 23       	and	r31, r31
     228:	41 f1       	breq	.+80     	; 0x27a <checkmove_sim+0x1e8>
     22a:	99 27       	eor	r25, r25
     22c:	0a 2f       	mov	r16, r26
     22e:	10 e0       	ldi	r17, 0x00	; 0
     230:	0f 0d       	add	r16, r15
     232:	11 1d       	adc	r17, r1
     234:	80 17       	cp	r24, r16
     236:	91 07       	cpc	r25, r17
     238:	09 f4       	brne	.+2      	; 0x23c <checkmove_sim+0x1aa>
     23a:	2e c1       	rjmp	.+604    	; 0x498 <__stack+0x39>
     23c:	33 27       	eor	r19, r19
     23e:	eb 2f       	mov	r30, r27
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	6f 01       	movw	r12, r30
     244:	ce 0c       	add	r12, r14
     246:	d1 1c       	adc	r13, r1
     248:	dd 86       	std	Y+13, r13	; 0x0d
     24a:	cc 86       	std	Y+12, r12	; 0x0c
     24c:	2c 15       	cp	r18, r12
     24e:	3d 05       	cpc	r19, r13
     250:	09 f4       	brne	.+2      	; 0x254 <checkmove_sim+0x1c2>
     252:	22 c1       	rjmp	.+580    	; 0x498 <__stack+0x39>
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	82 0f       	add	r24, r18
     262:	93 1f       	adc	r25, r19
     264:	84 0f       	add	r24, r20
     266:	95 1f       	adc	r25, r21
     268:	fc 01       	movw	r30, r24
     26a:	20 81       	ld	r18, Z
     26c:	22 30       	cpi	r18, 0x02	; 2
     26e:	08 f0       	brcs	.+2      	; 0x272 <checkmove_sim+0x1e0>
     270:	13 c1       	rjmp	.+550    	; 0x498 <__stack+0x39>
     272:	80 81       	ld	r24, Z
     274:	98 12       	cpse	r9, r24
     276:	a4 c0       	rjmp	.+328    	; 0x3c0 <checkmove_sim+0x32e>
     278:	93 c0       	rjmp	.+294    	; 0x3a0 <checkmove_sim+0x30e>
     27a:	99 27       	eor	r25, r25
     27c:	0a 2f       	mov	r16, r26
     27e:	10 e0       	ldi	r17, 0x00	; 0
     280:	0f 0d       	add	r16, r15
     282:	11 1d       	adc	r17, r1
     284:	80 17       	cp	r24, r16
     286:	91 07       	cpc	r25, r17
     288:	09 f4       	brne	.+2      	; 0x28c <checkmove_sim+0x1fa>
     28a:	06 c1       	rjmp	.+524    	; 0x498 <__stack+0x39>
     28c:	33 27       	eor	r19, r19
     28e:	eb 2f       	mov	r30, r27
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	6f 01       	movw	r12, r30
     294:	ce 0c       	add	r12, r14
     296:	d1 1c       	adc	r13, r1
     298:	dd 86       	std	Y+13, r13	; 0x0d
     29a:	cc 86       	std	Y+12, r12	; 0x0c
     29c:	2c 15       	cp	r18, r12
     29e:	3d 05       	cpc	r19, r13
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <checkmove_sim+0x212>
     2a2:	fa c0       	rjmp	.+500    	; 0x498 <__stack+0x39>
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	82 0f       	add	r24, r18
     2b2:	93 1f       	adc	r25, r19
     2b4:	84 0f       	add	r24, r20
     2b6:	95 1f       	adc	r25, r21
     2b8:	fc 01       	movw	r30, r24
     2ba:	20 81       	ld	r18, Z
     2bc:	22 30       	cpi	r18, 0x02	; 2
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <checkmove_sim+0x230>
     2c0:	eb c0       	rjmp	.+470    	; 0x498 <__stack+0x39>
     2c2:	80 81       	ld	r24, Z
     2c4:	98 12       	cpse	r9, r24
     2c6:	14 c0       	rjmp	.+40     	; 0x2f0 <checkmove_sim+0x25e>
     2c8:	64 c1       	rjmp	.+712    	; 0x592 <__stack+0x133>
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	a8 0f       	add	r26, r24
     2d8:	b9 1f       	adc	r27, r25
     2da:	a4 0f       	add	r26, r20
     2dc:	b5 1f       	adc	r27, r21
     2de:	8c 91       	ld	r24, X
     2e0:	82 30       	cpi	r24, 0x02	; 2
     2e2:	08 f0       	brcs	.+2      	; 0x2e6 <checkmove_sim+0x254>
     2e4:	d9 c0       	rjmp	.+434    	; 0x498 <__stack+0x39>
     2e6:	8c 91       	ld	r24, X
     2e8:	98 16       	cp	r9, r24
     2ea:	09 f4       	brne	.+2      	; 0x2ee <checkmove_sim+0x25c>
     2ec:	50 c1       	rjmp	.+672    	; 0x58e <__stack+0x12f>
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <checkmove_sim+0x266>
     2f0:	2a 2f       	mov	r18, r26
     2f2:	3b 2f       	mov	r19, r27
     2f4:	ec 85       	ldd	r30, Y+12	; 0x0c
     2f6:	fd 85       	ldd	r31, Y+13	; 0x0d
     2f8:	73 0f       	add	r23, r19
     2fa:	62 0f       	add	r22, r18
     2fc:	86 2f       	mov	r24, r22
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	80 17       	cp	r24, r16
     302:	91 07       	cpc	r25, r17
     304:	09 f4       	brne	.+2      	; 0x308 <checkmove_sim+0x276>
     306:	c8 c0       	rjmp	.+400    	; 0x498 <__stack+0x39>
     308:	a7 2f       	mov	r26, r23
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	ae 17       	cp	r26, r30
     30e:	bf 07       	cpc	r27, r31
     310:	e1 f6       	brne	.-72     	; 0x2ca <checkmove_sim+0x238>
     312:	c2 c0       	rjmp	.+388    	; 0x498 <__stack+0x39>
     314:	e9 16       	cp	r14, r25
     316:	09 f4       	brne	.+2      	; 0x31a <checkmove_sim+0x288>
     318:	9c c0       	rjmp	.+312    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     31a:	f9 01       	movw	r30, r18
     31c:	ff 27       	eor	r31, r31
     31e:	ee 0f       	add	r30, r30
     320:	ff 1f       	adc	r31, r31
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	ee 0f       	add	r30, r30
     328:	ff 1f       	adc	r31, r31
     32a:	e6 0f       	add	r30, r22
     32c:	f1 1d       	adc	r31, r1
     32e:	e4 0f       	add	r30, r20
     330:	f5 1f       	adc	r31, r21
     332:	20 81       	ld	r18, Z
     334:	22 30       	cpi	r18, 0x02	; 2
     336:	08 f0       	brcs	.+2      	; 0x33a <checkmove_sim+0x2a8>
     338:	8f c0       	rjmp	.+286    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     33a:	20 81       	ld	r18, Z
     33c:	92 12       	cpse	r9, r18
     33e:	12 c0       	rjmp	.+36     	; 0x364 <checkmove_sim+0x2d2>
     340:	8e c0       	rjmp	.+284    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     342:	e9 2f       	mov	r30, r25
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	28 e0       	ldi	r18, 0x08	; 8
     348:	82 9f       	mul	r24, r18
     34a:	e0 0d       	add	r30, r0
     34c:	f1 1d       	adc	r31, r1
     34e:	11 24       	eor	r1, r1
     350:	e4 0f       	add	r30, r20
     352:	f5 1f       	adc	r31, r21
     354:	20 81       	ld	r18, Z
     356:	22 30       	cpi	r18, 0x02	; 2
     358:	08 f0       	brcs	.+2      	; 0x35c <checkmove_sim+0x2ca>
     35a:	84 c0       	rjmp	.+264    	; 0x464 <__stack+0x5>
     35c:	20 81       	ld	r18, Z
     35e:	92 16       	cp	r9, r18
     360:	09 f4       	brne	.+2      	; 0x364 <checkmove_sim+0x2d2>
     362:	83 c0       	rjmp	.+262    	; 0x46a <__stack+0xb>
     364:	83 94       	inc	r8
     366:	9b 0f       	add	r25, r27
     368:	8a 0f       	add	r24, r26
     36a:	f8 16       	cp	r15, r24
     36c:	09 f4       	brne	.+2      	; 0x370 <checkmove_sim+0x2de>
     36e:	80 c0       	rjmp	.+256    	; 0x470 <__stack+0x11>
     370:	e9 12       	cpse	r14, r25
     372:	e7 cf       	rjmp	.-50     	; 0x342 <checkmove_sim+0x2b0>
     374:	31 e0       	ldi	r19, 0x01	; 1
     376:	3e 87       	std	Y+14, r19	; 0x0e
     378:	8f c0       	rjmp	.+286    	; 0x498 <__stack+0x39>
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	a8 0f       	add	r26, r24
     388:	b9 1f       	adc	r27, r25
     38a:	a4 0f       	add	r26, r20
     38c:	b5 1f       	adc	r27, r21
     38e:	8c 91       	ld	r24, X
     390:	82 30       	cpi	r24, 0x02	; 2
     392:	08 f0       	brcs	.+2      	; 0x396 <checkmove_sim+0x304>
     394:	81 c0       	rjmp	.+258    	; 0x498 <__stack+0x39>
     396:	8c 91       	ld	r24, X
     398:	98 12       	cpse	r9, r24
     39a:	16 c0       	rjmp	.+44     	; 0x3c8 <checkmove_sim+0x336>
     39c:	a2 2f       	mov	r26, r18
     39e:	b3 2f       	mov	r27, r19
     3a0:	ea 85       	ldd	r30, Y+10	; 0x0a
     3a2:	fb 85       	ldd	r31, Y+11	; 0x0b
     3a4:	e4 0f       	add	r30, r20
     3a6:	f5 1f       	adc	r31, r21
     3a8:	90 82       	st	Z, r9
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	48 2f       	mov	r20, r24
     3b0:	6b 81       	ldd	r22, Y+3	; 0x03
     3b2:	7c 81       	ldd	r23, Y+4	; 0x04
     3b4:	56 2f       	mov	r21, r22
     3b6:	f8 12       	cpse	r15, r24
     3b8:	15 c0       	rjmp	.+42     	; 0x3e4 <checkmove_sim+0x352>
     3ba:	41 e0       	ldi	r20, 0x01	; 1
     3bc:	4e 87       	std	Y+14, r20	; 0x0e
     3be:	6c c0       	rjmp	.+216    	; 0x498 <__stack+0x39>
     3c0:	2a 2f       	mov	r18, r26
     3c2:	3b 2f       	mov	r19, r27
     3c4:	ec 85       	ldd	r30, Y+12	; 0x0c
     3c6:	fd 85       	ldd	r31, Y+13	; 0x0d
     3c8:	73 0f       	add	r23, r19
     3ca:	62 0f       	add	r22, r18
     3cc:	86 2f       	mov	r24, r22
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	80 17       	cp	r24, r16
     3d2:	91 07       	cpc	r25, r17
     3d4:	09 f4       	brne	.+2      	; 0x3d8 <checkmove_sim+0x346>
     3d6:	60 c0       	rjmp	.+192    	; 0x498 <__stack+0x39>
     3d8:	a7 2f       	mov	r26, r23
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	ae 17       	cp	r26, r30
     3de:	bf 07       	cpc	r27, r31
     3e0:	61 f6       	brne	.-104    	; 0x37a <checkmove_sim+0x2e8>
     3e2:	5a c0       	rjmp	.+180    	; 0x498 <__stack+0x39>
     3e4:	e6 16       	cp	r14, r22
     3e6:	09 f4       	brne	.+2      	; 0x3ea <checkmove_sim+0x358>
     3e8:	46 c0       	rjmp	.+140    	; 0x476 <__stack+0x17>
     3ea:	99 27       	eor	r25, r25
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	86 0f       	add	r24, r22
     3fa:	91 1d       	adc	r25, r1
     3fc:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <M>
     400:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <M+0x1>
     404:	f9 01       	movw	r30, r18
     406:	e8 0f       	add	r30, r24
     408:	f9 1f       	adc	r31, r25
     40a:	80 81       	ld	r24, Z
     40c:	82 30       	cpi	r24, 0x02	; 2
     40e:	b0 f5       	brcc	.+108    	; 0x47c <__stack+0x1d>
     410:	80 81       	ld	r24, Z
     412:	98 12       	cpse	r9, r24
     414:	14 c0       	rjmp	.+40     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     416:	35 c0       	rjmp	.+106    	; 0x482 <__stack+0x23>
     418:	e5 2f       	mov	r30, r21
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	88 e0       	ldi	r24, 0x08	; 8
     41e:	48 9f       	mul	r20, r24
     420:	e0 0d       	add	r30, r0
     422:	f1 1d       	adc	r31, r1
     424:	11 24       	eor	r1, r1
     426:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <M>
     42a:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <M+0x1>
     42e:	e8 0f       	add	r30, r24
     430:	f9 1f       	adc	r31, r25
     432:	80 81       	ld	r24, Z
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	40 f5       	brcc	.+80     	; 0x488 <__stack+0x29>
     438:	80 81       	ld	r24, Z
     43a:	98 16       	cp	r9, r24
     43c:	41 f1       	breq	.+80     	; 0x48e <__stack+0x2f>
     43e:	90 82       	st	Z, r9
     440:	5b 0f       	add	r21, r27
     442:	4a 0f       	add	r20, r26
     444:	f4 16       	cp	r15, r20
     446:	31 f1       	breq	.+76     	; 0x494 <__stack+0x35>
     448:	e5 12       	cpse	r14, r21
     44a:	e6 cf       	rjmp	.-52     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	9e 87       	std	Y+14, r25	; 0x0e
     450:	23 c0       	rjmp	.+70     	; 0x498 <__stack+0x39>
     452:	e1 e0       	ldi	r30, 0x01	; 1
     454:	ee 87       	std	Y+14, r30	; 0x0e
     456:	20 c0       	rjmp	.+64     	; 0x498 <__stack+0x39>
     458:	f1 e0       	ldi	r31, 0x01	; 1
     45a:	fe 87       	std	Y+14, r31	; 0x0e
     45c:	1d c0       	rjmp	.+58     	; 0x498 <__stack+0x39>
     45e:	21 e0       	ldi	r18, 0x01	; 1
     460:	2e 87       	std	Y+14, r18	; 0x0e
     462:	1a c0       	rjmp	.+52     	; 0x498 <__stack+0x39>
     464:	31 e0       	ldi	r19, 0x01	; 1
     466:	3e 87       	std	Y+14, r19	; 0x0e
     468:	17 c0       	rjmp	.+46     	; 0x498 <__stack+0x39>
     46a:	41 e0       	ldi	r20, 0x01	; 1
     46c:	4e 87       	std	Y+14, r20	; 0x0e
     46e:	14 c0       	rjmp	.+40     	; 0x498 <__stack+0x39>
     470:	51 e0       	ldi	r21, 0x01	; 1
     472:	5e 87       	std	Y+14, r21	; 0x0e
     474:	11 c0       	rjmp	.+34     	; 0x498 <__stack+0x39>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	8e 87       	std	Y+14, r24	; 0x0e
     47a:	0e c0       	rjmp	.+28     	; 0x498 <__stack+0x39>
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	9e 87       	std	Y+14, r25	; 0x0e
     480:	0b c0       	rjmp	.+22     	; 0x498 <__stack+0x39>
     482:	e1 e0       	ldi	r30, 0x01	; 1
     484:	ee 87       	std	Y+14, r30	; 0x0e
     486:	08 c0       	rjmp	.+16     	; 0x498 <__stack+0x39>
     488:	f1 e0       	ldi	r31, 0x01	; 1
     48a:	fe 87       	std	Y+14, r31	; 0x0e
     48c:	05 c0       	rjmp	.+10     	; 0x498 <__stack+0x39>
     48e:	21 e0       	ldi	r18, 0x01	; 1
     490:	2e 87       	std	Y+14, r18	; 0x0e
     492:	02 c0       	rjmp	.+4      	; 0x498 <__stack+0x39>
     494:	31 e0       	ldi	r19, 0x01	; 1
     496:	3e 87       	std	Y+14, r19	; 0x0e
     498:	8b 81       	ldd	r24, Y+3	; 0x03
     49a:	9c 81       	ldd	r25, Y+4	; 0x04
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	9c 83       	std	Y+4, r25	; 0x04
     4a0:	8b 83       	std	Y+3, r24	; 0x03
     4a2:	8b 81       	ldd	r24, Y+3	; 0x03
     4a4:	9c 81       	ldd	r25, Y+4	; 0x04
     4a6:	a8 16       	cp	r10, r24
     4a8:	b9 06       	cpc	r11, r25
     4aa:	0c f0       	brlt	.+2      	; 0x4ae <__stack+0x4f>
     4ac:	50 ce       	rjmp	.-864    	; 0x14e <checkmove_sim+0xbc>
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	9a 81       	ldd	r25, Y+2	; 0x02
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	9a 83       	std	Y+2, r25	; 0x02
     4b6:	89 83       	std	Y+1, r24	; 0x01
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	9a 81       	ldd	r25, Y+2	; 0x02
     4bc:	68 16       	cp	r6, r24
     4be:	79 06       	cpc	r7, r25
     4c0:	0c f0       	brlt	.+2      	; 0x4c4 <__stack+0x65>
     4c2:	31 ce       	rjmp	.-926    	; 0x126 <checkmove_sim+0x94>
     4c4:	c8 2c       	mov	r12, r8
     4c6:	88 84       	ldd	r8, Y+8	; 0x08
     4c8:	99 84       	ldd	r9, Y+9	; 0x09
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__stack+0x71>
     4cc:	c1 2c       	mov	r12, r1
     4ce:	1e 86       	std	Y+14, r1	; 0x0e
     4d0:	4d 81       	ldd	r20, Y+5	; 0x05
     4d2:	41 11       	cpse	r20, r1
     4d4:	56 c0       	rjmp	.+172    	; 0x582 <__stack+0x123>
     4d6:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <M>
     4da:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <M+0x1>
     4de:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <vi_max>
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	ee 0f       	add	r30, r30
     4e6:	ff 1f       	adc	r31, r31
     4e8:	ee 0f       	add	r30, r30
     4ea:	ff 1f       	adc	r31, r31
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <vj_max>
     4f4:	e8 0f       	add	r30, r24
     4f6:	f1 1d       	adc	r31, r1
     4f8:	e2 0f       	add	r30, r18
     4fa:	f3 1f       	adc	r31, r19
     4fc:	e0 81       	ld	r30, Z
     4fe:	22 0c       	add	r2, r2
     500:	33 1c       	adc	r3, r3
     502:	22 0c       	add	r2, r2
     504:	33 1c       	adc	r3, r3
     506:	22 0c       	add	r2, r2
     508:	33 1c       	adc	r3, r3
     50a:	c1 01       	movw	r24, r2
     50c:	89 0d       	add	r24, r9
     50e:	91 1d       	adc	r25, r1
     510:	dc 01       	movw	r26, r24
     512:	a9 59       	subi	r26, 0x99	; 153
     514:	bf 4f       	sbci	r27, 0xFF	; 255
     516:	6c 91       	ld	r22, X
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	4c 2d       	mov	r20, r12
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	42 5f       	subi	r20, 0xF2	; 242
     520:	5f 4f       	sbci	r21, 0xFF	; 255
     522:	46 0f       	add	r20, r22
     524:	51 1d       	adc	r21, r1
     526:	4e 17       	cp	r20, r30
     528:	5f 07       	cpc	r21, r31
     52a:	5c f1       	brlt	.+86     	; 0x582 <__stack+0x123>
     52c:	f9 01       	movw	r30, r18
     52e:	e8 0f       	add	r30, r24
     530:	f9 1f       	adc	r31, r25
     532:	62 5f       	subi	r22, 0xF2	; 242
     534:	6c 0d       	add	r22, r12
     536:	60 83       	st	Z, r22
     538:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <vi_max>
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	ee 0f       	add	r30, r30
     540:	ff 1f       	adc	r31, r31
     542:	ee 0f       	add	r30, r30
     544:	ff 1f       	adc	r31, r31
     546:	ee 0f       	add	r30, r30
     548:	ff 1f       	adc	r31, r31
     54a:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <vj_max>
     54e:	af 01       	movw	r20, r30
     550:	42 0f       	add	r20, r18
     552:	51 1d       	adc	r21, r1
     554:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     558:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     55c:	e4 0f       	add	r30, r20
     55e:	f5 1f       	adc	r31, r21
     560:	20 81       	ld	r18, Z
     562:	23 30       	cpi	r18, 0x03	; 3
     564:	10 f0       	brcs	.+4      	; 0x56a <__stack+0x10b>
     566:	22 e0       	ldi	r18, 0x02	; 2
     568:	20 83       	st	Z, r18
     56a:	80 92 e9 01 	sts	0x01E9, r8	; 0x8001e9 <vi_max>
     56e:	90 92 e0 00 	sts	0x00E0, r9	; 0x8000e0 <vj_max>
     572:	fc 01       	movw	r30, r24
     574:	e9 59       	subi	r30, 0x99	; 153
     576:	ff 4f       	sbci	r31, 0xFF	; 255
     578:	80 81       	ld	r24, Z
     57a:	82 5f       	subi	r24, 0xF2	; 242
     57c:	c8 0e       	add	r12, r24
     57e:	c0 92 da 00 	sts	0x00DA, r12	; 0x8000da <v_max>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	5e 85       	ldd	r21, Y+14	; 0x0e
     586:	51 30       	cpi	r21, 0x01	; 1
     588:	79 f0       	breq	.+30     	; 0x5a8 <__stack+0x149>
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0d c0       	rjmp	.+26     	; 0x5a8 <__stack+0x149>
     58e:	a2 2f       	mov	r26, r18
     590:	b3 2f       	mov	r27, r19
     592:	29 81       	ldd	r18, Y+1	; 0x01
     594:	3a 81       	ldd	r19, Y+2	; 0x02
     596:	82 2f       	mov	r24, r18
     598:	6b 81       	ldd	r22, Y+3	; 0x03
     59a:	7c 81       	ldd	r23, Y+4	; 0x04
     59c:	96 2f       	mov	r25, r22
     59e:	f2 12       	cpse	r15, r18
     5a0:	b9 ce       	rjmp	.-654    	; 0x314 <checkmove_sim+0x282>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	8e 87       	std	Y+14, r24	; 0x0e
     5a6:	78 cf       	rjmp	.-272    	; 0x498 <__stack+0x39>
     5a8:	2e 96       	adiw	r28, 0x0e	; 14
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	bf 90       	pop	r11
     5c6:	af 90       	pop	r10
     5c8:	9f 90       	pop	r9
     5ca:	8f 90       	pop	r8
     5cc:	7f 90       	pop	r7
     5ce:	6f 90       	pop	r6
     5d0:	5f 90       	pop	r5
     5d2:	4f 90       	pop	r4
     5d4:	3f 90       	pop	r3
     5d6:	2f 90       	pop	r2
     5d8:	08 95       	ret

000005da <algo_sim>:
     5da:	2f 92       	push	r2
     5dc:	3f 92       	push	r3
     5de:	4f 92       	push	r4
     5e0:	5f 92       	push	r5
     5e2:	6f 92       	push	r6
     5e4:	7f 92       	push	r7
     5e6:	8f 92       	push	r8
     5e8:	9f 92       	push	r9
     5ea:	af 92       	push	r10
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	61 97       	sbiw	r28, 0x11	; 17
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <vi_max>
     61a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <vj_max>
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	3d 87       	std	Y+13, r19	; 0x0d
     624:	2c 87       	std	Y+12, r18	; 0x0c
     626:	1f 86       	std	Y+15, r1	; 0x0f
     628:	1e 86       	std	Y+14, r1	; 0x0e
     62a:	1d 82       	std	Y+5, r1	; 0x05
     62c:	f4 c0       	rjmp	.+488    	; 0x816 <algo_sim+0x23c>
     62e:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     632:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     636:	4e 81       	ldd	r20, Y+6	; 0x06
     638:	5f 81       	ldd	r21, Y+7	; 0x07
     63a:	e4 0f       	add	r30, r20
     63c:	f5 1f       	adc	r31, r21
     63e:	20 81       	ld	r18, Z
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
     64a:	41 11       	cpse	r20, r1
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	28 17       	cp	r18, r24
     650:	39 07       	cpc	r19, r25
     652:	09 f0       	breq	.+2      	; 0x656 <algo_sim+0x7c>
     654:	c2 c0       	rjmp	.+388    	; 0x7da <algo_sim+0x200>
     656:	4d 80       	ldd	r4, Y+5	; 0x05
     658:	4a 94       	dec	r4
     65a:	04 2d       	mov	r16, r4
     65c:	10 e0       	ldi	r17, 0x00	; 0
     65e:	8c 85       	ldd	r24, Y+12	; 0x0c
     660:	9d 85       	ldd	r25, Y+13	; 0x0d
     662:	80 17       	cp	r24, r16
     664:	91 07       	cpc	r25, r17
     666:	0c f4       	brge	.+2      	; 0x66a <algo_sim+0x90>
     668:	b8 c0       	rjmp	.+368    	; 0x7da <algo_sim+0x200>
     66a:	31 01       	movw	r6, r2
     66c:	3b 86       	std	Y+11, r3	; 0x0b
     66e:	2a 86       	std	Y+10, r2	; 0x0a
     670:	97 e0       	ldi	r25, 0x07	; 7
     672:	94 15       	cp	r25, r4
     674:	08 f4       	brcc	.+2      	; 0x678 <algo_sim+0x9e>
     676:	a6 c0       	rjmp	.+332    	; 0x7c4 <algo_sim+0x1ea>
     678:	dd 24       	eor	r13, r13
     67a:	da 94       	dec	r13
     67c:	d5 0c       	add	r13, r5
     67e:	8d 2d       	mov	r24, r13
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	2a 85       	ldd	r18, Y+10	; 0x0a
     684:	3b 85       	ldd	r19, Y+11	; 0x0b
     686:	28 17       	cp	r18, r24
     688:	39 07       	cpc	r19, r25
     68a:	0c f4       	brge	.+2      	; 0x68e <algo_sim+0xb4>
     68c:	9b c0       	rjmp	.+310    	; 0x7c4 <algo_sim+0x1ea>
     68e:	58 01       	movw	r10, r16
     690:	aa 0c       	add	r10, r10
     692:	bb 1c       	adc	r11, r11
     694:	aa 0c       	add	r10, r10
     696:	bb 1c       	adc	r11, r11
     698:	aa 0c       	add	r10, r10
     69a:	bb 1c       	adc	r11, r11
     69c:	84 2c       	mov	r8, r4
     69e:	91 2c       	mov	r9, r1
     6a0:	a4 01       	movw	r20, r8
     6a2:	44 0f       	add	r20, r20
     6a4:	55 1f       	adc	r21, r21
     6a6:	44 0f       	add	r20, r20
     6a8:	55 1f       	adc	r21, r21
     6aa:	44 0f       	add	r20, r20
     6ac:	55 1f       	adc	r21, r21
     6ae:	5c 83       	std	Y+4, r21	; 0x04
     6b0:	4b 83       	std	Y+3, r20	; 0x03
     6b2:	c4 2c       	mov	r12, r4
     6b4:	5d 81       	ldd	r21, Y+5	; 0x05
     6b6:	c5 1a       	sub	r12, r21
     6b8:	2c 2d       	mov	r18, r12
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	3a 83       	std	Y+2, r19	; 0x02
     6be:	29 83       	std	Y+1, r18	; 0x01
     6c0:	35 2e       	mov	r3, r21
     6c2:	37 e0       	ldi	r19, 0x07	; 7
     6c4:	3d 15       	cp	r19, r13
     6c6:	08 f4       	brcc	.+2      	; 0x6ca <algo_sim+0xf0>
     6c8:	76 c0       	rjmp	.+236    	; 0x7b6 <algo_sim+0x1dc>
     6ca:	e0 90 e7 01 	lds	r14, 0x01E7	; 0x8001e7 <M>
     6ce:	f0 90 e8 01 	lds	r15, 0x01E8	; 0x8001e8 <M+0x1>
     6d2:	8a 0d       	add	r24, r10
     6d4:	9b 1d       	adc	r25, r11
     6d6:	f7 01       	movw	r30, r14
     6d8:	e8 0f       	add	r30, r24
     6da:	f9 1f       	adc	r31, r25
     6dc:	80 81       	ld	r24, Z
     6de:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <MyColor>
     6e2:	89 13       	cpse	r24, r25
     6e4:	68 c0       	rjmp	.+208    	; 0x7b6 <algo_sim+0x1dc>
     6e6:	34 14       	cp	r3, r4
     6e8:	20 f0       	brcs	.+8      	; 0x6f2 <algo_sim+0x118>
     6ea:	34 14       	cp	r3, r4
     6ec:	21 f0       	breq	.+8      	; 0x6f6 <algo_sim+0x11c>
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <algo_sim+0x11e>
     6f2:	27 e0       	ldi	r18, 0x07	; 7
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <algo_sim+0x11e>
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	5d 14       	cp	r5, r13
     6fa:	20 f0       	brcs	.+8      	; 0x704 <algo_sim+0x12a>
     6fc:	5d 14       	cp	r5, r13
     6fe:	21 f0       	breq	.+8      	; 0x708 <algo_sim+0x12e>
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	03 c0       	rjmp	.+6      	; 0x70a <algo_sim+0x130>
     704:	37 e0       	ldi	r19, 0x07	; 7
     706:	01 c0       	rjmp	.+2      	; 0x70a <algo_sim+0x130>
     708:	3a e0       	ldi	r19, 0x0A	; 10
     70a:	9d 2d       	mov	r25, r13
     70c:	95 19       	sub	r25, r5
     70e:	49 81       	ldd	r20, Y+1	; 0x01
     710:	5a 81       	ldd	r21, Y+2	; 0x02
     712:	42 0f       	add	r20, r18
     714:	51 1d       	adc	r21, r1
     716:	59 8b       	std	Y+17, r21	; 0x11
     718:	48 8b       	std	Y+16, r20	; 0x10
     71a:	84 16       	cp	r8, r20
     71c:	95 06       	cpc	r9, r21
     71e:	09 f4       	brne	.+2      	; 0x722 <algo_sim+0x148>
     720:	4a c0       	rjmp	.+148    	; 0x7b6 <algo_sim+0x1dc>
     722:	ed 2d       	mov	r30, r13
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	a9 2f       	mov	r26, r25
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	a3 0f       	add	r26, r19
     72c:	b1 1d       	adc	r27, r1
     72e:	ea 17       	cp	r30, r26
     730:	fb 07       	cpc	r31, r27
     732:	09 f4       	brne	.+2      	; 0x736 <algo_sim+0x15c>
     734:	40 c0       	rjmp	.+128    	; 0x7b6 <algo_sim+0x1dc>
     736:	2b 81       	ldd	r18, Y+3	; 0x03
     738:	3c 81       	ldd	r19, Y+4	; 0x04
     73a:	e2 0f       	add	r30, r18
     73c:	f3 1f       	adc	r31, r19
     73e:	ee 0d       	add	r30, r14
     740:	ff 1d       	adc	r31, r15
     742:	20 81       	ld	r18, Z
     744:	71 e0       	ldi	r23, 0x01	; 1
     746:	81 11       	cpse	r24, r1
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	07 2f       	mov	r16, r23
     74c:	10 e0       	ldi	r17, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	20 17       	cp	r18, r16
     752:	31 07       	cpc	r19, r17
     754:	81 f1       	breq	.+96     	; 0x7b6 <algo_sim+0x1dc>
     756:	80 81       	ld	r24, Z
     758:	82 30       	cpi	r24, 0x02	; 2
     75a:	b1 f0       	breq	.+44     	; 0x788 <algo_sim+0x1ae>
     75c:	6d 2d       	mov	r22, r13
     75e:	84 2d       	mov	r24, r4
     760:	1c c0       	rjmp	.+56     	; 0x79a <algo_sim+0x1c0>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	22 0f       	add	r18, r18
     76c:	33 1f       	adc	r19, r19
     76e:	e2 0f       	add	r30, r18
     770:	f3 1f       	adc	r31, r19
     772:	ee 0d       	add	r30, r14
     774:	ff 1d       	adc	r31, r15
     776:	20 81       	ld	r18, Z
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	20 17       	cp	r18, r16
     77c:	31 07       	cpc	r19, r17
     77e:	d9 f0       	breq	.+54     	; 0x7b6 <algo_sim+0x1dc>
     780:	20 81       	ld	r18, Z
     782:	22 30       	cpi	r18, 0x02	; 2
     784:	51 f4       	brne	.+20     	; 0x79a <algo_sim+0x1c0>
     786:	02 c0       	rjmp	.+4      	; 0x78c <algo_sim+0x1b2>
     788:	6d 2d       	mov	r22, r13
     78a:	84 2d       	mov	r24, r4
     78c:	51 e0       	ldi	r21, 0x01	; 1
     78e:	50 93 db 00 	sts	0x00DB, r21	; 0x8000db <move_done>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	47 2f       	mov	r20, r23
     796:	7d dc       	rcall	.-1798   	; 0x92 <checkmove_sim>
     798:	0e c0       	rjmp	.+28     	; 0x7b6 <algo_sim+0x1dc>
     79a:	69 0f       	add	r22, r25
     79c:	8c 0d       	add	r24, r12
     79e:	28 2f       	mov	r18, r24
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	48 89       	ldd	r20, Y+16	; 0x10
     7a4:	59 89       	ldd	r21, Y+17	; 0x11
     7a6:	24 17       	cp	r18, r20
     7a8:	35 07       	cpc	r19, r21
     7aa:	29 f0       	breq	.+10     	; 0x7b6 <algo_sim+0x1dc>
     7ac:	e6 2f       	mov	r30, r22
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	ea 17       	cp	r30, r26
     7b2:	fb 07       	cpc	r31, r27
     7b4:	b1 f6       	brne	.-84     	; 0x762 <algo_sim+0x188>
     7b6:	d3 94       	inc	r13
     7b8:	8d 2d       	mov	r24, r13
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	68 16       	cp	r6, r24
     7be:	79 06       	cpc	r7, r25
     7c0:	0c f0       	brlt	.+2      	; 0x7c4 <algo_sim+0x1ea>
     7c2:	7f cf       	rjmp	.-258    	; 0x6c2 <algo_sim+0xe8>
     7c4:	43 94       	inc	r4
     7c6:	04 2d       	mov	r16, r4
     7c8:	10 e0       	ldi	r17, 0x00	; 0
     7ca:	88 85       	ldd	r24, Y+8	; 0x08
     7cc:	99 85       	ldd	r25, Y+9	; 0x09
     7ce:	80 17       	cp	r24, r16
     7d0:	91 07       	cpc	r25, r17
     7d2:	0c f0       	brlt	.+2      	; 0x7d6 <algo_sim+0x1fc>
     7d4:	4d cf       	rjmp	.-358    	; 0x670 <algo_sim+0x96>
     7d6:	2a 84       	ldd	r2, Y+10	; 0x0a
     7d8:	3b 84       	ldd	r3, Y+11	; 0x0b
     7da:	53 94       	inc	r5
     7dc:	2e 81       	ldd	r18, Y+6	; 0x06
     7de:	3f 81       	ldd	r19, Y+7	; 0x07
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	3f 83       	std	Y+7, r19	; 0x07
     7e6:	2e 83       	std	Y+6, r18	; 0x06
     7e8:	3f ef       	ldi	r19, 0xFF	; 255
     7ea:	23 1a       	sub	r2, r19
     7ec:	33 0a       	sbc	r3, r19
     7ee:	48 e0       	ldi	r20, 0x08	; 8
     7f0:	54 12       	cpse	r5, r20
     7f2:	1d cf       	rjmp	.-454    	; 0x62e <algo_sim+0x54>
     7f4:	5d 81       	ldd	r21, Y+5	; 0x05
     7f6:	5f 5f       	subi	r21, 0xFF	; 255
     7f8:	5d 83       	std	Y+5, r21	; 0x05
     7fa:	8e 85       	ldd	r24, Y+14	; 0x0e
     7fc:	9f 85       	ldd	r25, Y+15	; 0x0f
     7fe:	08 96       	adiw	r24, 0x08	; 8
     800:	9f 87       	std	Y+15, r25	; 0x0f
     802:	8e 87       	std	Y+14, r24	; 0x0e
     804:	2c 85       	ldd	r18, Y+12	; 0x0c
     806:	3d 85       	ldd	r19, Y+13	; 0x0d
     808:	2f 5f       	subi	r18, 0xFF	; 255
     80a:	3f 4f       	sbci	r19, 0xFF	; 255
     80c:	3d 87       	std	Y+13, r19	; 0x0d
     80e:	2c 87       	std	Y+12, r18	; 0x0c
     810:	80 34       	cpi	r24, 0x40	; 64
     812:	91 05       	cpc	r25, r1
     814:	71 f0       	breq	.+28     	; 0x832 <algo_sim+0x258>
     816:	4e 85       	ldd	r20, Y+14	; 0x0e
     818:	5f 85       	ldd	r21, Y+15	; 0x0f
     81a:	5f 83       	std	Y+7, r21	; 0x07
     81c:	4e 83       	std	Y+6, r20	; 0x06
     81e:	22 24       	eor	r2, r2
     820:	23 94       	inc	r2
     822:	31 2c       	mov	r3, r1
     824:	a1 2c       	mov	r10, r1
     826:	8c 85       	ldd	r24, Y+12	; 0x0c
     828:	9d 85       	ldd	r25, Y+13	; 0x0d
     82a:	99 87       	std	Y+9, r25	; 0x09
     82c:	88 87       	std	Y+8, r24	; 0x08
     82e:	5a 2c       	mov	r5, r10
     830:	fe ce       	rjmp	.-516    	; 0x62e <algo_sim+0x54>
     832:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
     836:	81 11       	cpse	r24, r1
     838:	02 c0       	rjmp	.+4      	; 0x83e <algo_sim+0x264>
     83a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <v_max>
     83e:	61 96       	adiw	r28, 0x11	; 17
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	de bf       	out	0x3e, r29	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	cd bf       	out	0x3d, r28	; 61
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	cf 90       	pop	r12
     85a:	bf 90       	pop	r11
     85c:	af 90       	pop	r10
     85e:	9f 90       	pop	r9
     860:	8f 90       	pop	r8
     862:	7f 90       	pop	r7
     864:	6f 90       	pop	r6
     866:	5f 90       	pop	r5
     868:	4f 90       	pop	r4
     86a:	3f 90       	pop	r3
     86c:	2f 90       	pop	r2
     86e:	08 95       	ret

00000870 <simulate_opponent>:
     870:	cf 93       	push	r28
     872:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <v1_max>
     876:	81 11       	cpse	r24, r1
     878:	19 c0       	rjmp	.+50     	; 0x8ac <simulate_opponent+0x3c>
     87a:	bd c0       	rjmp	.+378    	; 0x9f6 <simulate_opponent+0x186>
     87c:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <MB>
     880:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <MB+0x1>
     884:	e8 0f       	add	r30, r24
     886:	f9 1f       	adc	r31, r25
     888:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <M>
     88c:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <M+0x1>
     890:	a8 0f       	add	r26, r24
     892:	b9 1f       	adc	r27, r25
     894:	2c 91       	ld	r18, X
     896:	20 83       	st	Z, r18
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	84 17       	cp	r24, r20
     89c:	95 07       	cpc	r25, r21
     89e:	71 f7       	brne	.-36     	; 0x87c <simulate_opponent+0xc>
     8a0:	48 5f       	subi	r20, 0xF8	; 248
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	48 34       	cpi	r20, 0x48	; 72
     8a6:	51 05       	cpc	r21, r1
     8a8:	19 f4       	brne	.+6      	; 0x8b0 <simulate_opponent+0x40>
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <simulate_opponent+0x46>
     8ac:	48 e0       	ldi	r20, 0x08	; 8
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	ca 01       	movw	r24, r20
     8b2:	08 97       	sbiw	r24, 0x08	; 8
     8b4:	e3 cf       	rjmp	.-58     	; 0x87c <simulate_opponent+0xc>
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
     8bc:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <vj1_max>
     8c0:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <vi1_max>
     8c4:	e6 db       	rcall	.-2100   	; 0x92 <checkmove_sim>
     8c6:	89 de       	rcall	.-750    	; 0x5da <algo_sim>
     8c8:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <vi1_max>
     8cc:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <vi_final>
     8d0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <vj1_max>
     8d4:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <vj_final>
     8d8:	c0 91 da 00 	lds	r28, 0x00DA	; 0x8000da <v_max>
     8dc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <v2_max>
     8e0:	81 11       	cpse	r24, r1
     8e2:	19 c0       	rjmp	.+50     	; 0x916 <simulate_opponent+0xa6>
     8e4:	8d c0       	rjmp	.+282    	; 0xa00 <simulate_opponent+0x190>
     8e6:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     8ea:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     8ee:	e8 0f       	add	r30, r24
     8f0:	f9 1f       	adc	r31, r25
     8f2:	a0 91 e3 00 	lds	r26, 0x00E3	; 0x8000e3 <MB>
     8f6:	b0 91 e4 00 	lds	r27, 0x00E4	; 0x8000e4 <MB+0x1>
     8fa:	a8 0f       	add	r26, r24
     8fc:	b9 1f       	adc	r27, r25
     8fe:	2c 91       	ld	r18, X
     900:	20 83       	st	Z, r18
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	84 17       	cp	r24, r20
     906:	95 07       	cpc	r25, r21
     908:	71 f7       	brne	.-36     	; 0x8e6 <simulate_opponent+0x76>
     90a:	48 5f       	subi	r20, 0xF8	; 248
     90c:	5f 4f       	sbci	r21, 0xFF	; 255
     90e:	48 34       	cpi	r20, 0x48	; 72
     910:	51 05       	cpc	r21, r1
     912:	19 f4       	brne	.+6      	; 0x91a <simulate_opponent+0xaa>
     914:	05 c0       	rjmp	.+10     	; 0x920 <simulate_opponent+0xb0>
     916:	48 e0       	ldi	r20, 0x08	; 8
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	ca 01       	movw	r24, r20
     91c:	08 97       	sbiw	r24, 0x08	; 8
     91e:	e3 cf       	rjmp	.-58     	; 0x8e6 <simulate_opponent+0x76>
     920:	21 e0       	ldi	r18, 0x01	; 1
     922:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
     926:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <vj2_max>
     92a:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <vi2_max>
     92e:	b1 db       	rcall	.-2206   	; 0x92 <checkmove_sim>
     930:	54 de       	rcall	.-856    	; 0x5da <algo_sim>
     932:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <v_max>
     936:	8c 17       	cp	r24, r28
     938:	48 f4       	brcc	.+18     	; 0x94c <simulate_opponent+0xdc>
     93a:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <vi2_max>
     93e:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <vi_final>
     942:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <vj2_max>
     946:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <vj_final>
     94a:	c8 2f       	mov	r28, r24
     94c:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <v3_max>
     950:	81 11       	cpse	r24, r1
     952:	19 c0       	rjmp	.+50     	; 0x986 <simulate_opponent+0x116>
     954:	4b c0       	rjmp	.+150    	; 0x9ec <simulate_opponent+0x17c>
     956:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     95a:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     95e:	e8 0f       	add	r30, r24
     960:	f9 1f       	adc	r31, r25
     962:	a0 91 e3 00 	lds	r26, 0x00E3	; 0x8000e3 <MB>
     966:	b0 91 e4 00 	lds	r27, 0x00E4	; 0x8000e4 <MB+0x1>
     96a:	a8 0f       	add	r26, r24
     96c:	b9 1f       	adc	r27, r25
     96e:	2c 91       	ld	r18, X
     970:	20 83       	st	Z, r18
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	84 17       	cp	r24, r20
     976:	95 07       	cpc	r25, r21
     978:	71 f7       	brne	.-36     	; 0x956 <simulate_opponent+0xe6>
     97a:	48 5f       	subi	r20, 0xF8	; 248
     97c:	5f 4f       	sbci	r21, 0xFF	; 255
     97e:	48 34       	cpi	r20, 0x48	; 72
     980:	51 05       	cpc	r21, r1
     982:	19 f4       	brne	.+6      	; 0x98a <simulate_opponent+0x11a>
     984:	05 c0       	rjmp	.+10     	; 0x990 <simulate_opponent+0x120>
     986:	48 e0       	ldi	r20, 0x08	; 8
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	ca 01       	movw	r24, r20
     98c:	08 97       	sbiw	r24, 0x08	; 8
     98e:	e3 cf       	rjmp	.-58     	; 0x956 <simulate_opponent+0xe6>
     990:	21 e0       	ldi	r18, 0x01	; 1
     992:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
     996:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <vj3_max>
     99a:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <vi3_max>
     99e:	79 db       	rcall	.-2318   	; 0x92 <checkmove_sim>
     9a0:	1c de       	rcall	.-968    	; 0x5da <algo_sim>
     9a2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <v_max>
     9a6:	8c 17       	cp	r24, r28
     9a8:	08 f5       	brcc	.+66     	; 0x9ec <simulate_opponent+0x17c>
     9aa:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <vi3_max>
     9ae:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <vi_final>
     9b2:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <vj3_max>
     9b6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <vj_final>
     9ba:	18 c0       	rjmp	.+48     	; 0x9ec <simulate_opponent+0x17c>
     9bc:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     9c0:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     9c4:	e8 0f       	add	r30, r24
     9c6:	f9 1f       	adc	r31, r25
     9c8:	a0 91 e3 00 	lds	r26, 0x00E3	; 0x8000e3 <MB>
     9cc:	b0 91 e4 00 	lds	r27, 0x00E4	; 0x8000e4 <MB+0x1>
     9d0:	a8 0f       	add	r26, r24
     9d2:	b9 1f       	adc	r27, r25
     9d4:	2c 91       	ld	r18, X
     9d6:	20 83       	st	Z, r18
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	84 17       	cp	r24, r20
     9dc:	95 07       	cpc	r25, r21
     9de:	71 f7       	brne	.-36     	; 0x9bc <simulate_opponent+0x14c>
     9e0:	48 5f       	subi	r20, 0xF8	; 248
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	48 34       	cpi	r20, 0x48	; 72
     9e6:	51 05       	cpc	r21, r1
     9e8:	19 f4       	brne	.+6      	; 0x9f0 <simulate_opponent+0x180>
     9ea:	0f c0       	rjmp	.+30     	; 0xa0a <simulate_opponent+0x19a>
     9ec:	48 e0       	ldi	r20, 0x08	; 8
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	ca 01       	movw	r24, r20
     9f2:	08 97       	sbiw	r24, 0x08	; 8
     9f4:	e3 cf       	rjmp	.-58     	; 0x9bc <simulate_opponent+0x14c>
     9f6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <v2_max>
     9fa:	81 11       	cpse	r24, r1
     9fc:	8c cf       	rjmp	.-232    	; 0x916 <simulate_opponent+0xa6>
     9fe:	a6 cf       	rjmp	.-180    	; 0x94c <simulate_opponent+0xdc>
     a00:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <v3_max>
     a04:	81 11       	cpse	r24, r1
     a06:	bf cf       	rjmp	.-130    	; 0x986 <simulate_opponent+0x116>
     a08:	f1 cf       	rjmp	.-30     	; 0x9ec <simulate_opponent+0x17c>
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <CheckMove>:
     a0e:	2f 92       	push	r2
     a10:	3f 92       	push	r3
     a12:	4f 92       	push	r4
     a14:	5f 92       	push	r5
     a16:	6f 92       	push	r6
     a18:	7f 92       	push	r7
     a1a:	8f 92       	push	r8
     a1c:	9f 92       	push	r9
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	60 97       	sbiw	r28, 0x10	; 16
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	98 2e       	mov	r9, r24
     a44:	86 2e       	mov	r8, r22
     a46:	2d 83       	std	Y+5, r18	; 0x05
     a48:	26 2e       	mov	r2, r22
     a4a:	31 2c       	mov	r3, r1
     a4c:	68 2e       	mov	r6, r24
     a4e:	71 2c       	mov	r7, r1
     a50:	61 01       	movw	r12, r2
     a52:	28 e0       	ldi	r18, 0x08	; 8
     a54:	82 9f       	mul	r24, r18
     a56:	c0 0c       	add	r12, r0
     a58:	d1 1c       	adc	r13, r1
     a5a:	11 24       	eor	r1, r1
     a5c:	db 86       	std	Y+11, r13	; 0x0b
     a5e:	ca 86       	std	Y+10, r12	; 0x0a
     a60:	dd 86       	std	Y+13, r13	; 0x0d
     a62:	cc 86       	std	Y+12, r12	; 0x0c
     a64:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     a68:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     a6c:	ec 0d       	add	r30, r12
     a6e:	fd 1d       	adc	r31, r13
     a70:	80 81       	ld	r24, Z
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	08 f4       	brcc	.+2      	; 0xa78 <CheckMove+0x6a>
     a76:	52 c2       	rjmp	.+1188   	; 0xf1c <CheckMove+0x50e>
     a78:	c3 01       	movw	r24, r6
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	9a 83       	std	Y+2, r25	; 0x02
     a7e:	89 83       	std	Y+1, r24	; 0x01
     a80:	23 01       	movw	r4, r6
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	48 1a       	sub	r4, r24
     a86:	58 0a       	sbc	r5, r24
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	9a 81       	ldd	r25, Y+2	; 0x02
     a8c:	48 16       	cp	r4, r24
     a8e:	59 06       	cpc	r5, r25
     a90:	0c f4       	brge	.+2      	; 0xa94 <CheckMove+0x86>
     a92:	e1 c1       	rjmp	.+962    	; 0xe56 <CheckMove+0x448>
     a94:	c1 2c       	mov	r12, r1
     a96:	18 8a       	std	Y+16, r1	; 0x10
     a98:	f1 01       	movw	r30, r2
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	ff 83       	std	Y+7, r31	; 0x07
     a9e:	ee 83       	std	Y+6, r30	; 0x06
     aa0:	51 01       	movw	r10, r2
     aa2:	ff ef       	ldi	r31, 0xFF	; 255
     aa4:	af 1a       	sub	r10, r31
     aa6:	bf 0a       	sbc	r11, r31
     aa8:	98 86       	std	Y+8, r9	; 0x08
     aaa:	69 87       	std	Y+9, r22	; 0x09
     aac:	8c 2c       	mov	r8, r12
     aae:	94 2e       	mov	r9, r20
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	9a 81       	ldd	r25, Y+2	; 0x02
     ab4:	99 23       	and	r25, r25
     ab6:	0c f4       	brge	.+2      	; 0xaba <CheckMove+0xac>
     ab8:	bf c1       	rjmp	.+894    	; 0xe38 <CheckMove+0x42a>
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	08 97       	sbiw	r24, 0x08	; 8
     ac0:	0c f0       	brlt	.+2      	; 0xac4 <CheckMove+0xb6>
     ac2:	ba c1       	rjmp	.+884    	; 0xe38 <CheckMove+0x42a>
     ac4:	ce 80       	ldd	r12, Y+6	; 0x06
     ac6:	df 80       	ldd	r13, Y+7	; 0x07
     ac8:	dc 82       	std	Y+4, r13	; 0x04
     aca:	cb 82       	std	Y+3, r12	; 0x03
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	9c 81       	ldd	r25, Y+4	; 0x04
     ad0:	a8 16       	cp	r10, r24
     ad2:	b9 06       	cpc	r11, r25
     ad4:	0c f4       	brge	.+2      	; 0xad8 <CheckMove+0xca>
     ad6:	b0 c1       	rjmp	.+864    	; 0xe38 <CheckMove+0x42a>
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	99 23       	and	r25, r25
     ade:	0c f4       	brge	.+2      	; 0xae2 <CheckMove+0xd4>
     ae0:	a0 c1       	rjmp	.+832    	; 0xe22 <CheckMove+0x414>
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	9c 81       	ldd	r25, Y+4	; 0x04
     ae6:	08 97       	sbiw	r24, 0x08	; 8
     ae8:	0c f0       	brlt	.+2      	; 0xaec <CheckMove+0xde>
     aea:	9b c1       	rjmp	.+822    	; 0xe22 <CheckMove+0x414>
     aec:	40 91 e7 01 	lds	r20, 0x01E7	; 0x8001e7 <M>
     af0:	50 91 e8 01 	lds	r21, 0x01E8	; 0x8001e8 <M+0x1>
     af4:	e9 81       	ldd	r30, Y+1	; 0x01
     af6:	fa 81       	ldd	r31, Y+2	; 0x02
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	9c 81       	ldd	r25, Y+4	; 0x04
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	ee 0f       	add	r30, r30
     b02:	ff 1f       	adc	r31, r31
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	e8 0f       	add	r30, r24
     b0a:	f9 1f       	adc	r31, r25
     b0c:	e4 0f       	add	r30, r20
     b0e:	f5 1f       	adc	r31, r21
     b10:	80 81       	ld	r24, Z
     b12:	89 15       	cp	r24, r9
     b14:	09 f4       	brne	.+2      	; 0xb18 <CheckMove+0x10a>
     b16:	85 c1       	rjmp	.+778    	; 0xe22 <CheckMove+0x414>
     b18:	e9 81       	ldd	r30, Y+1	; 0x01
     b1a:	fa 81       	ldd	r31, Y+2	; 0x02
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	9c 81       	ldd	r25, Y+4	; 0x04
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	e8 0f       	add	r30, r24
     b2e:	f9 1f       	adc	r31, r25
     b30:	e4 0f       	add	r30, r20
     b32:	f5 1f       	adc	r31, r21
     b34:	80 81       	ld	r24, Z
     b36:	82 30       	cpi	r24, 0x02	; 2
     b38:	08 f0       	brcs	.+2      	; 0xb3c <CheckMove+0x12e>
     b3a:	73 c1       	rjmp	.+742    	; 0xe22 <CheckMove+0x414>
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	9a 81       	ldd	r25, Y+2	; 0x02
     b40:	68 16       	cp	r6, r24
     b42:	79 06       	cpc	r7, r25
     b44:	3c f0       	brlt	.+14     	; 0xb54 <CheckMove+0x146>
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	68 16       	cp	r6, r24
     b4c:	79 06       	cpc	r7, r25
     b4e:	39 f0       	breq	.+14     	; 0xb5e <CheckMove+0x150>
     b50:	f1 2c       	mov	r15, r1
     b52:	09 c0       	rjmp	.+18     	; 0xb66 <CheckMove+0x158>
     b54:	0f 2e       	mov	r0, r31
     b56:	f7 e0       	ldi	r31, 0x07	; 7
     b58:	ff 2e       	mov	r15, r31
     b5a:	f0 2d       	mov	r31, r0
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <CheckMove+0x158>
     b5e:	0f 2e       	mov	r0, r31
     b60:	f9 e0       	ldi	r31, 0x09	; 9
     b62:	ff 2e       	mov	r15, r31
     b64:	f0 2d       	mov	r31, r0
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	28 16       	cp	r2, r24
     b6c:	39 06       	cpc	r3, r25
     b6e:	3c f0       	brlt	.+14     	; 0xb7e <CheckMove+0x170>
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	28 16       	cp	r2, r24
     b76:	39 06       	cpc	r3, r25
     b78:	39 f0       	breq	.+14     	; 0xb88 <CheckMove+0x17a>
     b7a:	e1 2c       	mov	r14, r1
     b7c:	09 c0       	rjmp	.+18     	; 0xb90 <CheckMove+0x182>
     b7e:	0f 2e       	mov	r0, r31
     b80:	f7 e0       	ldi	r31, 0x07	; 7
     b82:	ef 2e       	mov	r14, r31
     b84:	f0 2d       	mov	r31, r0
     b86:	04 c0       	rjmp	.+8      	; 0xb90 <CheckMove+0x182>
     b88:	0f 2e       	mov	r0, r31
     b8a:	f9 e0       	ldi	r31, 0x09	; 9
     b8c:	ef 2e       	mov	r14, r31
     b8e:	f0 2d       	mov	r31, r0
     b90:	a9 81       	ldd	r26, Y+1	; 0x01
     b92:	ba 81       	ldd	r27, Y+2	; 0x02
     b94:	d8 84       	ldd	r13, Y+8	; 0x08
     b96:	ad 19       	sub	r26, r13
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	9c 81       	ldd	r25, Y+4	; 0x04
     b9c:	b8 2f       	mov	r27, r24
     b9e:	29 85       	ldd	r18, Y+9	; 0x09
     ba0:	b2 1b       	sub	r27, r18
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	68 2f       	mov	r22, r24
     ba8:	2b 81       	ldd	r18, Y+3	; 0x03
     baa:	3c 81       	ldd	r19, Y+4	; 0x04
     bac:	72 2f       	mov	r23, r18
     bae:	ed 81       	ldd	r30, Y+5	; 0x05
     bb0:	ee 23       	and	r30, r30
     bb2:	41 f1       	breq	.+80     	; 0xc04 <CheckMove+0x1f6>
     bb4:	99 27       	eor	r25, r25
     bb6:	0a 2f       	mov	r16, r26
     bb8:	10 e0       	ldi	r17, 0x00	; 0
     bba:	0f 0d       	add	r16, r15
     bbc:	11 1d       	adc	r17, r1
     bbe:	80 17       	cp	r24, r16
     bc0:	91 07       	cpc	r25, r17
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <CheckMove+0x1b8>
     bc4:	2e c1       	rjmp	.+604    	; 0xe22 <CheckMove+0x414>
     bc6:	33 27       	eor	r19, r19
     bc8:	eb 2f       	mov	r30, r27
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	6f 01       	movw	r12, r30
     bce:	ce 0c       	add	r12, r14
     bd0:	d1 1c       	adc	r13, r1
     bd2:	df 86       	std	Y+15, r13	; 0x0f
     bd4:	ce 86       	std	Y+14, r12	; 0x0e
     bd6:	2c 15       	cp	r18, r12
     bd8:	3d 05       	cpc	r19, r13
     bda:	09 f4       	brne	.+2      	; 0xbde <CheckMove+0x1d0>
     bdc:	22 c1       	rjmp	.+580    	; 0xe22 <CheckMove+0x414>
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	82 0f       	add	r24, r18
     bec:	93 1f       	adc	r25, r19
     bee:	84 0f       	add	r24, r20
     bf0:	95 1f       	adc	r25, r21
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 81       	ld	r18, Z
     bf6:	22 30       	cpi	r18, 0x02	; 2
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <CheckMove+0x1ee>
     bfa:	13 c1       	rjmp	.+550    	; 0xe22 <CheckMove+0x414>
     bfc:	80 81       	ld	r24, Z
     bfe:	98 12       	cpse	r9, r24
     c00:	a4 c0       	rjmp	.+328    	; 0xd4a <CheckMove+0x33c>
     c02:	93 c0       	rjmp	.+294    	; 0xd2a <CheckMove+0x31c>
     c04:	99 27       	eor	r25, r25
     c06:	0a 2f       	mov	r16, r26
     c08:	10 e0       	ldi	r17, 0x00	; 0
     c0a:	0f 0d       	add	r16, r15
     c0c:	11 1d       	adc	r17, r1
     c0e:	80 17       	cp	r24, r16
     c10:	91 07       	cpc	r25, r17
     c12:	09 f4       	brne	.+2      	; 0xc16 <CheckMove+0x208>
     c14:	06 c1       	rjmp	.+524    	; 0xe22 <CheckMove+0x414>
     c16:	33 27       	eor	r19, r19
     c18:	eb 2f       	mov	r30, r27
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	6f 01       	movw	r12, r30
     c1e:	ce 0c       	add	r12, r14
     c20:	d1 1c       	adc	r13, r1
     c22:	df 86       	std	Y+15, r13	; 0x0f
     c24:	ce 86       	std	Y+14, r12	; 0x0e
     c26:	2c 15       	cp	r18, r12
     c28:	3d 05       	cpc	r19, r13
     c2a:	09 f4       	brne	.+2      	; 0xc2e <CheckMove+0x220>
     c2c:	fa c0       	rjmp	.+500    	; 0xe22 <CheckMove+0x414>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	82 0f       	add	r24, r18
     c3c:	93 1f       	adc	r25, r19
     c3e:	84 0f       	add	r24, r20
     c40:	95 1f       	adc	r25, r21
     c42:	fc 01       	movw	r30, r24
     c44:	20 81       	ld	r18, Z
     c46:	22 30       	cpi	r18, 0x02	; 2
     c48:	08 f0       	brcs	.+2      	; 0xc4c <CheckMove+0x23e>
     c4a:	eb c0       	rjmp	.+470    	; 0xe22 <CheckMove+0x414>
     c4c:	80 81       	ld	r24, Z
     c4e:	98 12       	cpse	r9, r24
     c50:	14 c0       	rjmp	.+40     	; 0xc7a <CheckMove+0x26c>
     c52:	68 c1       	rjmp	.+720    	; 0xf24 <CheckMove+0x516>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	a8 0f       	add	r26, r24
     c62:	b9 1f       	adc	r27, r25
     c64:	a4 0f       	add	r26, r20
     c66:	b5 1f       	adc	r27, r21
     c68:	8c 91       	ld	r24, X
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <CheckMove+0x262>
     c6e:	d9 c0       	rjmp	.+434    	; 0xe22 <CheckMove+0x414>
     c70:	8c 91       	ld	r24, X
     c72:	98 16       	cp	r9, r24
     c74:	09 f4       	brne	.+2      	; 0xc78 <CheckMove+0x26a>
     c76:	54 c1       	rjmp	.+680    	; 0xf20 <CheckMove+0x512>
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <CheckMove+0x274>
     c7a:	2a 2f       	mov	r18, r26
     c7c:	3b 2f       	mov	r19, r27
     c7e:	ee 85       	ldd	r30, Y+14	; 0x0e
     c80:	ff 85       	ldd	r31, Y+15	; 0x0f
     c82:	73 0f       	add	r23, r19
     c84:	62 0f       	add	r22, r18
     c86:	86 2f       	mov	r24, r22
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	80 17       	cp	r24, r16
     c8c:	91 07       	cpc	r25, r17
     c8e:	09 f4       	brne	.+2      	; 0xc92 <CheckMove+0x284>
     c90:	c8 c0       	rjmp	.+400    	; 0xe22 <CheckMove+0x414>
     c92:	a7 2f       	mov	r26, r23
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ae 17       	cp	r26, r30
     c98:	bf 07       	cpc	r27, r31
     c9a:	e1 f6       	brne	.-72     	; 0xc54 <CheckMove+0x246>
     c9c:	c2 c0       	rjmp	.+388    	; 0xe22 <CheckMove+0x414>
     c9e:	e9 16       	cp	r14, r25
     ca0:	09 f4       	brne	.+2      	; 0xca4 <CheckMove+0x296>
     ca2:	9c c0       	rjmp	.+312    	; 0xddc <CheckMove+0x3ce>
     ca4:	f9 01       	movw	r30, r18
     ca6:	ff 27       	eor	r31, r31
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	ee 0f       	add	r30, r30
     cae:	ff 1f       	adc	r31, r31
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	e6 0f       	add	r30, r22
     cb6:	f1 1d       	adc	r31, r1
     cb8:	e4 0f       	add	r30, r20
     cba:	f5 1f       	adc	r31, r21
     cbc:	20 81       	ld	r18, Z
     cbe:	22 30       	cpi	r18, 0x02	; 2
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <CheckMove+0x2b6>
     cc2:	8f c0       	rjmp	.+286    	; 0xde2 <CheckMove+0x3d4>
     cc4:	20 81       	ld	r18, Z
     cc6:	92 12       	cpse	r9, r18
     cc8:	12 c0       	rjmp	.+36     	; 0xcee <CheckMove+0x2e0>
     cca:	8e c0       	rjmp	.+284    	; 0xde8 <CheckMove+0x3da>
     ccc:	e9 2f       	mov	r30, r25
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	28 e0       	ldi	r18, 0x08	; 8
     cd2:	82 9f       	mul	r24, r18
     cd4:	e0 0d       	add	r30, r0
     cd6:	f1 1d       	adc	r31, r1
     cd8:	11 24       	eor	r1, r1
     cda:	e4 0f       	add	r30, r20
     cdc:	f5 1f       	adc	r31, r21
     cde:	20 81       	ld	r18, Z
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	08 f0       	brcs	.+2      	; 0xce6 <CheckMove+0x2d8>
     ce4:	84 c0       	rjmp	.+264    	; 0xdee <CheckMove+0x3e0>
     ce6:	20 81       	ld	r18, Z
     ce8:	92 16       	cp	r9, r18
     cea:	09 f4       	brne	.+2      	; 0xcee <CheckMove+0x2e0>
     cec:	83 c0       	rjmp	.+262    	; 0xdf4 <CheckMove+0x3e6>
     cee:	83 94       	inc	r8
     cf0:	9b 0f       	add	r25, r27
     cf2:	8a 0f       	add	r24, r26
     cf4:	f8 16       	cp	r15, r24
     cf6:	09 f4       	brne	.+2      	; 0xcfa <CheckMove+0x2ec>
     cf8:	80 c0       	rjmp	.+256    	; 0xdfa <CheckMove+0x3ec>
     cfa:	e9 12       	cpse	r14, r25
     cfc:	e7 cf       	rjmp	.-50     	; 0xccc <CheckMove+0x2be>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	88 8b       	std	Y+16, r24	; 0x10
     d02:	8f c0       	rjmp	.+286    	; 0xe22 <CheckMove+0x414>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	a8 0f       	add	r26, r24
     d12:	b9 1f       	adc	r27, r25
     d14:	a4 0f       	add	r26, r20
     d16:	b5 1f       	adc	r27, r21
     d18:	8c 91       	ld	r24, X
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	08 f0       	brcs	.+2      	; 0xd20 <CheckMove+0x312>
     d1e:	81 c0       	rjmp	.+258    	; 0xe22 <CheckMove+0x414>
     d20:	8c 91       	ld	r24, X
     d22:	98 12       	cpse	r9, r24
     d24:	16 c0       	rjmp	.+44     	; 0xd52 <CheckMove+0x344>
     d26:	a2 2f       	mov	r26, r18
     d28:	b3 2f       	mov	r27, r19
     d2a:	ec 85       	ldd	r30, Y+12	; 0x0c
     d2c:	fd 85       	ldd	r31, Y+13	; 0x0d
     d2e:	e4 0f       	add	r30, r20
     d30:	f5 1f       	adc	r31, r21
     d32:	90 82       	st	Z, r9
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	48 2f       	mov	r20, r24
     d3a:	6b 81       	ldd	r22, Y+3	; 0x03
     d3c:	7c 81       	ldd	r23, Y+4	; 0x04
     d3e:	56 2f       	mov	r21, r22
     d40:	f8 12       	cpse	r15, r24
     d42:	15 c0       	rjmp	.+42     	; 0xd6e <CheckMove+0x360>
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	98 8b       	std	Y+16, r25	; 0x10
     d48:	6c c0       	rjmp	.+216    	; 0xe22 <CheckMove+0x414>
     d4a:	2a 2f       	mov	r18, r26
     d4c:	3b 2f       	mov	r19, r27
     d4e:	ee 85       	ldd	r30, Y+14	; 0x0e
     d50:	ff 85       	ldd	r31, Y+15	; 0x0f
     d52:	73 0f       	add	r23, r19
     d54:	62 0f       	add	r22, r18
     d56:	86 2f       	mov	r24, r22
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	80 17       	cp	r24, r16
     d5c:	91 07       	cpc	r25, r17
     d5e:	09 f4       	brne	.+2      	; 0xd62 <CheckMove+0x354>
     d60:	60 c0       	rjmp	.+192    	; 0xe22 <CheckMove+0x414>
     d62:	a7 2f       	mov	r26, r23
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	ae 17       	cp	r26, r30
     d68:	bf 07       	cpc	r27, r31
     d6a:	61 f6       	brne	.-104    	; 0xd04 <CheckMove+0x2f6>
     d6c:	5a c0       	rjmp	.+180    	; 0xe22 <CheckMove+0x414>
     d6e:	e6 16       	cp	r14, r22
     d70:	09 f4       	brne	.+2      	; 0xd74 <CheckMove+0x366>
     d72:	46 c0       	rjmp	.+140    	; 0xe00 <CheckMove+0x3f2>
     d74:	99 27       	eor	r25, r25
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	86 0f       	add	r24, r22
     d84:	91 1d       	adc	r25, r1
     d86:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <M>
     d8a:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <M+0x1>
     d8e:	f9 01       	movw	r30, r18
     d90:	e8 0f       	add	r30, r24
     d92:	f9 1f       	adc	r31, r25
     d94:	80 81       	ld	r24, Z
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	b0 f5       	brcc	.+108    	; 0xe06 <CheckMove+0x3f8>
     d9a:	80 81       	ld	r24, Z
     d9c:	98 12       	cpse	r9, r24
     d9e:	14 c0       	rjmp	.+40     	; 0xdc8 <CheckMove+0x3ba>
     da0:	35 c0       	rjmp	.+106    	; 0xe0c <CheckMove+0x3fe>
     da2:	e5 2f       	mov	r30, r21
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	28 e0       	ldi	r18, 0x08	; 8
     da8:	42 9f       	mul	r20, r18
     daa:	e0 0d       	add	r30, r0
     dac:	f1 1d       	adc	r31, r1
     dae:	11 24       	eor	r1, r1
     db0:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <M>
     db4:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <M+0x1>
     db8:	e8 0f       	add	r30, r24
     dba:	f9 1f       	adc	r31, r25
     dbc:	80 81       	ld	r24, Z
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	40 f5       	brcc	.+80     	; 0xe12 <CheckMove+0x404>
     dc2:	80 81       	ld	r24, Z
     dc4:	98 16       	cp	r9, r24
     dc6:	41 f1       	breq	.+80     	; 0xe18 <CheckMove+0x40a>
     dc8:	90 82       	st	Z, r9
     dca:	5b 0f       	add	r21, r27
     dcc:	4a 0f       	add	r20, r26
     dce:	f4 16       	cp	r15, r20
     dd0:	31 f1       	breq	.+76     	; 0xe1e <CheckMove+0x410>
     dd2:	e5 12       	cpse	r14, r21
     dd4:	e6 cf       	rjmp	.-52     	; 0xda2 <CheckMove+0x394>
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	88 8b       	std	Y+16, r24	; 0x10
     dda:	23 c0       	rjmp	.+70     	; 0xe22 <CheckMove+0x414>
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	98 8b       	std	Y+16, r25	; 0x10
     de0:	20 c0       	rjmp	.+64     	; 0xe22 <CheckMove+0x414>
     de2:	e1 e0       	ldi	r30, 0x01	; 1
     de4:	e8 8b       	std	Y+16, r30	; 0x10
     de6:	1d c0       	rjmp	.+58     	; 0xe22 <CheckMove+0x414>
     de8:	f1 e0       	ldi	r31, 0x01	; 1
     dea:	f8 8b       	std	Y+16, r31	; 0x10
     dec:	1a c0       	rjmp	.+52     	; 0xe22 <CheckMove+0x414>
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	28 8b       	std	Y+16, r18	; 0x10
     df2:	17 c0       	rjmp	.+46     	; 0xe22 <CheckMove+0x414>
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	88 8b       	std	Y+16, r24	; 0x10
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <CheckMove+0x414>
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	98 8b       	std	Y+16, r25	; 0x10
     dfe:	11 c0       	rjmp	.+34     	; 0xe22 <CheckMove+0x414>
     e00:	e1 e0       	ldi	r30, 0x01	; 1
     e02:	e8 8b       	std	Y+16, r30	; 0x10
     e04:	0e c0       	rjmp	.+28     	; 0xe22 <CheckMove+0x414>
     e06:	f1 e0       	ldi	r31, 0x01	; 1
     e08:	f8 8b       	std	Y+16, r31	; 0x10
     e0a:	0b c0       	rjmp	.+22     	; 0xe22 <CheckMove+0x414>
     e0c:	21 e0       	ldi	r18, 0x01	; 1
     e0e:	28 8b       	std	Y+16, r18	; 0x10
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <CheckMove+0x414>
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	88 8b       	std	Y+16, r24	; 0x10
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <CheckMove+0x414>
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	98 8b       	std	Y+16, r25	; 0x10
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <CheckMove+0x414>
     e1e:	e1 e0       	ldi	r30, 0x01	; 1
     e20:	e8 8b       	std	Y+16, r30	; 0x10
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	9c 83       	std	Y+4, r25	; 0x04
     e2a:	8b 83       	std	Y+3, r24	; 0x03
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	a8 16       	cp	r10, r24
     e32:	b9 06       	cpc	r11, r25
     e34:	0c f0       	brlt	.+2      	; 0xe38 <CheckMove+0x42a>
     e36:	50 ce       	rjmp	.-864    	; 0xad8 <CheckMove+0xca>
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	48 16       	cp	r4, r24
     e48:	59 06       	cpc	r5, r25
     e4a:	0c f0       	brlt	.+2      	; 0xe4e <CheckMove+0x440>
     e4c:	31 ce       	rjmp	.-926    	; 0xab0 <CheckMove+0xa2>
     e4e:	c8 2c       	mov	r12, r8
     e50:	98 84       	ldd	r9, Y+8	; 0x08
     e52:	89 84       	ldd	r8, Y+9	; 0x09
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <CheckMove+0x44c>
     e56:	c1 2c       	mov	r12, r1
     e58:	18 8a       	std	Y+16, r1	; 0x10
     e5a:	fd 81       	ldd	r31, Y+5	; 0x05
     e5c:	f1 11       	cpse	r31, r1
     e5e:	58 c0       	rjmp	.+176    	; 0xf10 <CheckMove+0x502>
     e60:	30 91 dc 00 	lds	r19, 0x00DC	; 0x8000dc <v1_max>
     e64:	ea 85       	ldd	r30, Y+10	; 0x0a
     e66:	fb 85       	ldd	r31, Y+11	; 0x0b
     e68:	e9 59       	subi	r30, 0x99	; 153
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	20 81       	ld	r18, Z
     e6e:	8c 2d       	mov	r24, r12
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 96       	adiw	r24, 0x0e	; 14
     e74:	82 0f       	add	r24, r18
     e76:	91 1d       	adc	r25, r1
     e78:	43 2f       	mov	r20, r19
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	48 17       	cp	r20, r24
     e7e:	59 07       	cpc	r21, r25
     e80:	fc f4       	brge	.+62     	; 0xec0 <CheckMove+0x4b2>
     e82:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <v2_max>
     e86:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <v3_max>
     e8a:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <vi2_max>
     e8e:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <vi3_max>
     e92:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <vj2_max>
     e96:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <vj3_max>
     e9a:	30 93 e1 00 	sts	0x00E1, r19	; 0x8000e1 <v2_max>
     e9e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <vi1_max>
     ea2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <vi2_max>
     ea6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <vj1_max>
     eaa:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <vj2_max>
     eae:	22 5f       	subi	r18, 0xF2	; 242
     eb0:	c2 0e       	add	r12, r18
     eb2:	c0 92 dc 00 	sts	0x00DC, r12	; 0x8000dc <v1_max>
     eb6:	90 92 d6 00 	sts	0x00D6, r9	; 0x8000d6 <vi1_max>
     eba:	80 92 de 00 	sts	0x00DE, r8	; 0x8000de <vj1_max>
     ebe:	28 c0       	rjmp	.+80     	; 0xf10 <CheckMove+0x502>
     ec0:	30 91 e1 00 	lds	r19, 0x00E1	; 0x8000e1 <v2_max>
     ec4:	43 2f       	mov	r20, r19
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	48 17       	cp	r20, r24
     eca:	59 07       	cpc	r21, r25
     ecc:	9c f4       	brge	.+38     	; 0xef4 <CheckMove+0x4e6>
     ece:	30 93 d1 00 	sts	0x00D1, r19	; 0x8000d1 <v3_max>
     ed2:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <vi2_max>
     ed6:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <vi3_max>
     eda:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <vj2_max>
     ede:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <vj3_max>
     ee2:	22 5f       	subi	r18, 0xF2	; 242
     ee4:	c2 0e       	add	r12, r18
     ee6:	c0 92 e1 00 	sts	0x00E1, r12	; 0x8000e1 <v2_max>
     eea:	90 92 e5 00 	sts	0x00E5, r9	; 0x8000e5 <vi2_max>
     eee:	80 92 ea 01 	sts	0x01EA, r8	; 0x8001ea <vj2_max>
     ef2:	0e c0       	rjmp	.+28     	; 0xf10 <CheckMove+0x502>
     ef4:	40 91 d1 00 	lds	r20, 0x00D1	; 0x8000d1 <v3_max>
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	48 17       	cp	r20, r24
     efc:	59 07       	cpc	r21, r25
     efe:	44 f4       	brge	.+16     	; 0xf10 <CheckMove+0x502>
     f00:	22 5f       	subi	r18, 0xF2	; 242
     f02:	c2 0e       	add	r12, r18
     f04:	c0 92 d1 00 	sts	0x00D1, r12	; 0x8000d1 <v3_max>
     f08:	90 92 d3 00 	sts	0x00D3, r9	; 0x8000d3 <vi3_max>
     f0c:	80 92 d2 00 	sts	0x00D2, r8	; 0x8000d2 <vj3_max>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	28 89       	ldd	r18, Y+16	; 0x10
     f14:	21 30       	cpi	r18, 0x01	; 1
     f16:	89 f0       	breq	.+34     	; 0xf3a <CheckMove+0x52c>
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <CheckMove+0x52c>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <CheckMove+0x52c>
     f20:	a2 2f       	mov	r26, r18
     f22:	b3 2f       	mov	r27, r19
     f24:	29 81       	ldd	r18, Y+1	; 0x01
     f26:	3a 81       	ldd	r19, Y+2	; 0x02
     f28:	82 2f       	mov	r24, r18
     f2a:	6b 81       	ldd	r22, Y+3	; 0x03
     f2c:	7c 81       	ldd	r23, Y+4	; 0x04
     f2e:	96 2f       	mov	r25, r22
     f30:	f2 12       	cpse	r15, r18
     f32:	b5 ce       	rjmp	.-662    	; 0xc9e <CheckMove+0x290>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	88 8b       	std	Y+16, r24	; 0x10
     f38:	74 cf       	rjmp	.-280    	; 0xe22 <CheckMove+0x414>
     f3a:	60 96       	adiw	r28, 0x10	; 16
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	cf 90       	pop	r12
     f56:	bf 90       	pop	r11
     f58:	af 90       	pop	r10
     f5a:	9f 90       	pop	r9
     f5c:	8f 90       	pop	r8
     f5e:	7f 90       	pop	r7
     f60:	6f 90       	pop	r6
     f62:	5f 90       	pop	r5
     f64:	4f 90       	pop	r4
     f66:	3f 90       	pop	r3
     f68:	2f 90       	pop	r2
     f6a:	08 95       	ret

00000f6c <__vector_13>:
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <Transmit>:
 }


 // TRANSMIT function : transmits a string

 void Transmit(char data[],uint8_t x,uint8_t y){
     f80:	9c 01       	movw	r18, r24
	 

	 for (uint8_t i = x ; i < y  ; i++ ){
     f82:	64 17       	cp	r22, r20
     f84:	50 f4       	brcc	.+20     	; 0xf9a <Transmit+0x1a>
		 while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
     f86:	5d 9b       	sbis	0x0b, 5	; 11
     f88:	fe cf       	rjmp	.-4      	; 0xf86 <Transmit+0x6>
		 ;
		 UDR = data[i];
     f8a:	f9 01       	movw	r30, r18
     f8c:	e6 0f       	add	r30, r22
     f8e:	f1 1d       	adc	r31, r1
     f90:	90 81       	ld	r25, Z
     f92:	9c b9       	out	0x0c, r25	; 12
 // TRANSMIT function : transmits a string

 void Transmit(char data[],uint8_t x,uint8_t y){
	 

	 for (uint8_t i = x ; i < y  ; i++ ){
     f94:	6f 5f       	subi	r22, 0xFF	; 255
     f96:	46 13       	cpse	r20, r22
     f98:	f6 cf       	rjmp	.-20     	; 0xf86 <Transmit+0x6>
     f9a:	08 95       	ret

00000f9c <RST>:

// RESET FUNCTION: initializing game board and turning off leds
void RST(void)
{
	
	ILflag =0;
     f9c:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__data_end>
	move_done=0;
     fa0:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <move_done>
	myTurn=2;
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
	PORTB |= (1<<PORTB1);
     faa:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
     fac:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
     fae:	c3 9a       	sbi	0x18, 3	; 24

	mt = 0; //flag reset
     fb0:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <mt>
	myTurn=2;
     fb4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     fb8:	28 e0       	ldi	r18, 0x08	; 8
     fba:	30 e0       	ldi	r19, 0x00	; 0
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = 2 ; // 0 == black , 1 == white, 2 == empty
     fbc:	42 e0       	ldi	r20, 0x02	; 2
     fbe:	10 c0       	rjmp	.+32     	; 0xfe0 <RST+0x44>
     fc0:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     fc4:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     fc8:	e8 0f       	add	r30, r24
     fca:	f9 1f       	adc	r31, r25
     fcc:	40 83       	st	Z, r20
     fce:	01 96       	adiw	r24, 0x01	; 1
	mt = 0; //flag reset
	myTurn=2;
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
     fd0:	82 17       	cp	r24, r18
     fd2:	93 07       	cpc	r25, r19
     fd4:	a9 f7       	brne	.-22     	; 0xfc0 <RST+0x24>
     fd6:	28 5f       	subi	r18, 0xF8	; 248
     fd8:	3f 4f       	sbci	r19, 0xFF	; 255
	PORTB |= (1<<PORTB3);

	mt = 0; //flag reset
	myTurn=2;
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
     fda:	28 34       	cpi	r18, 0x48	; 72
     fdc:	31 05       	cpc	r19, r1
     fde:	19 f0       	breq	.+6      	; 0xfe6 <RST+0x4a>
     fe0:	c9 01       	movw	r24, r18
     fe2:	08 97       	sbiw	r24, 0x08	; 8
     fe4:	ed cf       	rjmp	.-38     	; 0xfc0 <RST+0x24>
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = 2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	M[3*8+3] = 1 ;
     fe6:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     fea:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	83 8f       	std	Z+27, r24	; 0x1b
	M[3*8+4] = 0 ;
     ff2:	14 8e       	std	Z+28, r1	; 0x1c
	M[4*8+3] = 0 ;
     ff4:	13 a2       	std	Z+35, r1	; 0x23
	M[4*8+4] = 1 ;
     ff6:	84 a3       	std	Z+36, r24	; 0x24
	enemy_pass = 0;
     ff8:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <enemy_pass>

	TCCR1B = 0x00;         //Clearing timer -- total reset
     ffc:	1e bc       	out	0x2e, r1	; 46
	TIMSK = (1 << TOIE1) ; //Overflow interrupts -- disabled
     ffe:	84 e0       	ldi	r24, 0x04	; 4
    1000:	89 bf       	out	0x39, r24	; 57
	Transmit("OK\r",0 , strlen("OK\r"));
    1002:	43 e0       	ldi	r20, 0x03	; 3
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	89 ea       	ldi	r24, 0xA9	; 169
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	ba df       	rcall	.-140    	; 0xf80 <Transmit>
	rxReadPos = rxWritePos;
    100c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
    1010:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
    1014:	08 95       	ret

00001016 <Board>:
	return 0;	
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Visualization of the board
void Board(){
    1016:	bf 92       	push	r11
    1018:	cf 92       	push	r12
    101a:	df 92       	push	r13
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	00 d0       	rcall	.+0      	; 0x102a <Board+0x14>
    102a:	00 d0       	rcall	.+0      	; 0x102c <Board+0x16>
    102c:	00 d0       	rcall	.+0      	; 0x102e <Board+0x18>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
    1032:	41 e0       	ldi	r20, 0x01	; 1
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	8d ea       	ldi	r24, 0xAD	; 173
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a2 df       	rcall	.-188    	; 0xf80 <Transmit>
    103c:	11 e3       	ldi	r17, 0x31	; 49
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
    103e:	0f 2e       	mov	r0, r31
    1040:	fc e7       	ldi	r31, 0x7C	; 124
    1042:	ff 2e       	mov	r15, r31
    1044:	f0 2d       	mov	r31, r0
		mymove[1] = '\x20';
    1046:	00 e2       	ldi	r16, 0x20	; 32
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
    1048:	f9 82       	std	Y+1, r15	; 0x01
		mymove[1] = '\x20';
    104a:	0a 83       	std	Y+2, r16	; 0x02
		mymove[2] = s1+1+'0';
    104c:	1b 83       	std	Y+3, r17	; 0x03
		mymove[3] = '\x20';
    104e:	0c 83       	std	Y+4, r16	; 0x04
		Transmit(mymove,0,4);
    1050:	44 e0       	ldi	r20, 0x04	; 4
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	93 df       	rcall	.-218    	; 0xf80 <Transmit>
    105a:	1f 5f       	subi	r17, 0xFF	; 255
//Visualization of the board
void Board(){
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
    105c:	19 33       	cpi	r17, 0x39	; 57
    105e:	a1 f7       	brne	.-24     	; 0x1048 <Board+0x32>
    1060:	00 e0       	ldi	r16, 0x00	; 0
    1062:	10 e0       	ldi	r17, 0x00	; 0
    1064:	0f 2e       	mov	r0, r31
    1066:	f1 e4       	ldi	r31, 0x41	; 65
    1068:	bf 2e       	mov	r11, r31
    106a:	f0 2d       	mov	r31, r0
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
    106c:	0f 2e       	mov	r0, r31
    106e:	fc e7       	ldi	r31, 0x7C	; 124
    1070:	cf 2e       	mov	r12, r31
    1072:	f0 2d       	mov	r31, r0
			mymove[1] = '\x20';
    1074:	68 94       	set
    1076:	dd 24       	eor	r13, r13
    1078:	d5 f8       	bld	r13, 5
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
    107a:	42 e0       	ldi	r20, 0x02	; 2
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	8f ea       	ldi	r24, 0xAF	; 175
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	7e df       	rcall	.-260    	; 0xf80 <Transmit>
		mymove[0] = s1+65;
    1084:	b9 82       	std	Y+1, r11	; 0x01
		Transmit(mymove,0,1);
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	ce 01       	movw	r24, r28
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	78 df       	rcall	.-272    	; 0xf80 <Transmit>
    1090:	78 01       	movw	r14, r16
    1092:	88 e0       	ldi	r24, 0x08	; 8
    1094:	e8 0e       	add	r14, r24
    1096:	f1 1c       	adc	r15, r1
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
    1098:	c9 82       	std	Y+1, r12	; 0x01
			mymove[1] = '\x20';
    109a:	da 82       	std	Y+2, r13	; 0x02
			mymove[2] = M[s1*8 + s2]+'0';
    109c:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
    10a0:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    10a4:	e0 0f       	add	r30, r16
    10a6:	f1 1f       	adc	r31, r17
    10a8:	80 81       	ld	r24, Z
    10aa:	80 5d       	subi	r24, 0xD0	; 208
    10ac:	8b 83       	std	Y+3, r24	; 0x03
			mymove[3] = '\x20';
    10ae:	dc 82       	std	Y+4, r13	; 0x04
			Transmit(mymove,0,4);
    10b0:	44 e0       	ldi	r20, 0x04	; 4
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	63 df       	rcall	.-314    	; 0xf80 <Transmit>
    10ba:	0f 5f       	subi	r16, 0xFF	; 255
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
    10be:	0e 15       	cp	r16, r14
    10c0:	1f 05       	cpc	r17, r15
    10c2:	51 f7       	brne	.-44     	; 0x1098 <Board+0x82>
    10c4:	b3 94       	inc	r11
    10c6:	87 01       	movw	r16, r14
		mymove[1] = '\x20';
		mymove[2] = s1+1+'0';
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
    10c8:	00 34       	cpi	r16, 0x40	; 64
    10ca:	11 05       	cpc	r17, r1
			mymove[2] = M[s1*8 + s2]+'0';
			mymove[3] = '\x20';
			Transmit(mymove,0,4);
		}
	}
	Transmit("\n\r",0,strlen("\n\r"));
    10cc:	b1 f6       	brne	.-84     	; 0x107a <Board+0x64>
    10ce:	42 e0       	ldi	r20, 0x02	; 2
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	8f ea       	ldi	r24, 0xAF	; 175
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	54 df       	rcall	.-344    	; 0xf80 <Transmit>
}
    10d8:	26 96       	adiw	r28, 0x06	; 6
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	df 90       	pop	r13
    10f2:	cf 90       	pop	r12
    10f4:	bf 90       	pop	r11
    10f6:	08 95       	ret

000010f8 <AnnounceRes>:


void AnnounceRes(uint8_t res)
{
	//after announcement, timer interrupts are disabled.
	TIMSK &= ~(1 << TOIE1) ;
    10f8:	99 b7       	in	r25, 0x39	; 57
    10fa:	9b 7f       	andi	r25, 0xFB	; 251
    10fc:	99 bf       	out	0x39, r25	; 57
	if(res == 1)
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	51 f4       	brne	.+20     	; 0x1116 <AnnounceRes+0x1e>
	{
		Transmit("WN\r",0,strlen("WN\r"));
    1102:	43 e0       	ldi	r20, 0x03	; 3
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	82 eb       	ldi	r24, 0xB2	; 178
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	3a df       	rcall	.-396    	; 0xf80 <Transmit>
		PORTB ^= (1<<PORTB1);             //Toggle LED
    110c:	98 b3       	in	r25, 0x18	; 24
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	89 27       	eor	r24, r25
    1112:	88 bb       	out	0x18, r24	; 24
    1114:	15 c0       	rjmp	.+42     	; 0x1140 <AnnounceRes+0x48>
	}
	else if(res == 0)
    1116:	81 11       	cpse	r24, r1
    1118:	0a c0       	rjmp	.+20     	; 0x112e <AnnounceRes+0x36>
	{
		Transmit("LS\r",0,strlen("LS\r"));
    111a:	43 e0       	ldi	r20, 0x03	; 3
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	86 eb       	ldi	r24, 0xB6	; 182
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	2e df       	rcall	.-420    	; 0xf80 <Transmit>
		PORTB ^= (1<<PORTB2);			//Toggle LED
    1124:	98 b3       	in	r25, 0x18	; 24
    1126:	84 e0       	ldi	r24, 0x04	; 4
    1128:	89 27       	eor	r24, r25
    112a:	88 bb       	out	0x18, r24	; 24
    112c:	09 c0       	rjmp	.+18     	; 0x1140 <AnnounceRes+0x48>
	}
	else
	{
		Transmit("TE\r",0,strlen("TE\r"));
    112e:	43 e0       	ldi	r20, 0x03	; 3
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	8a eb       	ldi	r24, 0xBA	; 186
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	24 df       	rcall	.-440    	; 0xf80 <Transmit>
		PORTB ^= (1<<PORTB3);			//Toggle LED
    1138:	98 b3       	in	r25, 0x18	; 24
    113a:	88 e0       	ldi	r24, 0x08	; 8
    113c:	89 27       	eor	r24, r25
    113e:	88 bb       	out	0x18, r24	; 24
	}
	TCCR1B = 0x00;         //Clearing timer -- total reset
    1140:	1e bc       	out	0x2e, r1	; 46
	TIMSK = (1 << TOIE1) ; //Overflow interrupts -- disabled
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	89 bf       	out	0x39, r24	; 57
    1146:	08 95       	ret

00001148 <EndGame>:

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
    1148:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
    114c:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    1150:	bf 01       	movw	r22, r30
    1152:	60 5c       	subi	r22, 0xC0	; 192
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;
    1156:	40 e0       	ldi	r20, 0x00	; 0

/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	11 c0       	rjmp	.+34     	; 0x117e <EndGame+0x36>

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
    115c:	df 01       	movw	r26, r30
    115e:	80 81       	ld	r24, Z
    1160:	81 11       	cpse	r24, r1
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <EndGame+0x1e>
			b++;
    1164:	9f 5f       	subi	r25, 0xFF	; 255
			if(M[i*8 + y] == 1)
    1166:	8c 91       	ld	r24, X
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	09 f4       	brne	.+2      	; 0x116e <EndGame+0x26>
			w++;
    116c:	4f 5f       	subi	r20, 0xFF	; 255
    116e:	31 96       	adiw	r30, 0x01	; 1
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
    1170:	2e 17       	cp	r18, r30
    1172:	3f 07       	cpc	r19, r31
    1174:	99 f7       	brne	.-26     	; 0x115c <EndGame+0x14>
    1176:	f9 01       	movw	r30, r18
//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
    1178:	26 17       	cp	r18, r22
    117a:	37 07       	cpc	r19, r23
    117c:	21 f0       	breq	.+8      	; 0x1186 <EndGame+0x3e>
    117e:	9f 01       	movw	r18, r30
    1180:	28 5f       	subi	r18, 0xF8	; 248
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	eb cf       	rjmp	.-42     	; 0x115c <EndGame+0x14>
			b++;
			if(M[i*8 + y] == 1)
			w++;
		}
	}
	if(b == w)
    1186:	94 13       	cpse	r25, r20
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <EndGame+0x48>
	{
		AnnounceRes(2);	//TIE -LED3
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	b5 df       	rcall	.-150    	; 0x10f8 <AnnounceRes>
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <EndGame+0x70>

	}
	else if(b>w)
    1190:	49 17       	cp	r20, r25
    1192:	50 f4       	brcc	.+20     	; 0x11a8 <EndGame+0x60>
	{
		if(MyColor == 0) //black
    1194:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <MyColor>
    1198:	81 11       	cpse	r24, r1
    119a:	03 c0       	rjmp	.+6      	; 0x11a2 <EndGame+0x5a>
		AnnounceRes(1);//WIN - LED1
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	ac df       	rcall	.-168    	; 0x10f8 <AnnounceRes>
    11a0:	0b c0       	rjmp	.+22     	; 0x11b8 <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	a9 df       	rcall	.-174    	; 0x10f8 <AnnounceRes>
    11a6:	08 c0       	rjmp	.+16     	; 0x11b8 <EndGame+0x70>
    11a8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <MyColor>
	}
	else
	{
		if(MyColor == 1) //white
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <EndGame+0x6c>
		AnnounceRes(1);//WIN - LED1
    11b0:	a3 df       	rcall	.-186    	; 0x10f8 <AnnounceRes>
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	a0 df       	rcall	.-192    	; 0x10f8 <AnnounceRes>
    11b8:	82 e0       	ldi	r24, 0x02	; 2
	}

	//after announcement wait for ok in while loop(set move_done = 1)
	myTurn = 2;
    11ba:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    11be:	08 95       	ret

000011c0 <__vector_8>:
    11c0:	1f 92       	push	r1
}



 ISR (TIMER1_OVF_vect)    // Timer1 ISR
 {
    11c2:	0f 92       	push	r0
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	0f 92       	push	r0
    11c8:	11 24       	eor	r1, r1
    11ca:	2f 93       	push	r18
    11cc:	3f 93       	push	r19
    11ce:	4f 93       	push	r20
    11d0:	5f 93       	push	r21
    11d2:	6f 93       	push	r22
    11d4:	7f 93       	push	r23
    11d6:	8f 93       	push	r24
    11d8:	9f 93       	push	r25
    11da:	af 93       	push	r26
    11dc:	bf 93       	push	r27
    11de:	ef 93       	push	r30
    11e0:	ff 93       	push	r31
	 time_tmp--;
    11e2:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <time_tmp>
    11e6:	81 50       	subi	r24, 0x01	; 1
    11e8:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <time_tmp>
	 if(time_tmp==0){
    11ec:	81 11       	cpse	r24, r1
    11ee:	19 c0       	rjmp	.+50     	; 0x1222 <__vector_8+0x62>
		 time_tmp=Time;
    11f0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Time>
    11f4:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <time_tmp>
		 if(myTurn==1){
    11f8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	19 f4       	brne	.+6      	; 0x1206 <__vector_8+0x46>
			 // coming soon 
			 //last sec MM will save the day..eventually.		 
			 myTurn =0;
    1200:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
    1204:	0e c0       	rjmp	.+28     	; 0x1222 <__vector_8+0x62>
			// move_done = 1;
		 } 
		 else if(myTurn == 0){
    1206:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
    120a:	81 11       	cpse	r24, r1
    120c:	0a c0       	rjmp	.+20     	; 0x1222 <__vector_8+0x62>
			  Transmit("IT\r",0,strlen("IT\r"));
    120e:	43 e0       	ldi	r20, 0x03	; 3
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	8e eb       	ldi	r24, 0xBE	; 190
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	b4 de       	rcall	.-664    	; 0xf80 <Transmit>
			  ITflag = 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <ITflag>
			  ILflag = 1;
    121e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>
		 }	 
	 }
	 
	TCNT1 = 65536-(8000000/1024);//3036;//x=number of seconds  //2^16 = 65536 - X(10,000,000/1024)
    1222:	8c e7       	ldi	r24, 0x7C	; 124
    1224:	91 ee       	ldi	r25, 0xE1	; 225
    1226:	9d bd       	out	0x2d, r25	; 45
    1228:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00; //Default - Cleared
    122a:	1f bc       	out	0x2f, r1	; 47
		 
 }
    122c:	ff 91       	pop	r31
    122e:	ef 91       	pop	r30
    1230:	bf 91       	pop	r27
    1232:	af 91       	pop	r26
    1234:	9f 91       	pop	r25
    1236:	8f 91       	pop	r24
    1238:	7f 91       	pop	r23
    123a:	6f 91       	pop	r22
    123c:	5f 91       	pop	r21
    123e:	4f 91       	pop	r20
    1240:	3f 91       	pop	r19
    1242:	2f 91       	pop	r18
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <init_leds>:

 //////////////////////////////////////////////// INITIALIZATION ///////////////////////////////////////////////////////////

 void init_leds()
 {
	DDRB |= (1<<DDB1);
    124e:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1<<DDB2);
    1250:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= (1<<DDB3);
    1252:	bb 9a       	sbi	0x17, 3	; 23
	PORTB |= (1<<PORTB1);
    1254:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
    1256:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
    1258:	c3 9a       	sbi	0x18, 3	; 24
    125a:	08 95       	ret

0000125c <init_timer>:
 }

void init_timer(){
	//cli();
	time_tmp=Time;
    125c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Time>
    1260:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <time_tmp>
	 //////////Timer/Counter Initialization/////////
	 /* Timer starts from a specific value, 
		so we can take advantage of ISR
	 */
	//if the result is negative, we will need to two timers (or one timer used 2 times)
	TCNT1 = 65536-(8000000/1024);//3036;//x=number of seconds  //2^16 = 65536 - X(10,000,000/1024) 
    1264:	8c e7       	ldi	r24, 0x7C	; 124
    1266:	91 ee       	ldi	r25, 0xE1	; 225
    1268:	9d bd       	out	0x2d, r25	; 45
    126a:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00; //Default - Cleared
    126c:	1f bc       	out	0x2f, r1	; 47

	/*	The CLK/64 
	*/
	//TCCR1B &=  ~(1<<CS11);  
	
	TCCR1B |=  (1<<CS12);// |(1<<CS10);
    126e:	8e b5       	in	r24, 0x2e	; 46
    1270:	84 60       	ori	r24, 0x04	; 4
    1272:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |=  (1<<CS10);
    1274:	8e b5       	in	r24, 0x2e	; 46
    1276:	81 60       	ori	r24, 0x01	; 1
    1278:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	89 bf       	out	0x39, r24	; 57
    127e:	08 95       	ret

00001280 <Algo>:



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
    1280:	2f 92       	push	r2
    1282:	3f 92       	push	r3
    1284:	4f 92       	push	r4
    1286:	5f 92       	push	r5
    1288:	6f 92       	push	r6
    128a:	7f 92       	push	r7
    128c:	8f 92       	push	r8
    128e:	9f 92       	push	r9
    1290:	af 92       	push	r10
    1292:	bf 92       	push	r11
    1294:	cf 92       	push	r12
    1296:	df 92       	push	r13
    1298:	ef 92       	push	r14
    129a:	ff 92       	push	r15
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	66 97       	sbiw	r28, 0x16	; 22
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
	uint8_t mi,my,i,j,u,z,ibar,ybar,skip;
	uint8_t istep,ystep;
	myTurn = 1;		//Important - collision with  init_timer
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
	
	v1_max = 0;
    12ba:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <v1_max>
	v2_max = 0;
    12be:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <v2_max>
	v3_max = 0;
    12c2:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <v3_max>
    12c6:	21 e0       	ldi	r18, 0x01	; 1
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3c 8b       	std	Y+20, r19	; 0x14
    12cc:	2b 8b       	std	Y+19, r18	; 0x13
    12ce:	1e 8a       	std	Y+22, r1	; 0x16
    12d0:	1d 8a       	std	Y+21, r1	; 0x15


	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
    12d2:	1a 8a       	std	Y+18, r1	; 0x12
    12d4:	e6 c0       	rjmp	.+460    	; 0x14a2 <Algo+0x222>
	{
		for(my=0; my<=7; my++)
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
    12d6:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
    12da:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    12de:	6c 85       	ldd	r22, Y+12	; 0x0c
    12e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    12e2:	e6 0f       	add	r30, r22
    12e4:	f7 1f       	adc	r31, r23
    12e6:	90 81       	ld	r25, Z
    12e8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <MyColor>
    12ec:	98 13       	cpse	r25, r24
    12ee:	bb c0       	rjmp	.+374    	; 0x1466 <Algo+0x1e6>
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
    12f0:	4a 88       	ldd	r4, Y+18	; 0x12
    12f2:	4a 94       	dec	r4
    12f4:	e4 2c       	mov	r14, r4
    12f6:	f1 2c       	mov	r15, r1
    12f8:	8b 89       	ldd	r24, Y+19	; 0x13
    12fa:	9c 89       	ldd	r25, Y+20	; 0x14
    12fc:	8e 15       	cp	r24, r14
    12fe:	9f 05       	cpc	r25, r15
    1300:	0c f4       	brge	.+2      	; 0x1304 <Algo+0x84>
    1302:	b1 c0       	rjmp	.+354    	; 0x1466 <Algo+0x1e6>
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
    1304:	31 01       	movw	r6, r2
							
							//Setting up y barrier
							if(j > my)
							ybar = 7;
							else if(j == my)
							ybar = 10;
    1306:	39 8a       	std	Y+17, r3	; 0x11
    1308:	28 8a       	std	Y+16, r2	; 0x10
    130a:	04 2d       	mov	r16, r4
    130c:	5b 86       	std	Y+11, r5	; 0x0b
    130e:	aa 88       	ldd	r10, Y+18	; 0x12
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
    1310:	08 30       	cpi	r16, 0x08	; 8
    1312:	08 f0       	brcs	.+2      	; 0x1316 <Algo+0x96>
    1314:	9c c0       	rjmp	.+312    	; 0x144e <Algo+0x1ce>
						continue;
					for(j = my - 1; j<=(my+1); ++j)
    1316:	1b 85       	ldd	r17, Y+11	; 0x0b
    1318:	11 50       	subi	r17, 0x01	; 1
    131a:	81 2f       	mov	r24, r17
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	28 89       	ldd	r18, Y+16	; 0x10
    1320:	39 89       	ldd	r19, Y+17	; 0x11
    1322:	28 17       	cp	r18, r24
    1324:	39 07       	cpc	r19, r25
    1326:	0c f4       	brge	.+2      	; 0x132a <Algo+0xaa>
    1328:	92 c0       	rjmp	.+292    	; 0x144e <Algo+0x1ce>
						if(j<0||j>7) //Matrix out of border protection 
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
    132a:	47 01       	movw	r8, r14
    132c:	88 0c       	add	r8, r8
    132e:	99 1c       	adc	r9, r9
    1330:	88 0c       	add	r8, r8
    1332:	99 1c       	adc	r9, r9
    1334:	88 0c       	add	r8, r8
    1336:	99 1c       	adc	r9, r9


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    1338:	40 2e       	mov	r4, r16
    133a:	51 2c       	mov	r5, r1
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
    133c:	b2 01       	movw	r22, r4
    133e:	66 0f       	add	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	66 0f       	add	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	66 0f       	add	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	7a 87       	std	Y+10, r23	; 0x0a
    134c:	69 87       	std	Y+9, r22	; 0x09
							ybar = 10;
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
    134e:	b0 2e       	mov	r11, r16
    1350:	ba 18       	sub	r11, r10


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    1352:	2b 2d       	mov	r18, r11
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	38 87       	std	Y+8, r19	; 0x08
    1358:	2f 83       	std	Y+7, r18	; 0x07
    135a:	3b 84       	ldd	r3, Y+11	; 0x0b
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
					{
						if(j<0||j>7) //Matrix out of border protection 
    135c:	18 30       	cpi	r17, 0x08	; 8
    135e:	08 f0       	brcs	.+2      	; 0x1362 <Algo+0xe2>
    1360:	6f c0       	rjmp	.+222    	; 0x1440 <Algo+0x1c0>
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
    1362:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <M>
    1366:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <M+0x1>
    136a:	88 0d       	add	r24, r8
    136c:	99 1d       	adc	r25, r9
    136e:	fd 01       	movw	r30, r26
    1370:	e8 0f       	add	r30, r24
    1372:	f9 1f       	adc	r31, r25
    1374:	20 81       	ld	r18, Z
    1376:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	41 11       	cpse	r20, r1
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	28 17       	cp	r18, r24
    1386:	39 07       	cpc	r19, r25
    1388:	09 f0       	breq	.+2      	; 0x138c <Algo+0x10c>
    138a:	5a c0       	rjmp	.+180    	; 0x1440 <Algo+0x1c0>
						{

							//Setting up i barrier (board)
							if(i > mi)
    138c:	a0 16       	cp	r10, r16
    138e:	20 f0       	brcs	.+8      	; 0x1398 <Algo+0x118>
							ibar = 7 ;
							else if(i == mi)
    1390:	a0 16       	cp	r10, r16
    1392:	21 f0       	breq	.+8      	; 0x139c <Algo+0x11c>
							ibar = 10;   //big enough, so the other axis will break while below
							else
							ibar = 0;
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	03 c0       	rjmp	.+6      	; 0x139e <Algo+0x11e>
						if((M[i*8 + j] == !MyColor))		
						{

							//Setting up i barrier (board)
							if(i > mi)
							ibar = 7 ;
    1398:	87 e0       	ldi	r24, 0x07	; 7
    139a:	01 c0       	rjmp	.+2      	; 0x139e <Algo+0x11e>
							else if(i == mi)
							ibar = 10;   //big enough, so the other axis will break while below
    139c:	8a e0       	ldi	r24, 0x0A	; 10
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > my)
    139e:	31 16       	cp	r3, r17
    13a0:	20 f0       	brcs	.+8      	; 0x13aa <Algo+0x12a>
							ybar = 7;
							else if(j == my)
    13a2:	31 16       	cp	r3, r17
    13a4:	21 f0       	breq	.+8      	; 0x13ae <Algo+0x12e>
							ybar = 10;
							else
							ybar = 0;
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <Algo+0x130>
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > my)
							ybar = 7;
    13aa:	57 e0       	ldi	r21, 0x07	; 7
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <Algo+0x130>
							else if(j == my)
							ybar = 10;
    13ae:	5a e0       	ldi	r21, 0x0A	; 10
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
							ystep = j - my;
    13b0:	91 2f       	mov	r25, r17
    13b2:	93 19       	sub	r25, r3


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    13b4:	cf 80       	ldd	r12, Y+7	; 0x07
    13b6:	d8 84       	ldd	r13, Y+8	; 0x08
    13b8:	c8 0e       	add	r12, r24
    13ba:	d1 1c       	adc	r13, r1
    13bc:	4c 14       	cp	r4, r12
    13be:	5d 04       	cpc	r5, r13
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <Algo+0x144>
    13c2:	3e c0       	rjmp	.+124    	; 0x1440 <Algo+0x1c0>
    13c4:	21 2f       	mov	r18, r17
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	e9 2e       	mov	r14, r25
    13ca:	f1 2c       	mov	r15, r1
    13cc:	e5 0e       	add	r14, r21
    13ce:	f1 1c       	adc	r15, r1
    13d0:	2e 15       	cp	r18, r14
    13d2:	3f 05       	cpc	r19, r15
    13d4:	a9 f1       	breq	.+106    	; 0x1440 <Algo+0x1c0>
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
    13d6:	69 85       	ldd	r22, Y+9	; 0x09
    13d8:	7a 85       	ldd	r23, Y+10	; 0x0a
    13da:	26 0f       	add	r18, r22
    13dc:	37 1f       	adc	r19, r23
    13de:	fd 01       	movw	r30, r26
    13e0:	e2 0f       	add	r30, r18
    13e2:	f3 1f       	adc	r31, r19
    13e4:	80 81       	ld	r24, Z
    13e6:	48 17       	cp	r20, r24
    13e8:	59 f1       	breq	.+86     	; 0x1440 <Algo+0x1c0>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
    13ea:	80 81       	ld	r24, Z
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	a1 f0       	breq	.+40     	; 0x1418 <Algo+0x198>
    13f0:	61 2f       	mov	r22, r17
    13f2:	80 2f       	mov	r24, r16
    13f4:	19 c0       	rjmp	.+50     	; 0x1428 <Algo+0x1a8>
							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
    13f6:	22 0f       	add	r18, r18
    13f8:	33 1f       	adc	r19, r19
    13fa:	22 0f       	add	r18, r18
    13fc:	33 1f       	adc	r19, r19
    13fe:	22 0f       	add	r18, r18
    1400:	33 1f       	adc	r19, r19
    1402:	e2 0f       	add	r30, r18
    1404:	f3 1f       	adc	r31, r19
    1406:	ea 0f       	add	r30, r26
    1408:	fb 1f       	adc	r31, r27
    140a:	20 81       	ld	r18, Z
    140c:	42 17       	cp	r20, r18
    140e:	c1 f0       	breq	.+48     	; 0x1440 <Algo+0x1c0>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
    1410:	20 81       	ld	r18, Z
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	49 f4       	brne	.+18     	; 0x1428 <Algo+0x1a8>
    1416:	02 c0       	rjmp	.+4      	; 0x141c <Algo+0x19c>
    1418:	61 2f       	mov	r22, r17
    141a:	80 2f       	mov	r24, r16
									skip = 0;
									move_done=1;
    141c:	71 e0       	ldi	r23, 0x01	; 1
    141e:	70 93 db 00 	sts	0x00DB, r23	; 0x8000db <move_done>
									//CheckMove(u, z, MyColor, 1);  //Coloring adjacent paths, according to the rules  ////////-- OLD VERSION --////////////
									CheckMove(u, z, MyColor, 0); //Calculate and 'write'(if its the greatest till now) on board(in the specific slot we found) the result score of this possible move.
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	f4 da       	rcall	.-2584   	; 0xa0e <CheckMove>
									mymove[2] = '\x20';
									mymove[3] = u+65;
									mymove[4] = (z+1)+'0';
									mymove[5] = '\r';
									Transmit(mymove,0,6);*/
									break;
    1426:	0c c0       	rjmp	.+24     	; 0x1440 <Algo+0x1c0>
								}

								z+= ystep;
    1428:	69 0f       	add	r22, r25
								u+= istep;
    142a:	8b 0d       	add	r24, r11


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	2c 15       	cp	r18, r12
    1432:	3d 05       	cpc	r19, r13
    1434:	29 f0       	breq	.+10     	; 0x1440 <Algo+0x1c0>
    1436:	e6 2f       	mov	r30, r22
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	ee 15       	cp	r30, r14
    143c:	ff 05       	cpc	r31, r15
    143e:	d9 f6       	brne	.-74     	; 0x13f6 <Algo+0x176>
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
    1440:	1f 5f       	subi	r17, 0xFF	; 255
    1442:	81 2f       	mov	r24, r17
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	68 16       	cp	r6, r24
    1448:	79 06       	cpc	r7, r25
    144a:	0c f0       	brlt	.+2      	; 0x144e <Algo+0x1ce>
    144c:	87 cf       	rjmp	.-242    	; 0x135c <Algo+0xdc>
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
    144e:	0f 5f       	subi	r16, 0xFF	; 255
    1450:	e0 2e       	mov	r14, r16
    1452:	f1 2c       	mov	r15, r1
    1454:	8e 85       	ldd	r24, Y+14	; 0x0e
    1456:	9f 85       	ldd	r25, Y+15	; 0x0f
    1458:	8e 15       	cp	r24, r14
    145a:	9f 05       	cpc	r25, r15
    145c:	0c f0       	brlt	.+2      	; 0x1460 <Algo+0x1e0>
    145e:	58 cf       	rjmp	.-336    	; 0x1310 <Algo+0x90>
    1460:	28 88       	ldd	r2, Y+16	; 0x10
    1462:	39 88       	ldd	r3, Y+17	; 0x11
    1464:	5b 84       	ldd	r5, Y+11	; 0x0b
	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
	{
		for(my=0; my<=7; my++)
    1466:	53 94       	inc	r5
    1468:	2c 85       	ldd	r18, Y+12	; 0x0c
    146a:	3d 85       	ldd	r19, Y+13	; 0x0d
    146c:	2f 5f       	subi	r18, 0xFF	; 255
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	3d 87       	std	Y+13, r19	; 0x0d
    1472:	2c 87       	std	Y+12, r18	; 0x0c
    1474:	3f ef       	ldi	r19, 0xFF	; 255
    1476:	23 1a       	sub	r2, r19
    1478:	33 0a       	sbc	r3, r19
    147a:	68 e0       	ldi	r22, 0x08	; 8
    147c:	56 12       	cpse	r5, r22
    147e:	2b cf       	rjmp	.-426    	; 0x12d6 <Algo+0x56>


	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
    1480:	7a 89       	ldd	r23, Y+18	; 0x12
    1482:	7f 5f       	subi	r23, 0xFF	; 255
    1484:	7a 8b       	std	Y+18, r23	; 0x12
    1486:	8d 89       	ldd	r24, Y+21	; 0x15
    1488:	9e 89       	ldd	r25, Y+22	; 0x16
    148a:	08 96       	adiw	r24, 0x08	; 8
    148c:	9e 8b       	std	Y+22, r25	; 0x16
    148e:	8d 8b       	std	Y+21, r24	; 0x15
    1490:	2b 89       	ldd	r18, Y+19	; 0x13
    1492:	3c 89       	ldd	r19, Y+20	; 0x14
    1494:	2f 5f       	subi	r18, 0xFF	; 255
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	3c 8b       	std	Y+20, r19	; 0x14
    149a:	2b 8b       	std	Y+19, r18	; 0x13
    149c:	80 34       	cpi	r24, 0x40	; 64
    149e:	91 05       	cpc	r25, r1
    14a0:	71 f0       	breq	.+28     	; 0x14be <Algo+0x23e>



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
    14a2:	6d 89       	ldd	r22, Y+21	; 0x15
    14a4:	7e 89       	ldd	r23, Y+22	; 0x16
    14a6:	7d 87       	std	Y+13, r23	; 0x0d
    14a8:	6c 87       	std	Y+12, r22	; 0x0c
    14aa:	22 24       	eor	r2, r2
    14ac:	23 94       	inc	r2
    14ae:	31 2c       	mov	r3, r1
    14b0:	81 2c       	mov	r8, r1
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
    14b2:	8b 89       	ldd	r24, Y+19	; 0x13
    14b4:	9c 89       	ldd	r25, Y+20	; 0x14
    14b6:	9f 87       	std	Y+15, r25	; 0x0f
    14b8:	8e 87       	std	Y+14, r24	; 0x0e
    14ba:	58 2c       	mov	r5, r8
    14bc:	0c cf       	rjmp	.-488    	; 0x12d6 <Algo+0x56>
			}//if  (find our pawn)

		}//for my

	}//for mi
	if(move_done)
    14be:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
    14c2:	88 23       	and	r24, r24
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <Algo+0x248>
				mymove[4] = (vj_final+1)+'0';
				mymove[5] = '\r';
		Transmit(mymove,0,6);
		
		*/
		simulate_opponent();
    14c6:	49 c0       	rjmp	.+146    	; 0x155a <Algo+0x2da>
    14c8:	d3 d9       	rcall	.-3162   	; 0x870 <simulate_opponent>
								mymove[3] = vj3_max+1+'0';
								mymove[4] = '\r';
								Transmit(mymove,0,6);
								_delay_ms(10);*/
		
		CheckMove(vi_final, vj_final, MyColor ,1); // Paint the best possible slot
    14ca:	21 e0       	ldi	r18, 0x01	; 1
    14cc:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
    14d0:	60 91 d7 00 	lds	r22, 0x00D7	; 0x8000d7 <vj_final>
    14d4:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <vi_final>
    14d8:	9a da       	rcall	.-2764   	; 0xa0e <CheckMove>
		mymove[0] = 'M';
    14da:	8d e4       	ldi	r24, 0x4D	; 77
    14dc:	89 83       	std	Y+1, r24	; 0x01
		mymove[1] = 'M';
    14de:	8a 83       	std	Y+2, r24	; 0x02
		mymove[2] = '\x20';
    14e0:	80 e2       	ldi	r24, 0x20	; 32
    14e2:	8b 83       	std	Y+3, r24	; 0x03
		mymove[3] = vi_final+65;
    14e4:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <vi_final>
    14e8:	8f 5b       	subi	r24, 0xBF	; 191
    14ea:	8c 83       	std	Y+4, r24	; 0x04
		mymove[4] = (vj_final+1)+'0';
    14ec:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <vj_final>
    14f0:	8f 5c       	subi	r24, 0xCF	; 207
		mymove[5] = '\r';
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	8d e0       	ldi	r24, 0x0D	; 13
		Board();
    14f6:	8e 83       	std	Y+6, r24	; 0x06
    14f8:	8e dd       	rcall	.-1252   	; 0x1016 <Board>
		Transmit(mymove,0,6); //Transmit our Move
    14fa:	46 e0       	ldi	r20, 0x06	; 6
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	ce 01       	movw	r24, r28
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	3e dd       	rcall	.-1412   	; 0xf80 <Transmit>
	
	//if move_done == 0 , that means that we cant find solution, we pass                           
	//while loop until 'OK' response
	while(1)
	{		// Check_Input does not support "OK" response so we check it here
		if(move_done >= 1)
    1504:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
    1508:	88 23       	and	r24, r24
    150a:	39 f1       	breq	.+78     	; 0x155a <Algo+0x2da>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    150c:	8f e1       	ldi	r24, 0x1F	; 31
    150e:	9e e4       	ldi	r25, 0x4E	; 78
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <Algo+0x290>
    1514:	00 c0       	rjmp	.+0      	; 0x1516 <Algo+0x296>
    1516:	00 00       	nop
		{
			while(1)
			{
				_delay_ms(10);
				if((move_done == 2)||(myTurn==2))  //myturn==2 means that a RST was made. and we can break this loop.
    1518:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	21 f0       	breq	.+8      	; 0x1528 <Algo+0x2a8>
    1520:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
    1524:	82 30       	cpi	r24, 0x02	; 2
    1526:	91 f7       	brne	.-28     	; 0x150c <Algo+0x28c>
				{ // we received the response we were waiting'
					move_done = 0;
    1528:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <move_done>
					break;
				}
			}
			
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75) //Respone ok for our MM
    152c:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <rxReadPos>
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	fc 01       	movw	r30, r24
    1534:	e9 51       	subi	r30, 0x19	; 25
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	20 81       	ld	r18, Z
    153a:	2f 34       	cpi	r18, 0x4F	; 79
    153c:	19 f7       	brne	.-58     	; 0x1504 <Algo+0x284>
    153e:	fc 01       	movw	r30, r24
    1540:	e9 51       	subi	r30, 0x19	; 25
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	81 81       	ldd	r24, Z+1	; 0x01
    1546:	8b 34       	cpi	r24, 0x4B	; 75
			{
				init_timer();
    1548:	e9 f6       	brne	.-70     	; 0x1504 <Algo+0x284>
    154a:	88 de       	rcall	.-752    	; 0x125c <init_timer>
				rxReadPos=rxWritePos;
    154c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
    1550:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
				myTurn = 0;
    1554:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			}

		}
		else if(move_done == 0)//No solution was found
		{
			if (enemy_pass == 1) //Enemy sent pass too
    1558:	0b c0       	rjmp	.+22     	; 0x1570 <Algo+0x2f0>
    155a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <enemy_pass>
    155e:	81 30       	cpi	r24, 0x01	; 1
			{
				EndGame();		//Go count pawns and announce the winner
    1560:	11 f4       	brne	.+4      	; 0x1566 <Algo+0x2e6>
				break;
    1562:	f2 dd       	rcall	.-1052   	; 0x1148 <EndGame>
			}
			else
			{
				Transmit("MP\r",0,strlen("MP\r")); //Transmit MYPASS
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <Algo+0x2f0>
    1566:	43 e0       	ldi	r20, 0x03	; 3
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	82 ec       	ldi	r24, 0xC2	; 194
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	08 dd       	rcall	.-1520   	; 0xf80 <Transmit>
				break;
			}
		}
	}
	
}
    1570:	66 96       	adiw	r28, 0x16	; 22
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	df 90       	pop	r13
    158a:	cf 90       	pop	r12
    158c:	bf 90       	pop	r11
    158e:	af 90       	pop	r10
    1590:	9f 90       	pop	r9
    1592:	8f 90       	pop	r8
    1594:	7f 90       	pop	r7
    1596:	6f 90       	pop	r6
    1598:	5f 90       	pop	r5
    159a:	4f 90       	pop	r4
    159c:	3f 90       	pop	r3
    159e:	2f 90       	pop	r2
    15a0:	08 95       	ret

000015a2 <Check_Input>:



///////////////////////////////////////////////////////////////////////////////////////////   CHECK_INPUT    /////////////////////////////////////////////////////////////////////////////////////////

void Check_Input(char data[]){
    15a2:	9c 01       	movw	r18, r24
	
		if(data[rxReadPos]==CR[0]){
    15a4:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <rxReadPos>
    15a8:	40 91 d8 00 	lds	r20, 0x00D8	; 0x8000d8 <CR>
    15ac:	f9 01       	movw	r30, r18
    15ae:	e9 0f       	add	r30, r25
    15b0:	f1 1d       	adc	r31, r1
    15b2:	80 81       	ld	r24, Z
    15b4:	84 13       	cpse	r24, r20
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <Check_Input+0x1c>
			rxReadPos++;
    15b8:	9f 5f       	subi	r25, 0xFF	; 255
    15ba:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <rxReadPos>
		//flag = 0;
		//Space_num = 0;
		

		//ILFlag will help us spot "OK" or "PL" terminal answer
		if(ILflag == 1)
    15be:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	21 f4       	brne	.+8      	; 0x15ce <Check_Input+0x2c>
		{
			ILflag=2;  //answer spotted, you can proceed.
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>
			return;	
    15cc:	08 95       	ret
		}
		
		//it will help to spot "OK"  terminal answer
		if(move_done == 1)
    15ce:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	21 f4       	brne	.+8      	; 0x15de <Check_Input+0x3c>
		{	
			move_done=2; //answer spotted, you can proceed.
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <move_done>
			return;	
    15dc:	08 95       	ret
    15de:	b9 01       	movw	r22, r18
	


		//process
		// command AT
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
    15e0:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <rxReadPos>
    15e4:	29 2f       	mov	r18, r25
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	fb 01       	movw	r30, r22
    15ea:	e2 0f       	add	r30, r18
    15ec:	f3 1f       	adc	r31, r19
    15ee:	90 81       	ld	r25, Z
    15f0:	91 34       	cpi	r25, 0x41	; 65
    15f2:	99 f4       	brne	.+38     	; 0x161a <Check_Input+0x78>
    15f4:	fb 01       	movw	r30, r22
    15f6:	e2 0f       	add	r30, r18
    15f8:	f3 1f       	adc	r31, r19
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	94 35       	cpi	r25, 0x54	; 84
    15fe:	09 f0       	breq	.+2      	; 0x1602 <Check_Input+0x60>
    1600:	0a c1       	rjmp	.+532    	; 0x1816 <Check_Input+0x274>
		{
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			if(data[rxReadPos+2] == CR[0]){
    1602:	fb 01       	movw	r30, r22
    1604:	e2 0f       	add	r30, r18
    1606:	f3 1f       	adc	r31, r19
    1608:	82 81       	ldd	r24, Z+2	; 0x02
    160a:	48 13       	cpse	r20, r24
    160c:	04 c1       	rjmp	.+520    	; 0x1816 <Check_Input+0x274>
				Transmit("OK\r",0 , strlen("OK\r"));
    160e:	43 e0       	ldi	r20, 0x03	; 3
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	89 ea       	ldi	r24, 0xA9	; 169
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	b4 dc       	rcall	.-1688   	; 0xf80 <Transmit>
    1618:	fe c0       	rjmp	.+508    	; 0x1816 <Check_Input+0x274>
				rxReadPos = rxWritePos;
			}

		}
		//Checking for RST<CR> command.
		else if((data[rxReadPos] == 82)&&(data[rxReadPos + 1] == 83)&&(data[rxReadPos + 2] == 84))		
    161a:	92 35       	cpi	r25, 0x52	; 82
    161c:	81 f4       	brne	.+32     	; 0x163e <Check_Input+0x9c>
    161e:	fb 01       	movw	r30, r22
    1620:	e2 0f       	add	r30, r18
    1622:	f3 1f       	adc	r31, r19
    1624:	91 81       	ldd	r25, Z+1	; 0x01
    1626:	93 35       	cpi	r25, 0x53	; 83
    1628:	09 f0       	breq	.+2      	; 0x162c <Check_Input+0x8a>
    162a:	f5 c0       	rjmp	.+490    	; 0x1816 <Check_Input+0x274>
    162c:	fb 01       	movw	r30, r22
    162e:	e2 0f       	add	r30, r18
    1630:	f3 1f       	adc	r31, r19
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	84 35       	cpi	r24, 0x54	; 84
    1636:	09 f0       	breq	.+2      	; 0x163a <Check_Input+0x98>
		{
			RST();
    1638:	ee c0       	rjmp	.+476    	; 0x1816 <Check_Input+0x274>
    163a:	b0 dc       	rcall	.-1696   	; 0xf9c <RST>
    163c:	ec c0       	rjmp	.+472    	; 0x1816 <Check_Input+0x274>
		}	
		// SP<SPACE>{B/W}<CR>
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 80))
    163e:	93 35       	cpi	r25, 0x53	; 83
    1640:	d9 f4       	brne	.+54     	; 0x1678 <Check_Input+0xd6>
    1642:	fb 01       	movw	r30, r22
    1644:	e2 0f       	add	r30, r18
    1646:	f3 1f       	adc	r31, r19
    1648:	91 81       	ldd	r25, Z+1	; 0x01
    164a:	90 35       	cpi	r25, 0x50	; 80
    164c:	09 f0       	breq	.+2      	; 0x1650 <Check_Input+0xae>
    164e:	64 c0       	rjmp	.+200    	; 0x1718 <Check_Input+0x176>
		{
			//(int)c - 65;
			if(data[rxReadPos + 3] == 66)		//B
    1650:	fb 01       	movw	r30, r22
    1652:	e2 0f       	add	r30, r18
    1654:	f3 1f       	adc	r31, r19
    1656:	83 81       	ldd	r24, Z+3	; 0x03
    1658:	82 34       	cpi	r24, 0x42	; 66
    165a:	19 f4       	brne	.+6      	; 0x1662 <Check_Input+0xc0>
				MyColor = 0;					//Saving myColor
    165c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <MyColor>
    1660:	05 c0       	rjmp	.+10     	; 0x166c <Check_Input+0xca>
			else if(data[rxReadPos + 3] == 87)  //W
    1662:	87 35       	cpi	r24, 0x57	; 87
    1664:	19 f4       	brne	.+6      	; 0x166c <Check_Input+0xca>
				MyColor = 1;					//Saving myColor
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <MyColor>
			Transmit("OK\r",0 , strlen("OK\r"));
    166c:	43 e0       	ldi	r20, 0x03	; 3
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	89 ea       	ldi	r24, 0xA9	; 169
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	85 dc       	rcall	.-1782   	; 0xf80 <Transmit>
			rxReadPos = rxWritePos;
    1676:	cf c0       	rjmp	.+414    	; 0x1816 <Check_Input+0x274>
		}
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
    1678:	9e 34       	cpi	r25, 0x4E	; 78
    167a:	d1 f5       	brne	.+116    	; 0x16f0 <Check_Input+0x14e>
    167c:	fb 01       	movw	r30, r22
    167e:	e2 0f       	add	r30, r18
    1680:	f3 1f       	adc	r31, r19
    1682:	81 81       	ldd	r24, Z+1	; 0x01
    1684:	87 34       	cpi	r24, 0x47	; 71
    1686:	09 f0       	breq	.+2      	; 0x168a <Check_Input+0xe8>
    1688:	c6 c0       	rjmp	.+396    	; 0x1816 <Check_Input+0x274>
		{
			//RST();
			move_done=0;
    168a:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <move_done>
    168e:	28 e0       	ldi	r18, 0x08	; 8
    1690:	30 e0       	ldi	r19, 0x00	; 0
			for(uint8_t i = 0 ; i <= 7 ; i++)
			{
				for(uint8_t y = 0 ; y <= 7 ; y++)
				{
					M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
    1692:	42 e0       	ldi	r20, 0x02	; 2
    1694:	10 c0       	rjmp	.+32     	; 0x16b6 <Check_Input+0x114>
    1696:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
    169a:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    169e:	e8 0f       	add	r30, r24
    16a0:	f9 1f       	adc	r31, r25
    16a2:	40 83       	st	Z, r20
    16a4:	01 96       	adiw	r24, 0x01	; 1
		{
			//RST();
			move_done=0;
			for(uint8_t i = 0 ; i <= 7 ; i++)
			{
				for(uint8_t y = 0 ; y <= 7 ; y++)
    16a6:	82 17       	cp	r24, r18
    16a8:	93 07       	cpc	r25, r19
    16aa:	a9 f7       	brne	.-22     	; 0x1696 <Check_Input+0xf4>
    16ac:	28 5f       	subi	r18, 0xF8	; 248
    16ae:	3f 4f       	sbci	r19, 0xFF	; 255
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
		{
			//RST();
			move_done=0;
			for(uint8_t i = 0 ; i <= 7 ; i++)
    16b0:	28 34       	cpi	r18, 0x48	; 72
    16b2:	31 05       	cpc	r19, r1
    16b4:	19 f0       	breq	.+6      	; 0x16bc <Check_Input+0x11a>
    16b6:	c9 01       	movw	r24, r18
    16b8:	08 97       	sbiw	r24, 0x08	; 8
    16ba:	ed cf       	rjmp	.-38     	; 0x1696 <Check_Input+0xf4>
				{
					M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
				}
			}
			//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
			M[3*8+3] = 1 ;
    16bc:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
    16c0:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	83 8f       	std	Z+27, r24	; 0x1b
			M[3*8+4] = 0 ;
    16c8:	14 8e       	std	Z+28, r1	; 0x1c
			M[4*8+3] = 0 ;
    16ca:	13 a2       	std	Z+35, r1	; 0x23
			M[4*8+4] = 1 ;
    16cc:	84 a3       	std	Z+36, r24	; 0x24
			if(MyColor == 0)// BLACK
    16ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <MyColor>
    16d2:	81 11       	cpse	r24, r1
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <Check_Input+0x146>
			{
				myTurn=1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
				Transmit("OK\r",0 , strlen("OK\r"));
    16dc:	43 e0       	ldi	r20, 0x03	; 3
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	89 ea       	ldi	r24, 0xA9	; 169
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	4d dc       	rcall	.-1894   	; 0xf80 <Transmit>
			}
			else           //WHITE
			{
				RST();  //FIXING bug with whites(rst contains OK Transmit)
    16e6:	97 c0       	rjmp	.+302    	; 0x1816 <Check_Input+0x274>
    16e8:	59 dc       	rcall	.-1870   	; 0xf9c <RST>
				myTurn=0;
    16ea:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			}
			
			//init_timer();
			//Transmit("OK\r",0 , strlen("OK\r"));           This is the 2nd OK, not important, RST contains OK transmit
			rxReadPos = rxWritePos;
    16ee:	93 c0       	rjmp	.+294    	; 0x1816 <Check_Input+0x274>
		}
		        //EG<CR>
		else if((data[rxReadPos] == 69)&&(data[rxReadPos + 1] == 71))
    16f0:	95 34       	cpi	r25, 0x45	; 69
    16f2:	41 f5       	brne	.+80     	; 0x1744 <Check_Input+0x1a2>
    16f4:	fb 01       	movw	r30, r22
    16f6:	e2 0f       	add	r30, r18
    16f8:	f3 1f       	adc	r31, r19
    16fa:	81 81       	ldd	r24, Z+1	; 0x01
    16fc:	87 34       	cpi	r24, 0x47	; 71
    16fe:	09 f0       	breq	.+2      	; 0x1702 <Check_Input+0x160>
		{
			//EndGameFlag = 1; // check this flag during waiting/calculating loop
			Transmit("OK\r",0 , strlen("OK\r"));
    1700:	8a c0       	rjmp	.+276    	; 0x1816 <Check_Input+0x274>
    1702:	43 e0       	ldi	r20, 0x03	; 3
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	89 ea       	ldi	r24, 0xA9	; 169
    1708:	90 e0       	ldi	r25, 0x00	; 0
			rxReadPos = rxWritePos;
    170a:	3a dc       	rcall	.-1932   	; 0xf80 <Transmit>
    170c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
    1710:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
			EndGame();
    1714:	19 dd       	rcall	.-1486   	; 0x1148 <EndGame>
    1716:	7f c0       	rjmp	.+254    	; 0x1816 <Check_Input+0x274>
		}
			 //ST<CR>
        else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 84))
    1718:	fb 01       	movw	r30, r22
    171a:	e2 0f       	add	r30, r18
    171c:	f3 1f       	adc	r31, r19
    171e:	81 81       	ldd	r24, Z+1	; 0x01
    1720:	84 35       	cpi	r24, 0x54	; 84
    1722:	09 f0       	breq	.+2      	; 0x1726 <Check_Input+0x184>
    1724:	78 c0       	rjmp	.+240    	; 0x1816 <Check_Input+0x274>
        {
			Time = data[rxReadPos+3] - '0';    //String to Int
    1726:	fb 01       	movw	r30, r22
    1728:	e2 0f       	add	r30, r18
    172a:	f3 1f       	adc	r31, r19
    172c:	83 81       	ldd	r24, Z+3	; 0x03
    172e:	80 53       	subi	r24, 0x30	; 48
    1730:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <Time>
			time_tmp=Time;
    1734:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <time_tmp>
			Transmit("OK\r",0 , strlen("OK\r"));
    1738:	43 e0       	ldi	r20, 0x03	; 3
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	89 ea       	ldi	r24, 0xA9	; 169
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	1f dc       	rcall	.-1986   	; 0xf80 <Transmit>
			rxReadPos = rxWritePos;
    1742:	69 c0       	rjmp	.+210    	; 0x1816 <Check_Input+0x274>
        }
			//MV<SP>{[A-H],[1-8]}<CR>
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 86))
    1744:	9d 34       	cpi	r25, 0x4D	; 77
    1746:	09 f0       	breq	.+2      	; 0x174a <Check_Input+0x1a8>
    1748:	41 c0       	rjmp	.+130    	; 0x17cc <Check_Input+0x22a>
    174a:	fb 01       	movw	r30, r22
    174c:	e2 0f       	add	r30, r18
    174e:	f3 1f       	adc	r31, r19
    1750:	81 81       	ldd	r24, Z+1	; 0x01
    1752:	86 35       	cpi	r24, 0x56	; 86
    1754:	09 f0       	breq	.+2      	; 0x1758 <Check_Input+0x1b6>
    1756:	5f c0       	rjmp	.+190    	; 0x1816 <Check_Input+0x274>
		{
				if((data[rxReadPos+3] >= 65)&&(data[rxReadPos+3] <= 72)&&(data[rxReadPos+4] >= 49)&&(data[rxReadPos+4] <= 56))  // Checking input
    1758:	f9 01       	movw	r30, r18
    175a:	33 96       	adiw	r30, 0x03	; 3
    175c:	e6 0f       	add	r30, r22
    175e:	f7 1f       	adc	r31, r23
    1760:	80 81       	ld	r24, Z
    1762:	81 54       	subi	r24, 0x41	; 65
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	08 f0       	brcs	.+2      	; 0x176a <Check_Input+0x1c8>
    1768:	56 c0       	rjmp	.+172    	; 0x1816 <Check_Input+0x274>
    176a:	2c 5f       	subi	r18, 0xFC	; 252
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	db 01       	movw	r26, r22
    1770:	a2 0f       	add	r26, r18
    1772:	b3 1f       	adc	r27, r19
    1774:	8c 91       	ld	r24, X
    1776:	81 53       	subi	r24, 0x31	; 49
    1778:	88 30       	cpi	r24, 0x08	; 8
    177a:	08 f0       	brcs	.+2      	; 0x177e <Check_Input+0x1dc>
    177c:	4c c0       	rjmp	.+152    	; 0x1816 <Check_Input+0x274>
				{
					enemy_pass = 0;
    177e:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <enemy_pass>
					uint8_t moveok = CheckMove(((int)data[rxReadPos+3] - 65),((data[rxReadPos+4] - '0') - 1), !MyColor, 1 );  //Check opponents move.
    1782:	41 e0       	ldi	r20, 0x01	; 1
    1784:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <MyColor>
    1788:	81 11       	cpse	r24, r1
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	6c 91       	ld	r22, X
    178e:	61 53       	subi	r22, 0x31	; 49
    1790:	80 81       	ld	r24, Z
    1792:	21 e0       	ldi	r18, 0x01	; 1
    1794:	81 54       	subi	r24, 0x41	; 65
					//If opponent's move is legal, send ok and reset timer, else 
					//send IL and wait for PC response, if response OK --> I win else(PL) --> I LOSE
					if(moveok == 1)		
    1796:	3b d9       	rcall	.-3466   	; 0xa0e <CheckMove>
    1798:	81 30       	cpi	r24, 0x01	; 1
					{
						// Saving opponent's move in my local game board
						//M[(((int)data[rxReadPos+3] - 65)*8) + (data[rxReadPos+4] - '0')] = !MyColor;  // Saving opponent's move in my local game board
						Transmit("OK\r",0 , strlen("OK\r"));
    179a:	51 f4       	brne	.+20     	; 0x17b0 <Check_Input+0x20e>
    179c:	43 e0       	ldi	r20, 0x03	; 3
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	89 ea       	ldi	r24, 0xA9	; 169
    17a2:	90 e0       	ldi	r25, 0x00	; 0
						init_timer();
    17a4:	ed db       	rcall	.-2086   	; 0xf80 <Transmit>
    17a6:	5a dd       	rcall	.-1356   	; 0x125c <init_timer>
						myTurn=1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    17ae:	33 c0       	rjmp	.+102    	; 0x1816 <Check_Input+0x274>
					}
					else{
						Transmit("IL\r",0 , strlen("IL\r"));
    17b0:	43 e0       	ldi	r20, 0x03	; 3
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	86 ec       	ldi	r24, 0xC6	; 198
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	e3 db       	rcall	.-2106   	; 0xf80 <Transmit>
    17ba:	81 e0       	ldi	r24, 0x01	; 1
						ILflag =  1;							//Waiting mode for PC's response
    17bc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>
    17c0:	82 e0       	ldi	r24, 0x02	; 2
						myTurn=2;
    17c2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    17c6:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <mt>
						mt=0;
    17ca:	25 c0       	rjmp	.+74     	; 0x1816 <Check_Input+0x274>
    17cc:	90 35       	cpi	r25, 0x50	; 80
						
				} 	
		}

		//PASS
		else if ((data[rxReadPos] == 80)&&(data[rxReadPos + 1] == 83))
    17ce:	89 f4       	brne	.+34     	; 0x17f2 <Check_Input+0x250>
    17d0:	fb 01       	movw	r30, r22
    17d2:	e2 0f       	add	r30, r18
    17d4:	f3 1f       	adc	r31, r19
    17d6:	81 81       	ldd	r24, Z+1	; 0x01
    17d8:	83 35       	cpi	r24, 0x53	; 83
    17da:	e9 f4       	brne	.+58     	; 0x1816 <Check_Input+0x274>
		{
			myTurn=1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			//This flag will help us end game in case we pass after opponent's pass
			enemy_pass = 1;   
    17e2:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <enemy_pass>
			Transmit("OK\r",0,strlen("OK\r"));
    17e6:	43 e0       	ldi	r20, 0x03	; 3
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	89 ea       	ldi	r24, 0xA9	; 169
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	c8 db       	rcall	.-2160   	; 0xf80 <Transmit>
    17f0:	12 c0       	rjmp	.+36     	; 0x1816 <Check_Input+0x274>
		}
		//WN

		else if((data[rxReadPos] == 87)&&(data[rxReadPos + 1] == 78)){
    17f2:	97 35       	cpi	r25, 0x57	; 87
    17f4:	81 f4       	brne	.+32     	; 0x1816 <Check_Input+0x274>
    17f6:	fb 01       	movw	r30, r22
    17f8:	e2 0f       	add	r30, r18
    17fa:	f3 1f       	adc	r31, r19
    17fc:	81 81       	ldd	r24, Z+1	; 0x01
    17fe:	8e 34       	cpi	r24, 0x4E	; 78
			AnnounceRes(1);  //announce i win with led1
    1800:	51 f4       	brne	.+20     	; 0x1816 <Check_Input+0x274>
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	79 dc       	rcall	.-1806   	; 0x10f8 <AnnounceRes>
			myTurn=2;			
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			Transmit("OK\r",0,strlen("OK\r"));
    180c:	43 e0       	ldi	r20, 0x03	; 3
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	89 ea       	ldi	r24, 0xA9	; 169
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	b5 db       	rcall	.-2198   	; 0xf80 <Transmit>
    1816:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
		}
		else
			NULL;
	rxReadPos=rxWritePos;		
	rxReadPos++;		//Ready for the next command (directs to the next letter, the one after <CR>) 
    181a:	8f 5f       	subi	r24, 0xFF	; 255
    181c:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
    1820:	08 95       	ret

00001822 <__vector_11>:
    1822:	1f 92       	push	r1

//////////////////////////////////////////////////////////////////////////////////////////



ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
    1824:	0f 92       	push	r0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	0f 92       	push	r0
    182a:	11 24       	eor	r1, r1
    182c:	2f 93       	push	r18
    182e:	3f 93       	push	r19
    1830:	4f 93       	push	r20
    1832:	5f 93       	push	r21
    1834:	6f 93       	push	r22
    1836:	7f 93       	push	r23
    1838:	8f 93       	push	r24
    183a:	9f 93       	push	r25
    183c:	af 93       	push	r26
    183e:	bf 93       	push	r27
    1840:	ef 93       	push	r30
    1842:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
    1844:	8c b1       	in	r24, 0x0c	; 12
    1846:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <rxWritePos>
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	e9 51       	subi	r30, 0x19	; 25
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
    1852:	5d 9b       	sbis	0x0b, 5	; 11
    1854:	fe cf       	rjmp	.-4      	; 0x1852 <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
    1856:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
    1858:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <rxWritePos>
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	e9 51       	subi	r30, 0x19	; 25
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	90 81       	ld	r25, Z
    1864:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <CR>
    1868:	98 13       	cpse	r25, r24
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <__vector_11+0x50>
		Check_Input(myrxbuffer);
    186c:	87 ee       	ldi	r24, 0xE7	; 231
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	98 de       	rcall	.-720    	; 0x15a2 <Check_Input>


	rxWritePos++;
    1872:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
    1876:	8f 5f       	subi	r24, 0xFF	; 255
    1878:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <rxWritePos>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
    187c:	ff 91       	pop	r31
    187e:	ef 91       	pop	r30
    1880:	bf 91       	pop	r27
    1882:	af 91       	pop	r26
    1884:	9f 91       	pop	r25
    1886:	8f 91       	pop	r24
    1888:	7f 91       	pop	r23
    188a:	6f 91       	pop	r22
    188c:	5f 91       	pop	r21
    188e:	4f 91       	pop	r20
    1890:	3f 91       	pop	r19
    1892:	2f 91       	pop	r18
    1894:	0f 90       	pop	r0
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	0f 90       	pop	r0
    189a:	1f 90       	pop	r1
    189c:	18 95       	reti

0000189e <init_serial>:
}


void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
    189e:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
    18a0:	83 e3       	ldi	r24, 0x33	; 51
    18a2:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
    18a4:	80 b5       	in	r24, 0x20	; 32
    18a6:	8f 7e       	andi	r24, 0xEF	; 239
    18a8:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
    18aa:	80 b5       	in	r24, 0x20	; 32
    18ac:	8f 7d       	andi	r24, 0xDF	; 223
    18ae:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
    18b0:	80 b5       	in	r24, 0x20	; 32
    18b2:	87 7f       	andi	r24, 0xF7	; 247
    18b4:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
    18b6:	86 e8       	ldi	r24, 0x86	; 134
    18b8:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
    18ba:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
    18bc:	8a b1       	in	r24, 0x0a	; 10
    18be:	88 61       	ori	r24, 0x18	; 24
    18c0:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
    18c2:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
    18c4:	57 9a       	sbi	0x0a, 7	; 10
    18c6:	08 95       	ret

000018c8 <main>:




int main (void)
{
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <main+0x6>
    18ce:	1f 92       	push	r1
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
	board_init();
    18d4:	0e 94 48 00 	call	0x90	; 0x90 <board_init>
	init_serial();
    18d8:	e2 df       	rcall	.-60     	; 0x189e <init_serial>
	init_leds();
    18da:	b9 dc       	rcall	.-1678   	; 0x124e <init_leds>
    18dc:	8d e0       	ldi	r24, 0x0D	; 13
	// delimiter carriage return
	strcpy(CR,"\xD");
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <enemy_pass>
    18e4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <CR>
    18e8:	c1 9a       	sbi	0x18, 1	; 24

	//Turning off leds(atmega16)
	PORTB |= (1<<PORTB1); 
    18ea:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB2);
    18ec:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= (1<<PORTB3);
    18ee:	80 e4       	ldi	r24, 0x40	; 64
		

	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	b9 d0       	rcall	.+370    	; 0x1a66 <malloc>
    18f4:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <M+0x1>
    18f8:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <M>
    18fc:	80 e4       	ldi	r24, 0x40	; 64
	MB = (uint8_t *)malloc(sizeof(uint8_t)*64);
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	b2 d0       	rcall	.+356    	; 0x1a66 <malloc>
    1902:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <MB+0x1>
    1906:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <MB>
    190a:	1a 82       	std	Y+2, r1	; 0x02
    190c:	19 82       	std	Y+1, r1	; 0x01

	volatile int i=0;
    190e:	1b 82       	std	Y+3, r1	; 0x03
    1910:	1a 82       	std	Y+2, r1	; 0x02

	}
	*/
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
    1912:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0 ; i <= 7 ; i++)
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	08 97       	sbiw	r24, 0x08	; 8
    191a:	34 f5       	brge	.+76     	; 0x1968 <main+0xa0>
    191c:	22 e0       	ldi	r18, 0x02	; 2
    191e:	1b 82       	std	Y+3, r1	; 0x03
	{
		for(y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
    1922:	88 30       	cpi	r24, 0x08	; 8
    1924:	c0 f4       	brcc	.+48     	; 0x1956 <main+0x8e>
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	9a 81       	ldd	r25, Y+2	; 0x02
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
    192a:	3b 81       	ldd	r19, Y+3	; 0x03
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	83 0f       	add	r24, r19
    193a:	91 1d       	adc	r25, r1
    193c:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
    1940:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    1944:	e8 0f       	add	r30, r24
    1946:	f9 1f       	adc	r31, r25
    1948:	20 83       	st	Z, r18
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	8f 5f       	subi	r24, 0xFF	; 255
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
    194e:	8b 83       	std	Y+3, r24	; 0x03
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	40 f3       	brcs	.-48     	; 0x1926 <main+0x5e>
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	9a 81       	ldd	r25, Y+2	; 0x02
	}
	*/
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	9a 83       	std	Y+2, r25	; 0x02
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	08 97       	sbiw	r24, 0x08	; 8
    1966:	dc f2       	brlt	.-74     	; 0x191e <main+0x56>
    1968:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
	M[3*8+3] = 1 ;
    196c:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	83 8f       	std	Z+27, r24	; 0x1b
    1974:	14 8e       	std	Z+28, r1	; 0x1c
    1976:	13 a2       	std	Z+35, r1	; 0x23
	M[3*8+4] = 0 ;
    1978:	84 a3       	std	Z+36, r24	; 0x24
	M[4*8+3] = 0 ;
    197a:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <rxReadPos>

	/////////////////////////////////////////////////////////////////////////////
	

	//buffer pointers init
	rxReadPos=0;
    197e:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <rxWritePos>
	rxWritePos=0;
    1982:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <ITflag>
	//flag Initialization 
	ITflag = 0;
    1986:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__data_end>
	ILflag = 0;
    198a:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <move_done>
	move_done = 0;
    198e:	92 e0       	ldi	r25, 0x02	; 2
    1990:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <myTurn>
	myTurn = 2;
    1994:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <MyColor>
	MyColor = 1;
    1998:	78 94       	sei
    199a:	12 e0       	ldi	r17, 0x02	; 2
	

	sei();
    199c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
	
	while(1){


		//Waiting for PC response - (ILLIGAL request)
		if(ILflag >= 1)
    19a0:	88 23       	and	r24, r24
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <main+0xde>
    19a4:	45 c0       	rjmp	.+138    	; 0x1a30 <main+0x168>
    19a6:	8f e1       	ldi	r24, 0x1F	; 31
    19a8:	9e e4       	ldi	r25, 0x4E	; 78
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <main+0xe2>
    19ae:	00 c0       	rjmp	.+0      	; 0x19b0 <main+0xe8>
    19b0:	00 00       	nop
    19b2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
		{
			//Transmit("Waiting OK for announcement\r",0,"Waiting OK for announcement\r");
			_delay_ms(10);
			while(1){		
				if(ILflag == 2){ // we received the response we were waiting
    19b6:	82 30       	cpi	r24, 0x02	; 2
    19b8:	e1 f7       	brne	.-8      	; 0x19b2 <main+0xea>
    19ba:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__data_end>
					ILflag = 0;
    19be:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <rxReadPos>
					break;
				}
			}
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75){ // "ok"
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	fc 01       	movw	r30, r24
    19c6:	e9 51       	subi	r30, 0x19	; 25
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	20 81       	ld	r18, Z
    19cc:	2f 34       	cpi	r18, 0x4F	; 79
    19ce:	71 f4       	brne	.+28     	; 0x19ec <main+0x124>
    19d0:	fc 01       	movw	r30, r24
    19d2:	e9 51       	subi	r30, 0x19	; 25
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	81 81       	ldd	r24, Z+1	; 0x01
    19d8:	8b 34       	cpi	r24, 0x4B	; 75
    19da:	31 f5       	brne	.+76     	; 0x1a28 <main+0x160>
    19dc:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
			   rxReadPos=rxWritePos;
    19e0:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
				AnnounceRes(1); //WIN - LED1
    19e6:	88 db       	rcall	.-2288   	; 0x10f8 <AnnounceRes>
    19e8:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
				myTurn=2;
    19ec:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <rxReadPos>
				
			
			}//future update : "else ILflag=1;" , wrong input avoidance

			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){ //"PL"
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	fc 01       	movw	r30, r24
    19f4:	e9 51       	subi	r30, 0x19	; 25
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	20 81       	ld	r18, Z
    19fa:	20 35       	cpi	r18, 0x50	; 80
    19fc:	a9 f4       	brne	.+42     	; 0x1a28 <main+0x160>
    19fe:	fc 01       	movw	r30, r24
    1a00:	e9 51       	subi	r30, 0x19	; 25
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	81 81       	ldd	r24, Z+1	; 0x01
    1a06:	8c 34       	cpi	r24, 0x4C	; 76
    1a08:	79 f4       	brne	.+30     	; 0x1a28 <main+0x160>
    1a0a:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <ITflag>
				if(ITflag==1)
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	21 f4       	brne	.+8      	; 0x1a1a <main+0x152>
    1a12:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <ITflag>
				{
					ITflag = 0;
    1a16:	22 dc       	rcall	.-1980   	; 0x125c <init_timer>
					init_timer();
    1a18:	07 c0       	rjmp	.+14     	; 0x1a28 <main+0x160>
    1a1a:	43 e0       	ldi	r20, 0x03	; 3
					
				}
				else
				{
					Transmit("QT\r",0 , strlen("QT\r"));
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	8a ec       	ldi	r24, 0xCA	; 202
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	ae da       	rcall	.-2724   	; 0xf80 <Transmit>
    1a24:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
					myTurn=2;
    1a28:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
				}						
					
			}	//future update : "else ILflag=1;" , wrong input avoidance		

			rxReadPos=rxWritePos;
    1a2c:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
    1a30:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
		
		
		if((myTurn == 0)&&(mt == 0)){
    1a34:	81 11       	cpse	r24, r1
    1a36:	0a c0       	rjmp	.+20     	; 0x1a4c <main+0x184>
    1a38:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <mt>
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	06 c0       	rjmp	.+12     	; 0x1a4c <main+0x184>
    1a40:	81 e0       	ldi	r24, 0x01	; 1
			//Possible speculation algo
			mt = 1;
    1a42:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <mt>
    1a46:	0a dc       	rcall	.-2028   	; 0x125c <init_timer>
			init_timer();
    1a48:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			myTurn = 0;
    1a4c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
			
		
		if(myTurn==1){ //When its avr's turn
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <main+0x18e>
    1a54:	a3 cf       	rjmp	.-186    	; 0x199c <main+0xd4>
			mt = 0; //reset flag for HIS turn			
    1a56:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <mt>
			init_timer(); //reset timer
    1a5a:	00 dc       	rcall	.-2048   	; 0x125c <init_timer>
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
			myTurn = 1;  //Important - collision with  init_timer
    1a5e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    1a62:	0e dc       	rcall	.-2020   	; 0x1280 <Algo>
			Algo();		//The actual algorithm
    1a64:	9b cf       	rjmp	.-202    	; 0x199c <main+0xd4>

00001a66 <malloc>:
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	82 30       	cpi	r24, 0x02	; 2
    1a70:	91 05       	cpc	r25, r1
    1a72:	10 f4       	brcc	.+4      	; 0x1a78 <malloc+0x12>
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <__flp>
    1a7c:	f0 91 ee 01 	lds	r31, 0x01EE	; 0x8001ee <__flp+0x1>
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	a0 e0       	ldi	r26, 0x00	; 0
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	30 97       	sbiw	r30, 0x00	; 0
    1a8a:	19 f1       	breq	.+70     	; 0x1ad2 <malloc+0x6c>
    1a8c:	40 81       	ld	r20, Z
    1a8e:	51 81       	ldd	r21, Z+1	; 0x01
    1a90:	02 81       	ldd	r16, Z+2	; 0x02
    1a92:	13 81       	ldd	r17, Z+3	; 0x03
    1a94:	48 17       	cp	r20, r24
    1a96:	59 07       	cpc	r21, r25
    1a98:	c8 f0       	brcs	.+50     	; 0x1acc <malloc+0x66>
    1a9a:	84 17       	cp	r24, r20
    1a9c:	95 07       	cpc	r25, r21
    1a9e:	69 f4       	brne	.+26     	; 0x1aba <malloc+0x54>
    1aa0:	10 97       	sbiw	r26, 0x00	; 0
    1aa2:	31 f0       	breq	.+12     	; 0x1ab0 <malloc+0x4a>
    1aa4:	12 96       	adiw	r26, 0x02	; 2
    1aa6:	0c 93       	st	X, r16
    1aa8:	12 97       	sbiw	r26, 0x02	; 2
    1aaa:	13 96       	adiw	r26, 0x03	; 3
    1aac:	1c 93       	st	X, r17
    1aae:	27 c0       	rjmp	.+78     	; 0x1afe <malloc+0x98>
    1ab0:	00 93 ed 01 	sts	0x01ED, r16	; 0x8001ed <__flp>
    1ab4:	10 93 ee 01 	sts	0x01EE, r17	; 0x8001ee <__flp+0x1>
    1ab8:	22 c0       	rjmp	.+68     	; 0x1afe <malloc+0x98>
    1aba:	21 15       	cp	r18, r1
    1abc:	31 05       	cpc	r19, r1
    1abe:	19 f0       	breq	.+6      	; 0x1ac6 <malloc+0x60>
    1ac0:	42 17       	cp	r20, r18
    1ac2:	53 07       	cpc	r21, r19
    1ac4:	18 f4       	brcc	.+6      	; 0x1acc <malloc+0x66>
    1ac6:	9a 01       	movw	r18, r20
    1ac8:	bd 01       	movw	r22, r26
    1aca:	ef 01       	movw	r28, r30
    1acc:	df 01       	movw	r26, r30
    1ace:	f8 01       	movw	r30, r16
    1ad0:	db cf       	rjmp	.-74     	; 0x1a88 <malloc+0x22>
    1ad2:	21 15       	cp	r18, r1
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	f9 f0       	breq	.+62     	; 0x1b16 <malloc+0xb0>
    1ad8:	28 1b       	sub	r18, r24
    1ada:	39 0b       	sbc	r19, r25
    1adc:	24 30       	cpi	r18, 0x04	; 4
    1ade:	31 05       	cpc	r19, r1
    1ae0:	80 f4       	brcc	.+32     	; 0x1b02 <malloc+0x9c>
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae6:	61 15       	cp	r22, r1
    1ae8:	71 05       	cpc	r23, r1
    1aea:	21 f0       	breq	.+8      	; 0x1af4 <malloc+0x8e>
    1aec:	fb 01       	movw	r30, r22
    1aee:	93 83       	std	Z+3, r25	; 0x03
    1af0:	82 83       	std	Z+2, r24	; 0x02
    1af2:	04 c0       	rjmp	.+8      	; 0x1afc <malloc+0x96>
    1af4:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <__flp+0x1>
    1af8:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <__flp>
    1afc:	fe 01       	movw	r30, r28
    1afe:	32 96       	adiw	r30, 0x02	; 2
    1b00:	44 c0       	rjmp	.+136    	; 0x1b8a <malloc+0x124>
    1b02:	fe 01       	movw	r30, r28
    1b04:	e2 0f       	add	r30, r18
    1b06:	f3 1f       	adc	r31, r19
    1b08:	81 93       	st	Z+, r24
    1b0a:	91 93       	st	Z+, r25
    1b0c:	22 50       	subi	r18, 0x02	; 2
    1b0e:	31 09       	sbc	r19, r1
    1b10:	39 83       	std	Y+1, r19	; 0x01
    1b12:	28 83       	st	Y, r18
    1b14:	3a c0       	rjmp	.+116    	; 0x1b8a <malloc+0x124>
    1b16:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <__brkval>
    1b1a:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <__brkval+0x1>
    1b1e:	23 2b       	or	r18, r19
    1b20:	41 f4       	brne	.+16     	; 0x1b32 <malloc+0xcc>
    1b22:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1b26:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1b2a:	30 93 ec 01 	sts	0x01EC, r19	; 0x8001ec <__brkval+0x1>
    1b2e:	20 93 eb 01 	sts	0x01EB, r18	; 0x8001eb <__brkval>
    1b32:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    1b36:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    1b3a:	21 15       	cp	r18, r1
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	41 f4       	brne	.+16     	; 0x1b50 <malloc+0xea>
    1b40:	2d b7       	in	r18, 0x3d	; 61
    1b42:	3e b7       	in	r19, 0x3e	; 62
    1b44:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1b48:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1b4c:	24 1b       	sub	r18, r20
    1b4e:	35 0b       	sbc	r19, r21
    1b50:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <__brkval>
    1b54:	f0 91 ec 01 	lds	r31, 0x01EC	; 0x8001ec <__brkval+0x1>
    1b58:	e2 17       	cp	r30, r18
    1b5a:	f3 07       	cpc	r31, r19
    1b5c:	a0 f4       	brcc	.+40     	; 0x1b86 <malloc+0x120>
    1b5e:	2e 1b       	sub	r18, r30
    1b60:	3f 0b       	sbc	r19, r31
    1b62:	28 17       	cp	r18, r24
    1b64:	39 07       	cpc	r19, r25
    1b66:	78 f0       	brcs	.+30     	; 0x1b86 <malloc+0x120>
    1b68:	ac 01       	movw	r20, r24
    1b6a:	4e 5f       	subi	r20, 0xFE	; 254
    1b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6e:	24 17       	cp	r18, r20
    1b70:	35 07       	cpc	r19, r21
    1b72:	48 f0       	brcs	.+18     	; 0x1b86 <malloc+0x120>
    1b74:	4e 0f       	add	r20, r30
    1b76:	5f 1f       	adc	r21, r31
    1b78:	50 93 ec 01 	sts	0x01EC, r21	; 0x8001ec <__brkval+0x1>
    1b7c:	40 93 eb 01 	sts	0x01EB, r20	; 0x8001eb <__brkval>
    1b80:	81 93       	st	Z+, r24
    1b82:	91 93       	st	Z+, r25
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <malloc+0x124>
    1b86:	e0 e0       	ldi	r30, 0x00	; 0
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	cf 01       	movw	r24, r30
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	08 95       	ret

00001b96 <free>:
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <free+0xa>
    1b9e:	81 c0       	rjmp	.+258    	; 0x1ca2 <free+0x10c>
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	32 97       	sbiw	r30, 0x02	; 2
    1ba4:	13 82       	std	Z+3, r1	; 0x03
    1ba6:	12 82       	std	Z+2, r1	; 0x02
    1ba8:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <__flp>
    1bac:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <__flp+0x1>
    1bb0:	10 97       	sbiw	r26, 0x00	; 0
    1bb2:	81 f4       	brne	.+32     	; 0x1bd4 <free+0x3e>
    1bb4:	20 81       	ld	r18, Z
    1bb6:	31 81       	ldd	r19, Z+1	; 0x01
    1bb8:	82 0f       	add	r24, r18
    1bba:	93 1f       	adc	r25, r19
    1bbc:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <__brkval>
    1bc0:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <__brkval+0x1>
    1bc4:	28 17       	cp	r18, r24
    1bc6:	39 07       	cpc	r19, r25
    1bc8:	51 f5       	brne	.+84     	; 0x1c1e <free+0x88>
    1bca:	f0 93 ec 01 	sts	0x01EC, r31	; 0x8001ec <__brkval+0x1>
    1bce:	e0 93 eb 01 	sts	0x01EB, r30	; 0x8001eb <__brkval>
    1bd2:	67 c0       	rjmp	.+206    	; 0x1ca2 <free+0x10c>
    1bd4:	ed 01       	movw	r28, r26
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	ce 17       	cp	r28, r30
    1bdc:	df 07       	cpc	r29, r31
    1bde:	40 f4       	brcc	.+16     	; 0x1bf0 <free+0x5a>
    1be0:	4a 81       	ldd	r20, Y+2	; 0x02
    1be2:	5b 81       	ldd	r21, Y+3	; 0x03
    1be4:	9e 01       	movw	r18, r28
    1be6:	41 15       	cp	r20, r1
    1be8:	51 05       	cpc	r21, r1
    1bea:	f1 f0       	breq	.+60     	; 0x1c28 <free+0x92>
    1bec:	ea 01       	movw	r28, r20
    1bee:	f5 cf       	rjmp	.-22     	; 0x1bda <free+0x44>
    1bf0:	d3 83       	std	Z+3, r29	; 0x03
    1bf2:	c2 83       	std	Z+2, r28	; 0x02
    1bf4:	40 81       	ld	r20, Z
    1bf6:	51 81       	ldd	r21, Z+1	; 0x01
    1bf8:	84 0f       	add	r24, r20
    1bfa:	95 1f       	adc	r25, r21
    1bfc:	c8 17       	cp	r28, r24
    1bfe:	d9 07       	cpc	r29, r25
    1c00:	59 f4       	brne	.+22     	; 0x1c18 <free+0x82>
    1c02:	88 81       	ld	r24, Y
    1c04:	99 81       	ldd	r25, Y+1	; 0x01
    1c06:	84 0f       	add	r24, r20
    1c08:	95 1f       	adc	r25, r21
    1c0a:	02 96       	adiw	r24, 0x02	; 2
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	9b 81       	ldd	r25, Y+3	; 0x03
    1c14:	93 83       	std	Z+3, r25	; 0x03
    1c16:	82 83       	std	Z+2, r24	; 0x02
    1c18:	21 15       	cp	r18, r1
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	29 f4       	brne	.+10     	; 0x1c28 <free+0x92>
    1c1e:	f0 93 ee 01 	sts	0x01EE, r31	; 0x8001ee <__flp+0x1>
    1c22:	e0 93 ed 01 	sts	0x01ED, r30	; 0x8001ed <__flp>
    1c26:	3d c0       	rjmp	.+122    	; 0x1ca2 <free+0x10c>
    1c28:	e9 01       	movw	r28, r18
    1c2a:	fb 83       	std	Y+3, r31	; 0x03
    1c2c:	ea 83       	std	Y+2, r30	; 0x02
    1c2e:	49 91       	ld	r20, Y+
    1c30:	59 91       	ld	r21, Y+
    1c32:	c4 0f       	add	r28, r20
    1c34:	d5 1f       	adc	r29, r21
    1c36:	ec 17       	cp	r30, r28
    1c38:	fd 07       	cpc	r31, r29
    1c3a:	61 f4       	brne	.+24     	; 0x1c54 <free+0xbe>
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	84 0f       	add	r24, r20
    1c42:	95 1f       	adc	r25, r21
    1c44:	02 96       	adiw	r24, 0x02	; 2
    1c46:	e9 01       	movw	r28, r18
    1c48:	99 83       	std	Y+1, r25	; 0x01
    1c4a:	88 83       	st	Y, r24
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	9b 83       	std	Y+3, r25	; 0x03
    1c52:	8a 83       	std	Y+2, r24	; 0x02
    1c54:	e0 e0       	ldi	r30, 0x00	; 0
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	12 96       	adiw	r26, 0x02	; 2
    1c5a:	8d 91       	ld	r24, X+
    1c5c:	9c 91       	ld	r25, X
    1c5e:	13 97       	sbiw	r26, 0x03	; 3
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <free+0xd4>
    1c64:	fd 01       	movw	r30, r26
    1c66:	dc 01       	movw	r26, r24
    1c68:	f7 cf       	rjmp	.-18     	; 0x1c58 <free+0xc2>
    1c6a:	8d 91       	ld	r24, X+
    1c6c:	9c 91       	ld	r25, X
    1c6e:	11 97       	sbiw	r26, 0x01	; 1
    1c70:	9d 01       	movw	r18, r26
    1c72:	2e 5f       	subi	r18, 0xFE	; 254
    1c74:	3f 4f       	sbci	r19, 0xFF	; 255
    1c76:	82 0f       	add	r24, r18
    1c78:	93 1f       	adc	r25, r19
    1c7a:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <__brkval>
    1c7e:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <__brkval+0x1>
    1c82:	28 17       	cp	r18, r24
    1c84:	39 07       	cpc	r19, r25
    1c86:	69 f4       	brne	.+26     	; 0x1ca2 <free+0x10c>
    1c88:	30 97       	sbiw	r30, 0x00	; 0
    1c8a:	29 f4       	brne	.+10     	; 0x1c96 <free+0x100>
    1c8c:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <__flp+0x1>
    1c90:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <__flp>
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <free+0x104>
    1c96:	13 82       	std	Z+3, r1	; 0x03
    1c98:	12 82       	std	Z+2, r1	; 0x02
    1c9a:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <__brkval+0x1>
    1c9e:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <__brkval>
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <_exit>:
    1ca8:	f8 94       	cli

00001caa <__stop_program>:
    1caa:	ff cf       	rjmp	.-2      	; 0x1caa <__stop_program>
