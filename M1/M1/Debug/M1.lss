
M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  000012be  00001352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000114  008000cc  008000cc  000013be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001256  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007df  00000000  00000000  0000273a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001404  00000000  00000000  00002f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00004320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fdeb  00000000  00000000  000045f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000105a  00000000  00000000  000143e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0001543d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  00015505  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	f9 c3       	rjmp	.+2034   	; 0x814 <__vector_8>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c0       	rjmp	.+98     	; 0x8c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0b c7       	rjmp	.+3606   	; 0xe44 <__vector_11>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c2       	rjmp	.+1418   	; 0x5c0 <__vector_13>
      36:	00 00       	nop
      38:	29 c0       	rjmp	.+82     	; 0x8c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3e       	cpi	r26, 0xE0	; 224
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	31 d7       	rcall	.+3682   	; 0xeea <main>
      88:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
      8e:	08 95       	ret

00000090 <CheckMove>:
 /*
 * This function transmits a single byte to the terminal
 */
 void Sendmsg(char *data){
	 if(UCSRA & (1 << UDRE)) //if UDR is empty(no data transfer at the moment)
	 UDR = data;
      90:	2f 92       	push	r2
      92:	3f 92       	push	r3
      94:	4f 92       	push	r4
      96:	5f 92       	push	r5
      98:	6f 92       	push	r6
      9a:	7f 92       	push	r7
      9c:	8f 92       	push	r8
      9e:	9f 92       	push	r9
      a0:	af 92       	push	r10
      a2:	bf 92       	push	r11
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
      b8:	2e 97       	sbiw	r28, 0x0e	; 14
      ba:	0f b6       	in	r0, 0x3f	; 63
      bc:	f8 94       	cli
      be:	de bf       	out	0x3e, r29	; 62
      c0:	0f be       	out	0x3f, r0	; 63
      c2:	cd bf       	out	0x3d, r28	; 61
      c4:	88 2e       	mov	r8, r24
      c6:	96 2e       	mov	r9, r22
      c8:	2d 83       	std	Y+5, r18	; 0x05
      ca:	48 2e       	mov	r4, r24
      cc:	51 2c       	mov	r5, r1
      ce:	c2 01       	movw	r24, r4
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	9a 83       	std	Y+2, r25	; 0x02
      d4:	89 83       	std	Y+1, r24	; 0x01
      d6:	32 01       	movw	r6, r4
      d8:	2f ef       	ldi	r18, 0xFF	; 255
      da:	62 1a       	sub	r6, r18
      dc:	72 0a       	sbc	r7, r18
      de:	89 81       	ldd	r24, Y+1	; 0x01
      e0:	9a 81       	ldd	r25, Y+2	; 0x02
      e2:	68 16       	cp	r6, r24
      e4:	79 06       	cpc	r7, r25
      e6:	0c f4       	brge	.+2      	; 0xea <CheckMove+0x5a>
      e8:	ee c1       	rjmp	.+988    	; 0x4c6 <__stack+0x67>
      ea:	26 2e       	mov	r2, r22
      ec:	31 2c       	mov	r3, r1
      ee:	c2 01       	movw	r24, r4
      f0:	88 0f       	add	r24, r24
      f2:	99 1f       	adc	r25, r25
      f4:	88 0f       	add	r24, r24
      f6:	99 1f       	adc	r25, r25
      f8:	88 0f       	add	r24, r24
      fa:	99 1f       	adc	r25, r25
      fc:	dc 01       	movw	r26, r24
      fe:	a2 0d       	add	r26, r2
     100:	b3 1d       	adc	r27, r3
     102:	bb 87       	std	Y+11, r27	; 0x0b
     104:	aa 87       	std	Y+10, r26	; 0x0a
     106:	c1 2c       	mov	r12, r1
     108:	1e 86       	std	Y+14, r1	; 0x0e
     10a:	f1 01       	movw	r30, r2
     10c:	31 97       	sbiw	r30, 0x01	; 1
     10e:	ff 83       	std	Y+7, r31	; 0x07
     110:	ee 83       	std	Y+6, r30	; 0x06
     112:	51 01       	movw	r10, r2
     114:	ff ef       	ldi	r31, 0xFF	; 255
     116:	af 1a       	sub	r10, r31
     118:	bf 0a       	sbc	r11, r31
     11a:	39 86       	std	Y+9, r3	; 0x09
     11c:	28 86       	std	Y+8, r2	; 0x08
     11e:	38 2c       	mov	r3, r8
     120:	8c 2c       	mov	r8, r12
     122:	26 2e       	mov	r2, r22
     124:	94 2e       	mov	r9, r20
     126:	89 81       	ldd	r24, Y+1	; 0x01
     128:	9a 81       	ldd	r25, Y+2	; 0x02
     12a:	99 23       	and	r25, r25
     12c:	0c f4       	brge	.+2      	; 0x130 <CheckMove+0xa0>
     12e:	bc c1       	rjmp	.+888    	; 0x4a8 <__stack+0x49>
     130:	89 81       	ldd	r24, Y+1	; 0x01
     132:	9a 81       	ldd	r25, Y+2	; 0x02
     134:	08 97       	sbiw	r24, 0x08	; 8
     136:	0c f0       	brlt	.+2      	; 0x13a <CheckMove+0xaa>
     138:	b7 c1       	rjmp	.+878    	; 0x4a8 <__stack+0x49>
     13a:	ce 80       	ldd	r12, Y+6	; 0x06
     13c:	df 80       	ldd	r13, Y+7	; 0x07
     13e:	dc 82       	std	Y+4, r13	; 0x04
     140:	cb 82       	std	Y+3, r12	; 0x03
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	9c 81       	ldd	r25, Y+4	; 0x04
     146:	a8 16       	cp	r10, r24
     148:	b9 06       	cpc	r11, r25
     14a:	0c f4       	brge	.+2      	; 0x14e <CheckMove+0xbe>
     14c:	ad c1       	rjmp	.+858    	; 0x4a8 <__stack+0x49>
     14e:	8b 81       	ldd	r24, Y+3	; 0x03
     150:	9c 81       	ldd	r25, Y+4	; 0x04
     152:	99 23       	and	r25, r25
     154:	0c f4       	brge	.+2      	; 0x158 <CheckMove+0xc8>
     156:	9d c1       	rjmp	.+826    	; 0x492 <__stack+0x33>
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	08 97       	sbiw	r24, 0x08	; 8
     15e:	0c f0       	brlt	.+2      	; 0x162 <CheckMove+0xd2>
     160:	98 c1       	rjmp	.+816    	; 0x492 <__stack+0x33>
     162:	60 91 d9 01 	lds	r22, 0x01D9	; 0x8001d9 <M>
     166:	70 91 da 01 	lds	r23, 0x01DA	; 0x8001da <M+0x1>
     16a:	e9 81       	ldd	r30, Y+1	; 0x01
     16c:	fa 81       	ldd	r31, Y+2	; 0x02
     16e:	8b 81       	ldd	r24, Y+3	; 0x03
     170:	9c 81       	ldd	r25, Y+4	; 0x04
     172:	ee 0f       	add	r30, r30
     174:	ff 1f       	adc	r31, r31
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	ee 0f       	add	r30, r30
     17c:	ff 1f       	adc	r31, r31
     17e:	e8 0f       	add	r30, r24
     180:	f9 1f       	adc	r31, r25
     182:	e6 0f       	add	r30, r22
     184:	f7 1f       	adc	r31, r23
     186:	80 81       	ld	r24, Z
     188:	89 15       	cp	r24, r9
     18a:	09 f4       	brne	.+2      	; 0x18e <CheckMove+0xfe>
     18c:	82 c1       	rjmp	.+772    	; 0x492 <__stack+0x33>
     18e:	e9 81       	ldd	r30, Y+1	; 0x01
     190:	fa 81       	ldd	r31, Y+2	; 0x02
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	9c 81       	ldd	r25, Y+4	; 0x04
     196:	ee 0f       	add	r30, r30
     198:	ff 1f       	adc	r31, r31
     19a:	ee 0f       	add	r30, r30
     19c:	ff 1f       	adc	r31, r31
     19e:	ee 0f       	add	r30, r30
     1a0:	ff 1f       	adc	r31, r31
     1a2:	e8 0f       	add	r30, r24
     1a4:	f9 1f       	adc	r31, r25
     1a6:	e6 0f       	add	r30, r22
     1a8:	f7 1f       	adc	r31, r23
     1aa:	80 81       	ld	r24, Z
     1ac:	82 30       	cpi	r24, 0x02	; 2
     1ae:	08 f0       	brcs	.+2      	; 0x1b2 <CheckMove+0x122>
     1b0:	70 c1       	rjmp	.+736    	; 0x492 <__stack+0x33>
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	9a 81       	ldd	r25, Y+2	; 0x02
     1b6:	48 16       	cp	r4, r24
     1b8:	59 06       	cpc	r5, r25
     1ba:	3c f0       	brlt	.+14     	; 0x1ca <CheckMove+0x13a>
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	9a 81       	ldd	r25, Y+2	; 0x02
     1c0:	48 16       	cp	r4, r24
     1c2:	59 06       	cpc	r5, r25
     1c4:	39 f0       	breq	.+14     	; 0x1d4 <CheckMove+0x144>
     1c6:	f1 2c       	mov	r15, r1
     1c8:	09 c0       	rjmp	.+18     	; 0x1dc <CheckMove+0x14c>
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f7 e0       	ldi	r31, 0x07	; 7
     1ce:	ff 2e       	mov	r15, r31
     1d0:	f0 2d       	mov	r31, r0
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <CheckMove+0x14c>
     1d4:	0f 2e       	mov	r0, r31
     1d6:	f9 e0       	ldi	r31, 0x09	; 9
     1d8:	ff 2e       	mov	r15, r31
     1da:	f0 2d       	mov	r31, r0
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	9c 81       	ldd	r25, Y+4	; 0x04
     1e0:	48 16       	cp	r4, r24
     1e2:	59 06       	cpc	r5, r25
     1e4:	4c f0       	brlt	.+18     	; 0x1f8 <CheckMove+0x168>
     1e6:	8b 81       	ldd	r24, Y+3	; 0x03
     1e8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ea:	28 85       	ldd	r18, Y+8	; 0x08
     1ec:	39 85       	ldd	r19, Y+9	; 0x09
     1ee:	28 17       	cp	r18, r24
     1f0:	39 07       	cpc	r19, r25
     1f2:	39 f0       	breq	.+14     	; 0x202 <CheckMove+0x172>
     1f4:	e1 2c       	mov	r14, r1
     1f6:	09 c0       	rjmp	.+18     	; 0x20a <CheckMove+0x17a>
     1f8:	0f 2e       	mov	r0, r31
     1fa:	f7 e0       	ldi	r31, 0x07	; 7
     1fc:	ef 2e       	mov	r14, r31
     1fe:	f0 2d       	mov	r31, r0
     200:	04 c0       	rjmp	.+8      	; 0x20a <CheckMove+0x17a>
     202:	0f 2e       	mov	r0, r31
     204:	f9 e0       	ldi	r31, 0x09	; 9
     206:	ef 2e       	mov	r14, r31
     208:	f0 2d       	mov	r31, r0
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	9a 81       	ldd	r25, Y+2	; 0x02
     20e:	18 2f       	mov	r17, r24
     210:	13 19       	sub	r17, r3
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	9c 81       	ldd	r25, Y+4	; 0x04
     216:	08 2f       	mov	r16, r24
     218:	02 19       	sub	r16, r2
     21a:	29 81       	ldd	r18, Y+1	; 0x01
     21c:	3a 81       	ldd	r19, Y+2	; 0x02
     21e:	42 2f       	mov	r20, r18
     220:	8b 81       	ldd	r24, Y+3	; 0x03
     222:	9c 81       	ldd	r25, Y+4	; 0x04
     224:	58 2f       	mov	r21, r24
     226:	ad 81       	ldd	r26, Y+5	; 0x05
     228:	aa 23       	and	r26, r26
     22a:	41 f1       	breq	.+80     	; 0x27c <CheckMove+0x1ec>
     22c:	33 27       	eor	r19, r19
     22e:	e1 2f       	mov	r30, r17
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	ef 0d       	add	r30, r15
     234:	f1 1d       	adc	r31, r1
     236:	2e 17       	cp	r18, r30
     238:	3f 07       	cpc	r19, r31
     23a:	09 f4       	brne	.+2      	; 0x23e <CheckMove+0x1ae>
     23c:	2a c1       	rjmp	.+596    	; 0x492 <__stack+0x33>
     23e:	99 27       	eor	r25, r25
     240:	a0 2f       	mov	r26, r16
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	6d 01       	movw	r12, r26
     246:	ce 0c       	add	r12, r14
     248:	d1 1c       	adc	r13, r1
     24a:	dd 86       	std	Y+13, r13	; 0x0d
     24c:	cc 86       	std	Y+12, r12	; 0x0c
     24e:	8c 15       	cp	r24, r12
     250:	9d 05       	cpc	r25, r13
     252:	09 f4       	brne	.+2      	; 0x256 <CheckMove+0x1c6>
     254:	1e c1       	rjmp	.+572    	; 0x492 <__stack+0x33>
     256:	22 0f       	add	r18, r18
     258:	33 1f       	adc	r19, r19
     25a:	22 0f       	add	r18, r18
     25c:	33 1f       	adc	r19, r19
     25e:	22 0f       	add	r18, r18
     260:	33 1f       	adc	r19, r19
     262:	82 0f       	add	r24, r18
     264:	93 1f       	adc	r25, r19
     266:	86 0f       	add	r24, r22
     268:	97 1f       	adc	r25, r23
     26a:	dc 01       	movw	r26, r24
     26c:	2c 91       	ld	r18, X
     26e:	22 30       	cpi	r18, 0x02	; 2
     270:	08 f0       	brcs	.+2      	; 0x274 <CheckMove+0x1e4>
     272:	0f c1       	rjmp	.+542    	; 0x492 <__stack+0x33>
     274:	8c 91       	ld	r24, X
     276:	98 12       	cpse	r9, r24
     278:	a2 c0       	rjmp	.+324    	; 0x3be <CheckMove+0x32e>
     27a:	91 c0       	rjmp	.+290    	; 0x39e <CheckMove+0x30e>
     27c:	33 27       	eor	r19, r19
     27e:	a1 2f       	mov	r26, r17
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	af 0d       	add	r26, r15
     284:	b1 1d       	adc	r27, r1
     286:	2a 17       	cp	r18, r26
     288:	3b 07       	cpc	r19, r27
     28a:	09 f4       	brne	.+2      	; 0x28e <CheckMove+0x1fe>
     28c:	02 c1       	rjmp	.+516    	; 0x492 <__stack+0x33>
     28e:	99 27       	eor	r25, r25
     290:	e0 2f       	mov	r30, r16
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	6f 01       	movw	r12, r30
     296:	ce 0c       	add	r12, r14
     298:	d1 1c       	adc	r13, r1
     29a:	dd 86       	std	Y+13, r13	; 0x0d
     29c:	cc 86       	std	Y+12, r12	; 0x0c
     29e:	8c 15       	cp	r24, r12
     2a0:	9d 05       	cpc	r25, r13
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <CheckMove+0x216>
     2a4:	f6 c0       	rjmp	.+492    	; 0x492 <__stack+0x33>
     2a6:	22 0f       	add	r18, r18
     2a8:	33 1f       	adc	r19, r19
     2aa:	22 0f       	add	r18, r18
     2ac:	33 1f       	adc	r19, r19
     2ae:	22 0f       	add	r18, r18
     2b0:	33 1f       	adc	r19, r19
     2b2:	82 0f       	add	r24, r18
     2b4:	93 1f       	adc	r25, r19
     2b6:	86 0f       	add	r24, r22
     2b8:	97 1f       	adc	r25, r23
     2ba:	fc 01       	movw	r30, r24
     2bc:	20 81       	ld	r18, Z
     2be:	22 30       	cpi	r18, 0x02	; 2
     2c0:	08 f0       	brcs	.+2      	; 0x2c4 <CheckMove+0x234>
     2c2:	e7 c0       	rjmp	.+462    	; 0x492 <__stack+0x33>
     2c4:	80 81       	ld	r24, Z
     2c6:	98 12       	cpse	r9, r24
     2c8:	15 c0       	rjmp	.+42     	; 0x2f4 <CheckMove+0x264>
     2ca:	56 c1       	rjmp	.+684    	; 0x578 <__stack+0x119>
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	88 0f       	add	r24, r24
     2d6:	99 1f       	adc	r25, r25
     2d8:	82 0f       	add	r24, r18
     2da:	93 1f       	adc	r25, r19
     2dc:	86 0f       	add	r24, r22
     2de:	97 1f       	adc	r25, r23
     2e0:	fc 01       	movw	r30, r24
     2e2:	20 81       	ld	r18, Z
     2e4:	22 30       	cpi	r18, 0x02	; 2
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <CheckMove+0x25a>
     2e8:	d4 c0       	rjmp	.+424    	; 0x492 <__stack+0x33>
     2ea:	80 81       	ld	r24, Z
     2ec:	98 16       	cp	r9, r24
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <CheckMove+0x262>
     2f0:	43 c1       	rjmp	.+646    	; 0x578 <__stack+0x119>
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <CheckMove+0x268>
     2f4:	cc 84       	ldd	r12, Y+12	; 0x0c
     2f6:	dd 84       	ldd	r13, Y+13	; 0x0d
     2f8:	50 0f       	add	r21, r16
     2fa:	41 0f       	add	r20, r17
     2fc:	84 2f       	mov	r24, r20
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	8a 17       	cp	r24, r26
     302:	9b 07       	cpc	r25, r27
     304:	09 f4       	brne	.+2      	; 0x308 <CheckMove+0x278>
     306:	c5 c0       	rjmp	.+394    	; 0x492 <__stack+0x33>
     308:	25 2f       	mov	r18, r21
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	2c 15       	cp	r18, r12
     30e:	3d 05       	cpc	r19, r13
     310:	e9 f6       	brne	.-70     	; 0x2cc <CheckMove+0x23c>
     312:	bf c0       	rjmp	.+382    	; 0x492 <__stack+0x33>
     314:	e9 16       	cp	r14, r25
     316:	09 f4       	brne	.+2      	; 0x31a <CheckMove+0x28a>
     318:	99 c0       	rjmp	.+306    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     31a:	f9 01       	movw	r30, r18
     31c:	ff 27       	eor	r31, r31
     31e:	ee 0f       	add	r30, r30
     320:	ff 1f       	adc	r31, r31
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	ee 0f       	add	r30, r30
     328:	ff 1f       	adc	r31, r31
     32a:	e4 0f       	add	r30, r20
     32c:	f1 1d       	adc	r31, r1
     32e:	e6 0f       	add	r30, r22
     330:	f7 1f       	adc	r31, r23
     332:	20 81       	ld	r18, Z
     334:	22 30       	cpi	r18, 0x02	; 2
     336:	08 f0       	brcs	.+2      	; 0x33a <CheckMove+0x2aa>
     338:	8c c0       	rjmp	.+280    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     33a:	20 81       	ld	r18, Z
     33c:	92 12       	cpse	r9, r18
     33e:	12 c0       	rjmp	.+36     	; 0x364 <CheckMove+0x2d4>
     340:	8b c0       	rjmp	.+278    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     342:	e9 2f       	mov	r30, r25
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	28 e0       	ldi	r18, 0x08	; 8
     348:	82 9f       	mul	r24, r18
     34a:	e0 0d       	add	r30, r0
     34c:	f1 1d       	adc	r31, r1
     34e:	11 24       	eor	r1, r1
     350:	e6 0f       	add	r30, r22
     352:	f7 1f       	adc	r31, r23
     354:	20 81       	ld	r18, Z
     356:	22 30       	cpi	r18, 0x02	; 2
     358:	08 f0       	brcs	.+2      	; 0x35c <CheckMove+0x2cc>
     35a:	81 c0       	rjmp	.+258    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     35c:	20 81       	ld	r18, Z
     35e:	92 16       	cp	r9, r18
     360:	09 f4       	brne	.+2      	; 0x364 <CheckMove+0x2d4>
     362:	80 c0       	rjmp	.+256    	; 0x464 <__stack+0x5>
     364:	83 94       	inc	r8
     366:	90 0f       	add	r25, r16
     368:	81 0f       	add	r24, r17
     36a:	f8 16       	cp	r15, r24
     36c:	09 f4       	brne	.+2      	; 0x370 <CheckMove+0x2e0>
     36e:	7d c0       	rjmp	.+250    	; 0x46a <__stack+0xb>
     370:	e9 12       	cpse	r14, r25
     372:	e7 cf       	rjmp	.-50     	; 0x342 <CheckMove+0x2b2>
     374:	31 e0       	ldi	r19, 0x01	; 1
     376:	3e 87       	std	Y+14, r19	; 0x0e
     378:	8c c0       	rjmp	.+280    	; 0x492 <__stack+0x33>
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	82 0f       	add	r24, r18
     388:	93 1f       	adc	r25, r19
     38a:	86 0f       	add	r24, r22
     38c:	97 1f       	adc	r25, r23
     38e:	dc 01       	movw	r26, r24
     390:	2c 91       	ld	r18, X
     392:	22 30       	cpi	r18, 0x02	; 2
     394:	08 f0       	brcs	.+2      	; 0x398 <CheckMove+0x308>
     396:	7d c0       	rjmp	.+250    	; 0x492 <__stack+0x33>
     398:	8c 91       	ld	r24, X
     39a:	98 12       	cpse	r9, r24
     39c:	12 c0       	rjmp	.+36     	; 0x3c2 <CheckMove+0x332>
     39e:	ea 85       	ldd	r30, Y+10	; 0x0a
     3a0:	fb 85       	ldd	r31, Y+11	; 0x0b
     3a2:	e6 0f       	add	r30, r22
     3a4:	f7 1f       	adc	r31, r23
     3a6:	90 82       	st	Z, r9
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	9a 81       	ldd	r25, Y+2	; 0x02
     3ac:	48 2f       	mov	r20, r24
     3ae:	6b 81       	ldd	r22, Y+3	; 0x03
     3b0:	7c 81       	ldd	r23, Y+4	; 0x04
     3b2:	56 2f       	mov	r21, r22
     3b4:	f8 12       	cpse	r15, r24
     3b6:	13 c0       	rjmp	.+38     	; 0x3de <CheckMove+0x34e>
     3b8:	b1 e0       	ldi	r27, 0x01	; 1
     3ba:	be 87       	std	Y+14, r27	; 0x0e
     3bc:	6a c0       	rjmp	.+212    	; 0x492 <__stack+0x33>
     3be:	cc 84       	ldd	r12, Y+12	; 0x0c
     3c0:	dd 84       	ldd	r13, Y+13	; 0x0d
     3c2:	50 0f       	add	r21, r16
     3c4:	41 0f       	add	r20, r17
     3c6:	84 2f       	mov	r24, r20
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	8e 17       	cp	r24, r30
     3cc:	9f 07       	cpc	r25, r31
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <CheckMove+0x342>
     3d0:	60 c0       	rjmp	.+192    	; 0x492 <__stack+0x33>
     3d2:	25 2f       	mov	r18, r21
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	2c 15       	cp	r18, r12
     3d8:	3d 05       	cpc	r19, r13
     3da:	79 f6       	brne	.-98     	; 0x37a <CheckMove+0x2ea>
     3dc:	5a c0       	rjmp	.+180    	; 0x492 <__stack+0x33>
     3de:	e6 16       	cp	r14, r22
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <CheckMove+0x354>
     3e2:	46 c0       	rjmp	.+140    	; 0x470 <__stack+0x11>
     3e4:	99 27       	eor	r25, r25
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	86 0f       	add	r24, r22
     3f4:	91 1d       	adc	r25, r1
     3f6:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <M>
     3fa:	30 91 da 01 	lds	r19, 0x01DA	; 0x8001da <M+0x1>
     3fe:	f9 01       	movw	r30, r18
     400:	e8 0f       	add	r30, r24
     402:	f9 1f       	adc	r31, r25
     404:	80 81       	ld	r24, Z
     406:	82 30       	cpi	r24, 0x02	; 2
     408:	b0 f5       	brcc	.+108    	; 0x476 <__stack+0x17>
     40a:	80 81       	ld	r24, Z
     40c:	98 12       	cpse	r9, r24
     40e:	14 c0       	rjmp	.+40     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     410:	35 c0       	rjmp	.+106    	; 0x47c <__stack+0x1d>
     412:	e5 2f       	mov	r30, r21
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	28 e0       	ldi	r18, 0x08	; 8
     418:	42 9f       	mul	r20, r18
     41a:	e0 0d       	add	r30, r0
     41c:	f1 1d       	adc	r31, r1
     41e:	11 24       	eor	r1, r1
     420:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <M>
     424:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <M+0x1>
     428:	e8 0f       	add	r30, r24
     42a:	f9 1f       	adc	r31, r25
     42c:	80 81       	ld	r24, Z
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	40 f5       	brcc	.+80     	; 0x482 <__stack+0x23>
     432:	80 81       	ld	r24, Z
     434:	98 16       	cp	r9, r24
     436:	41 f1       	breq	.+80     	; 0x488 <__stack+0x29>
     438:	90 82       	st	Z, r9
     43a:	50 0f       	add	r21, r16
     43c:	41 0f       	add	r20, r17
     43e:	f4 16       	cp	r15, r20
     440:	31 f1       	breq	.+76     	; 0x48e <__stack+0x2f>
     442:	e5 12       	cpse	r14, r21
     444:	e6 cf       	rjmp	.-52     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     446:	31 e0       	ldi	r19, 0x01	; 1
     448:	3e 87       	std	Y+14, r19	; 0x0e
     44a:	23 c0       	rjmp	.+70     	; 0x492 <__stack+0x33>
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	8e 87       	std	Y+14, r24	; 0x0e
     450:	20 c0       	rjmp	.+64     	; 0x492 <__stack+0x33>
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	9e 87       	std	Y+14, r25	; 0x0e
     456:	1d c0       	rjmp	.+58     	; 0x492 <__stack+0x33>
     458:	a1 e0       	ldi	r26, 0x01	; 1
     45a:	ae 87       	std	Y+14, r26	; 0x0e
     45c:	1a c0       	rjmp	.+52     	; 0x492 <__stack+0x33>
     45e:	b1 e0       	ldi	r27, 0x01	; 1
     460:	be 87       	std	Y+14, r27	; 0x0e
     462:	17 c0       	rjmp	.+46     	; 0x492 <__stack+0x33>
     464:	e1 e0       	ldi	r30, 0x01	; 1
     466:	ee 87       	std	Y+14, r30	; 0x0e
     468:	14 c0       	rjmp	.+40     	; 0x492 <__stack+0x33>
     46a:	f1 e0       	ldi	r31, 0x01	; 1
     46c:	fe 87       	std	Y+14, r31	; 0x0e
     46e:	11 c0       	rjmp	.+34     	; 0x492 <__stack+0x33>
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	2e 87       	std	Y+14, r18	; 0x0e
     474:	0e c0       	rjmp	.+28     	; 0x492 <__stack+0x33>
     476:	31 e0       	ldi	r19, 0x01	; 1
     478:	3e 87       	std	Y+14, r19	; 0x0e
     47a:	0b c0       	rjmp	.+22     	; 0x492 <__stack+0x33>
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	8e 87       	std	Y+14, r24	; 0x0e
     480:	08 c0       	rjmp	.+16     	; 0x492 <__stack+0x33>
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	9e 87       	std	Y+14, r25	; 0x0e
     486:	05 c0       	rjmp	.+10     	; 0x492 <__stack+0x33>
     488:	a1 e0       	ldi	r26, 0x01	; 1
     48a:	ae 87       	std	Y+14, r26	; 0x0e
     48c:	02 c0       	rjmp	.+4      	; 0x492 <__stack+0x33>
     48e:	b1 e0       	ldi	r27, 0x01	; 1
     490:	be 87       	std	Y+14, r27	; 0x0e
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	9c 81       	ldd	r25, Y+4	; 0x04
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	9c 83       	std	Y+4, r25	; 0x04
     49a:	8b 83       	std	Y+3, r24	; 0x03
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	9c 81       	ldd	r25, Y+4	; 0x04
     4a0:	a8 16       	cp	r10, r24
     4a2:	b9 06       	cpc	r11, r25
     4a4:	0c f0       	brlt	.+2      	; 0x4a8 <__stack+0x49>
     4a6:	53 ce       	rjmp	.-858    	; 0x14e <CheckMove+0xbe>
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	9a 81       	ldd	r25, Y+2	; 0x02
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	9a 81       	ldd	r25, Y+2	; 0x02
     4b6:	68 16       	cp	r6, r24
     4b8:	79 06       	cpc	r7, r25
     4ba:	0c f0       	brlt	.+2      	; 0x4be <__stack+0x5f>
     4bc:	34 ce       	rjmp	.-920    	; 0x126 <CheckMove+0x96>
     4be:	c8 2c       	mov	r12, r8
     4c0:	83 2c       	mov	r8, r3
     4c2:	92 2c       	mov	r9, r2
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__stack+0x6b>
     4c6:	c1 2c       	mov	r12, r1
     4c8:	1e 86       	std	Y+14, r1	; 0x0e
     4ca:	ed 81       	ldd	r30, Y+5	; 0x05
     4cc:	e1 11       	cpse	r30, r1
     4ce:	4e c0       	rjmp	.+156    	; 0x56c <__stack+0x10d>
     4d0:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <M>
     4d4:	30 91 da 01 	lds	r19, 0x01DA	; 0x8001da <M+0x1>
     4d8:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <vi_max>
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	ee 0f       	add	r30, r30
     4e8:	ff 1f       	adc	r31, r31
     4ea:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <vj_max>
     4ee:	e8 0f       	add	r30, r24
     4f0:	f1 1d       	adc	r31, r1
     4f2:	e2 0f       	add	r30, r18
     4f4:	f3 1f       	adc	r31, r19
     4f6:	60 81       	ld	r22, Z
     4f8:	44 0c       	add	r4, r4
     4fa:	55 1c       	adc	r5, r5
     4fc:	44 0c       	add	r4, r4
     4fe:	55 1c       	adc	r5, r5
     500:	44 0c       	add	r4, r4
     502:	55 1c       	adc	r5, r5
     504:	c2 01       	movw	r24, r4
     506:	89 0d       	add	r24, r9
     508:	91 1d       	adc	r25, r1
     50a:	fc 01       	movw	r30, r24
     50c:	e9 59       	subi	r30, 0x99	; 153
     50e:	ff 4f       	sbci	r31, 0xFF	; 255
     510:	e0 81       	ld	r30, Z
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	4c 2d       	mov	r20, r12
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	42 5f       	subi	r20, 0xF2	; 242
     51a:	5f 4f       	sbci	r21, 0xFF	; 255
     51c:	4e 0f       	add	r20, r30
     51e:	51 1d       	adc	r21, r1
     520:	46 17       	cp	r20, r22
     522:	57 07       	cpc	r21, r23
     524:	1c f1       	brlt	.+70     	; 0x56c <__stack+0x10d>
     526:	d9 01       	movw	r26, r18
     528:	a8 0f       	add	r26, r24
     52a:	b9 1f       	adc	r27, r25
     52c:	e2 5f       	subi	r30, 0xF2	; 242
     52e:	ce 0e       	add	r12, r30
     530:	cc 92       	st	X, r12
     532:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <vi_max>
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	ee 0f       	add	r30, r30
     53a:	ff 1f       	adc	r31, r31
     53c:	ee 0f       	add	r30, r30
     53e:	ff 1f       	adc	r31, r31
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <vj_max>
     548:	6f 01       	movw	r12, r30
     54a:	c8 0e       	add	r12, r24
     54c:	d1 1c       	adc	r13, r1
     54e:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <M>
     552:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <M+0x1>
     556:	ec 0d       	add	r30, r12
     558:	fd 1d       	adc	r31, r13
     55a:	80 81       	ld	r24, Z
     55c:	83 30       	cpi	r24, 0x03	; 3
     55e:	10 f0       	brcs	.+4      	; 0x564 <__stack+0x105>
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	80 83       	st	Z, r24
     564:	80 92 d0 00 	sts	0x00D0, r8	; 0x8000d0 <vi_max>
     568:	90 92 cf 00 	sts	0x00CF, r9	; 0x8000cf <vj_max>
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	2e 85       	ldd	r18, Y+14	; 0x0e
     570:	21 30       	cpi	r18, 0x01	; 1
     572:	69 f0       	breq	.+26     	; 0x58e <__stack+0x12f>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0b c0       	rjmp	.+22     	; 0x58e <__stack+0x12f>
     578:	29 81       	ldd	r18, Y+1	; 0x01
     57a:	3a 81       	ldd	r19, Y+2	; 0x02
     57c:	82 2f       	mov	r24, r18
     57e:	4b 81       	ldd	r20, Y+3	; 0x03
     580:	5c 81       	ldd	r21, Y+4	; 0x04
     582:	94 2f       	mov	r25, r20
     584:	f2 12       	cpse	r15, r18
     586:	c6 ce       	rjmp	.-628    	; 0x314 <CheckMove+0x284>
     588:	31 e0       	ldi	r19, 0x01	; 1
     58a:	3e 87       	std	Y+14, r19	; 0x0e
     58c:	82 cf       	rjmp	.-252    	; 0x492 <__stack+0x33>
     58e:	2e 96       	adiw	r28, 0x0e	; 14
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	de bf       	out	0x3e, r29	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	cd bf       	out	0x3d, r28	; 61
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	ff 90       	pop	r15
     5a4:	ef 90       	pop	r14
     5a6:	df 90       	pop	r13
     5a8:	cf 90       	pop	r12
     5aa:	bf 90       	pop	r11
     5ac:	af 90       	pop	r10
     5ae:	9f 90       	pop	r9
     5b0:	8f 90       	pop	r8
     5b2:	7f 90       	pop	r7
     5b4:	6f 90       	pop	r6
     5b6:	5f 90       	pop	r5
     5b8:	4f 90       	pop	r4
     5ba:	3f 90       	pop	r3
     5bc:	2f 90       	pop	r2
     5be:	08 95       	ret

000005c0 <__vector_13>:
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	0f 90       	pop	r0
     5d0:	1f 90       	pop	r1
     5d2:	18 95       	reti

000005d4 <Transmit>:
 }


 // TRANSMIT function : transmits a string

 void Transmit(char data[],uint8_t x,uint8_t y){
     5d4:	9c 01       	movw	r18, r24
	 

	 for (uint8_t i = x ; i < y  ; i++ ){
     5d6:	64 17       	cp	r22, r20
     5d8:	50 f4       	brcc	.+20     	; 0x5ee <Transmit+0x1a>
		 while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
     5da:	5d 9b       	sbis	0x0b, 5	; 11
     5dc:	fe cf       	rjmp	.-4      	; 0x5da <Transmit+0x6>
		 ;
		 UDR = data[i];
     5de:	f9 01       	movw	r30, r18
     5e0:	e6 0f       	add	r30, r22
     5e2:	f1 1d       	adc	r31, r1
     5e4:	90 81       	ld	r25, Z
     5e6:	9c b9       	out	0x0c, r25	; 12
 // TRANSMIT function : transmits a string

 void Transmit(char data[],uint8_t x,uint8_t y){
	 

	 for (uint8_t i = x ; i < y  ; i++ ){
     5e8:	6f 5f       	subi	r22, 0xFF	; 255
     5ea:	46 13       	cpse	r20, r22
     5ec:	f6 cf       	rjmp	.-20     	; 0x5da <Transmit+0x6>
     5ee:	08 95       	ret

000005f0 <RST>:

// RESET FUNCTION: initializing game board and turning off leds
void RST(void)
{
	
	ILflag =0;
     5f0:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
	move_done=0;
     5f4:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <move_done>
	myTurn=2;
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
	PORTB |= (1<<PORTB1);
     5fe:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
     600:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
     602:	c3 9a       	sbi	0x18, 3	; 24

	mt = 0; //flag reset
     604:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <mt>
	myTurn=2;
     608:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     60c:	28 e0       	ldi	r18, 0x08	; 8
     60e:	30 e0       	ldi	r19, 0x00	; 0
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = 2 ; // 0 == black , 1 == white, 2 == empty
     610:	42 e0       	ldi	r20, 0x02	; 2
     612:	10 c0       	rjmp	.+32     	; 0x634 <RST+0x44>
     614:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <M>
     618:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <M+0x1>
     61c:	e8 0f       	add	r30, r24
     61e:	f9 1f       	adc	r31, r25
     620:	40 83       	st	Z, r20
     622:	01 96       	adiw	r24, 0x01	; 1
	mt = 0; //flag reset
	myTurn=2;
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
     624:	82 17       	cp	r24, r18
     626:	93 07       	cpc	r25, r19
     628:	a9 f7       	brne	.-22     	; 0x614 <RST+0x24>
     62a:	28 5f       	subi	r18, 0xF8	; 248
     62c:	3f 4f       	sbci	r19, 0xFF	; 255
	PORTB |= (1<<PORTB3);

	mt = 0; //flag reset
	myTurn=2;
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
     62e:	28 34       	cpi	r18, 0x48	; 72
     630:	31 05       	cpc	r19, r1
     632:	19 f0       	breq	.+6      	; 0x63a <RST+0x4a>
     634:	c9 01       	movw	r24, r18
     636:	08 97       	sbiw	r24, 0x08	; 8
     638:	ed cf       	rjmp	.-38     	; 0x614 <RST+0x24>
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = 2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	M[3*8+3] = 1 ;
     63a:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <M>
     63e:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <M+0x1>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	83 8f       	std	Z+27, r24	; 0x1b
	M[3*8+4] = 0 ;
     646:	14 8e       	std	Z+28, r1	; 0x1c
	M[4*8+3] = 0 ;
     648:	13 a2       	std	Z+35, r1	; 0x23
	M[4*8+4] = 1 ;
     64a:	84 a3       	std	Z+36, r24	; 0x24
	enemy_pass = 0;
     64c:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <enemy_pass>

	TCCR1B = 0x00;         //Clearing timer -- total reset
     650:	1e bc       	out	0x2e, r1	; 46
	TIMSK = (1 << TOIE1) ; //Overflow interrupts -- disabled
     652:	84 e0       	ldi	r24, 0x04	; 4
     654:	89 bf       	out	0x39, r24	; 57
	Transmit("OK\r",0 , strlen("OK\r"));
     656:	43 e0       	ldi	r20, 0x03	; 3
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	87 ea       	ldi	r24, 0xA7	; 167
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	ba df       	rcall	.-140    	; 0x5d4 <Transmit>
	rxReadPos = rxWritePos;
     660:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rxWritePos>
     664:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <rxReadPos>
     668:	08 95       	ret

0000066a <Board>:
	return 0;	
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Visualization of the board
void Board(){
     66a:	bf 92       	push	r11
     66c:	cf 92       	push	r12
     66e:	df 92       	push	r13
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	00 d0       	rcall	.+0      	; 0x67e <Board+0x14>
     67e:	00 d0       	rcall	.+0      	; 0x680 <Board+0x16>
     680:	00 d0       	rcall	.+0      	; 0x682 <Board+0x18>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	8b ea       	ldi	r24, 0xAB	; 171
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a2 df       	rcall	.-188    	; 0x5d4 <Transmit>
     690:	11 e3       	ldi	r17, 0x31	; 49
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
     692:	0f 2e       	mov	r0, r31
     694:	fc e7       	ldi	r31, 0x7C	; 124
     696:	ff 2e       	mov	r15, r31
     698:	f0 2d       	mov	r31, r0
		mymove[1] = '\x20';
     69a:	00 e2       	ldi	r16, 0x20	; 32
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
     69c:	f9 82       	std	Y+1, r15	; 0x01
		mymove[1] = '\x20';
     69e:	0a 83       	std	Y+2, r16	; 0x02
		mymove[2] = s1+1+'0';
     6a0:	1b 83       	std	Y+3, r17	; 0x03
		mymove[3] = '\x20';
     6a2:	0c 83       	std	Y+4, r16	; 0x04
		Transmit(mymove,0,4);
     6a4:	44 e0       	ldi	r20, 0x04	; 4
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	93 df       	rcall	.-218    	; 0x5d4 <Transmit>
     6ae:	1f 5f       	subi	r17, 0xFF	; 255
//Visualization of the board
void Board(){
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
     6b0:	19 33       	cpi	r17, 0x39	; 57
     6b2:	a1 f7       	brne	.-24     	; 0x69c <Board+0x32>
     6b4:	00 e0       	ldi	r16, 0x00	; 0
     6b6:	10 e0       	ldi	r17, 0x00	; 0
     6b8:	0f 2e       	mov	r0, r31
     6ba:	f1 e4       	ldi	r31, 0x41	; 65
     6bc:	bf 2e       	mov	r11, r31
     6be:	f0 2d       	mov	r31, r0
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
     6c0:	0f 2e       	mov	r0, r31
     6c2:	fc e7       	ldi	r31, 0x7C	; 124
     6c4:	cf 2e       	mov	r12, r31
     6c6:	f0 2d       	mov	r31, r0
			mymove[1] = '\x20';
     6c8:	68 94       	set
     6ca:	dd 24       	eor	r13, r13
     6cc:	d5 f8       	bld	r13, 5
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
     6ce:	42 e0       	ldi	r20, 0x02	; 2
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	8d ea       	ldi	r24, 0xAD	; 173
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	7e df       	rcall	.-260    	; 0x5d4 <Transmit>
		mymove[0] = s1+65;
     6d8:	b9 82       	std	Y+1, r11	; 0x01
		Transmit(mymove,0,1);
     6da:	41 e0       	ldi	r20, 0x01	; 1
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	ce 01       	movw	r24, r28
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	78 df       	rcall	.-272    	; 0x5d4 <Transmit>
     6e4:	78 01       	movw	r14, r16
     6e6:	88 e0       	ldi	r24, 0x08	; 8
     6e8:	e8 0e       	add	r14, r24
     6ea:	f1 1c       	adc	r15, r1
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
     6ec:	c9 82       	std	Y+1, r12	; 0x01
			mymove[1] = '\x20';
     6ee:	da 82       	std	Y+2, r13	; 0x02
			mymove[2] = M[s1*8 + s2]+'0';
     6f0:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <M>
     6f4:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <M+0x1>
     6f8:	e0 0f       	add	r30, r16
     6fa:	f1 1f       	adc	r31, r17
     6fc:	80 81       	ld	r24, Z
     6fe:	80 5d       	subi	r24, 0xD0	; 208
     700:	8b 83       	std	Y+3, r24	; 0x03
			mymove[3] = '\x20';
     702:	dc 82       	std	Y+4, r13	; 0x04
			Transmit(mymove,0,4);
     704:	44 e0       	ldi	r20, 0x04	; 4
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	63 df       	rcall	.-314    	; 0x5d4 <Transmit>
     70e:	0f 5f       	subi	r16, 0xFF	; 255
     710:	1f 4f       	sbci	r17, 0xFF	; 255
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
     712:	0e 15       	cp	r16, r14
     714:	1f 05       	cpc	r17, r15
     716:	51 f7       	brne	.-44     	; 0x6ec <Board+0x82>
     718:	b3 94       	inc	r11
     71a:	87 01       	movw	r16, r14
		mymove[1] = '\x20';
		mymove[2] = s1+1+'0';
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
     71c:	00 34       	cpi	r16, 0x40	; 64
     71e:	11 05       	cpc	r17, r1
			mymove[2] = M[s1*8 + s2]+'0';
			mymove[3] = '\x20';
			Transmit(mymove,0,4);
		}
	}
	Transmit("\n\r",0,strlen("\n\r"));
     720:	b1 f6       	brne	.-84     	; 0x6ce <Board+0x64>
     722:	42 e0       	ldi	r20, 0x02	; 2
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	8d ea       	ldi	r24, 0xAD	; 173
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	54 df       	rcall	.-344    	; 0x5d4 <Transmit>
}
     72c:	26 96       	adiw	r28, 0x06	; 6
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	08 95       	ret

0000074c <AnnounceRes>:


void AnnounceRes(uint8_t res)
{
	//after announcement, timer interrupts are disabled.
	TIMSK &= ~(1 << TOIE1) ;
     74c:	99 b7       	in	r25, 0x39	; 57
     74e:	9b 7f       	andi	r25, 0xFB	; 251
     750:	99 bf       	out	0x39, r25	; 57
	if(res == 1)
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	51 f4       	brne	.+20     	; 0x76a <AnnounceRes+0x1e>
	{
		Transmit("WN\r",0,strlen("WN\r"));
     756:	43 e0       	ldi	r20, 0x03	; 3
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	80 eb       	ldi	r24, 0xB0	; 176
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	3a df       	rcall	.-396    	; 0x5d4 <Transmit>
		PORTB ^= (1<<PORTB1);             //Toggle LED
     760:	98 b3       	in	r25, 0x18	; 24
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	89 27       	eor	r24, r25
     766:	88 bb       	out	0x18, r24	; 24
     768:	15 c0       	rjmp	.+42     	; 0x794 <AnnounceRes+0x48>
	}
	else if(res == 0)
     76a:	81 11       	cpse	r24, r1
     76c:	0a c0       	rjmp	.+20     	; 0x782 <AnnounceRes+0x36>
	{
		Transmit("LS\r",0,strlen("LS\r"));
     76e:	43 e0       	ldi	r20, 0x03	; 3
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	84 eb       	ldi	r24, 0xB4	; 180
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	2e df       	rcall	.-420    	; 0x5d4 <Transmit>
		PORTB ^= (1<<PORTB2);			//Toggle LED
     778:	98 b3       	in	r25, 0x18	; 24
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	89 27       	eor	r24, r25
     77e:	88 bb       	out	0x18, r24	; 24
     780:	09 c0       	rjmp	.+18     	; 0x794 <AnnounceRes+0x48>
	}
	else
	{
		Transmit("TE\r",0,strlen("TE\r"));
     782:	43 e0       	ldi	r20, 0x03	; 3
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	88 eb       	ldi	r24, 0xB8	; 184
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	24 df       	rcall	.-440    	; 0x5d4 <Transmit>
		PORTB ^= (1<<PORTB3);			//Toggle LED
     78c:	98 b3       	in	r25, 0x18	; 24
     78e:	88 e0       	ldi	r24, 0x08	; 8
     790:	89 27       	eor	r24, r25
     792:	88 bb       	out	0x18, r24	; 24
	}
	TCCR1B = 0x00;         //Clearing timer -- total reset
     794:	1e bc       	out	0x2e, r1	; 46
	TIMSK = (1 << TOIE1) ; //Overflow interrupts -- disabled
     796:	84 e0       	ldi	r24, 0x04	; 4
     798:	89 bf       	out	0x39, r24	; 57
     79a:	08 95       	ret

0000079c <EndGame>:

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
     79c:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <M>
     7a0:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <M+0x1>
     7a4:	bf 01       	movw	r22, r30
     7a6:	60 5c       	subi	r22, 0xC0	; 192
     7a8:	7f 4f       	sbci	r23, 0xFF	; 255
/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;
     7aa:	40 e0       	ldi	r20, 0x00	; 0

/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	11 c0       	rjmp	.+34     	; 0x7d2 <EndGame+0x36>

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
     7b0:	df 01       	movw	r26, r30
     7b2:	80 81       	ld	r24, Z
     7b4:	81 11       	cpse	r24, r1
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <EndGame+0x1e>
			b++;
     7b8:	9f 5f       	subi	r25, 0xFF	; 255
			if(M[i*8 + y] == 1)
     7ba:	8c 91       	ld	r24, X
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	09 f4       	brne	.+2      	; 0x7c2 <EndGame+0x26>
			w++;
     7c0:	4f 5f       	subi	r20, 0xFF	; 255
     7c2:	31 96       	adiw	r30, 0x01	; 1
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
     7c4:	2e 17       	cp	r18, r30
     7c6:	3f 07       	cpc	r19, r31
     7c8:	99 f7       	brne	.-26     	; 0x7b0 <EndGame+0x14>
     7ca:	f9 01       	movw	r30, r18
//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
     7cc:	26 17       	cp	r18, r22
     7ce:	37 07       	cpc	r19, r23
     7d0:	21 f0       	breq	.+8      	; 0x7da <EndGame+0x3e>
     7d2:	9f 01       	movw	r18, r30
     7d4:	28 5f       	subi	r18, 0xF8	; 248
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	eb cf       	rjmp	.-42     	; 0x7b0 <EndGame+0x14>
			b++;
			if(M[i*8 + y] == 1)
			w++;
		}
	}
	if(b == w)
     7da:	94 13       	cpse	r25, r20
     7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <EndGame+0x48>
	{
		AnnounceRes(2);	//TIE -LED3
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	b5 df       	rcall	.-150    	; 0x74c <AnnounceRes>
     7e2:	14 c0       	rjmp	.+40     	; 0x80c <EndGame+0x70>

	}
	else if(b>w)
     7e4:	49 17       	cp	r20, r25
     7e6:	50 f4       	brcc	.+20     	; 0x7fc <EndGame+0x60>
	{
		if(MyColor == 0) //black
     7e8:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <MyColor>
     7ec:	81 11       	cpse	r24, r1
     7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <EndGame+0x5a>
		AnnounceRes(1);//WIN - LED1
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	ac df       	rcall	.-168    	; 0x74c <AnnounceRes>
     7f4:	0b c0       	rjmp	.+22     	; 0x80c <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	a9 df       	rcall	.-174    	; 0x74c <AnnounceRes>
     7fa:	08 c0       	rjmp	.+16     	; 0x80c <EndGame+0x70>
     7fc:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <MyColor>
	}
	else
	{
		if(MyColor == 1) //white
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	11 f4       	brne	.+4      	; 0x808 <EndGame+0x6c>
		AnnounceRes(1);//WIN - LED1
     804:	a3 df       	rcall	.-186    	; 0x74c <AnnounceRes>
     806:	02 c0       	rjmp	.+4      	; 0x80c <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	a0 df       	rcall	.-192    	; 0x74c <AnnounceRes>
     80c:	82 e0       	ldi	r24, 0x02	; 2
	}

	//after announcement wait for ok in while loop(set move_done = 1)
	myTurn = 2;
     80e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     812:	08 95       	ret

00000814 <__vector_8>:
     814:	1f 92       	push	r1
}



 ISR (TIMER1_OVF_vect)    // Timer1 ISR
 {
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	2f 93       	push	r18
     820:	3f 93       	push	r19
     822:	4f 93       	push	r20
     824:	5f 93       	push	r21
     826:	6f 93       	push	r22
     828:	7f 93       	push	r23
     82a:	8f 93       	push	r24
     82c:	9f 93       	push	r25
     82e:	af 93       	push	r26
     830:	bf 93       	push	r27
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
	 if(myTurn==1){
     836:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	19 f4       	brne	.+6      	; 0x844 <__vector_8+0x30>
		 // coming soon 
		 //last sec MM will save the day..eventually.		 
		 myTurn =0;
     83e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
     842:	0e c0       	rjmp	.+28     	; 0x860 <__vector_8+0x4c>
		// move_done = 1;
	 } 
	 else if(myTurn == 0){
     844:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     848:	81 11       	cpse	r24, r1
     84a:	0a c0       	rjmp	.+20     	; 0x860 <__vector_8+0x4c>
		  Transmit("IT\r",0,strlen("IT\r"));
     84c:	43 e0       	ldi	r20, 0x03	; 3
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	8c eb       	ldi	r24, 0xBC	; 188
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	bf de       	rcall	.-642    	; 0x5d4 <Transmit>
		  ITflag = 1;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <ITflag>
		  ILflag = 1;
     85c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
	 }	 
 }
     860:	ff 91       	pop	r31
     862:	ef 91       	pop	r30
     864:	bf 91       	pop	r27
     866:	af 91       	pop	r26
     868:	9f 91       	pop	r25
     86a:	8f 91       	pop	r24
     86c:	7f 91       	pop	r23
     86e:	6f 91       	pop	r22
     870:	5f 91       	pop	r21
     872:	4f 91       	pop	r20
     874:	3f 91       	pop	r19
     876:	2f 91       	pop	r18
     878:	0f 90       	pop	r0
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	0f 90       	pop	r0
     87e:	1f 90       	pop	r1
     880:	18 95       	reti

00000882 <init_leds>:

 //////////////////////////////////////////////// INITIALIZATION ///////////////////////////////////////////////////////////

 void init_leds()
 {
	DDRB |= (1<<DDB1);
     882:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1<<DDB2);
     884:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= (1<<DDB3);
     886:	bb 9a       	sbi	0x17, 3	; 23
	PORTB |= (1<<PORTB1);
     888:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
     88a:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
     88c:	c3 9a       	sbi	0x18, 3	; 24
     88e:	08 95       	ret

00000890 <init_timer>:

	 //////////Timer/Counter Initialization/////////
	 /* Timer starts from a specific value, 
		so we can take advantage of ISR
	 */
	TCNT1 = 3036;//2SECONDS // 34286;//49911  //2^16 = 65536 - (8,000,000/256) 
     890:	8c ed       	ldi	r24, 0xDC	; 220
     892:	9b e0       	ldi	r25, 0x0B	; 11
     894:	9d bd       	out	0x2d, r25	; 45
     896:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00; //Default - Cleared
     898:	1f bc       	out	0x2f, r1	; 47

	/*	The CLK/64 
	*/
	//TCCR1B &=  ~(1<<CS11);  
	
	TCCR1B |=  (1<<CS12);// |(1<<CS10);
     89a:	8e b5       	in	r24, 0x2e	; 46
     89c:	84 60       	ori	r24, 0x04	; 4
     89e:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
     8a0:	84 e0       	ldi	r24, 0x04	; 4
     8a2:	89 bf       	out	0x39, r24	; 57
     8a4:	08 95       	ret

000008a6 <Algo>:



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
     8a6:	2f 92       	push	r2
     8a8:	3f 92       	push	r3
     8aa:	4f 92       	push	r4
     8ac:	5f 92       	push	r5
     8ae:	6f 92       	push	r6
     8b0:	7f 92       	push	r7
     8b2:	8f 92       	push	r8
     8b4:	9f 92       	push	r9
     8b6:	af 92       	push	r10
     8b8:	bf 92       	push	r11
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	64 97       	sbiw	r28, 0x14	; 20
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
	uint8_t mi,my,i,j,u,z,ibar,ybar,skip,istep,ystep;
	myTurn = 1;		//Important - collision with  init_timer
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
	
	vi_max = 3;
     8e0:	83 e0       	ldi	r24, 0x03	; 3
     8e2:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <vi_max>
	vj_max = 3;
     8e6:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <vj_max>
     8ea:	21 e0       	ldi	r18, 0x01	; 1
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	3a 8b       	std	Y+18, r19	; 0x12
     8f0:	29 8b       	std	Y+17, r18	; 0x11
     8f2:	1c 8a       	std	Y+20, r1	; 0x14
     8f4:	1b 8a       	std	Y+19, r1	; 0x13
	

	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
     8f6:	81 2c       	mov	r8, r1
     8f8:	e6 c0       	rjmp	.+460    	; 0xac6 <Algo+0x220>
	{
		for(my=0; my<=7; my++)
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
     8fa:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <M>
     8fe:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <M+0x1>
     902:	6d 85       	ldd	r22, Y+13	; 0x0d
     904:	7e 85       	ldd	r23, Y+14	; 0x0e
     906:	e6 0f       	add	r30, r22
     908:	f7 1f       	adc	r31, r23
     90a:	90 81       	ld	r25, Z
     90c:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <MyColor>
     910:	98 13       	cpse	r25, r24
     912:	b9 c0       	rjmp	.+370    	; 0xa86 <Algo+0x1e0>
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
     914:	33 24       	eor	r3, r3
     916:	3a 94       	dec	r3
     918:	3b 0c       	add	r3, r11
     91a:	e3 2c       	mov	r14, r3
     91c:	f1 2c       	mov	r15, r1
     91e:	89 89       	ldd	r24, Y+17	; 0x11
     920:	9a 89       	ldd	r25, Y+18	; 0x12
     922:	8e 15       	cp	r24, r14
     924:	9f 05       	cpc	r25, r15
     926:	0c f4       	brge	.+2      	; 0x92a <Algo+0x84>
     928:	ae c0       	rjmp	.+348    	; 0xa86 <Algo+0x1e0>
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     92a:	4f 80       	ldd	r4, Y+7	; 0x07
     92c:	58 84       	ldd	r5, Y+8	; 0x08
							
							//Setting up y barrier
							if(j > mi)
							ybar = 7;
							else if(j == my)
							ybar = 10;
     92e:	0f 2e       	mov	r0, r31
     930:	fa e0       	ldi	r31, 0x0A	; 10
     932:	af 2e       	mov	r10, r31
     934:	f0 2d       	mov	r31, r0
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
     936:	97 e0       	ldi	r25, 0x07	; 7
     938:	93 15       	cp	r25, r3
     93a:	08 f4       	brcc	.+2      	; 0x93e <Algo+0x98>
     93c:	9b c0       	rjmp	.+310    	; 0xa74 <Algo+0x1ce>
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     93e:	1f ef       	ldi	r17, 0xFF	; 255
     940:	12 0d       	add	r17, r2
     942:	81 2f       	mov	r24, r17
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	2f 81       	ldd	r18, Y+7	; 0x07
     948:	38 85       	ldd	r19, Y+8	; 0x08
     94a:	28 17       	cp	r18, r24
     94c:	39 07       	cpc	r19, r25
     94e:	0c f4       	brge	.+2      	; 0x952 <Algo+0xac>
     950:	91 c0       	rjmp	.+290    	; 0xa74 <Algo+0x1ce>
						if(j<0||j>7) //Matrix out of border protection 
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
     952:	47 01       	movw	r8, r14
     954:	88 0c       	add	r8, r8
     956:	99 1c       	adc	r9, r9
     958:	88 0c       	add	r8, r8
     95a:	99 1c       	adc	r9, r9
     95c:	88 0c       	add	r8, r8
     95e:	99 1c       	adc	r9, r9


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     960:	63 2c       	mov	r6, r3
     962:	71 2c       	mov	r7, r1
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
     964:	b3 01       	movw	r22, r6
     966:	66 0f       	add	r22, r22
     968:	77 1f       	adc	r23, r23
     96a:	66 0f       	add	r22, r22
     96c:	77 1f       	adc	r23, r23
     96e:	66 0f       	add	r22, r22
     970:	77 1f       	adc	r23, r23
     972:	7c 87       	std	Y+12, r23	; 0x0c
     974:	6b 87       	std	Y+11, r22	; 0x0b
							ybar = 10;
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
     976:	03 2d       	mov	r16, r3
     978:	0b 19       	sub	r16, r11


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     97a:	20 2f       	mov	r18, r16
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	3a 87       	std	Y+10, r19	; 0x0a
     980:	29 87       	std	Y+9, r18	; 0x09
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
					{
						if(j<0||j>7) //Matrix out of border protection 
     982:	18 30       	cpi	r17, 0x08	; 8
     984:	08 f0       	brcs	.+2      	; 0x988 <Algo+0xe2>
     986:	6f c0       	rjmp	.+222    	; 0xa66 <Algo+0x1c0>
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
     988:	a0 91 d9 01 	lds	r26, 0x01D9	; 0x8001d9 <M>
     98c:	b0 91 da 01 	lds	r27, 0x01DA	; 0x8001da <M+0x1>
     990:	88 0d       	add	r24, r8
     992:	99 1d       	adc	r25, r9
     994:	fd 01       	movw	r30, r26
     996:	e8 0f       	add	r30, r24
     998:	f9 1f       	adc	r31, r25
     99a:	20 81       	ld	r18, Z
     99c:	40 91 d7 00 	lds	r20, 0x00D7	; 0x8000d7 <MyColor>
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	41 11       	cpse	r20, r1
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	28 17       	cp	r18, r24
     9ac:	39 07       	cpc	r19, r25
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <Algo+0x10c>
     9b0:	5a c0       	rjmp	.+180    	; 0xa66 <Algo+0x1c0>
						{

							//Setting up i barrier (board)
							if(i > mi)
     9b2:	b3 14       	cp	r11, r3
     9b4:	20 f0       	brcs	.+8      	; 0x9be <Algo+0x118>
							ibar = 7 ;
							else if(i == mi)
     9b6:	b3 14       	cp	r11, r3
     9b8:	21 f0       	breq	.+8      	; 0x9c2 <Algo+0x11c>
							ibar = 10;   //big enough, so the other axis will break while below
							else
							ibar = 0;
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <Algo+0x11e>
						if((M[i*8 + j] == !MyColor))		
						{

							//Setting up i barrier (board)
							if(i > mi)
							ibar = 7 ;
     9be:	87 e0       	ldi	r24, 0x07	; 7
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <Algo+0x11e>
							else if(i == mi)
							ibar = 10;   //big enough, so the other axis will break while below
     9c2:	8a 2d       	mov	r24, r10
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
     9c4:	b1 16       	cp	r11, r17
     9c6:	20 f0       	brcs	.+8      	; 0x9d0 <Algo+0x12a>
							ybar = 7;
							else if(j == my)
     9c8:	21 16       	cp	r2, r17
     9ca:	21 f0       	breq	.+8      	; 0x9d4 <Algo+0x12e>
							ybar = 10;
							else
							ybar = 0;
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <Algo+0x130>
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
							ybar = 7;
     9d0:	57 e0       	ldi	r21, 0x07	; 7
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <Algo+0x130>
							else if(j == my)
							ybar = 10;
     9d4:	5a 2d       	mov	r21, r10
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
							ystep = j - my;
     9d6:	91 2f       	mov	r25, r17
     9d8:	92 19       	sub	r25, r2


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     9da:	c9 84       	ldd	r12, Y+9	; 0x09
     9dc:	da 84       	ldd	r13, Y+10	; 0x0a
     9de:	c8 0e       	add	r12, r24
     9e0:	d1 1c       	adc	r13, r1
     9e2:	6c 14       	cp	r6, r12
     9e4:	7d 04       	cpc	r7, r13
     9e6:	09 f4       	brne	.+2      	; 0x9ea <Algo+0x144>
     9e8:	3e c0       	rjmp	.+124    	; 0xa66 <Algo+0x1c0>
     9ea:	21 2f       	mov	r18, r17
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	e9 2e       	mov	r14, r25
     9f0:	f1 2c       	mov	r15, r1
     9f2:	e5 0e       	add	r14, r21
     9f4:	f1 1c       	adc	r15, r1
     9f6:	2e 15       	cp	r18, r14
     9f8:	3f 05       	cpc	r19, r15
     9fa:	a9 f1       	breq	.+106    	; 0xa66 <Algo+0x1c0>
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
     9fc:	6b 85       	ldd	r22, Y+11	; 0x0b
     9fe:	7c 85       	ldd	r23, Y+12	; 0x0c
     a00:	26 0f       	add	r18, r22
     a02:	37 1f       	adc	r19, r23
     a04:	fd 01       	movw	r30, r26
     a06:	e2 0f       	add	r30, r18
     a08:	f3 1f       	adc	r31, r19
     a0a:	80 81       	ld	r24, Z
     a0c:	48 17       	cp	r20, r24
     a0e:	59 f1       	breq	.+86     	; 0xa66 <Algo+0x1c0>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
     a10:	80 81       	ld	r24, Z
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	a1 f0       	breq	.+40     	; 0xa3e <Algo+0x198>
     a16:	61 2f       	mov	r22, r17
     a18:	83 2d       	mov	r24, r3
     a1a:	19 c0       	rjmp	.+50     	; 0xa4e <Algo+0x1a8>
							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
     a1c:	22 0f       	add	r18, r18
     a1e:	33 1f       	adc	r19, r19
     a20:	22 0f       	add	r18, r18
     a22:	33 1f       	adc	r19, r19
     a24:	22 0f       	add	r18, r18
     a26:	33 1f       	adc	r19, r19
     a28:	e2 0f       	add	r30, r18
     a2a:	f3 1f       	adc	r31, r19
     a2c:	ea 0f       	add	r30, r26
     a2e:	fb 1f       	adc	r31, r27
     a30:	20 81       	ld	r18, Z
     a32:	42 17       	cp	r20, r18
     a34:	c1 f0       	breq	.+48     	; 0xa66 <Algo+0x1c0>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
     a36:	20 81       	ld	r18, Z
     a38:	22 30       	cpi	r18, 0x02	; 2
     a3a:	49 f4       	brne	.+18     	; 0xa4e <Algo+0x1a8>
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <Algo+0x19c>
     a3e:	61 2f       	mov	r22, r17
     a40:	83 2d       	mov	r24, r3
									skip = 0;
									move_done=1;
     a42:	71 e0       	ldi	r23, 0x01	; 1
     a44:	70 93 d5 00 	sts	0x00D5, r23	; 0x8000d5 <move_done>
									//CheckMove(u, z, MyColor, 1);  //Coloring adjacent paths, according to the rules  ////////-- OLD VERSION --////////////
									CheckMove(u, z, MyColor, 0); //Calculate and 'write'(if its the greatest till now) on board(in the specific slot we found) the result score of this possible move.
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	22 db       	rcall	.-2492   	; 0x90 <CheckMove>
									mymove[2] = '\x20';
									mymove[3] = u+65;
									mymove[4] = (z+1)+'0';
									mymove[5] = '\r';
									*/
									break;
     a4c:	0c c0       	rjmp	.+24     	; 0xa66 <Algo+0x1c0>
								}

								z+= ystep;
     a4e:	69 0f       	add	r22, r25
								u+= istep;
     a50:	80 0f       	add	r24, r16


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     a52:	28 2f       	mov	r18, r24
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	2c 15       	cp	r18, r12
     a58:	3d 05       	cpc	r19, r13
     a5a:	29 f0       	breq	.+10     	; 0xa66 <Algo+0x1c0>
     a5c:	e6 2f       	mov	r30, r22
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	ee 15       	cp	r30, r14
     a62:	ff 05       	cpc	r31, r15
     a64:	d9 f6       	brne	.-74     	; 0xa1c <Algo+0x176>
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     a66:	1f 5f       	subi	r17, 0xFF	; 255
     a68:	81 2f       	mov	r24, r17
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	48 16       	cp	r4, r24
     a6e:	59 06       	cpc	r5, r25
     a70:	0c f0       	brlt	.+2      	; 0xa74 <Algo+0x1ce>
     a72:	87 cf       	rjmp	.-242    	; 0x982 <Algo+0xdc>
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
     a74:	33 94       	inc	r3
     a76:	e3 2c       	mov	r14, r3
     a78:	f1 2c       	mov	r15, r1
     a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a7c:	98 89       	ldd	r25, Y+16	; 0x10
     a7e:	8e 15       	cp	r24, r14
     a80:	9f 05       	cpc	r25, r15
     a82:	0c f0       	brlt	.+2      	; 0xa86 <Algo+0x1e0>
     a84:	58 cf       	rjmp	.-336    	; 0x936 <Algo+0x90>
	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
	{
		for(my=0; my<=7; my++)
     a86:	23 94       	inc	r2
     a88:	2d 85       	ldd	r18, Y+13	; 0x0d
     a8a:	3e 85       	ldd	r19, Y+14	; 0x0e
     a8c:	2f 5f       	subi	r18, 0xFF	; 255
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	3e 87       	std	Y+14, r19	; 0x0e
     a92:	2d 87       	std	Y+13, r18	; 0x0d
     a94:	6f 81       	ldd	r22, Y+7	; 0x07
     a96:	78 85       	ldd	r23, Y+8	; 0x08
     a98:	6f 5f       	subi	r22, 0xFF	; 255
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	78 87       	std	Y+8, r23	; 0x08
     a9e:	6f 83       	std	Y+7, r22	; 0x07
     aa0:	78 e0       	ldi	r23, 0x08	; 8
     aa2:	27 12       	cpse	r2, r23
     aa4:	2a cf       	rjmp	.-428    	; 0x8fa <Algo+0x54>
     aa6:	8b 2c       	mov	r8, r11
	

	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
     aa8:	83 94       	inc	r8
     aaa:	8b 89       	ldd	r24, Y+19	; 0x13
     aac:	9c 89       	ldd	r25, Y+20	; 0x14
     aae:	08 96       	adiw	r24, 0x08	; 8
     ab0:	9c 8b       	std	Y+20, r25	; 0x14
     ab2:	8b 8b       	std	Y+19, r24	; 0x13
     ab4:	29 89       	ldd	r18, Y+17	; 0x11
     ab6:	3a 89       	ldd	r19, Y+18	; 0x12
     ab8:	2f 5f       	subi	r18, 0xFF	; 255
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	3a 8b       	std	Y+18, r19	; 0x12
     abe:	29 8b       	std	Y+17, r18	; 0x11
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	91 05       	cpc	r25, r1
     ac4:	81 f0       	breq	.+32     	; 0xae6 <Algo+0x240>



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
     ac6:	6b 89       	ldd	r22, Y+19	; 0x13
     ac8:	7c 89       	ldd	r23, Y+20	; 0x14
     aca:	7e 87       	std	Y+14, r23	; 0x0e
     acc:	6d 87       	std	Y+13, r22	; 0x0d
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	98 87       	std	Y+8, r25	; 0x08
     ad4:	8f 83       	std	Y+7, r24	; 0x07
     ad6:	31 2c       	mov	r3, r1
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
     ad8:	29 89       	ldd	r18, Y+17	; 0x11
     ada:	3a 89       	ldd	r19, Y+18	; 0x12
     adc:	38 8b       	std	Y+16, r19	; 0x10
     ade:	2f 87       	std	Y+15, r18	; 0x0f
     ae0:	23 2c       	mov	r2, r3
     ae2:	b8 2c       	mov	r11, r8
     ae4:	0a cf       	rjmp	.-492    	; 0x8fa <Algo+0x54>
			}//if  (find our pawn)

		}//for my

	}//for mi
	if(move_done)
     ae6:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <move_done>
     aea:	88 23       	and	r24, r24
     aec:	09 f4       	brne	.+2      	; 0xaf0 <Algo+0x24a>
     aee:	48 c0       	rjmp	.+144    	; 0xb80 <Algo+0x2da>
	{
		CheckMove(vi_max, vj_max, MyColor ,1); // Paint the best possible slot
     af0:	21 e0       	ldi	r18, 0x01	; 1
     af2:	40 91 d7 00 	lds	r20, 0x00D7	; 0x8000d7 <MyColor>
     af6:	60 91 cf 00 	lds	r22, 0x00CF	; 0x8000cf <vj_max>
     afa:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <vi_max>
     afe:	c8 da       	rcall	.-2672   	; 0x90 <CheckMove>
		mymove[0] = 'M';
     b00:	8d e4       	ldi	r24, 0x4D	; 77
     b02:	89 83       	std	Y+1, r24	; 0x01
		mymove[1] = 'M';
     b04:	8a 83       	std	Y+2, r24	; 0x02
		mymove[2] = '\x20';
     b06:	80 e2       	ldi	r24, 0x20	; 32
     b08:	8b 83       	std	Y+3, r24	; 0x03
		mymove[3] = vi_max+65;
     b0a:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <vi_max>
     b0e:	8f 5b       	subi	r24, 0xBF	; 191
     b10:	8c 83       	std	Y+4, r24	; 0x04
		mymove[4] = (vj_max+1)+'0';
     b12:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <vj_max>
     b16:	8f 5c       	subi	r24, 0xCF	; 207
     b18:	8d 83       	std	Y+5, r24	; 0x05
		mymove[5] = '\r';
     b1a:	8d e0       	ldi	r24, 0x0D	; 13
		Board();
     b1c:	8e 83       	std	Y+6, r24	; 0x06
     b1e:	a5 dd       	rcall	.-1206   	; 0x66a <Board>
		Transmit(mymove,0,6); //Transmit our Move
     b20:	46 e0       	ldi	r20, 0x06	; 6
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	ce 01       	movw	r24, r28
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	55 dd       	rcall	.-1366   	; 0x5d4 <Transmit>
	
	//if move_done == 0 , that means that we cant find solution, we pass                           
	//while loop until 'OK' response
	while(1)
	{		// Check_Input does not support "OK" response so we check it here
		if(move_done >= 1)
     b2a:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <move_done>
     b2e:	88 23       	and	r24, r24
     b30:	39 f1       	breq	.+78     	; 0xb80 <Algo+0x2da>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b32:	8f e1       	ldi	r24, 0x1F	; 31
     b34:	9e e4       	ldi	r25, 0x4E	; 78
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <Algo+0x290>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <Algo+0x296>
     b3c:	00 00       	nop
		{
			while(1)
			{
				_delay_ms(10);
				if((move_done == 2)||(myTurn==2))  //myturn==2 means that a RST was made. and we can break this loop.
     b3e:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <move_done>
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	21 f0       	breq	.+8      	; 0xb4e <Algo+0x2a8>
     b46:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	91 f7       	brne	.-28     	; 0xb32 <Algo+0x28c>
				{ // we received the response we were waiting'
					move_done = 0;
     b4e:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <move_done>
					break;
				}
			}
			
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75) //Respone ok for our MM
     b52:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <rxReadPos>
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	fc 01       	movw	r30, r24
     b5a:	e7 52       	subi	r30, 0x27	; 39
     b5c:	ff 4f       	sbci	r31, 0xFF	; 255
     b5e:	20 81       	ld	r18, Z
     b60:	2f 34       	cpi	r18, 0x4F	; 79
     b62:	19 f7       	brne	.-58     	; 0xb2a <Algo+0x284>
     b64:	fc 01       	movw	r30, r24
     b66:	e7 52       	subi	r30, 0x27	; 39
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	81 81       	ldd	r24, Z+1	; 0x01
     b6c:	8b 34       	cpi	r24, 0x4B	; 75
			{
				init_timer();
     b6e:	e9 f6       	brne	.-70     	; 0xb2a <Algo+0x284>
     b70:	8f de       	rcall	.-738    	; 0x890 <init_timer>
				rxReadPos=rxWritePos;
     b72:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rxWritePos>
     b76:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <rxReadPos>
				myTurn = 0;
     b7a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			}

		}
		else if(move_done == 0)//No solution was found
		{
			if (enemy_pass == 1) //Enemy sent pass too
     b7e:	0b c0       	rjmp	.+22     	; 0xb96 <Algo+0x2f0>
     b80:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <enemy_pass>
     b84:	81 30       	cpi	r24, 0x01	; 1
			{
				EndGame();		//Go count pawns and announce the winner
     b86:	11 f4       	brne	.+4      	; 0xb8c <Algo+0x2e6>
				break;
     b88:	09 de       	rcall	.-1006   	; 0x79c <EndGame>
			}
			else
			{
				Transmit("MP\r",0,strlen("MP\r")); //Transmit MYPASS
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <Algo+0x2f0>
     b8c:	43 e0       	ldi	r20, 0x03	; 3
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	80 ec       	ldi	r24, 0xC0	; 192
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	1f dd       	rcall	.-1474   	; 0x5d4 <Transmit>
				break;
			}
		}
	}
	
}
     b96:	64 96       	adiw	r28, 0x14	; 20
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	7f 90       	pop	r7
     bbc:	6f 90       	pop	r6
     bbe:	5f 90       	pop	r5
     bc0:	4f 90       	pop	r4
     bc2:	3f 90       	pop	r3
     bc4:	2f 90       	pop	r2
     bc6:	08 95       	ret

00000bc8 <Check_Input>:



///////////////////////////////////////////////////////////////////////////////////////////   CHECK_INPUT    /////////////////////////////////////////////////////////////////////////////////////////

void Check_Input(char data[]){
     bc8:	9c 01       	movw	r18, r24
	
		if(data[rxReadPos]==CR[0]){
     bca:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <rxReadPos>
     bce:	40 91 d3 00 	lds	r20, 0x00D3	; 0x8000d3 <CR>
     bd2:	f9 01       	movw	r30, r18
     bd4:	e9 0f       	add	r30, r25
     bd6:	f1 1d       	adc	r31, r1
     bd8:	80 81       	ld	r24, Z
     bda:	84 13       	cpse	r24, r20
     bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <Check_Input+0x1c>
			rxReadPos++;
     bde:	9f 5f       	subi	r25, 0xFF	; 255
     be0:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <rxReadPos>
		//flag = 0;
		//Space_num = 0;
		

		//ILFlag will help us spot "OK" or "PL" terminal answer
		if(ILflag == 1)
     be4:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	21 f4       	brne	.+8      	; 0xbf4 <Check_Input+0x2c>
		{
			ILflag=2;  //answer spotted, you can proceed.
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
			return;	
     bf2:	08 95       	ret
		}
		
		//it will help to spot "OK"  terminal answer
		if(move_done == 1)
     bf4:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <move_done>
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	21 f4       	brne	.+8      	; 0xc04 <Check_Input+0x3c>
		{	
			move_done=2; //answer spotted, you can proceed.
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <move_done>
			return;	
     c02:	08 95       	ret
     c04:	b9 01       	movw	r22, r18
	


		//process
		// command AT
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
     c06:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <rxReadPos>
     c0a:	29 2f       	mov	r18, r25
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	fb 01       	movw	r30, r22
     c10:	e2 0f       	add	r30, r18
     c12:	f3 1f       	adc	r31, r19
     c14:	90 81       	ld	r25, Z
     c16:	91 34       	cpi	r25, 0x41	; 65
     c18:	99 f4       	brne	.+38     	; 0xc40 <Check_Input+0x78>
     c1a:	fb 01       	movw	r30, r22
     c1c:	e2 0f       	add	r30, r18
     c1e:	f3 1f       	adc	r31, r19
     c20:	91 81       	ldd	r25, Z+1	; 0x01
     c22:	94 35       	cpi	r25, 0x54	; 84
     c24:	09 f0       	breq	.+2      	; 0xc28 <Check_Input+0x60>
     c26:	08 c1       	rjmp	.+528    	; 0xe38 <Check_Input+0x270>
		{
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			if(data[rxReadPos+2] == CR[0]){
     c28:	fb 01       	movw	r30, r22
     c2a:	e2 0f       	add	r30, r18
     c2c:	f3 1f       	adc	r31, r19
     c2e:	82 81       	ldd	r24, Z+2	; 0x02
     c30:	48 13       	cpse	r20, r24
     c32:	02 c1       	rjmp	.+516    	; 0xe38 <Check_Input+0x270>
				Transmit("OK\r",0 , strlen("OK\r"));
     c34:	43 e0       	ldi	r20, 0x03	; 3
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	87 ea       	ldi	r24, 0xA7	; 167
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	cb dc       	rcall	.-1642   	; 0x5d4 <Transmit>
     c3e:	fc c0       	rjmp	.+504    	; 0xe38 <Check_Input+0x270>
				rxReadPos = rxWritePos;
			}

		}
		//Checking for RST<CR> command.
		else if((data[rxReadPos] == 82)&&(data[rxReadPos + 1] == 83)&&(data[rxReadPos + 2] == 84))		
     c40:	92 35       	cpi	r25, 0x52	; 82
     c42:	81 f4       	brne	.+32     	; 0xc64 <Check_Input+0x9c>
     c44:	fb 01       	movw	r30, r22
     c46:	e2 0f       	add	r30, r18
     c48:	f3 1f       	adc	r31, r19
     c4a:	91 81       	ldd	r25, Z+1	; 0x01
     c4c:	93 35       	cpi	r25, 0x53	; 83
     c4e:	09 f0       	breq	.+2      	; 0xc52 <Check_Input+0x8a>
     c50:	f3 c0       	rjmp	.+486    	; 0xe38 <Check_Input+0x270>
     c52:	fb 01       	movw	r30, r22
     c54:	e2 0f       	add	r30, r18
     c56:	f3 1f       	adc	r31, r19
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	84 35       	cpi	r24, 0x54	; 84
     c5c:	09 f0       	breq	.+2      	; 0xc60 <Check_Input+0x98>
		{
			RST();
     c5e:	ec c0       	rjmp	.+472    	; 0xe38 <Check_Input+0x270>
     c60:	c7 dc       	rcall	.-1650   	; 0x5f0 <RST>
     c62:	ea c0       	rjmp	.+468    	; 0xe38 <Check_Input+0x270>
		}	
		// SP<SPACE>{B/W}<CR>
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 80))
     c64:	93 35       	cpi	r25, 0x53	; 83
     c66:	d9 f4       	brne	.+54     	; 0xc9e <Check_Input+0xd6>
     c68:	fb 01       	movw	r30, r22
     c6a:	e2 0f       	add	r30, r18
     c6c:	f3 1f       	adc	r31, r19
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	90 35       	cpi	r25, 0x50	; 80
     c72:	09 f0       	breq	.+2      	; 0xc76 <Check_Input+0xae>
     c74:	64 c0       	rjmp	.+200    	; 0xd3e <Check_Input+0x176>
		{
			//(int)c - 65;
			if(data[rxReadPos + 3] == 66)		//B
     c76:	fb 01       	movw	r30, r22
     c78:	e2 0f       	add	r30, r18
     c7a:	f3 1f       	adc	r31, r19
     c7c:	83 81       	ldd	r24, Z+3	; 0x03
     c7e:	82 34       	cpi	r24, 0x42	; 66
     c80:	19 f4       	brne	.+6      	; 0xc88 <Check_Input+0xc0>
				MyColor = 0;					//Saving myColor
     c82:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <MyColor>
     c86:	05 c0       	rjmp	.+10     	; 0xc92 <Check_Input+0xca>
			else if(data[rxReadPos + 3] == 87)  //W
     c88:	87 35       	cpi	r24, 0x57	; 87
     c8a:	19 f4       	brne	.+6      	; 0xc92 <Check_Input+0xca>
				MyColor = 1;					//Saving myColor
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <MyColor>
			Transmit("OK\r",0 , strlen("OK\r"));
     c92:	43 e0       	ldi	r20, 0x03	; 3
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	87 ea       	ldi	r24, 0xA7	; 167
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	9c dc       	rcall	.-1736   	; 0x5d4 <Transmit>
			rxReadPos = rxWritePos;
     c9c:	cd c0       	rjmp	.+410    	; 0xe38 <Check_Input+0x270>
		}
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
     c9e:	9e 34       	cpi	r25, 0x4E	; 78
     ca0:	d1 f5       	brne	.+116    	; 0xd16 <Check_Input+0x14e>
     ca2:	fb 01       	movw	r30, r22
     ca4:	e2 0f       	add	r30, r18
     ca6:	f3 1f       	adc	r31, r19
     ca8:	81 81       	ldd	r24, Z+1	; 0x01
     caa:	87 34       	cpi	r24, 0x47	; 71
     cac:	09 f0       	breq	.+2      	; 0xcb0 <Check_Input+0xe8>
     cae:	c4 c0       	rjmp	.+392    	; 0xe38 <Check_Input+0x270>
		{
			//RST();
			move_done=0;
     cb0:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <move_done>
     cb4:	28 e0       	ldi	r18, 0x08	; 8
     cb6:	30 e0       	ldi	r19, 0x00	; 0
			for(uint8_t i = 0 ; i <= 7 ; i++)
			{
				for(uint8_t y = 0 ; y <= 7 ; y++)
				{
					M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     cb8:	42 e0       	ldi	r20, 0x02	; 2
     cba:	10 c0       	rjmp	.+32     	; 0xcdc <Check_Input+0x114>
     cbc:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <M>
     cc0:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <M+0x1>
     cc4:	e8 0f       	add	r30, r24
     cc6:	f9 1f       	adc	r31, r25
     cc8:	40 83       	st	Z, r20
     cca:	01 96       	adiw	r24, 0x01	; 1
		{
			//RST();
			move_done=0;
			for(uint8_t i = 0 ; i <= 7 ; i++)
			{
				for(uint8_t y = 0 ; y <= 7 ; y++)
     ccc:	82 17       	cp	r24, r18
     cce:	93 07       	cpc	r25, r19
     cd0:	a9 f7       	brne	.-22     	; 0xcbc <Check_Input+0xf4>
     cd2:	28 5f       	subi	r18, 0xF8	; 248
     cd4:	3f 4f       	sbci	r19, 0xFF	; 255
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
		{
			//RST();
			move_done=0;
			for(uint8_t i = 0 ; i <= 7 ; i++)
     cd6:	28 34       	cpi	r18, 0x48	; 72
     cd8:	31 05       	cpc	r19, r1
     cda:	19 f0       	breq	.+6      	; 0xce2 <Check_Input+0x11a>
     cdc:	c9 01       	movw	r24, r18
     cde:	08 97       	sbiw	r24, 0x08	; 8
     ce0:	ed cf       	rjmp	.-38     	; 0xcbc <Check_Input+0xf4>
				{
					M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
				}
			}
			//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
			M[3*8+3] = 1 ;
     ce2:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <M>
     ce6:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <M+0x1>
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	83 8f       	std	Z+27, r24	; 0x1b
			M[3*8+4] = 0 ;
     cee:	14 8e       	std	Z+28, r1	; 0x1c
			M[4*8+3] = 0 ;
     cf0:	13 a2       	std	Z+35, r1	; 0x23
			M[4*8+4] = 1 ;
     cf2:	84 a3       	std	Z+36, r24	; 0x24
			if(MyColor == 0)// BLACK
     cf4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <MyColor>
     cf8:	81 11       	cpse	r24, r1
     cfa:	09 c0       	rjmp	.+18     	; 0xd0e <Check_Input+0x146>
			{
				myTurn=1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
				Transmit("OK\r",0 , strlen("OK\r"));
     d02:	43 e0       	ldi	r20, 0x03	; 3
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	87 ea       	ldi	r24, 0xA7	; 167
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	64 dc       	rcall	.-1848   	; 0x5d4 <Transmit>
			}
			else           //WHITE
			{
				RST();  //FIXING bug with whites(rst contains OK Transmit)
     d0c:	95 c0       	rjmp	.+298    	; 0xe38 <Check_Input+0x270>
     d0e:	70 dc       	rcall	.-1824   	; 0x5f0 <RST>
				myTurn=0;
     d10:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			}
			
			//init_timer();
			//Transmit("OK\r",0 , strlen("OK\r"));           This is the 2nd OK, not important, RST contains OK transmit
			rxReadPos = rxWritePos;
     d14:	91 c0       	rjmp	.+290    	; 0xe38 <Check_Input+0x270>
		}
		        //EG<CR>
		else if((data[rxReadPos] == 69)&&(data[rxReadPos + 1] == 71))
     d16:	95 34       	cpi	r25, 0x45	; 69
     d18:	31 f5       	brne	.+76     	; 0xd66 <Check_Input+0x19e>
     d1a:	fb 01       	movw	r30, r22
     d1c:	e2 0f       	add	r30, r18
     d1e:	f3 1f       	adc	r31, r19
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	87 34       	cpi	r24, 0x47	; 71
     d24:	09 f0       	breq	.+2      	; 0xd28 <Check_Input+0x160>
		{
			//EndGameFlag = 1; // check this flag during waiting/calculating loop
			Transmit("OK\r",0 , strlen("OK\r"));
     d26:	88 c0       	rjmp	.+272    	; 0xe38 <Check_Input+0x270>
     d28:	43 e0       	ldi	r20, 0x03	; 3
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	87 ea       	ldi	r24, 0xA7	; 167
     d2e:	90 e0       	ldi	r25, 0x00	; 0
			rxReadPos = rxWritePos;
     d30:	51 dc       	rcall	.-1886   	; 0x5d4 <Transmit>
     d32:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rxWritePos>
     d36:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <rxReadPos>
			EndGame();
     d3a:	30 dd       	rcall	.-1440   	; 0x79c <EndGame>
     d3c:	7d c0       	rjmp	.+250    	; 0xe38 <Check_Input+0x270>
		}
			 //ST<CR>
        else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 84))
     d3e:	fb 01       	movw	r30, r22
     d40:	e2 0f       	add	r30, r18
     d42:	f3 1f       	adc	r31, r19
     d44:	81 81       	ldd	r24, Z+1	; 0x01
     d46:	84 35       	cpi	r24, 0x54	; 84
     d48:	09 f0       	breq	.+2      	; 0xd4c <Check_Input+0x184>
     d4a:	76 c0       	rjmp	.+236    	; 0xe38 <Check_Input+0x270>
        {
			Time = data[rxReadPos+3] - '0';    //String to Int
     d4c:	fb 01       	movw	r30, r22
     d4e:	e2 0f       	add	r30, r18
     d50:	f3 1f       	adc	r31, r19
     d52:	83 81       	ldd	r24, Z+3	; 0x03
     d54:	80 53       	subi	r24, 0x30	; 48
     d56:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <Time>
			Transmit("OK\r",0 , strlen("OK\r"));
     d5a:	43 e0       	ldi	r20, 0x03	; 3
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	87 ea       	ldi	r24, 0xA7	; 167
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	38 dc       	rcall	.-1936   	; 0x5d4 <Transmit>
			rxReadPos = rxWritePos;
     d64:	69 c0       	rjmp	.+210    	; 0xe38 <Check_Input+0x270>
        }
			//MV<SP>{[A-H],[1-8]}<CR>
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 86))
     d66:	9d 34       	cpi	r25, 0x4D	; 77
     d68:	09 f0       	breq	.+2      	; 0xd6c <Check_Input+0x1a4>
     d6a:	41 c0       	rjmp	.+130    	; 0xdee <Check_Input+0x226>
     d6c:	fb 01       	movw	r30, r22
     d6e:	e2 0f       	add	r30, r18
     d70:	f3 1f       	adc	r31, r19
     d72:	81 81       	ldd	r24, Z+1	; 0x01
     d74:	86 35       	cpi	r24, 0x56	; 86
     d76:	09 f0       	breq	.+2      	; 0xd7a <Check_Input+0x1b2>
     d78:	5f c0       	rjmp	.+190    	; 0xe38 <Check_Input+0x270>
		{
				if((data[rxReadPos+3] >= 65)&&(data[rxReadPos+3] <= 72)&&(data[rxReadPos+4] >= 49)&&(data[rxReadPos+4] <= 56))  // Checking input
     d7a:	f9 01       	movw	r30, r18
     d7c:	33 96       	adiw	r30, 0x03	; 3
     d7e:	e6 0f       	add	r30, r22
     d80:	f7 1f       	adc	r31, r23
     d82:	80 81       	ld	r24, Z
     d84:	81 54       	subi	r24, 0x41	; 65
     d86:	88 30       	cpi	r24, 0x08	; 8
     d88:	08 f0       	brcs	.+2      	; 0xd8c <Check_Input+0x1c4>
     d8a:	56 c0       	rjmp	.+172    	; 0xe38 <Check_Input+0x270>
     d8c:	2c 5f       	subi	r18, 0xFC	; 252
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	db 01       	movw	r26, r22
     d92:	a2 0f       	add	r26, r18
     d94:	b3 1f       	adc	r27, r19
     d96:	8c 91       	ld	r24, X
     d98:	81 53       	subi	r24, 0x31	; 49
     d9a:	88 30       	cpi	r24, 0x08	; 8
     d9c:	08 f0       	brcs	.+2      	; 0xda0 <Check_Input+0x1d8>
     d9e:	4c c0       	rjmp	.+152    	; 0xe38 <Check_Input+0x270>
				{
					enemy_pass = 0;
     da0:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <enemy_pass>
					uint8_t moveok = CheckMove(((int)data[rxReadPos+3] - 65),((data[rxReadPos+4] - '0') - 1), !MyColor, 1 );  //Check opponents move.
     da4:	41 e0       	ldi	r20, 0x01	; 1
     da6:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <MyColor>
     daa:	81 11       	cpse	r24, r1
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	6c 91       	ld	r22, X
     db0:	61 53       	subi	r22, 0x31	; 49
     db2:	80 81       	ld	r24, Z
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	81 54       	subi	r24, 0x41	; 65
					//If opponent's move is legal, send ok and reset timer, else 
					//send IL and wait for PC response, if response OK --> I win else(PL) --> I LOSE
					if(moveok == 1)		
     db8:	6b d9       	rcall	.-3370   	; 0x90 <CheckMove>
     dba:	81 30       	cpi	r24, 0x01	; 1
					{
						// Saving opponent's move in my local game board
						//M[(((int)data[rxReadPos+3] - 65)*8) + (data[rxReadPos+4] - '0')] = !MyColor;  // Saving opponent's move in my local game board
						Transmit("OK\r",0 , strlen("OK\r"));
     dbc:	51 f4       	brne	.+20     	; 0xdd2 <Check_Input+0x20a>
     dbe:	43 e0       	ldi	r20, 0x03	; 3
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	87 ea       	ldi	r24, 0xA7	; 167
     dc4:	90 e0       	ldi	r25, 0x00	; 0
						init_timer();
     dc6:	06 dc       	rcall	.-2036   	; 0x5d4 <Transmit>
     dc8:	63 dd       	rcall	.-1338   	; 0x890 <init_timer>
						myTurn=1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     dd0:	33 c0       	rjmp	.+102    	; 0xe38 <Check_Input+0x270>
					}
					else{
						Transmit("IL\r",0 , strlen("IL\r"));
     dd2:	43 e0       	ldi	r20, 0x03	; 3
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	84 ec       	ldi	r24, 0xC4	; 196
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	fc db       	rcall	.-2056   	; 0x5d4 <Transmit>
     ddc:	81 e0       	ldi	r24, 0x01	; 1
						ILflag =  1;							//Waiting mode for PC's response
     dde:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
     de2:	82 e0       	ldi	r24, 0x02	; 2
						myTurn=2;
     de4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     de8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <mt>
						mt=0;
     dec:	25 c0       	rjmp	.+74     	; 0xe38 <Check_Input+0x270>
     dee:	90 35       	cpi	r25, 0x50	; 80
						
				} 	
		}

		//PASS
		else if ((data[rxReadPos] == 80)&&(data[rxReadPos + 1] == 83))
     df0:	89 f4       	brne	.+34     	; 0xe14 <Check_Input+0x24c>
     df2:	fb 01       	movw	r30, r22
     df4:	e2 0f       	add	r30, r18
     df6:	f3 1f       	adc	r31, r19
     df8:	81 81       	ldd	r24, Z+1	; 0x01
     dfa:	83 35       	cpi	r24, 0x53	; 83
     dfc:	e9 f4       	brne	.+58     	; 0xe38 <Check_Input+0x270>
		{
			myTurn=1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			//This flag will help us end game in case we pass after opponent's pass
			enemy_pass = 1;   
     e04:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <enemy_pass>
			Transmit("OK\r",0,strlen("OK\r"));
     e08:	43 e0       	ldi	r20, 0x03	; 3
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	87 ea       	ldi	r24, 0xA7	; 167
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	e1 db       	rcall	.-2110   	; 0x5d4 <Transmit>
     e12:	12 c0       	rjmp	.+36     	; 0xe38 <Check_Input+0x270>
		}
		//WN

		else if((data[rxReadPos] == 87)&&(data[rxReadPos + 1] == 78)){
     e14:	97 35       	cpi	r25, 0x57	; 87
     e16:	81 f4       	brne	.+32     	; 0xe38 <Check_Input+0x270>
     e18:	fb 01       	movw	r30, r22
     e1a:	e2 0f       	add	r30, r18
     e1c:	f3 1f       	adc	r31, r19
     e1e:	81 81       	ldd	r24, Z+1	; 0x01
     e20:	8e 34       	cpi	r24, 0x4E	; 78
			AnnounceRes(1);  //announce i win with led1
     e22:	51 f4       	brne	.+20     	; 0xe38 <Check_Input+0x270>
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	92 dc       	rcall	.-1756   	; 0x74c <AnnounceRes>
			myTurn=2;			
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			Transmit("OK\r",0,strlen("OK\r"));
     e2e:	43 e0       	ldi	r20, 0x03	; 3
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	87 ea       	ldi	r24, 0xA7	; 167
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	ce db       	rcall	.-2148   	; 0x5d4 <Transmit>
     e38:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rxWritePos>
		}
		else
			NULL;
	rxReadPos=rxWritePos;		
	rxReadPos++;		//Ready for the next command (directs to the next letter, the one after <CR>) 
     e3c:	8f 5f       	subi	r24, 0xFF	; 255
     e3e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <rxReadPos>
     e42:	08 95       	ret

00000e44 <__vector_11>:
     e44:	1f 92       	push	r1

//////////////////////////////////////////////////////////////////////////////////////////



ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
     e66:	8c b1       	in	r24, 0x0c	; 12
     e68:	e0 91 d1 00 	lds	r30, 0x00D1	; 0x8000d1 <rxWritePos>
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	e7 52       	subi	r30, 0x27	; 39
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
     e74:	5d 9b       	sbis	0x0b, 5	; 11
     e76:	fe cf       	rjmp	.-4      	; 0xe74 <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
     e78:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
     e7a:	e0 91 d1 00 	lds	r30, 0x00D1	; 0x8000d1 <rxWritePos>
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	e7 52       	subi	r30, 0x27	; 39
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	90 81       	ld	r25, Z
     e86:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <CR>
     e8a:	98 13       	cpse	r25, r24
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <__vector_11+0x50>
		Check_Input(myrxbuffer);
     e8e:	89 ed       	ldi	r24, 0xD9	; 217
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9a de       	rcall	.-716    	; 0xbc8 <Check_Input>


	rxWritePos++;
     e94:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rxWritePos>
     e98:	8f 5f       	subi	r24, 0xFF	; 255
     e9a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <rxWritePos>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <init_serial>:
}


void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
     ec0:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
     ec2:	83 e3       	ldi	r24, 0x33	; 51
     ec4:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
     ec6:	80 b5       	in	r24, 0x20	; 32
     ec8:	8f 7e       	andi	r24, 0xEF	; 239
     eca:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
     ecc:	80 b5       	in	r24, 0x20	; 32
     ece:	8f 7d       	andi	r24, 0xDF	; 223
     ed0:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
     ed2:	80 b5       	in	r24, 0x20	; 32
     ed4:	87 7f       	andi	r24, 0xF7	; 247
     ed6:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
     ed8:	86 e8       	ldi	r24, 0x86	; 134
     eda:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
     edc:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
     ede:	8a b1       	in	r24, 0x0a	; 10
     ee0:	88 61       	ori	r24, 0x18	; 24
     ee2:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
     ee4:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
     ee6:	57 9a       	sbi	0x0a, 7	; 10
     ee8:	08 95       	ret

00000eea <main>:




int main (void)
{
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	00 d0       	rcall	.+0      	; 0xef0 <main+0x6>
     ef0:	1f 92       	push	r1
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	board_init();
     ef6:	cb d8       	rcall	.-3690   	; 0x8e <board_init>
	init_serial();
     ef8:	e3 df       	rcall	.-58     	; 0xec0 <init_serial>
	init_leds();
     efa:	c3 dc       	rcall	.-1658   	; 0x882 <init_leds>
     efc:	8d e0       	ldi	r24, 0x0D	; 13
	// delimiter carriage return
	strcpy(CR,"\xD");
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <enemy_pass>
     f04:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <CR>
     f08:	c1 9a       	sbi	0x18, 1	; 24

	//Turning off leds(atmega16)
	PORTB |= (1<<PORTB1); 
     f0a:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB2);
     f0c:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= (1<<PORTB3);
		

	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
     f0e:	80 e4       	ldi	r24, 0x40	; 64
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	b2 d0       	rcall	.+356    	; 0x1078 <malloc>
     f14:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <M+0x1>
     f18:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <M>
     f1c:	1a 82       	std	Y+2, r1	; 0x02
	
	volatile int i=0;
     f1e:	19 82       	std	Y+1, r1	; 0x01
     f20:	1b 82       	std	Y+3, r1	; 0x03

	}
	*/
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
     f22:	1a 82       	std	Y+2, r1	; 0x02
	for(i = 0 ; i <= 7 ; i++)
     f24:	19 82       	std	Y+1, r1	; 0x01
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	08 97       	sbiw	r24, 0x08	; 8
     f2c:	34 f5       	brge	.+76     	; 0xf7a <main+0x90>
     f2e:	22 e0       	ldi	r18, 0x02	; 2
	{
		for(y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     f30:	1b 82       	std	Y+3, r1	; 0x03
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	88 30       	cpi	r24, 0x08	; 8
     f36:	c0 f4       	brcc	.+48     	; 0xf68 <main+0x7e>
     f38:	89 81       	ldd	r24, Y+1	; 0x01
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	3b 81       	ldd	r19, Y+3	; 0x03
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	83 0f       	add	r24, r19
     f4c:	91 1d       	adc	r25, r1
     f4e:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <M>
     f52:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <M+0x1>
     f56:	e8 0f       	add	r30, r24
     f58:	f9 1f       	adc	r31, r25
     f5a:	20 83       	st	Z, r18
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	8b 83       	std	Y+3, r24	; 0x03
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 30       	cpi	r24, 0x08	; 8
     f66:	40 f3       	brcs	.-48     	; 0xf38 <main+0x4e>
     f68:	89 81       	ldd	r24, Y+1	; 0x01
	}
	*/
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	9a 83       	std	Y+2, r25	; 0x02
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	08 97       	sbiw	r24, 0x08	; 8
     f78:	dc f2       	brlt	.-74     	; 0xf30 <main+0x46>
     f7a:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <M>
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
	M[3*8+3] = 1 ;
     f7e:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <M+0x1>
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	83 8f       	std	Z+27, r24	; 0x1b
     f86:	14 8e       	std	Z+28, r1	; 0x1c
	M[3*8+4] = 0 ;
     f88:	13 a2       	std	Z+35, r1	; 0x23
	M[4*8+3] = 0 ;
     f8a:	84 a3       	std	Z+36, r24	; 0x24
	M[4*8+4] = 1 ;
     f8c:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <rxReadPos>

	/////////////////////////////////////////////////////////////////////////////
	

	//buffer pointers init
	rxReadPos=0;
     f90:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <rxWritePos>
	rxWritePos=0;
     f94:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <ITflag>
	//flag Initialization 
	ITflag = 0;
     f98:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
	ILflag = 0;
     f9c:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <move_done>
	move_done = 0;
     fa0:	92 e0       	ldi	r25, 0x02	; 2
	myTurn = 2;
     fa2:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <myTurn>
     fa6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <MyColor>
	MyColor = 1;
     faa:	78 94       	sei
	

	sei();
     fac:	12 e0       	ldi	r17, 0x02	; 2
					
				}
				else
				{
					Transmit("QT\r",0 , strlen("QT\r"));
					myTurn=2;
     fae:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
	
	while(1){


		//Waiting for PC response - (ILLIGAL request)
		if(ILflag >= 1)
     fb2:	88 23       	and	r24, r24
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <main+0xce>
     fb6:	45 c0       	rjmp	.+138    	; 0x1042 <main+0x158>
     fb8:	8f e1       	ldi	r24, 0x1F	; 31
     fba:	9e e4       	ldi	r25, 0x4E	; 78
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <main+0xd2>
     fc0:	00 c0       	rjmp	.+0      	; 0xfc2 <main+0xd8>
     fc2:	00 00       	nop
     fc4:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
		{
			//Transmit("Waiting OK for announcement\r",0,"Waiting OK for announcement\r");
			_delay_ms(10);
			while(1){		
				if(ILflag == 2){ // we received the response we were waiting
     fc8:	82 30       	cpi	r24, 0x02	; 2
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <main+0xda>
     fcc:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
					ILflag = 0;
     fd0:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <rxReadPos>
					break;
				}
			}
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75){ // "ok"
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	fc 01       	movw	r30, r24
     fd8:	e7 52       	subi	r30, 0x27	; 39
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	20 81       	ld	r18, Z
     fde:	2f 34       	cpi	r18, 0x4F	; 79
     fe0:	71 f4       	brne	.+28     	; 0xffe <main+0x114>
     fe2:	fc 01       	movw	r30, r24
     fe4:	e7 52       	subi	r30, 0x27	; 39
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	81 81       	ldd	r24, Z+1	; 0x01
     fea:	8b 34       	cpi	r24, 0x4B	; 75
     fec:	31 f5       	brne	.+76     	; 0x103a <main+0x150>
     fee:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rxWritePos>
			   rxReadPos=rxWritePos;
     ff2:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <rxReadPos>
				AnnounceRes(1); //WIN - LED1
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	a9 db       	rcall	.-2222   	; 0x74c <AnnounceRes>
     ffa:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
				myTurn=2;
     ffe:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <rxReadPos>
				
			
			}//future update : "else ILflag=1;" , wrong input avoidance

			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){ //"PL"
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	fc 01       	movw	r30, r24
    1006:	e7 52       	subi	r30, 0x27	; 39
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	20 81       	ld	r18, Z
    100c:	20 35       	cpi	r18, 0x50	; 80
    100e:	a9 f4       	brne	.+42     	; 0x103a <main+0x150>
    1010:	fc 01       	movw	r30, r24
    1012:	e7 52       	subi	r30, 0x27	; 39
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	81 81       	ldd	r24, Z+1	; 0x01
    1018:	8c 34       	cpi	r24, 0x4C	; 76
    101a:	79 f4       	brne	.+30     	; 0x103a <main+0x150>
    101c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <ITflag>
				if(ITflag==1)
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	21 f4       	brne	.+8      	; 0x102c <main+0x142>
				{
					ITflag = 0;
    1024:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <ITflag>
					init_timer();
    1028:	33 dc       	rcall	.-1946   	; 0x890 <init_timer>
    102a:	07 c0       	rjmp	.+14     	; 0x103a <main+0x150>
					
				}
				else
				{
					Transmit("QT\r",0 , strlen("QT\r"));
    102c:	43 e0       	ldi	r20, 0x03	; 3
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	88 ec       	ldi	r24, 0xC8	; 200
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	cf da       	rcall	.-2658   	; 0x5d4 <Transmit>
    1036:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
					myTurn=2;
    103a:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rxWritePos>
				}						
					
			}	//future update : "else ILflag=1;" , wrong input avoidance		

			rxReadPos=rxWritePos;
    103e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <rxReadPos>
    1042:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
		
		
		if((myTurn == 0)&&(mt == 0)){
    1046:	81 11       	cpse	r24, r1
    1048:	0a c0       	rjmp	.+20     	; 0x105e <main+0x174>
    104a:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <mt>
    104e:	81 11       	cpse	r24, r1
    1050:	06 c0       	rjmp	.+12     	; 0x105e <main+0x174>
			//Possible speculation algo
			mt = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <mt>
			init_timer();
    1058:	1b dc       	rcall	.-1994   	; 0x890 <init_timer>
    105a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			myTurn = 0;
		}
			
		
		if(myTurn==1){ //When its avr's turn
    105e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	09 f0       	breq	.+2      	; 0x1068 <main+0x17e>
			mt = 0; //reset flag for HIS turn			
    1066:	a3 cf       	rjmp	.-186    	; 0xfae <main+0xc4>
    1068:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <mt>
			init_timer(); //reset timer
    106c:	11 dc       	rcall	.-2014   	; 0x890 <init_timer>
			myTurn = 1;  //Important - collision with  init_timer
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			Algo();		//The actual algorithm
    1074:	18 dc       	rcall	.-2000   	; 0x8a6 <Algo>
    1076:	9b cf       	rjmp	.-202    	; 0xfae <main+0xc4>

00001078 <malloc>:
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	91 05       	cpc	r25, r1
    1084:	10 f4       	brcc	.+4      	; 0x108a <malloc+0x12>
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <__flp>
    108e:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <__flp+0x1>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	30 97       	sbiw	r30, 0x00	; 0
    109c:	19 f1       	breq	.+70     	; 0x10e4 <malloc+0x6c>
    109e:	40 81       	ld	r20, Z
    10a0:	51 81       	ldd	r21, Z+1	; 0x01
    10a2:	02 81       	ldd	r16, Z+2	; 0x02
    10a4:	13 81       	ldd	r17, Z+3	; 0x03
    10a6:	48 17       	cp	r20, r24
    10a8:	59 07       	cpc	r21, r25
    10aa:	c8 f0       	brcs	.+50     	; 0x10de <malloc+0x66>
    10ac:	84 17       	cp	r24, r20
    10ae:	95 07       	cpc	r25, r21
    10b0:	69 f4       	brne	.+26     	; 0x10cc <malloc+0x54>
    10b2:	10 97       	sbiw	r26, 0x00	; 0
    10b4:	31 f0       	breq	.+12     	; 0x10c2 <malloc+0x4a>
    10b6:	12 96       	adiw	r26, 0x02	; 2
    10b8:	0c 93       	st	X, r16
    10ba:	12 97       	sbiw	r26, 0x02	; 2
    10bc:	13 96       	adiw	r26, 0x03	; 3
    10be:	1c 93       	st	X, r17
    10c0:	27 c0       	rjmp	.+78     	; 0x1110 <malloc+0x98>
    10c2:	00 93 de 01 	sts	0x01DE, r16	; 0x8001de <__flp>
    10c6:	10 93 df 01 	sts	0x01DF, r17	; 0x8001df <__flp+0x1>
    10ca:	22 c0       	rjmp	.+68     	; 0x1110 <malloc+0x98>
    10cc:	21 15       	cp	r18, r1
    10ce:	31 05       	cpc	r19, r1
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <malloc+0x60>
    10d2:	42 17       	cp	r20, r18
    10d4:	53 07       	cpc	r21, r19
    10d6:	18 f4       	brcc	.+6      	; 0x10de <malloc+0x66>
    10d8:	9a 01       	movw	r18, r20
    10da:	bd 01       	movw	r22, r26
    10dc:	ef 01       	movw	r28, r30
    10de:	df 01       	movw	r26, r30
    10e0:	f8 01       	movw	r30, r16
    10e2:	db cf       	rjmp	.-74     	; 0x109a <malloc+0x22>
    10e4:	21 15       	cp	r18, r1
    10e6:	31 05       	cpc	r19, r1
    10e8:	f9 f0       	breq	.+62     	; 0x1128 <malloc+0xb0>
    10ea:	28 1b       	sub	r18, r24
    10ec:	39 0b       	sbc	r19, r25
    10ee:	24 30       	cpi	r18, 0x04	; 4
    10f0:	31 05       	cpc	r19, r1
    10f2:	80 f4       	brcc	.+32     	; 0x1114 <malloc+0x9c>
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	9b 81       	ldd	r25, Y+3	; 0x03
    10f8:	61 15       	cp	r22, r1
    10fa:	71 05       	cpc	r23, r1
    10fc:	21 f0       	breq	.+8      	; 0x1106 <malloc+0x8e>
    10fe:	fb 01       	movw	r30, r22
    1100:	93 83       	std	Z+3, r25	; 0x03
    1102:	82 83       	std	Z+2, r24	; 0x02
    1104:	04 c0       	rjmp	.+8      	; 0x110e <malloc+0x96>
    1106:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <__flp+0x1>
    110a:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__flp>
    110e:	fe 01       	movw	r30, r28
    1110:	32 96       	adiw	r30, 0x02	; 2
    1112:	44 c0       	rjmp	.+136    	; 0x119c <malloc+0x124>
    1114:	fe 01       	movw	r30, r28
    1116:	e2 0f       	add	r30, r18
    1118:	f3 1f       	adc	r31, r19
    111a:	81 93       	st	Z+, r24
    111c:	91 93       	st	Z+, r25
    111e:	22 50       	subi	r18, 0x02	; 2
    1120:	31 09       	sbc	r19, r1
    1122:	39 83       	std	Y+1, r19	; 0x01
    1124:	28 83       	st	Y, r18
    1126:	3a c0       	rjmp	.+116    	; 0x119c <malloc+0x124>
    1128:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <__brkval>
    112c:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <__brkval+0x1>
    1130:	23 2b       	or	r18, r19
    1132:	41 f4       	brne	.+16     	; 0x1144 <malloc+0xcc>
    1134:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1138:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    113c:	30 93 dd 01 	sts	0x01DD, r19	; 0x8001dd <__brkval+0x1>
    1140:	20 93 dc 01 	sts	0x01DC, r18	; 0x8001dc <__brkval>
    1144:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    1148:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    114c:	21 15       	cp	r18, r1
    114e:	31 05       	cpc	r19, r1
    1150:	41 f4       	brne	.+16     	; 0x1162 <malloc+0xea>
    1152:	2d b7       	in	r18, 0x3d	; 61
    1154:	3e b7       	in	r19, 0x3e	; 62
    1156:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    115a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    115e:	24 1b       	sub	r18, r20
    1160:	35 0b       	sbc	r19, r21
    1162:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <__brkval>
    1166:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <__brkval+0x1>
    116a:	e2 17       	cp	r30, r18
    116c:	f3 07       	cpc	r31, r19
    116e:	a0 f4       	brcc	.+40     	; 0x1198 <malloc+0x120>
    1170:	2e 1b       	sub	r18, r30
    1172:	3f 0b       	sbc	r19, r31
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	78 f0       	brcs	.+30     	; 0x1198 <malloc+0x120>
    117a:	ac 01       	movw	r20, r24
    117c:	4e 5f       	subi	r20, 0xFE	; 254
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	24 17       	cp	r18, r20
    1182:	35 07       	cpc	r19, r21
    1184:	48 f0       	brcs	.+18     	; 0x1198 <malloc+0x120>
    1186:	4e 0f       	add	r20, r30
    1188:	5f 1f       	adc	r21, r31
    118a:	50 93 dd 01 	sts	0x01DD, r21	; 0x8001dd <__brkval+0x1>
    118e:	40 93 dc 01 	sts	0x01DC, r20	; 0x8001dc <__brkval>
    1192:	81 93       	st	Z+, r24
    1194:	91 93       	st	Z+, r25
    1196:	02 c0       	rjmp	.+4      	; 0x119c <malloc+0x124>
    1198:	e0 e0       	ldi	r30, 0x00	; 0
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	cf 01       	movw	r24, r30
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	08 95       	ret

000011a8 <free>:
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <free+0xa>
    11b0:	81 c0       	rjmp	.+258    	; 0x12b4 <free+0x10c>
    11b2:	fc 01       	movw	r30, r24
    11b4:	32 97       	sbiw	r30, 0x02	; 2
    11b6:	13 82       	std	Z+3, r1	; 0x03
    11b8:	12 82       	std	Z+2, r1	; 0x02
    11ba:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <__flp>
    11be:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <__flp+0x1>
    11c2:	10 97       	sbiw	r26, 0x00	; 0
    11c4:	81 f4       	brne	.+32     	; 0x11e6 <free+0x3e>
    11c6:	20 81       	ld	r18, Z
    11c8:	31 81       	ldd	r19, Z+1	; 0x01
    11ca:	82 0f       	add	r24, r18
    11cc:	93 1f       	adc	r25, r19
    11ce:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <__brkval>
    11d2:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <__brkval+0x1>
    11d6:	28 17       	cp	r18, r24
    11d8:	39 07       	cpc	r19, r25
    11da:	51 f5       	brne	.+84     	; 0x1230 <free+0x88>
    11dc:	f0 93 dd 01 	sts	0x01DD, r31	; 0x8001dd <__brkval+0x1>
    11e0:	e0 93 dc 01 	sts	0x01DC, r30	; 0x8001dc <__brkval>
    11e4:	67 c0       	rjmp	.+206    	; 0x12b4 <free+0x10c>
    11e6:	ed 01       	movw	r28, r26
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	ce 17       	cp	r28, r30
    11ee:	df 07       	cpc	r29, r31
    11f0:	40 f4       	brcc	.+16     	; 0x1202 <free+0x5a>
    11f2:	4a 81       	ldd	r20, Y+2	; 0x02
    11f4:	5b 81       	ldd	r21, Y+3	; 0x03
    11f6:	9e 01       	movw	r18, r28
    11f8:	41 15       	cp	r20, r1
    11fa:	51 05       	cpc	r21, r1
    11fc:	f1 f0       	breq	.+60     	; 0x123a <free+0x92>
    11fe:	ea 01       	movw	r28, r20
    1200:	f5 cf       	rjmp	.-22     	; 0x11ec <free+0x44>
    1202:	d3 83       	std	Z+3, r29	; 0x03
    1204:	c2 83       	std	Z+2, r28	; 0x02
    1206:	40 81       	ld	r20, Z
    1208:	51 81       	ldd	r21, Z+1	; 0x01
    120a:	84 0f       	add	r24, r20
    120c:	95 1f       	adc	r25, r21
    120e:	c8 17       	cp	r28, r24
    1210:	d9 07       	cpc	r29, r25
    1212:	59 f4       	brne	.+22     	; 0x122a <free+0x82>
    1214:	88 81       	ld	r24, Y
    1216:	99 81       	ldd	r25, Y+1	; 0x01
    1218:	84 0f       	add	r24, r20
    121a:	95 1f       	adc	r25, r21
    121c:	02 96       	adiw	r24, 0x02	; 2
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	9b 81       	ldd	r25, Y+3	; 0x03
    1226:	93 83       	std	Z+3, r25	; 0x03
    1228:	82 83       	std	Z+2, r24	; 0x02
    122a:	21 15       	cp	r18, r1
    122c:	31 05       	cpc	r19, r1
    122e:	29 f4       	brne	.+10     	; 0x123a <free+0x92>
    1230:	f0 93 df 01 	sts	0x01DF, r31	; 0x8001df <__flp+0x1>
    1234:	e0 93 de 01 	sts	0x01DE, r30	; 0x8001de <__flp>
    1238:	3d c0       	rjmp	.+122    	; 0x12b4 <free+0x10c>
    123a:	e9 01       	movw	r28, r18
    123c:	fb 83       	std	Y+3, r31	; 0x03
    123e:	ea 83       	std	Y+2, r30	; 0x02
    1240:	49 91       	ld	r20, Y+
    1242:	59 91       	ld	r21, Y+
    1244:	c4 0f       	add	r28, r20
    1246:	d5 1f       	adc	r29, r21
    1248:	ec 17       	cp	r30, r28
    124a:	fd 07       	cpc	r31, r29
    124c:	61 f4       	brne	.+24     	; 0x1266 <free+0xbe>
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	84 0f       	add	r24, r20
    1254:	95 1f       	adc	r25, r21
    1256:	02 96       	adiw	r24, 0x02	; 2
    1258:	e9 01       	movw	r28, r18
    125a:	99 83       	std	Y+1, r25	; 0x01
    125c:	88 83       	st	Y, r24
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	9b 83       	std	Y+3, r25	; 0x03
    1264:	8a 83       	std	Y+2, r24	; 0x02
    1266:	e0 e0       	ldi	r30, 0x00	; 0
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	12 96       	adiw	r26, 0x02	; 2
    126c:	8d 91       	ld	r24, X+
    126e:	9c 91       	ld	r25, X
    1270:	13 97       	sbiw	r26, 0x03	; 3
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	19 f0       	breq	.+6      	; 0x127c <free+0xd4>
    1276:	fd 01       	movw	r30, r26
    1278:	dc 01       	movw	r26, r24
    127a:	f7 cf       	rjmp	.-18     	; 0x126a <free+0xc2>
    127c:	8d 91       	ld	r24, X+
    127e:	9c 91       	ld	r25, X
    1280:	11 97       	sbiw	r26, 0x01	; 1
    1282:	9d 01       	movw	r18, r26
    1284:	2e 5f       	subi	r18, 0xFE	; 254
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
    1288:	82 0f       	add	r24, r18
    128a:	93 1f       	adc	r25, r19
    128c:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <__brkval>
    1290:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <__brkval+0x1>
    1294:	28 17       	cp	r18, r24
    1296:	39 07       	cpc	r19, r25
    1298:	69 f4       	brne	.+26     	; 0x12b4 <free+0x10c>
    129a:	30 97       	sbiw	r30, 0x00	; 0
    129c:	29 f4       	brne	.+10     	; 0x12a8 <free+0x100>
    129e:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <__flp+0x1>
    12a2:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <__flp>
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <free+0x104>
    12a8:	13 82       	std	Z+3, r1	; 0x03
    12aa:	12 82       	std	Z+2, r1	; 0x02
    12ac:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <__brkval+0x1>
    12b0:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <__brkval>
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <_exit>:
    12ba:	f8 94       	cli

000012bc <__stop_program>:
    12bc:	ff cf       	rjmp	.-2      	; 0x12bc <__stop_program>
