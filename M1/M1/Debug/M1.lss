
M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001124  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001124  000011b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000112  0080008c  0080008c  000011e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ce  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000817  00000000  00000000  000024d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000135c  00000000  00000000  00002ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  0000404c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fdce  00000000  00000000  00004324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ebd  00000000  00000000  000140f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00014faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  00015077  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c0       	rjmp	.+118    	; 0x8c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	fa c2       	rjmp	.+1524   	; 0x616 <__vector_8>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c0       	rjmp	.+98     	; 0x8c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	48 c6       	rjmp	.+3216   	; 0xcbe <__vector_11>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	c6 c1       	rjmp	.+908    	; 0x3c2 <__vector_13>
      36:	00 00       	nop
      38:	29 c0       	rjmp	.+82     	; 0x8c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	6e d6       	rcall	.+3292   	; 0xd64 <main>
      88:	0c 94 90 08 	jmp	0x1120	; 0x1120 <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
      8e:	08 95       	ret

00000090 <CheckMove>:
 /*
 * This function transmits a single byte to the terminal
 */
 void Sendmsg(char *data){
	 if(UCSRA & (1 << UDRE)) //if UDR is empty(no data transfer at the moment)
	 UDR = data;
      90:	2f 92       	push	r2
      92:	3f 92       	push	r3
      94:	4f 92       	push	r4
      96:	5f 92       	push	r5
      98:	6f 92       	push	r6
      9a:	7f 92       	push	r7
      9c:	8f 92       	push	r8
      9e:	9f 92       	push	r9
      a0:	af 92       	push	r10
      a2:	bf 92       	push	r11
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
      b8:	2c 97       	sbiw	r28, 0x0c	; 12
      ba:	0f b6       	in	r0, 0x3f	; 63
      bc:	f8 94       	cli
      be:	de bf       	out	0x3e, r29	; 62
      c0:	0f be       	out	0x3f, r0	; 63
      c2:	cd bf       	out	0x3d, r28	; 61
      c4:	b6 2e       	mov	r11, r22
      c6:	68 2e       	mov	r6, r24
      c8:	71 2c       	mov	r7, r1
      ca:	93 01       	movw	r18, r6
      cc:	21 50       	subi	r18, 0x01	; 1
      ce:	31 09       	sbc	r19, r1
      d0:	3a 83       	std	Y+2, r19	; 0x02
      d2:	29 83       	std	Y+1, r18	; 0x01
      d4:	23 01       	movw	r4, r6
      d6:	2f ef       	ldi	r18, 0xFF	; 255
      d8:	42 1a       	sub	r4, r18
      da:	52 0a       	sbc	r5, r18
      dc:	29 81       	ldd	r18, Y+1	; 0x01
      de:	3a 81       	ldd	r19, Y+2	; 0x02
      e0:	42 16       	cp	r4, r18
      e2:	53 06       	cpc	r5, r19
      e4:	0c f4       	brge	.+2      	; 0xe8 <CheckMove+0x58>
      e6:	4e c1       	rjmp	.+668    	; 0x384 <CheckMove+0x2f4>
      e8:	26 2e       	mov	r2, r22
      ea:	31 2c       	mov	r3, r1
      ec:	93 01       	movw	r18, r6
      ee:	22 0f       	add	r18, r18
      f0:	33 1f       	adc	r19, r19
      f2:	22 0f       	add	r18, r18
      f4:	33 1f       	adc	r19, r19
      f6:	22 0f       	add	r18, r18
      f8:	33 1f       	adc	r19, r19
      fa:	b9 01       	movw	r22, r18
      fc:	62 0d       	add	r22, r2
      fe:	73 1d       	adc	r23, r3
     100:	79 87       	std	Y+9, r23	; 0x09
     102:	68 87       	std	Y+8, r22	; 0x08
     104:	1d 82       	std	Y+5, r1	; 0x05
     106:	91 01       	movw	r18, r2
     108:	21 50       	subi	r18, 0x01	; 1
     10a:	31 09       	sbc	r19, r1
     10c:	3f 83       	std	Y+7, r19	; 0x07
     10e:	2e 83       	std	Y+6, r18	; 0x06
     110:	41 01       	movw	r8, r2
     112:	3f ef       	ldi	r19, 0xFF	; 255
     114:	83 1a       	sub	r8, r19
     116:	93 0a       	sbc	r9, r19
     118:	0f 2e       	mov	r0, r31
     11a:	f7 e0       	ldi	r31, 0x07	; 7
     11c:	af 2e       	mov	r10, r31
     11e:	f0 2d       	mov	r31, r0
     120:	3b 86       	std	Y+11, r3	; 0x0b
     122:	2a 86       	std	Y+10, r2	; 0x0a
     124:	38 2e       	mov	r3, r24
     126:	bc 86       	std	Y+12, r11	; 0x0c
     128:	b4 2e       	mov	r11, r20
     12a:	89 81       	ldd	r24, Y+1	; 0x01
     12c:	9a 81       	ldd	r25, Y+2	; 0x02
     12e:	99 23       	and	r25, r25
     130:	0c f4       	brge	.+2      	; 0x134 <CheckMove+0xa4>
     132:	1c c1       	rjmp	.+568    	; 0x36c <CheckMove+0x2dc>
     134:	89 81       	ldd	r24, Y+1	; 0x01
     136:	9a 81       	ldd	r25, Y+2	; 0x02
     138:	08 97       	sbiw	r24, 0x08	; 8
     13a:	0c f0       	brlt	.+2      	; 0x13e <CheckMove+0xae>
     13c:	17 c1       	rjmp	.+558    	; 0x36c <CheckMove+0x2dc>
     13e:	6e 81       	ldd	r22, Y+6	; 0x06
     140:	7f 81       	ldd	r23, Y+7	; 0x07
     142:	7c 83       	std	Y+4, r23	; 0x04
     144:	6b 83       	std	Y+3, r22	; 0x03
     146:	8b 81       	ldd	r24, Y+3	; 0x03
     148:	9c 81       	ldd	r25, Y+4	; 0x04
     14a:	88 16       	cp	r8, r24
     14c:	99 06       	cpc	r9, r25
     14e:	0c f4       	brge	.+2      	; 0x152 <CheckMove+0xc2>
     150:	0d c1       	rjmp	.+538    	; 0x36c <CheckMove+0x2dc>
     152:	2c 84       	ldd	r2, Y+12	; 0x0c
     154:	8b 81       	ldd	r24, Y+3	; 0x03
     156:	9c 81       	ldd	r25, Y+4	; 0x04
     158:	99 23       	and	r25, r25
     15a:	0c f4       	brge	.+2      	; 0x15e <CheckMove+0xce>
     15c:	fc c0       	rjmp	.+504    	; 0x356 <CheckMove+0x2c6>
     15e:	8b 81       	ldd	r24, Y+3	; 0x03
     160:	9c 81       	ldd	r25, Y+4	; 0x04
     162:	08 97       	sbiw	r24, 0x08	; 8
     164:	0c f0       	brlt	.+2      	; 0x168 <CheckMove+0xd8>
     166:	f7 c0       	rjmp	.+494    	; 0x356 <CheckMove+0x2c6>
     168:	40 91 97 01 	lds	r20, 0x0197	; 0x800197 <M>
     16c:	50 91 98 01 	lds	r21, 0x0198	; 0x800198 <M+0x1>
     170:	e9 81       	ldd	r30, Y+1	; 0x01
     172:	fa 81       	ldd	r31, Y+2	; 0x02
     174:	8b 81       	ldd	r24, Y+3	; 0x03
     176:	9c 81       	ldd	r25, Y+4	; 0x04
     178:	ee 0f       	add	r30, r30
     17a:	ff 1f       	adc	r31, r31
     17c:	ee 0f       	add	r30, r30
     17e:	ff 1f       	adc	r31, r31
     180:	ee 0f       	add	r30, r30
     182:	ff 1f       	adc	r31, r31
     184:	e8 0f       	add	r30, r24
     186:	f9 1f       	adc	r31, r25
     188:	e4 0f       	add	r30, r20
     18a:	f5 1f       	adc	r31, r21
     18c:	80 81       	ld	r24, Z
     18e:	8b 15       	cp	r24, r11
     190:	09 f4       	brne	.+2      	; 0x194 <CheckMove+0x104>
     192:	e1 c0       	rjmp	.+450    	; 0x356 <CheckMove+0x2c6>
     194:	e9 81       	ldd	r30, Y+1	; 0x01
     196:	fa 81       	ldd	r31, Y+2	; 0x02
     198:	8b 81       	ldd	r24, Y+3	; 0x03
     19a:	9c 81       	ldd	r25, Y+4	; 0x04
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	ee 0f       	add	r30, r30
     1a2:	ff 1f       	adc	r31, r31
     1a4:	ee 0f       	add	r30, r30
     1a6:	ff 1f       	adc	r31, r31
     1a8:	e8 0f       	add	r30, r24
     1aa:	f9 1f       	adc	r31, r25
     1ac:	e4 0f       	add	r30, r20
     1ae:	f5 1f       	adc	r31, r21
     1b0:	80 81       	ld	r24, Z
     1b2:	82 30       	cpi	r24, 0x02	; 2
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <CheckMove+0x128>
     1b6:	cf c0       	rjmp	.+414    	; 0x356 <CheckMove+0x2c6>
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	9a 81       	ldd	r25, Y+2	; 0x02
     1bc:	68 16       	cp	r6, r24
     1be:	79 06       	cpc	r7, r25
     1c0:	3c f0       	brlt	.+14     	; 0x1d0 <CheckMove+0x140>
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	68 16       	cp	r6, r24
     1c8:	79 06       	cpc	r7, r25
     1ca:	21 f0       	breq	.+8      	; 0x1d4 <CheckMove+0x144>
     1cc:	f1 2c       	mov	r15, r1
     1ce:	06 c0       	rjmp	.+12     	; 0x1dc <CheckMove+0x14c>
     1d0:	fa 2c       	mov	r15, r10
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <CheckMove+0x14c>
     1d4:	0f 2e       	mov	r0, r31
     1d6:	f9 e0       	ldi	r31, 0x09	; 9
     1d8:	ff 2e       	mov	r15, r31
     1da:	f0 2d       	mov	r31, r0
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	9c 81       	ldd	r25, Y+4	; 0x04
     1e0:	68 16       	cp	r6, r24
     1e2:	79 06       	cpc	r7, r25
     1e4:	4c f0       	brlt	.+18     	; 0x1f8 <CheckMove+0x168>
     1e6:	8b 81       	ldd	r24, Y+3	; 0x03
     1e8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ea:	2a 85       	ldd	r18, Y+10	; 0x0a
     1ec:	3b 85       	ldd	r19, Y+11	; 0x0b
     1ee:	28 17       	cp	r18, r24
     1f0:	39 07       	cpc	r19, r25
     1f2:	21 f0       	breq	.+8      	; 0x1fc <CheckMove+0x16c>
     1f4:	e1 2c       	mov	r14, r1
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <CheckMove+0x174>
     1f8:	ea 2c       	mov	r14, r10
     1fa:	04 c0       	rjmp	.+8      	; 0x204 <CheckMove+0x174>
     1fc:	0f 2e       	mov	r0, r31
     1fe:	f9 e0       	ldi	r31, 0x09	; 9
     200:	ef 2e       	mov	r14, r31
     202:	f0 2d       	mov	r31, r0
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	9a 81       	ldd	r25, Y+2	; 0x02
     208:	18 2f       	mov	r17, r24
     20a:	13 19       	sub	r17, r3
     20c:	8b 81       	ldd	r24, Y+3	; 0x03
     20e:	9c 81       	ldd	r25, Y+4	; 0x04
     210:	08 2f       	mov	r16, r24
     212:	02 19       	sub	r16, r2
     214:	29 81       	ldd	r18, Y+1	; 0x01
     216:	3a 81       	ldd	r19, Y+2	; 0x02
     218:	a2 2f       	mov	r26, r18
     21a:	8b 81       	ldd	r24, Y+3	; 0x03
     21c:	9c 81       	ldd	r25, Y+4	; 0x04
     21e:	b8 2f       	mov	r27, r24
     220:	33 27       	eor	r19, r19
     222:	c1 2e       	mov	r12, r17
     224:	d1 2c       	mov	r13, r1
     226:	cf 0c       	add	r12, r15
     228:	d1 1c       	adc	r13, r1
     22a:	2c 15       	cp	r18, r12
     22c:	3d 05       	cpc	r19, r13
     22e:	09 f4       	brne	.+2      	; 0x232 <CheckMove+0x1a2>
     230:	92 c0       	rjmp	.+292    	; 0x356 <CheckMove+0x2c6>
     232:	99 27       	eor	r25, r25
     234:	60 2f       	mov	r22, r16
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	6e 0d       	add	r22, r14
     23a:	71 1d       	adc	r23, r1
     23c:	86 17       	cp	r24, r22
     23e:	97 07       	cpc	r25, r23
     240:	09 f4       	brne	.+2      	; 0x244 <CheckMove+0x1b4>
     242:	89 c0       	rjmp	.+274    	; 0x356 <CheckMove+0x2c6>
     244:	22 0f       	add	r18, r18
     246:	33 1f       	adc	r19, r19
     248:	22 0f       	add	r18, r18
     24a:	33 1f       	adc	r19, r19
     24c:	22 0f       	add	r18, r18
     24e:	33 1f       	adc	r19, r19
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	fa 01       	movw	r30, r20
     256:	e8 0f       	add	r30, r24
     258:	f9 1f       	adc	r31, r25
     25a:	80 81       	ld	r24, Z
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	09 f4       	brne	.+2      	; 0x262 <CheckMove+0x1d2>
     260:	7a c0       	rjmp	.+244    	; 0x356 <CheckMove+0x2c6>
     262:	80 81       	ld	r24, Z
     264:	b8 12       	cpse	r11, r24
     266:	22 c0       	rjmp	.+68     	; 0x2ac <CheckMove+0x21c>
     268:	11 c0       	rjmp	.+34     	; 0x28c <CheckMove+0x1fc>
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	88 0f       	add	r24, r24
     270:	99 1f       	adc	r25, r25
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	e8 0f       	add	r30, r24
     278:	f9 1f       	adc	r31, r25
     27a:	e4 0f       	add	r30, r20
     27c:	f5 1f       	adc	r31, r21
     27e:	80 81       	ld	r24, Z
     280:	82 30       	cpi	r24, 0x02	; 2
     282:	09 f4       	brne	.+2      	; 0x286 <CheckMove+0x1f6>
     284:	68 c0       	rjmp	.+208    	; 0x356 <CheckMove+0x2c6>
     286:	80 81       	ld	r24, Z
     288:	b8 12       	cpse	r11, r24
     28a:	10 c0       	rjmp	.+32     	; 0x2ac <CheckMove+0x21c>
     28c:	e8 85       	ldd	r30, Y+8	; 0x08
     28e:	f9 85       	ldd	r31, Y+9	; 0x09
     290:	e4 0f       	add	r30, r20
     292:	f5 1f       	adc	r31, r21
     294:	b0 82       	st	Z, r11
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	48 2f       	mov	r20, r24
     29c:	2b 81       	ldd	r18, Y+3	; 0x03
     29e:	3c 81       	ldd	r19, Y+4	; 0x04
     2a0:	52 2f       	mov	r21, r18
     2a2:	f8 12       	cpse	r15, r24
     2a4:	11 c0       	rjmp	.+34     	; 0x2c8 <CheckMove+0x238>
     2a6:	31 e0       	ldi	r19, 0x01	; 1
     2a8:	3d 83       	std	Y+5, r19	; 0x05
     2aa:	55 c0       	rjmp	.+170    	; 0x356 <CheckMove+0x2c6>
     2ac:	b0 0f       	add	r27, r16
     2ae:	a1 0f       	add	r26, r17
     2b0:	8a 2f       	mov	r24, r26
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8c 15       	cp	r24, r12
     2b6:	9d 05       	cpc	r25, r13
     2b8:	09 f4       	brne	.+2      	; 0x2bc <CheckMove+0x22c>
     2ba:	4d c0       	rjmp	.+154    	; 0x356 <CheckMove+0x2c6>
     2bc:	eb 2f       	mov	r30, r27
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	e6 17       	cp	r30, r22
     2c2:	f7 07       	cpc	r31, r23
     2c4:	91 f6       	brne	.-92     	; 0x26a <CheckMove+0x1da>
     2c6:	47 c0       	rjmp	.+142    	; 0x356 <CheckMove+0x2c6>
     2c8:	e2 16       	cp	r14, r18
     2ca:	a1 f1       	breq	.+104    	; 0x334 <CheckMove+0x2a4>
     2cc:	99 27       	eor	r25, r25
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	82 0f       	add	r24, r18
     2dc:	91 1d       	adc	r25, r1
     2de:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <M>
     2e2:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <M+0x1>
     2e6:	f9 01       	movw	r30, r18
     2e8:	e8 0f       	add	r30, r24
     2ea:	f9 1f       	adc	r31, r25
     2ec:	80 81       	ld	r24, Z
     2ee:	82 30       	cpi	r24, 0x02	; 2
     2f0:	21 f1       	breq	.+72     	; 0x33a <CheckMove+0x2aa>
     2f2:	80 81       	ld	r24, Z
     2f4:	b8 12       	cpse	r11, r24
     2f6:	14 c0       	rjmp	.+40     	; 0x320 <CheckMove+0x290>
     2f8:	23 c0       	rjmp	.+70     	; 0x340 <CheckMove+0x2b0>
     2fa:	e5 2f       	mov	r30, r21
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	68 e0       	ldi	r22, 0x08	; 8
     300:	46 9f       	mul	r20, r22
     302:	e0 0d       	add	r30, r0
     304:	f1 1d       	adc	r31, r1
     306:	11 24       	eor	r1, r1
     308:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <M>
     30c:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <M+0x1>
     310:	e8 0f       	add	r30, r24
     312:	f9 1f       	adc	r31, r25
     314:	80 81       	ld	r24, Z
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	b1 f0       	breq	.+44     	; 0x346 <CheckMove+0x2b6>
     31a:	80 81       	ld	r24, Z
     31c:	b8 16       	cp	r11, r24
     31e:	b1 f0       	breq	.+44     	; 0x34c <CheckMove+0x2bc>
     320:	b0 82       	st	Z, r11
     322:	50 0f       	add	r21, r16
     324:	41 0f       	add	r20, r17
     326:	f4 16       	cp	r15, r20
     328:	a1 f0       	breq	.+40     	; 0x352 <CheckMove+0x2c2>
     32a:	e5 12       	cpse	r14, r21
     32c:	e6 cf       	rjmp	.-52     	; 0x2fa <CheckMove+0x26a>
     32e:	71 e0       	ldi	r23, 0x01	; 1
     330:	7d 83       	std	Y+5, r23	; 0x05
     332:	11 c0       	rjmp	.+34     	; 0x356 <CheckMove+0x2c6>
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	8d 83       	std	Y+5, r24	; 0x05
     338:	0e c0       	rjmp	.+28     	; 0x356 <CheckMove+0x2c6>
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	9d 83       	std	Y+5, r25	; 0x05
     33e:	0b c0       	rjmp	.+22     	; 0x356 <CheckMove+0x2c6>
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	2d 83       	std	Y+5, r18	; 0x05
     344:	08 c0       	rjmp	.+16     	; 0x356 <CheckMove+0x2c6>
     346:	31 e0       	ldi	r19, 0x01	; 1
     348:	3d 83       	std	Y+5, r19	; 0x05
     34a:	05 c0       	rjmp	.+10     	; 0x356 <CheckMove+0x2c6>
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	6d 83       	std	Y+5, r22	; 0x05
     350:	02 c0       	rjmp	.+4      	; 0x356 <CheckMove+0x2c6>
     352:	71 e0       	ldi	r23, 0x01	; 1
     354:	7d 83       	std	Y+5, r23	; 0x05
     356:	8b 81       	ldd	r24, Y+3	; 0x03
     358:	9c 81       	ldd	r25, Y+4	; 0x04
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	9c 83       	std	Y+4, r25	; 0x04
     35e:	8b 83       	std	Y+3, r24	; 0x03
     360:	8b 81       	ldd	r24, Y+3	; 0x03
     362:	9c 81       	ldd	r25, Y+4	; 0x04
     364:	88 16       	cp	r8, r24
     366:	99 06       	cpc	r9, r25
     368:	0c f0       	brlt	.+2      	; 0x36c <CheckMove+0x2dc>
     36a:	f4 ce       	rjmp	.-536    	; 0x154 <CheckMove+0xc4>
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	9a 83       	std	Y+2, r25	; 0x02
     374:	89 83       	std	Y+1, r24	; 0x01
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	48 16       	cp	r4, r24
     37c:	59 06       	cpc	r5, r25
     37e:	0c f0       	brlt	.+2      	; 0x382 <CheckMove+0x2f2>
     380:	d4 ce       	rjmp	.-600    	; 0x12a <CheckMove+0x9a>
     382:	01 c0       	rjmp	.+2      	; 0x386 <CheckMove+0x2f6>
     384:	1d 82       	std	Y+5, r1	; 0x05
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	9d 81       	ldd	r25, Y+5	; 0x05
     38a:	91 30       	cpi	r25, 0x01	; 1
     38c:	09 f0       	breq	.+2      	; 0x390 <CheckMove+0x300>
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	2c 96       	adiw	r28, 0x0c	; 12
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	df 90       	pop	r13
     3aa:	cf 90       	pop	r12
     3ac:	bf 90       	pop	r11
     3ae:	af 90       	pop	r10
     3b0:	9f 90       	pop	r9
     3b2:	8f 90       	pop	r8
     3b4:	7f 90       	pop	r7
     3b6:	6f 90       	pop	r6
     3b8:	5f 90       	pop	r5
     3ba:	4f 90       	pop	r4
     3bc:	3f 90       	pop	r3
     3be:	2f 90       	pop	r2
     3c0:	08 95       	ret

000003c2 <__vector_13>:
     3c2:	1f 92       	push	r1
     3c4:	0f 92       	push	r0
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	0f 92       	push	r0
     3ca:	11 24       	eor	r1, r1
     3cc:	0f 90       	pop	r0
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	1f 90       	pop	r1
     3d4:	18 95       	reti

000003d6 <Transmit>:
 }


 // TRANSMIT function : transmits a string

 void Transmit(char data[],uint8_t x,uint8_t y){
     3d6:	9c 01       	movw	r18, r24
	 

	 for (uint8_t i = x ; i < y  ; i++ ){
     3d8:	64 17       	cp	r22, r20
     3da:	50 f4       	brcc	.+20     	; 0x3f0 <Transmit+0x1a>
		 while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
     3dc:	5d 9b       	sbis	0x0b, 5	; 11
     3de:	fe cf       	rjmp	.-4      	; 0x3dc <Transmit+0x6>
		 ;
		 UDR = data[i];
     3e0:	f9 01       	movw	r30, r18
     3e2:	e6 0f       	add	r30, r22
     3e4:	f1 1d       	adc	r31, r1
     3e6:	90 81       	ld	r25, Z
     3e8:	9c b9       	out	0x0c, r25	; 12
 // TRANSMIT function : transmits a string

 void Transmit(char data[],uint8_t x,uint8_t y){
	 

	 for (uint8_t i = x ; i < y  ; i++ ){
     3ea:	6f 5f       	subi	r22, 0xFF	; 255
     3ec:	46 13       	cpse	r20, r22
     3ee:	f6 cf       	rjmp	.-20     	; 0x3dc <Transmit+0x6>
     3f0:	08 95       	ret

000003f2 <RST>:

// RESET FUNCTION: initializing game board and turning off leds
void RST(void)
{
	
	ILflag =0;
     3f2:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
	move_done=0;
     3f6:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <move_done>
	myTurn=2;
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
	PORTB |= (1<<PORTB1);
     400:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
     402:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
     404:	c3 9a       	sbi	0x18, 3	; 24

	mt = 0; //flag reset
     406:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <mt>
	myTurn=2;
     40a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     40e:	28 e0       	ldi	r18, 0x08	; 8
     410:	30 e0       	ldi	r19, 0x00	; 0
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = 2 ; // 0 == black , 1 == white, 2 == empty
     412:	42 e0       	ldi	r20, 0x02	; 2
     414:	10 c0       	rjmp	.+32     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     416:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <M>
     41a:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <M+0x1>
     41e:	e8 0f       	add	r30, r24
     420:	f9 1f       	adc	r31, r25
     422:	40 83       	st	Z, r20
     424:	01 96       	adiw	r24, 0x01	; 1
	mt = 0; //flag reset
	myTurn=2;
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
     426:	82 17       	cp	r24, r18
     428:	93 07       	cpc	r25, r19
     42a:	a9 f7       	brne	.-22     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     42c:	28 5f       	subi	r18, 0xF8	; 248
     42e:	3f 4f       	sbci	r19, 0xFF	; 255
	PORTB |= (1<<PORTB3);

	mt = 0; //flag reset
	myTurn=2;
	//Resetting board 
	for(uint8_t i = 0 ; i <= 7 ; i++)
     430:	28 34       	cpi	r18, 0x48	; 72
     432:	31 05       	cpc	r19, r1
     434:	19 f0       	breq	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     436:	c9 01       	movw	r24, r18
     438:	08 97       	sbiw	r24, 0x08	; 8
     43a:	ed cf       	rjmp	.-38     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = 2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	M[3*8+3] = 1 ;
     43c:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <M>
     440:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <M+0x1>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	83 8f       	std	Z+27, r24	; 0x1b
	M[3*8+4] = 0 ;
     448:	14 8e       	std	Z+28, r1	; 0x1c
	M[4*8+3] = 0 ;
     44a:	13 a2       	std	Z+35, r1	; 0x23
	M[4*8+4] = 1 ;
     44c:	84 a3       	std	Z+36, r24	; 0x24
	enemy_pass = 0;
     44e:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <enemy_pass>

	TCCR1B = 0x00;         //Clearing timer -- total reset
     452:	1e bc       	out	0x2e, r1	; 46
	TIMSK = (1 << TOIE1) ; //Overflow interrupts -- disabled
     454:	84 e0       	ldi	r24, 0x04	; 4
     456:	89 bf       	out	0x39, r24	; 57
	Transmit("OK\r",0 , strlen("OK\r"));
     458:	43 e0       	ldi	r20, 0x03	; 3
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	87 e6       	ldi	r24, 0x67	; 103
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	ba df       	rcall	.-140    	; 0x3d6 <Transmit>
	rxReadPos = rxWritePos;
     462:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <rxWritePos>
     466:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <rxReadPos>
     46a:	08 95       	ret

0000046c <Board>:
	return 0;	
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Visualization of the board
void Board(){
     46c:	bf 92       	push	r11
     46e:	cf 92       	push	r12
     470:	df 92       	push	r13
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	00 d0       	rcall	.+0      	; 0x480 <Board+0x14>
     480:	00 d0       	rcall	.+0      	; 0x482 <Board+0x16>
     482:	00 d0       	rcall	.+0      	; 0x484 <Board+0x18>
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	8b e6       	ldi	r24, 0x6B	; 107
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	a2 df       	rcall	.-188    	; 0x3d6 <Transmit>
     492:	11 e3       	ldi	r17, 0x31	; 49
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
     494:	0f 2e       	mov	r0, r31
     496:	fc e7       	ldi	r31, 0x7C	; 124
     498:	ff 2e       	mov	r15, r31
     49a:	f0 2d       	mov	r31, r0
		mymove[1] = '\x20';
     49c:	00 e2       	ldi	r16, 0x20	; 32
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
	{
		mymove[0] = '|';
     49e:	f9 82       	std	Y+1, r15	; 0x01
		mymove[1] = '\x20';
     4a0:	0a 83       	std	Y+2, r16	; 0x02
		mymove[2] = s1+1+'0';
     4a2:	1b 83       	std	Y+3, r17	; 0x03
		mymove[3] = '\x20';
     4a4:	0c 83       	std	Y+4, r16	; 0x04
		Transmit(mymove,0,4);
     4a6:	44 e0       	ldi	r20, 0x04	; 4
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	93 df       	rcall	.-218    	; 0x3d6 <Transmit>
     4b0:	1f 5f       	subi	r17, 0xFF	; 255
//Visualization of the board
void Board(){
	char mymove[6];
	uint8_t s1,s2;
	Transmit("\x20",0,1);
	for(s1=0 ; s1<8 ; s1++)
     4b2:	19 33       	cpi	r17, 0x39	; 57
     4b4:	a1 f7       	brne	.-24     	; 0x49e <Board+0x32>
     4b6:	00 e0       	ldi	r16, 0x00	; 0
     4b8:	10 e0       	ldi	r17, 0x00	; 0
     4ba:	0f 2e       	mov	r0, r31
     4bc:	f1 e4       	ldi	r31, 0x41	; 65
     4be:	bf 2e       	mov	r11, r31
     4c0:	f0 2d       	mov	r31, r0
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
     4c2:	0f 2e       	mov	r0, r31
     4c4:	fc e7       	ldi	r31, 0x7C	; 124
     4c6:	cf 2e       	mov	r12, r31
     4c8:	f0 2d       	mov	r31, r0
			mymove[1] = '\x20';
     4ca:	68 94       	set
     4cc:	dd 24       	eor	r13, r13
     4ce:	d5 f8       	bld	r13, 5
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
     4d0:	42 e0       	ldi	r20, 0x02	; 2
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	8d e6       	ldi	r24, 0x6D	; 109
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	7e df       	rcall	.-260    	; 0x3d6 <Transmit>
		mymove[0] = s1+65;
     4da:	b9 82       	std	Y+1, r11	; 0x01
		Transmit(mymove,0,1);
     4dc:	41 e0       	ldi	r20, 0x01	; 1
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	ce 01       	movw	r24, r28
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	78 df       	rcall	.-272    	; 0x3d6 <Transmit>
     4e6:	78 01       	movw	r14, r16
     4e8:	88 e0       	ldi	r24, 0x08	; 8
     4ea:	e8 0e       	add	r14, r24
     4ec:	f1 1c       	adc	r15, r1
		for(s2=0; s2<8; s2++)
		{
			mymove[0] = '|';
     4ee:	c9 82       	std	Y+1, r12	; 0x01
			mymove[1] = '\x20';
     4f0:	da 82       	std	Y+2, r13	; 0x02
			mymove[2] = M[s1*8 + s2]+'0';
     4f2:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <M>
     4f6:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <M+0x1>
     4fa:	e0 0f       	add	r30, r16
     4fc:	f1 1f       	adc	r31, r17
     4fe:	80 81       	ld	r24, Z
     500:	80 5d       	subi	r24, 0xD0	; 208
     502:	8b 83       	std	Y+3, r24	; 0x03
			mymove[3] = '\x20';
     504:	dc 82       	std	Y+4, r13	; 0x04
			Transmit(mymove,0,4);
     506:	44 e0       	ldi	r20, 0x04	; 4
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	63 df       	rcall	.-314    	; 0x3d6 <Transmit>
     510:	0f 5f       	subi	r16, 0xFF	; 255
     512:	1f 4f       	sbci	r17, 0xFF	; 255
	for(s1=0 ; s1<8 ; s1++)
	{
		Transmit("\n\r",0,strlen("\n\r"));
		mymove[0] = s1+65;
		Transmit(mymove,0,1);
		for(s2=0; s2<8; s2++)
     514:	0e 15       	cp	r16, r14
     516:	1f 05       	cpc	r17, r15
     518:	51 f7       	brne	.-44     	; 0x4ee <Board+0x82>
     51a:	b3 94       	inc	r11
     51c:	87 01       	movw	r16, r14
		mymove[1] = '\x20';
		mymove[2] = s1+1+'0';
		mymove[3] = '\x20';
		Transmit(mymove,0,4);
	}
	for(s1=0 ; s1<8 ; s1++)
     51e:	00 34       	cpi	r16, 0x40	; 64
     520:	11 05       	cpc	r17, r1
			mymove[2] = M[s1*8 + s2]+'0';
			mymove[3] = '\x20';
			Transmit(mymove,0,4);
		}
	}
	Transmit("\n\r",0,strlen("\n\r"));
     522:	b1 f6       	brne	.-84     	; 0x4d0 <Board+0x64>
     524:	42 e0       	ldi	r20, 0x02	; 2
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	8d e6       	ldi	r24, 0x6D	; 109
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	54 df       	rcall	.-344    	; 0x3d6 <Transmit>
}
     52e:	26 96       	adiw	r28, 0x06	; 6
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	df 90       	pop	r13
     548:	cf 90       	pop	r12
     54a:	bf 90       	pop	r11
     54c:	08 95       	ret

0000054e <AnnounceRes>:


void AnnounceRes(uint8_t res)
{
	//after announcement, timer interrupts are disabled.
	TIMSK &= ~(1 << TOIE1) ;
     54e:	99 b7       	in	r25, 0x39	; 57
     550:	9b 7f       	andi	r25, 0xFB	; 251
     552:	99 bf       	out	0x39, r25	; 57
	if(res == 1)
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	51 f4       	brne	.+20     	; 0x56c <AnnounceRes+0x1e>
	{
		Transmit("WN\r",0,strlen("WN\r"));
     558:	43 e0       	ldi	r20, 0x03	; 3
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	80 e7       	ldi	r24, 0x70	; 112
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	3a df       	rcall	.-396    	; 0x3d6 <Transmit>
		PORTB ^= (1<<PORTB1);             //Toggle LED
     562:	98 b3       	in	r25, 0x18	; 24
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	89 27       	eor	r24, r25
     568:	88 bb       	out	0x18, r24	; 24
     56a:	15 c0       	rjmp	.+42     	; 0x596 <AnnounceRes+0x48>
	}
	else if(res == 0)
     56c:	81 11       	cpse	r24, r1
     56e:	0a c0       	rjmp	.+20     	; 0x584 <AnnounceRes+0x36>
	{
		Transmit("LS\r",0,strlen("LS\r"));
     570:	43 e0       	ldi	r20, 0x03	; 3
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	84 e7       	ldi	r24, 0x74	; 116
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	2e df       	rcall	.-420    	; 0x3d6 <Transmit>
		PORTB ^= (1<<PORTB2);			//Toggle LED
     57a:	98 b3       	in	r25, 0x18	; 24
     57c:	84 e0       	ldi	r24, 0x04	; 4
     57e:	89 27       	eor	r24, r25
     580:	88 bb       	out	0x18, r24	; 24
     582:	09 c0       	rjmp	.+18     	; 0x596 <AnnounceRes+0x48>
	}
	else
	{
		Transmit("TE\r",0,strlen("TE\r"));
     584:	43 e0       	ldi	r20, 0x03	; 3
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	88 e7       	ldi	r24, 0x78	; 120
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	24 df       	rcall	.-440    	; 0x3d6 <Transmit>
		PORTB ^= (1<<PORTB3);			//Toggle LED
     58e:	98 b3       	in	r25, 0x18	; 24
     590:	88 e0       	ldi	r24, 0x08	; 8
     592:	89 27       	eor	r24, r25
     594:	88 bb       	out	0x18, r24	; 24
	}
	TCCR1B = 0x00;         //Clearing timer -- total reset
     596:	1e bc       	out	0x2e, r1	; 46
	TIMSK = (1 << TOIE1) ; //Overflow interrupts -- disabled
     598:	84 e0       	ldi	r24, 0x04	; 4
     59a:	89 bf       	out	0x39, r24	; 57
     59c:	08 95       	ret

0000059e <EndGame>:

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
     59e:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <M>
     5a2:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <M+0x1>
     5a6:	bf 01       	movw	r22, r30
     5a8:	60 5c       	subi	r22, 0xC0	; 192
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;
     5ac:	40 e0       	ldi	r20, 0x00	; 0

/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	11 c0       	rjmp	.+34     	; 0x5d4 <EndGame+0x36>

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
     5b2:	df 01       	movw	r26, r30
     5b4:	80 81       	ld	r24, Z
     5b6:	81 11       	cpse	r24, r1
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <EndGame+0x1e>
			b++;
     5ba:	9f 5f       	subi	r25, 0xFF	; 255
			if(M[i*8 + y] == 1)
     5bc:	8c 91       	ld	r24, X
     5be:	81 30       	cpi	r24, 0x01	; 1
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <EndGame+0x26>
			w++;
     5c2:	4f 5f       	subi	r20, 0xFF	; 255
     5c4:	31 96       	adiw	r30, 0x01	; 1
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
     5c6:	2e 17       	cp	r18, r30
     5c8:	3f 07       	cpc	r19, r31
     5ca:	99 f7       	brne	.-26     	; 0x5b2 <EndGame+0x14>
     5cc:	f9 01       	movw	r30, r18
//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
     5ce:	26 17       	cp	r18, r22
     5d0:	37 07       	cpc	r19, r23
     5d2:	21 f0       	breq	.+8      	; 0x5dc <EndGame+0x3e>
     5d4:	9f 01       	movw	r18, r30
     5d6:	28 5f       	subi	r18, 0xF8	; 248
     5d8:	3f 4f       	sbci	r19, 0xFF	; 255
     5da:	eb cf       	rjmp	.-42     	; 0x5b2 <EndGame+0x14>
			b++;
			if(M[i*8 + y] == 1)
			w++;
		}
	}
	if(b == w)
     5dc:	94 13       	cpse	r25, r20
     5de:	03 c0       	rjmp	.+6      	; 0x5e6 <EndGame+0x48>
	{
		AnnounceRes(2);	//TIE -LED3
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	b5 df       	rcall	.-150    	; 0x54e <AnnounceRes>
     5e4:	14 c0       	rjmp	.+40     	; 0x60e <EndGame+0x70>

	}
	else if(b>w)
     5e6:	49 17       	cp	r20, r25
     5e8:	50 f4       	brcc	.+20     	; 0x5fe <EndGame+0x60>
	{
		if(MyColor == 0) //black
     5ea:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <MyColor>
     5ee:	81 11       	cpse	r24, r1
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <EndGame+0x5a>
		AnnounceRes(1);//WIN - LED1
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	ac df       	rcall	.-168    	; 0x54e <AnnounceRes>
     5f6:	0b c0       	rjmp	.+22     	; 0x60e <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	a9 df       	rcall	.-174    	; 0x54e <AnnounceRes>
     5fc:	08 c0       	rjmp	.+16     	; 0x60e <EndGame+0x70>
     5fe:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <MyColor>
	}
	else
	{
		if(MyColor == 1) //white
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	11 f4       	brne	.+4      	; 0x60a <EndGame+0x6c>
		AnnounceRes(1);//WIN - LED1
     606:	a3 df       	rcall	.-186    	; 0x54e <AnnounceRes>
     608:	02 c0       	rjmp	.+4      	; 0x60e <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	a0 df       	rcall	.-192    	; 0x54e <AnnounceRes>
     60e:	82 e0       	ldi	r24, 0x02	; 2
	}

	//after announcement wait for ok in while loop(set move_done = 1)
	myTurn = 2;
     610:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     614:	08 95       	ret

00000616 <__vector_8>:
     616:	1f 92       	push	r1
}



 ISR (TIMER1_OVF_vect)    // Timer1 ISR
 {
     618:	0f 92       	push	r0
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	0f 92       	push	r0
     61e:	11 24       	eor	r1, r1
     620:	2f 93       	push	r18
     622:	3f 93       	push	r19
     624:	4f 93       	push	r20
     626:	5f 93       	push	r21
     628:	6f 93       	push	r22
     62a:	7f 93       	push	r23
     62c:	8f 93       	push	r24
     62e:	9f 93       	push	r25
     630:	af 93       	push	r26
     632:	bf 93       	push	r27
     634:	ef 93       	push	r30
     636:	ff 93       	push	r31
	 if(myTurn==1){
     638:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	19 f4       	brne	.+6      	; 0x646 <__vector_8+0x30>
		 // coming soon 
		 //last sec MM will save the day..eventually.		 
		 myTurn =0;
     640:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
     644:	0e c0       	rjmp	.+28     	; 0x662 <__vector_8+0x4c>
		// move_done = 1;
	 } 
	 else if(myTurn == 0){
     646:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     64a:	81 11       	cpse	r24, r1
     64c:	0a c0       	rjmp	.+20     	; 0x662 <__vector_8+0x4c>
		  Transmit("IT\r",0,strlen("IT\r"));
     64e:	43 e0       	ldi	r20, 0x03	; 3
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	8c e7       	ldi	r24, 0x7C	; 124
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	bf de       	rcall	.-642    	; 0x3d6 <Transmit>
		  ITflag = 1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <ITflag>
		  ILflag = 1;
     65e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
	 }	 
 }
     662:	ff 91       	pop	r31
     664:	ef 91       	pop	r30
     666:	bf 91       	pop	r27
     668:	af 91       	pop	r26
     66a:	9f 91       	pop	r25
     66c:	8f 91       	pop	r24
     66e:	7f 91       	pop	r23
     670:	6f 91       	pop	r22
     672:	5f 91       	pop	r21
     674:	4f 91       	pop	r20
     676:	3f 91       	pop	r19
     678:	2f 91       	pop	r18
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	0f 90       	pop	r0
     680:	1f 90       	pop	r1
     682:	18 95       	reti

00000684 <init_leds>:

 //////////////////////////////////////////////// INITIALIZATION ///////////////////////////////////////////////////////////

 void init_leds()
 {
	DDRB |= (1<<DDB1);
     684:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1<<DDB2);
     686:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= (1<<DDB3);
     688:	bb 9a       	sbi	0x17, 3	; 23
	PORTB |= (1<<PORTB1);
     68a:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
     68c:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
     68e:	c3 9a       	sbi	0x18, 3	; 24
     690:	08 95       	ret

00000692 <init_timer>:

	 //////////Timer/Counter Initialization/////////
	 /* Timer starts from a specific value, 
		so we can take advantage of ISR
	 */
	TCNT1 = 3036;//2SECONDS // 34286;//49911  //2^16 = 65536 - (8,000,000/256) 
     692:	8c ed       	ldi	r24, 0xDC	; 220
     694:	9b e0       	ldi	r25, 0x0B	; 11
     696:	9d bd       	out	0x2d, r25	; 45
     698:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00; //Default - Cleared
     69a:	1f bc       	out	0x2f, r1	; 47

	/*	The CLK/64 
	*/
	//TCCR1B &=  ~(1<<CS11);  
	
	TCCR1B |=  (1<<CS12);// |(1<<CS10);
     69c:	8e b5       	in	r24, 0x2e	; 46
     69e:	84 60       	ori	r24, 0x04	; 4
     6a0:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	89 bf       	out	0x39, r24	; 57
     6a6:	08 95       	ret

000006a8 <Algo>:



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
     6a8:	2f 92       	push	r2
     6aa:	3f 92       	push	r3
     6ac:	4f 92       	push	r4
     6ae:	5f 92       	push	r5
     6b0:	6f 92       	push	r6
     6b2:	7f 92       	push	r7
     6b4:	8f 92       	push	r8
     6b6:	9f 92       	push	r9
     6b8:	af 92       	push	r10
     6ba:	bf 92       	push	r11
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	69 97       	sbiw	r28, 0x19	; 25
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
	uint8_t mi,my,i,j,u,z,ibar,ybar,skip,istep,ystep;
	myTurn = 1;		//Important - collision with  init_timer
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	3c 8b       	std	Y+20, r19	; 0x14
     6e8:	2b 8b       	std	Y+19, r18	; 0x13
     6ea:	1e 8a       	std	Y+22, r1	; 0x16
     6ec:	1d 8a       	std	Y+21, r1	; 0x15
	
	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns
	for(mi=0;mi<=7;mi++)
     6ee:	41 2c       	mov	r4, r1
     6f0:	4f 8a       	std	Y+23, r4	; 0x17
     6f2:	49 c1       	rjmp	.+658    	; 0x986 <Algo+0x2de>
	{
		for(my=0; my<=7; my++)
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
     6f4:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <M>
     6f8:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <M+0x1>
     6fc:	89 89       	ldd	r24, Y+17	; 0x11
     6fe:	9a 89       	ldd	r25, Y+18	; 0x12
     700:	e8 0f       	add	r30, r24
     702:	f9 1f       	adc	r31, r25
     704:	90 81       	ld	r25, Z
     706:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <MyColor>
     70a:	98 13       	cpse	r25, r24
     70c:	18 c1       	rjmp	.+560    	; 0x93e <Algo+0x296>
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
     70e:	22 24       	eor	r2, r2
     710:	2a 94       	dec	r2
     712:	23 0c       	add	r2, r3
     714:	c2 2c       	mov	r12, r2
     716:	d1 2c       	mov	r13, r1
     718:	eb 89       	ldd	r30, Y+19	; 0x13
     71a:	fc 89       	ldd	r31, Y+20	; 0x14
     71c:	ec 15       	cp	r30, r12
     71e:	fd 05       	cpc	r31, r13
     720:	0c f4       	brge	.+2      	; 0x724 <Algo+0x7c>
     722:	0d c1       	rjmp	.+538    	; 0x93e <Algo+0x296>
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     724:	4d 84       	ldd	r4, Y+13	; 0x0d
     726:	5e 84       	ldd	r5, Y+14	; 0x0e
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
     728:	f7 e0       	ldi	r31, 0x07	; 7
     72a:	f2 15       	cp	r31, r2
     72c:	08 f4       	brcc	.+2      	; 0x730 <Algo+0x88>
     72e:	fe c0       	rjmp	.+508    	; 0x92c <Algo+0x284>
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     730:	99 24       	eor	r9, r9
     732:	9a 94       	dec	r9
     734:	98 0c       	add	r9, r8
     736:	89 2d       	mov	r24, r9
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	2d 85       	ldd	r18, Y+13	; 0x0d
     73c:	3e 85       	ldd	r19, Y+14	; 0x0e
     73e:	28 17       	cp	r18, r24
     740:	39 07       	cpc	r19, r25
     742:	0c f4       	brge	.+2      	; 0x746 <Algo+0x9e>
     744:	ef c0       	rjmp	.+478    	; 0x924 <Algo+0x27c>
						if(j<0||j>7) //Matrix out of border protection 
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
     746:	36 01       	movw	r6, r12
     748:	66 0c       	add	r6, r6
     74a:	77 1c       	adc	r7, r7
     74c:	66 0c       	add	r6, r6
     74e:	77 1c       	adc	r7, r7
     750:	66 0c       	add	r6, r6
     752:	77 1c       	adc	r7, r7


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     754:	e2 2d       	mov	r30, r2
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	f8 87       	std	Y+8, r31	; 0x08
     75a:	ef 83       	std	Y+7, r30	; 0x07
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
     75c:	ee 0f       	add	r30, r30
     75e:	ff 1f       	adc	r31, r31
     760:	ee 0f       	add	r30, r30
     762:	ff 1f       	adc	r31, r31
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	fc 87       	std	Y+12, r31	; 0x0c
     76a:	eb 87       	std	Y+11, r30	; 0x0b
							ybar = 10;
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
     76c:	c2 2c       	mov	r12, r2
     76e:	c3 18       	sub	r12, r3


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     770:	2c 2d       	mov	r18, r12
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	3a 87       	std	Y+10, r19	; 0x0a
     776:	29 87       	std	Y+9, r18	; 0x09
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
					{
						if(j<0||j>7) //Matrix out of border protection 
     778:	37 e0       	ldi	r19, 0x07	; 7
     77a:	39 15       	cp	r19, r9
     77c:	08 f4       	brcc	.+2      	; 0x780 <Algo+0xd8>
     77e:	cb c0       	rjmp	.+406    	; 0x916 <Algo+0x26e>
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
     780:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <M>
     784:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <M+0x1>
     788:	86 0d       	add	r24, r6
     78a:	97 1d       	adc	r25, r7
     78c:	fb 01       	movw	r30, r22
     78e:	e8 0f       	add	r30, r24
     790:	f9 1f       	adc	r31, r25
     792:	20 81       	ld	r18, Z
     794:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <MyColor>
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	41 11       	cpse	r20, r1
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	28 17       	cp	r18, r24
     7a4:	39 07       	cpc	r19, r25
     7a6:	09 f0       	breq	.+2      	; 0x7aa <Algo+0x102>
     7a8:	b6 c0       	rjmp	.+364    	; 0x916 <Algo+0x26e>
						{

							//Setting up i barrier (board)
							if(i > mi)
     7aa:	32 14       	cp	r3, r2
     7ac:	20 f0       	brcs	.+8      	; 0x7b6 <Algo+0x10e>
							ibar = 7 ;
							else if(i == mi)
     7ae:	32 14       	cp	r3, r2
     7b0:	39 f0       	breq	.+14     	; 0x7c0 <Algo+0x118>
							ibar = 10;   //big enough, so the other axis will break while below
							else
							ibar = 0;
     7b2:	e1 2c       	mov	r14, r1
     7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <Algo+0x120>
						if((M[i*8 + j] == !MyColor))		
						{

							//Setting up i barrier (board)
							if(i > mi)
							ibar = 7 ;
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f7 e0       	ldi	r31, 0x07	; 7
     7ba:	ef 2e       	mov	r14, r31
     7bc:	f0 2d       	mov	r31, r0
     7be:	04 c0       	rjmp	.+8      	; 0x7c8 <Algo+0x120>
							else if(i == mi)
							ibar = 10;   //big enough, so the other axis will break while below
     7c0:	0f 2e       	mov	r0, r31
     7c2:	fa e0       	ldi	r31, 0x0A	; 10
     7c4:	ef 2e       	mov	r14, r31
     7c6:	f0 2d       	mov	r31, r0
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
     7c8:	39 14       	cp	r3, r9
     7ca:	20 f0       	brcs	.+8      	; 0x7d4 <Algo+0x12c>
							ybar = 7;
							else if(j == my)
     7cc:	89 14       	cp	r8, r9
     7ce:	39 f0       	breq	.+14     	; 0x7de <Algo+0x136>
							ybar = 10;
							else
							ybar = 0;
     7d0:	d1 2c       	mov	r13, r1
     7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <Algo+0x13e>
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > mi)
							ybar = 7;
     7d4:	0f 2e       	mov	r0, r31
     7d6:	f7 e0       	ldi	r31, 0x07	; 7
     7d8:	df 2e       	mov	r13, r31
     7da:	f0 2d       	mov	r31, r0
     7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <Algo+0x13e>
							else if(j == my)
							ybar = 10;
     7de:	0f 2e       	mov	r0, r31
     7e0:	fa e0       	ldi	r31, 0x0A	; 10
     7e2:	df 2e       	mov	r13, r31
     7e4:	f0 2d       	mov	r31, r0
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
							ystep = j - my;
     7e6:	f9 2c       	mov	r15, r9
     7e8:	f8 18       	sub	r15, r8


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     7ea:	a9 85       	ldd	r26, Y+9	; 0x09
     7ec:	ba 85       	ldd	r27, Y+10	; 0x0a
     7ee:	ae 0d       	add	r26, r14
     7f0:	b1 1d       	adc	r27, r1
     7f2:	8f 81       	ldd	r24, Y+7	; 0x07
     7f4:	98 85       	ldd	r25, Y+8	; 0x08
     7f6:	8a 17       	cp	r24, r26
     7f8:	9b 07       	cpc	r25, r27
     7fa:	09 f4       	brne	.+2      	; 0x7fe <Algo+0x156>
     7fc:	8c c0       	rjmp	.+280    	; 0x916 <Algo+0x26e>
     7fe:	89 2d       	mov	r24, r9
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	ef 2d       	mov	r30, r15
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	9f 01       	movw	r18, r30
     808:	2d 0d       	add	r18, r13
     80a:	31 1d       	adc	r19, r1
     80c:	39 8f       	std	Y+25, r19	; 0x19
     80e:	28 8f       	std	Y+24, r18	; 0x18
     810:	82 17       	cp	r24, r18
     812:	93 07       	cpc	r25, r19
     814:	09 f4       	brne	.+2      	; 0x818 <Algo+0x170>
     816:	7f c0       	rjmp	.+254    	; 0x916 <Algo+0x26e>
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
     818:	ab 84       	ldd	r10, Y+11	; 0x0b
     81a:	bc 84       	ldd	r11, Y+12	; 0x0c
     81c:	a8 0e       	add	r10, r24
     81e:	b9 1e       	adc	r11, r25
     820:	cb 01       	movw	r24, r22
     822:	8a 0d       	add	r24, r10
     824:	9b 1d       	adc	r25, r11
     826:	fc 01       	movw	r30, r24
     828:	20 81       	ld	r18, Z
     82a:	42 17       	cp	r20, r18
     82c:	09 f4       	brne	.+2      	; 0x830 <Algo+0x188>
     82e:	73 c0       	rjmp	.+230    	; 0x916 <Algo+0x26e>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
     830:	80 81       	ld	r24, Z
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	b1 f0       	breq	.+44     	; 0x862 <Algo+0x1ba>
     836:	09 2d       	mov	r16, r9
     838:	12 2d       	mov	r17, r2
     83a:	26 c0       	rjmp	.+76     	; 0x888 <Algo+0x1e0>
							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	86 0f       	add	r24, r22
     84e:	97 1f       	adc	r25, r23
     850:	fc 01       	movw	r30, r24
     852:	20 81       	ld	r18, Z
     854:	42 17       	cp	r20, r18
     856:	09 f4       	brne	.+2      	; 0x85a <Algo+0x1b2>
     858:	5e c0       	rjmp	.+188    	; 0x916 <Algo+0x26e>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
     85a:	80 81       	ld	r24, Z
     85c:	82 30       	cpi	r24, 0x02	; 2
     85e:	a1 f4       	brne	.+40     	; 0x888 <Algo+0x1e0>
     860:	02 c0       	rjmp	.+4      	; 0x866 <Algo+0x1be>
     862:	09 2d       	mov	r16, r9
     864:	12 2d       	mov	r17, r2
									skip = 0;
									CheckMove(u, z, MyColor);  //Coloring adjacent paths, according to the rules
     866:	60 2f       	mov	r22, r16
     868:	81 2f       	mov	r24, r17
     86a:	12 dc       	rcall	.-2012   	; 0x90 <CheckMove>
									//Building message
									mymove[0] = 'M';
     86c:	fd e4       	ldi	r31, 0x4D	; 77
     86e:	f9 83       	std	Y+1, r31	; 0x01
									mymove[1] = 'M';
     870:	fa 83       	std	Y+2, r31	; 0x02
									mymove[2] = '\x20';
     872:	20 e2       	ldi	r18, 0x20	; 32
     874:	2b 83       	std	Y+3, r18	; 0x03
									mymove[3] = u+65;
     876:	1f 5b       	subi	r17, 0xBF	; 191
     878:	1c 83       	std	Y+4, r17	; 0x04
									mymove[4] = (z+1)+'0';
     87a:	0f 5c       	subi	r16, 0xCF	; 207
     87c:	0d 83       	std	Y+5, r16	; 0x05
									mymove[5] = '\r';
     87e:	3d e0       	ldi	r19, 0x0D	; 13
     880:	3e 83       	std	Y+6, r19	; 0x06
							if(!skip) 
							{
								u=i;
								z=j;
								//Same iteration, this time we color the path
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     882:	e2 10       	cpse	r14, r2
     884:	11 c0       	rjmp	.+34     	; 0x8a8 <Algo+0x200>
     886:	3a c0       	rjmp	.+116    	; 0x8fc <Algo+0x254>
									mymove[5] = '\r';
										
									break;
								}

								z+= ystep;
     888:	0f 0d       	add	r16, r15
								u+= istep;
     88a:	1c 0d       	add	r17, r12


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
     88c:	81 2f       	mov	r24, r17
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	8a 17       	cp	r24, r26
     892:	9b 07       	cpc	r25, r27
     894:	09 f4       	brne	.+2      	; 0x898 <Algo+0x1f0>
     896:	3f c0       	rjmp	.+126    	; 0x916 <Algo+0x26e>
     898:	20 2f       	mov	r18, r16
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	e8 8d       	ldd	r30, Y+24	; 0x18
     89e:	f9 8d       	ldd	r31, Y+25	; 0x19
     8a0:	2e 17       	cp	r18, r30
     8a2:	3f 07       	cpc	r19, r31
     8a4:	59 f6       	brne	.-106    	; 0x83c <Algo+0x194>
     8a6:	37 c0       	rjmp	.+110    	; 0x916 <Algo+0x26e>
							if(!skip) 
							{
								u=i;
								z=j;
								//Same iteration, this time we color the path
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     8a8:	d9 14       	cp	r13, r9
     8aa:	41 f1       	breq	.+80     	; 0x8fc <Algo+0x254>
								{
									if(M[u*8 + z] == MyColor )
     8ac:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <M>
     8b0:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <M+0x1>
     8b4:	fc 01       	movw	r30, r24
     8b6:	ea 0d       	add	r30, r10
     8b8:	fb 1d       	adc	r31, r11
     8ba:	90 81       	ld	r25, Z
     8bc:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <MyColor>
     8c0:	98 17       	cp	r25, r24
     8c2:	e1 f0       	breq	.+56     	; 0x8fc <Algo+0x254>
     8c4:	39 2d       	mov	r19, r9
     8c6:	22 2d       	mov	r18, r2
     8c8:	12 c0       	rjmp	.+36     	; 0x8ee <Algo+0x246>
     8ca:	e3 2f       	mov	r30, r19
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	88 e0       	ldi	r24, 0x08	; 8
     8d0:	28 9f       	mul	r18, r24
     8d2:	e0 0d       	add	r30, r0
     8d4:	f1 1d       	adc	r31, r1
     8d6:	11 24       	eor	r1, r1
     8d8:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <M>
     8dc:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <M+0x1>
     8e0:	e8 0f       	add	r30, r24
     8e2:	f9 1f       	adc	r31, r25
     8e4:	90 81       	ld	r25, Z
     8e6:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <MyColor>
     8ea:	98 17       	cp	r25, r24
     8ec:	39 f0       	breq	.+14     	; 0x8fc <Algo+0x254>
										break;
									M[u*8 + z] = MyColor;
     8ee:	80 83       	st	Z, r24
									
									z+= ystep;
     8f0:	3f 0d       	add	r19, r15
									u+= istep;
     8f2:	2c 0d       	add	r18, r12
							if(!skip) 
							{
								u=i;
								z=j;
								//Same iteration, this time we color the path
								while((u!=ibar)&&(z!=ybar))//barriers will never get reached.
     8f4:	e2 16       	cp	r14, r18
     8f6:	11 f0       	breq	.+4      	; 0x8fc <Algo+0x254>
     8f8:	d3 12       	cpse	r13, r19
     8fa:	e7 cf       	rjmp	.-50     	; 0x8ca <Algo+0x222>
									
									z+= ystep;
									u+= istep;
								}
								
								move_done=1;
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <move_done>
								Board(); //Board Visualization
     902:	b4 dd       	rcall	.-1176   	; 0x46c <Board>
								Transmit(mymove,0,6); //Transmit our Move
     904:	46 e0       	ldi	r20, 0x06	; 6
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	ce 01       	movw	r24, r28
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	64 dd       	rcall	.-1336   	; 0x3d6 <Transmit>
								if(move_done)
     90e:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <move_done>
     912:	81 11       	cpse	r24, r1
     914:	48 c0       	rjmp	.+144    	; 0x9a6 <Algo+0x2fe>
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
     916:	93 94       	inc	r9
     918:	89 2d       	mov	r24, r9
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	48 16       	cp	r4, r24
     91e:	59 06       	cpc	r5, r25
     920:	0c f0       	brlt	.+2      	; 0x924 <Algo+0x27c>
     922:	2a cf       	rjmp	.-428    	; 0x778 <Algo+0xd0>
									break;
							}
							
						}//if check neighbors
					}//j for
					if(move_done)
     924:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <move_done>
     928:	81 11       	cpse	r24, r1
     92a:	3d c0       	rjmp	.+122    	; 0x9a6 <Algo+0x2fe>
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
     92c:	23 94       	inc	r2
     92e:	c2 2c       	mov	r12, r2
     930:	d1 2c       	mov	r13, r1
     932:	ef 85       	ldd	r30, Y+15	; 0x0f
     934:	f8 89       	ldd	r31, Y+16	; 0x10
     936:	ec 15       	cp	r30, r12
     938:	fd 05       	cpc	r31, r13
     93a:	0c f0       	brlt	.+2      	; 0x93e <Algo+0x296>
     93c:	f5 ce       	rjmp	.-534    	; 0x728 <Algo+0x80>
					}//j for
					if(move_done)
						break;
				}//i for
			}//if  (find our pawn)
			if(move_done)
     93e:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <move_done>
     942:	81 11       	cpse	r24, r1
     944:	30 c0       	rjmp	.+96     	; 0x9a6 <Algo+0x2fe>
	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns
	for(mi=0;mi<=7;mi++)
	{
		for(my=0; my<=7; my++)
     946:	83 94       	inc	r8
     948:	29 89       	ldd	r18, Y+17	; 0x11
     94a:	3a 89       	ldd	r19, Y+18	; 0x12
     94c:	2f 5f       	subi	r18, 0xFF	; 255
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
     950:	3a 8b       	std	Y+18, r19	; 0x12
     952:	29 8b       	std	Y+17, r18	; 0x11
     954:	8d 85       	ldd	r24, Y+13	; 0x0d
     956:	9e 85       	ldd	r25, Y+14	; 0x0e
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	9e 87       	std	Y+14, r25	; 0x0e
     95c:	8d 87       	std	Y+13, r24	; 0x0d
     95e:	98 e0       	ldi	r25, 0x08	; 8
     960:	89 12       	cpse	r8, r25
     962:	c8 ce       	rjmp	.-624    	; 0x6f4 <Algo+0x4c>
	myTurn = 1;		//Important - collision with  init_timer
	
	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns
	for(mi=0;mi<=7;mi++)
     964:	ef 89       	ldd	r30, Y+23	; 0x17
     966:	ef 5f       	subi	r30, 0xFF	; 255
     968:	ef 8b       	std	Y+23, r30	; 0x17
     96a:	2d 89       	ldd	r18, Y+21	; 0x15
     96c:	3e 89       	ldd	r19, Y+22	; 0x16
     96e:	28 5f       	subi	r18, 0xF8	; 248
     970:	3f 4f       	sbci	r19, 0xFF	; 255
     972:	3e 8b       	std	Y+22, r19	; 0x16
     974:	2d 8b       	std	Y+21, r18	; 0x15
     976:	8b 89       	ldd	r24, Y+19	; 0x13
     978:	9c 89       	ldd	r25, Y+20	; 0x14
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	9c 8b       	std	Y+20, r25	; 0x14
     97e:	8b 8b       	std	Y+19, r24	; 0x13
     980:	20 34       	cpi	r18, 0x40	; 64
     982:	31 05       	cpc	r19, r1
     984:	81 f0       	breq	.+32     	; 0x9a6 <Algo+0x2fe>



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
     986:	ed 89       	ldd	r30, Y+21	; 0x15
     988:	fe 89       	ldd	r31, Y+22	; 0x16
     98a:	fa 8b       	std	Y+18, r31	; 0x12
     98c:	e9 8b       	std	Y+17, r30	; 0x11
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	3e 87       	std	Y+14, r19	; 0x0e
     994:	2d 87       	std	Y+13, r18	; 0x0d
     996:	31 2c       	mov	r3, r1
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
     998:	8b 89       	ldd	r24, Y+19	; 0x13
     99a:	9c 89       	ldd	r25, Y+20	; 0x14
     99c:	98 8b       	std	Y+16, r25	; 0x10
     99e:	8f 87       	std	Y+15, r24	; 0x0f
     9a0:	83 2c       	mov	r8, r3
     9a2:	3f 88       	ldd	r3, Y+23	; 0x17
     9a4:	a7 ce       	rjmp	.-690    	; 0x6f4 <Algo+0x4c>
	

	//while loop until 'OK' response
	while(1)
	{		// Check_Input does not support "OK" response so we check it here
		if(move_done >= 1)
     9a6:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <move_done>
     9aa:	88 23       	and	r24, r24
     9ac:	39 f1       	breq	.+78     	; 0x9fc <Algo+0x354>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ae:	ef e1       	ldi	r30, 0x1F	; 31
     9b0:	fe e4       	ldi	r31, 0x4E	; 78
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <Algo+0x30a>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <Algo+0x310>
     9b8:	00 00       	nop
		{
			while(1)
			{
				_delay_ms(10);
				if((move_done == 2)||(myTurn==2))  //myturn==2 means that a RST was made. and we can break this loop.
     9ba:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <move_done>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f0       	breq	.+8      	; 0x9ca <Algo+0x322>
     9c2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	91 f7       	brne	.-28     	; 0x9ae <Algo+0x306>
				{ // we received the response we were waiting'
					move_done = 0;
     9ca:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <move_done>
					break;
				}
			}
			
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75) //Respone ok for our MM
     9ce:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <rxReadPos>
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	fc 01       	movw	r30, r24
     9d6:	e9 56       	subi	r30, 0x69	; 105
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	20 81       	ld	r18, Z
     9dc:	2f 34       	cpi	r18, 0x4F	; 79
     9de:	19 f7       	brne	.-58     	; 0x9a6 <Algo+0x2fe>
     9e0:	fc 01       	movw	r30, r24
     9e2:	e9 56       	subi	r30, 0x69	; 105
     9e4:	ff 4f       	sbci	r31, 0xFF	; 255
     9e6:	81 81       	ldd	r24, Z+1	; 0x01
     9e8:	8b 34       	cpi	r24, 0x4B	; 75
			{
				init_timer();
     9ea:	e9 f6       	brne	.-70     	; 0x9a6 <Algo+0x2fe>
     9ec:	52 de       	rcall	.-860    	; 0x692 <init_timer>
				rxReadPos=rxWritePos;
     9ee:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <rxWritePos>
     9f2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <rxReadPos>
				myTurn = 0;
     9f6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
				break;
     9fa:	0b c0       	rjmp	.+22     	; 0xa12 <Algo+0x36a>
			}

		}
		else if(move_done == 0)//No solution was found
		{
			if (enemy_pass == 1) //Enemy sent pass too
     9fc:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <enemy_pass>
     a00:	81 30       	cpi	r24, 0x01	; 1
			{
				EndGame();		//Go count pawns and announce the winner
     a02:	11 f4       	brne	.+4      	; 0xa08 <Algo+0x360>
     a04:	cc dd       	rcall	.-1128   	; 0x59e <EndGame>
				break;
			}
			else
			{
				Transmit("MP\r",0,strlen("MP\r")); //Transmit MYPASS
     a06:	05 c0       	rjmp	.+10     	; 0xa12 <Algo+0x36a>
     a08:	43 e0       	ldi	r20, 0x03	; 3
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	80 e8       	ldi	r24, 0x80	; 128
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	e2 dc       	rcall	.-1596   	; 0x3d6 <Transmit>
				break;
			}
		}
	}
	
}
     a12:	69 96       	adiw	r28, 0x19	; 25
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	df 90       	pop	r13
     a2c:	cf 90       	pop	r12
     a2e:	bf 90       	pop	r11
     a30:	af 90       	pop	r10
     a32:	9f 90       	pop	r9
     a34:	8f 90       	pop	r8
     a36:	7f 90       	pop	r7
     a38:	6f 90       	pop	r6
     a3a:	5f 90       	pop	r5
     a3c:	4f 90       	pop	r4
     a3e:	3f 90       	pop	r3
     a40:	2f 90       	pop	r2
     a42:	08 95       	ret

00000a44 <Check_Input>:



///////////////////////////////////////////////////////////////////////////////////////////   CHECK_INPUT    /////////////////////////////////////////////////////////////////////////////////////////

void Check_Input(char data[]){
     a44:	9c 01       	movw	r18, r24
	
		if(data[rxReadPos]==CR[0]){
     a46:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <rxReadPos>
     a4a:	40 91 91 00 	lds	r20, 0x0091	; 0x800091 <CR>
     a4e:	f9 01       	movw	r30, r18
     a50:	e9 0f       	add	r30, r25
     a52:	f1 1d       	adc	r31, r1
     a54:	80 81       	ld	r24, Z
     a56:	84 13       	cpse	r24, r20
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <Check_Input+0x1c>
			rxReadPos++;
     a5a:	9f 5f       	subi	r25, 0xFF	; 255
     a5c:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <rxReadPos>
		//flag = 0;
		//Space_num = 0;
		

		//ILFlag will help us spot "OK" or "PL" terminal answer
		if(ILflag == 1)
     a60:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	21 f4       	brne	.+8      	; 0xa70 <Check_Input+0x2c>
		{
			ILflag=2;  //answer spotted, you can proceed.
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
			return;	
     a6e:	08 95       	ret
		}
		
		//it will help to spot "OK"  terminal answer
		if(move_done == 1)
     a70:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <move_done>
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	21 f4       	brne	.+8      	; 0xa80 <Check_Input+0x3c>
		{	
			move_done=2; //answer spotted, you can proceed.
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <move_done>
			return;	
     a7e:	08 95       	ret
     a80:	b9 01       	movw	r22, r18
	


		//process
		// command AT
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
     a82:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <rxReadPos>
     a86:	29 2f       	mov	r18, r25
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	fb 01       	movw	r30, r22
     a8c:	e2 0f       	add	r30, r18
     a8e:	f3 1f       	adc	r31, r19
     a90:	90 81       	ld	r25, Z
     a92:	91 34       	cpi	r25, 0x41	; 65
     a94:	99 f4       	brne	.+38     	; 0xabc <Check_Input+0x78>
     a96:	fb 01       	movw	r30, r22
     a98:	e2 0f       	add	r30, r18
     a9a:	f3 1f       	adc	r31, r19
     a9c:	91 81       	ldd	r25, Z+1	; 0x01
     a9e:	94 35       	cpi	r25, 0x54	; 84
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <Check_Input+0x60>
     aa2:	07 c1       	rjmp	.+526    	; 0xcb2 <Check_Input+0x26e>
		{
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			if(data[rxReadPos+2] == CR[0]){
     aa4:	fb 01       	movw	r30, r22
     aa6:	e2 0f       	add	r30, r18
     aa8:	f3 1f       	adc	r31, r19
     aaa:	82 81       	ldd	r24, Z+2	; 0x02
     aac:	48 13       	cpse	r20, r24
     aae:	01 c1       	rjmp	.+514    	; 0xcb2 <Check_Input+0x26e>
				Transmit("OK\r",0 , strlen("OK\r"));
     ab0:	43 e0       	ldi	r20, 0x03	; 3
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	87 e6       	ldi	r24, 0x67	; 103
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	8e dc       	rcall	.-1764   	; 0x3d6 <Transmit>
     aba:	fb c0       	rjmp	.+502    	; 0xcb2 <Check_Input+0x26e>
				rxReadPos = rxWritePos;
			}

		}
		//Checking for RST<CR> command.
		else if((data[rxReadPos] == 82)&&(data[rxReadPos + 1] == 83)&&(data[rxReadPos + 2] == 84))		
     abc:	92 35       	cpi	r25, 0x52	; 82
     abe:	81 f4       	brne	.+32     	; 0xae0 <Check_Input+0x9c>
     ac0:	fb 01       	movw	r30, r22
     ac2:	e2 0f       	add	r30, r18
     ac4:	f3 1f       	adc	r31, r19
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	93 35       	cpi	r25, 0x53	; 83
     aca:	09 f0       	breq	.+2      	; 0xace <Check_Input+0x8a>
     acc:	f2 c0       	rjmp	.+484    	; 0xcb2 <Check_Input+0x26e>
     ace:	fb 01       	movw	r30, r22
     ad0:	e2 0f       	add	r30, r18
     ad2:	f3 1f       	adc	r31, r19
     ad4:	82 81       	ldd	r24, Z+2	; 0x02
     ad6:	84 35       	cpi	r24, 0x54	; 84
     ad8:	09 f0       	breq	.+2      	; 0xadc <Check_Input+0x98>
		{
			RST();
     ada:	eb c0       	rjmp	.+470    	; 0xcb2 <Check_Input+0x26e>
     adc:	8a dc       	rcall	.-1772   	; 0x3f2 <RST>
     ade:	e9 c0       	rjmp	.+466    	; 0xcb2 <Check_Input+0x26e>
		}	
		// SP<SPACE>{B/W}<CR>
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 80))
     ae0:	93 35       	cpi	r25, 0x53	; 83
     ae2:	d9 f4       	brne	.+54     	; 0xb1a <Check_Input+0xd6>
     ae4:	fb 01       	movw	r30, r22
     ae6:	e2 0f       	add	r30, r18
     ae8:	f3 1f       	adc	r31, r19
     aea:	91 81       	ldd	r25, Z+1	; 0x01
     aec:	90 35       	cpi	r25, 0x50	; 80
     aee:	09 f0       	breq	.+2      	; 0xaf2 <Check_Input+0xae>
     af0:	64 c0       	rjmp	.+200    	; 0xbba <Check_Input+0x176>
		{
			//(int)c - 65;
			if(data[rxReadPos + 3] == 66)		//B
     af2:	fb 01       	movw	r30, r22
     af4:	e2 0f       	add	r30, r18
     af6:	f3 1f       	adc	r31, r19
     af8:	83 81       	ldd	r24, Z+3	; 0x03
     afa:	82 34       	cpi	r24, 0x42	; 66
     afc:	19 f4       	brne	.+6      	; 0xb04 <Check_Input+0xc0>
				MyColor = 0;					//Saving myColor
     afe:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <MyColor>
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <Check_Input+0xca>
			else if(data[rxReadPos + 3] == 87)  //W
     b04:	87 35       	cpi	r24, 0x57	; 87
     b06:	19 f4       	brne	.+6      	; 0xb0e <Check_Input+0xca>
				MyColor = 1;					//Saving myColor
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <MyColor>
			Transmit("OK\r",0 , strlen("OK\r"));
     b0e:	43 e0       	ldi	r20, 0x03	; 3
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	87 e6       	ldi	r24, 0x67	; 103
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	5f dc       	rcall	.-1858   	; 0x3d6 <Transmit>
			rxReadPos = rxWritePos;
     b18:	cc c0       	rjmp	.+408    	; 0xcb2 <Check_Input+0x26e>
		}
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
     b1a:	9e 34       	cpi	r25, 0x4E	; 78
     b1c:	d1 f5       	brne	.+116    	; 0xb92 <Check_Input+0x14e>
     b1e:	fb 01       	movw	r30, r22
     b20:	e2 0f       	add	r30, r18
     b22:	f3 1f       	adc	r31, r19
     b24:	81 81       	ldd	r24, Z+1	; 0x01
     b26:	87 34       	cpi	r24, 0x47	; 71
     b28:	09 f0       	breq	.+2      	; 0xb2c <Check_Input+0xe8>
     b2a:	c3 c0       	rjmp	.+390    	; 0xcb2 <Check_Input+0x26e>
		{
			//RST();
			move_done=0;
     b2c:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <move_done>
     b30:	28 e0       	ldi	r18, 0x08	; 8
     b32:	30 e0       	ldi	r19, 0x00	; 0
			for(uint8_t i = 0 ; i <= 7 ; i++)
			{
				for(uint8_t y = 0 ; y <= 7 ; y++)
				{
					M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     b34:	42 e0       	ldi	r20, 0x02	; 2
     b36:	10 c0       	rjmp	.+32     	; 0xb58 <Check_Input+0x114>
     b38:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <M>
     b3c:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <M+0x1>
     b40:	e8 0f       	add	r30, r24
     b42:	f9 1f       	adc	r31, r25
     b44:	40 83       	st	Z, r20
     b46:	01 96       	adiw	r24, 0x01	; 1
		{
			//RST();
			move_done=0;
			for(uint8_t i = 0 ; i <= 7 ; i++)
			{
				for(uint8_t y = 0 ; y <= 7 ; y++)
     b48:	82 17       	cp	r24, r18
     b4a:	93 07       	cpc	r25, r19
     b4c:	a9 f7       	brne	.-22     	; 0xb38 <Check_Input+0xf4>
     b4e:	28 5f       	subi	r18, 0xF8	; 248
     b50:	3f 4f       	sbci	r19, 0xFF	; 255
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
		{
			//RST();
			move_done=0;
			for(uint8_t i = 0 ; i <= 7 ; i++)
     b52:	28 34       	cpi	r18, 0x48	; 72
     b54:	31 05       	cpc	r19, r1
     b56:	19 f0       	breq	.+6      	; 0xb5e <Check_Input+0x11a>
     b58:	c9 01       	movw	r24, r18
     b5a:	08 97       	sbiw	r24, 0x08	; 8
     b5c:	ed cf       	rjmp	.-38     	; 0xb38 <Check_Input+0xf4>
				{
					M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
				}
			}
			//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
			M[3*8+3] = 1 ;
     b5e:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <M>
     b62:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <M+0x1>
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	83 8f       	std	Z+27, r24	; 0x1b
			M[3*8+4] = 0 ;
     b6a:	14 8e       	std	Z+28, r1	; 0x1c
			M[4*8+3] = 0 ;
     b6c:	13 a2       	std	Z+35, r1	; 0x23
			M[4*8+4] = 1 ;
     b6e:	84 a3       	std	Z+36, r24	; 0x24
			if(MyColor == 0)// BLACK
     b70:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <MyColor>
     b74:	81 11       	cpse	r24, r1
     b76:	09 c0       	rjmp	.+18     	; 0xb8a <Check_Input+0x146>
			{
				myTurn=1;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
				Transmit("OK\r",0 , strlen("OK\r"));
     b7e:	43 e0       	ldi	r20, 0x03	; 3
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	87 e6       	ldi	r24, 0x67	; 103
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	27 dc       	rcall	.-1970   	; 0x3d6 <Transmit>
			}
			else           //WHITE
			{
				RST();  //FIXING bug with whites(rst contains OK Transmit)
     b88:	94 c0       	rjmp	.+296    	; 0xcb2 <Check_Input+0x26e>
     b8a:	33 dc       	rcall	.-1946   	; 0x3f2 <RST>
				myTurn=0;
     b8c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			}
			
			//init_timer();
			//Transmit("OK\r",0 , strlen("OK\r"));           This is the 2nd OK, not important, RST contains OK transmit
			rxReadPos = rxWritePos;
     b90:	90 c0       	rjmp	.+288    	; 0xcb2 <Check_Input+0x26e>
		}
		        //EG<CR>
		else if((data[rxReadPos] == 69)&&(data[rxReadPos + 1] == 71))
     b92:	95 34       	cpi	r25, 0x45	; 69
     b94:	31 f5       	brne	.+76     	; 0xbe2 <Check_Input+0x19e>
     b96:	fb 01       	movw	r30, r22
     b98:	e2 0f       	add	r30, r18
     b9a:	f3 1f       	adc	r31, r19
     b9c:	81 81       	ldd	r24, Z+1	; 0x01
     b9e:	87 34       	cpi	r24, 0x47	; 71
     ba0:	09 f0       	breq	.+2      	; 0xba4 <Check_Input+0x160>
		{
			//EndGameFlag = 1; // check this flag during waiting/calculating loop
			Transmit("OK\r",0 , strlen("OK\r"));
     ba2:	87 c0       	rjmp	.+270    	; 0xcb2 <Check_Input+0x26e>
     ba4:	43 e0       	ldi	r20, 0x03	; 3
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	87 e6       	ldi	r24, 0x67	; 103
     baa:	90 e0       	ldi	r25, 0x00	; 0
			rxReadPos = rxWritePos;
     bac:	14 dc       	rcall	.-2008   	; 0x3d6 <Transmit>
     bae:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <rxWritePos>
     bb2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <rxReadPos>
			EndGame();
     bb6:	f3 dc       	rcall	.-1562   	; 0x59e <EndGame>
     bb8:	7c c0       	rjmp	.+248    	; 0xcb2 <Check_Input+0x26e>
		}
			 //ST<CR>
        else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 84))
     bba:	fb 01       	movw	r30, r22
     bbc:	e2 0f       	add	r30, r18
     bbe:	f3 1f       	adc	r31, r19
     bc0:	81 81       	ldd	r24, Z+1	; 0x01
     bc2:	84 35       	cpi	r24, 0x54	; 84
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <Check_Input+0x184>
     bc6:	75 c0       	rjmp	.+234    	; 0xcb2 <Check_Input+0x26e>
        {
			Time = data[rxReadPos+3] - '0';    //String to Int
     bc8:	fb 01       	movw	r30, r22
     bca:	e2 0f       	add	r30, r18
     bcc:	f3 1f       	adc	r31, r19
     bce:	83 81       	ldd	r24, Z+3	; 0x03
     bd0:	80 53       	subi	r24, 0x30	; 48
     bd2:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <Time>
			Transmit("OK\r",0 , strlen("OK\r"));
     bd6:	43 e0       	ldi	r20, 0x03	; 3
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	87 e6       	ldi	r24, 0x67	; 103
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	fb db       	rcall	.-2058   	; 0x3d6 <Transmit>
			rxReadPos = rxWritePos;
     be0:	68 c0       	rjmp	.+208    	; 0xcb2 <Check_Input+0x26e>
        }
			//MV<SP>{[A-H],[1-8]}<CR>
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 86))
     be2:	9d 34       	cpi	r25, 0x4D	; 77
     be4:	09 f0       	breq	.+2      	; 0xbe8 <Check_Input+0x1a4>
     be6:	40 c0       	rjmp	.+128    	; 0xc68 <Check_Input+0x224>
     be8:	fb 01       	movw	r30, r22
     bea:	e2 0f       	add	r30, r18
     bec:	f3 1f       	adc	r31, r19
     bee:	81 81       	ldd	r24, Z+1	; 0x01
     bf0:	86 35       	cpi	r24, 0x56	; 86
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <Check_Input+0x1b2>
     bf4:	5e c0       	rjmp	.+188    	; 0xcb2 <Check_Input+0x26e>
		{
				if((data[rxReadPos+3] >= 65)&&(data[rxReadPos+3] <= 72)&&(data[rxReadPos+4] >= 49)&&(data[rxReadPos+4] <= 56))  // Checking input
     bf6:	f9 01       	movw	r30, r18
     bf8:	33 96       	adiw	r30, 0x03	; 3
     bfa:	e6 0f       	add	r30, r22
     bfc:	f7 1f       	adc	r31, r23
     bfe:	80 81       	ld	r24, Z
     c00:	81 54       	subi	r24, 0x41	; 65
     c02:	88 30       	cpi	r24, 0x08	; 8
     c04:	08 f0       	brcs	.+2      	; 0xc08 <Check_Input+0x1c4>
     c06:	55 c0       	rjmp	.+170    	; 0xcb2 <Check_Input+0x26e>
     c08:	2c 5f       	subi	r18, 0xFC	; 252
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	db 01       	movw	r26, r22
     c0e:	a2 0f       	add	r26, r18
     c10:	b3 1f       	adc	r27, r19
     c12:	8c 91       	ld	r24, X
     c14:	81 53       	subi	r24, 0x31	; 49
     c16:	88 30       	cpi	r24, 0x08	; 8
     c18:	08 f0       	brcs	.+2      	; 0xc1c <Check_Input+0x1d8>
     c1a:	4b c0       	rjmp	.+150    	; 0xcb2 <Check_Input+0x26e>
				{
					enemy_pass = 0;
     c1c:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <enemy_pass>
					uint8_t moveok = CheckMove(((int)data[rxReadPos+3] - 65),((data[rxReadPos+4] - '0') - 1), !MyColor );  //Check opponents move.
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <MyColor>
     c26:	81 11       	cpse	r24, r1
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	6c 91       	ld	r22, X
     c2c:	61 53       	subi	r22, 0x31	; 49
     c2e:	80 81       	ld	r24, Z
     c30:	81 54       	subi	r24, 0x41	; 65
					//If opponent's move is legal, send ok and reset timer, else 
					//send IL and wait for PC response, if response OK --> I win else(PL) --> I LOSE
					if(moveok == 1)		
     c32:	2e da       	rcall	.-2980   	; 0x90 <CheckMove>
     c34:	81 30       	cpi	r24, 0x01	; 1
					{
						// Saving opponent's move in my local game board
						//M[(((int)data[rxReadPos+3] - 65)*8) + (data[rxReadPos+4] - '0')] = !MyColor;  // Saving opponent's move in my local game board
						Transmit("OK\r",0 , strlen("OK\r"));
     c36:	51 f4       	brne	.+20     	; 0xc4c <Check_Input+0x208>
     c38:	43 e0       	ldi	r20, 0x03	; 3
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	87 e6       	ldi	r24, 0x67	; 103
     c3e:	90 e0       	ldi	r25, 0x00	; 0
						init_timer();
     c40:	ca db       	rcall	.-2156   	; 0x3d6 <Transmit>
     c42:	27 dd       	rcall	.-1458   	; 0x692 <init_timer>
						myTurn=1;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     c4a:	33 c0       	rjmp	.+102    	; 0xcb2 <Check_Input+0x26e>
					}
					else{
						Transmit("IL\r",0 , strlen("IL\r"));
     c4c:	43 e0       	ldi	r20, 0x03	; 3
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	84 e8       	ldi	r24, 0x84	; 132
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	c0 db       	rcall	.-2176   	; 0x3d6 <Transmit>
     c56:	81 e0       	ldi	r24, 0x01	; 1
						ILflag =  1;							//Waiting mode for PC's response
     c58:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
     c5c:	82 e0       	ldi	r24, 0x02	; 2
						myTurn=2;
     c5e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     c62:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <mt>
						mt=0;
     c66:	25 c0       	rjmp	.+74     	; 0xcb2 <Check_Input+0x26e>
     c68:	90 35       	cpi	r25, 0x50	; 80
						
				} 	
		}

		//PASS
		else if ((data[rxReadPos] == 80)&&(data[rxReadPos + 1] == 83))
     c6a:	89 f4       	brne	.+34     	; 0xc8e <Check_Input+0x24a>
     c6c:	fb 01       	movw	r30, r22
     c6e:	e2 0f       	add	r30, r18
     c70:	f3 1f       	adc	r31, r19
     c72:	81 81       	ldd	r24, Z+1	; 0x01
     c74:	83 35       	cpi	r24, 0x53	; 83
     c76:	e9 f4       	brne	.+58     	; 0xcb2 <Check_Input+0x26e>
		{
			myTurn=1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			//This flag will help us end game in case we pass after opponent's pass
			enemy_pass = 1;   
     c7e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <enemy_pass>
			Transmit("OK\r",0,strlen("OK\r"));
     c82:	43 e0       	ldi	r20, 0x03	; 3
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	87 e6       	ldi	r24, 0x67	; 103
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a5 db       	rcall	.-2230   	; 0x3d6 <Transmit>
     c8c:	12 c0       	rjmp	.+36     	; 0xcb2 <Check_Input+0x26e>
		}
		//WN

		else if((data[rxReadPos] == 87)&&(data[rxReadPos + 1] == 78)){
     c8e:	97 35       	cpi	r25, 0x57	; 87
     c90:	81 f4       	brne	.+32     	; 0xcb2 <Check_Input+0x26e>
     c92:	fb 01       	movw	r30, r22
     c94:	e2 0f       	add	r30, r18
     c96:	f3 1f       	adc	r31, r19
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	8e 34       	cpi	r24, 0x4E	; 78
			AnnounceRes(1);  //announce i win with led1
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <Check_Input+0x26e>
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	56 dc       	rcall	.-1876   	; 0x54e <AnnounceRes>
			myTurn=2;			
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			Transmit("OK\r",0,strlen("OK\r"));
     ca8:	43 e0       	ldi	r20, 0x03	; 3
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	87 e6       	ldi	r24, 0x67	; 103
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	92 db       	rcall	.-2268   	; 0x3d6 <Transmit>
     cb2:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <rxWritePos>
		}
		else
			NULL;
	rxReadPos=rxWritePos;		
	rxReadPos++;		//Ready for the next command (directs to the next letter, the one after <CR>) 
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <rxReadPos>
     cbc:	08 95       	ret

00000cbe <__vector_11>:
     cbe:	1f 92       	push	r1

//////////////////////////////////////////////////////////////////////////////////////////



ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
     cc0:	0f 92       	push	r0
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	0f 92       	push	r0
     cc6:	11 24       	eor	r1, r1
     cc8:	2f 93       	push	r18
     cca:	3f 93       	push	r19
     ccc:	4f 93       	push	r20
     cce:	5f 93       	push	r21
     cd0:	6f 93       	push	r22
     cd2:	7f 93       	push	r23
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	af 93       	push	r26
     cda:	bf 93       	push	r27
     cdc:	ef 93       	push	r30
     cde:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
     ce0:	8c b1       	in	r24, 0x0c	; 12
     ce2:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <rxWritePos>
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	e9 56       	subi	r30, 0x69	; 105
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
     cee:	5d 9b       	sbis	0x0b, 5	; 11
     cf0:	fe cf       	rjmp	.-4      	; 0xcee <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
     cf2:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
     cf4:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <rxWritePos>
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	e9 56       	subi	r30, 0x69	; 105
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	90 81       	ld	r25, Z
     d00:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <CR>
     d04:	98 13       	cpse	r25, r24
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <__vector_11+0x50>
		Check_Input(myrxbuffer);
     d08:	87 e9       	ldi	r24, 0x97	; 151
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9b de       	rcall	.-714    	; 0xa44 <Check_Input>


	rxWritePos++;
     d0e:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <rxWritePos>
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <rxWritePos>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
     d18:	ff 91       	pop	r31
     d1a:	ef 91       	pop	r30
     d1c:	bf 91       	pop	r27
     d1e:	af 91       	pop	r26
     d20:	9f 91       	pop	r25
     d22:	8f 91       	pop	r24
     d24:	7f 91       	pop	r23
     d26:	6f 91       	pop	r22
     d28:	5f 91       	pop	r21
     d2a:	4f 91       	pop	r20
     d2c:	3f 91       	pop	r19
     d2e:	2f 91       	pop	r18
     d30:	0f 90       	pop	r0
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	0f 90       	pop	r0
     d36:	1f 90       	pop	r1
     d38:	18 95       	reti

00000d3a <init_serial>:
}


void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
     d3a:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
     d3c:	83 e3       	ldi	r24, 0x33	; 51
     d3e:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
     d40:	80 b5       	in	r24, 0x20	; 32
     d42:	8f 7e       	andi	r24, 0xEF	; 239
     d44:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
     d46:	80 b5       	in	r24, 0x20	; 32
     d48:	8f 7d       	andi	r24, 0xDF	; 223
     d4a:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
     d4c:	80 b5       	in	r24, 0x20	; 32
     d4e:	87 7f       	andi	r24, 0xF7	; 247
     d50:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
     d52:	86 e8       	ldi	r24, 0x86	; 134
     d54:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
     d56:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
     d58:	8a b1       	in	r24, 0x0a	; 10
     d5a:	88 61       	ori	r24, 0x18	; 24
     d5c:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
     d5e:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
     d60:	57 9a       	sbi	0x0a, 7	; 10
     d62:	08 95       	ret

00000d64 <main>:
volatile uint8_t *M ;



int main (void)
{
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	00 d0       	rcall	.+0      	; 0xd6a <main+0x6>
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
	board_init();
     d6e:	8f d9       	rcall	.-3298   	; 0x8e <board_init>
	init_serial();
     d70:	e4 df       	rcall	.-56     	; 0xd3a <init_serial>
	init_leds();
     d72:	88 dc       	rcall	.-1776   	; 0x684 <init_leds>
     d74:	8d e0       	ldi	r24, 0x0D	; 13
	// delimiter carriage return
	strcpy(CR,"\xD");
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <enemy_pass>
     d7c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <CR>
     d80:	c1 9a       	sbi	0x18, 1	; 24

	//Turning off leds(atmega16)
	PORTB |= (1<<PORTB1); 
     d82:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB2);
     d84:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= (1<<PORTB3);
		

	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
     d86:	80 e4       	ldi	r24, 0x40	; 64
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	a9 d0       	rcall	.+338    	; 0xede <malloc>
     d8c:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <M+0x1>
     d90:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <M>
     d94:	19 82       	std	Y+1, r1	; 0x01
	
	volatile uint8_t i=0;
     d96:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t y = 0 ;
     d98:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0 ; i <= 7 ; i++)
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	88 30       	cpi	r24, 0x08	; 8
     d9e:	00 f5       	brcc	.+64     	; 0xde0 <main+0x7c>
     da0:	22 e0       	ldi	r18, 0x02	; 2
	{
		for(y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     da2:	1a 82       	std	Y+2, r1	; 0x02
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	88 30       	cpi	r24, 0x08	; 8
     da8:	a8 f4       	brcc	.+42     	; 0xdd4 <main+0x70>
     daa:	39 81       	ldd	r19, Y+1	; 0x01
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	48 e0       	ldi	r20, 0x08	; 8
     db2:	34 9f       	mul	r19, r20
     db4:	80 0d       	add	r24, r0
     db6:	91 1d       	adc	r25, r1
     db8:	11 24       	eor	r1, r1
     dba:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <M>
     dbe:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <M+0x1>
     dc2:	e8 0f       	add	r30, r24
     dc4:	f9 1f       	adc	r31, r25
     dc6:	20 83       	st	Z, r18
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
     dca:	8f 5f       	subi	r24, 0xFF	; 255
     dcc:	8a 83       	std	Y+2, r24	; 0x02
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	88 30       	cpi	r24, 0x08	; 8
     dd2:	58 f3       	brcs	.-42     	; 0xdaa <main+0x46>
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
     dd6:	8f 5f       	subi	r24, 0xFF	; 255
     dd8:	89 83       	std	Y+1, r24	; 0x01
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	88 30       	cpi	r24, 0x08	; 8
     dde:	08 f3       	brcs	.-62     	; 0xda2 <main+0x3e>
     de0:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <M>
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
	M[3*8+3] = 1 ;
     de4:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <M+0x1>
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	83 8f       	std	Z+27, r24	; 0x1b
     dec:	14 8e       	std	Z+28, r1	; 0x1c
	M[3*8+4] = 0 ;
     dee:	13 a2       	std	Z+35, r1	; 0x23
	M[4*8+3] = 0 ;
     df0:	84 a3       	std	Z+36, r24	; 0x24
	M[4*8+4] = 1 ;
     df2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <rxReadPos>

	//////////////////////////////////////////////////////////////////////
	

	//buffer pointers init
	rxReadPos=0;
     df6:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <rxWritePos>
	rxWritePos=0;
     dfa:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <ITflag>
	//flag Initialization 
	ITflag=0;
     dfe:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
	ILflag =0;
     e02:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <move_done>
	move_done=0;
     e06:	92 e0       	ldi	r25, 0x02	; 2
	myTurn=2;
     e08:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <myTurn>
     e0c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <MyColor>
	MyColor = 1;
     e10:	78 94       	sei
	

	sei();
     e12:	12 e0       	ldi	r17, 0x02	; 2
					
				}
				else
				{
					Transmit("QT\r",0 , strlen("QT\r"));
					myTurn=2;
     e14:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
	
	while(1){


		//Waiting for PC response - (ILLIGAL request)
		if(ILflag >= 1)
     e18:	88 23       	and	r24, r24
     e1a:	09 f4       	brne	.+2      	; 0xe1e <main+0xba>
     e1c:	45 c0       	rjmp	.+138    	; 0xea8 <main+0x144>
     e1e:	8f e1       	ldi	r24, 0x1F	; 31
     e20:	9e e4       	ldi	r25, 0x4E	; 78
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <main+0xbe>
     e26:	00 c0       	rjmp	.+0      	; 0xe28 <main+0xc4>
     e28:	00 00       	nop
     e2a:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
		{
			//Transmit("Waiting OK for announcement\r",0,"Waiting OK for announcement\r");
			_delay_ms(10);
			while(1){		
				if(ILflag == 2){ // we received the response we were waiting
     e2e:	82 30       	cpi	r24, 0x02	; 2
     e30:	e1 f7       	brne	.-8      	; 0xe2a <main+0xc6>
     e32:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
					ILflag = 0;
     e36:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <rxReadPos>
					break;
				}
			}
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75){ // "ok"
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	fc 01       	movw	r30, r24
     e3e:	e9 56       	subi	r30, 0x69	; 105
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	20 81       	ld	r18, Z
     e44:	2f 34       	cpi	r18, 0x4F	; 79
     e46:	71 f4       	brne	.+28     	; 0xe64 <main+0x100>
     e48:	fc 01       	movw	r30, r24
     e4a:	e9 56       	subi	r30, 0x69	; 105
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	81 81       	ldd	r24, Z+1	; 0x01
     e50:	8b 34       	cpi	r24, 0x4B	; 75
     e52:	31 f5       	brne	.+76     	; 0xea0 <main+0x13c>
     e54:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <rxWritePos>
			   rxReadPos=rxWritePos;
     e58:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <rxReadPos>
				AnnounceRes(1); //WIN - LED1
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	77 db       	rcall	.-2322   	; 0x54e <AnnounceRes>
     e60:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
				myTurn=2;
     e64:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <rxReadPos>
				
			
			}//future update : "else ILflag=1;" , wrong input avoidance

			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){ //"PL"
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	fc 01       	movw	r30, r24
     e6c:	e9 56       	subi	r30, 0x69	; 105
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	20 81       	ld	r18, Z
     e72:	20 35       	cpi	r18, 0x50	; 80
     e74:	a9 f4       	brne	.+42     	; 0xea0 <main+0x13c>
     e76:	fc 01       	movw	r30, r24
     e78:	e9 56       	subi	r30, 0x69	; 105
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	81 81       	ldd	r24, Z+1	; 0x01
     e7e:	8c 34       	cpi	r24, 0x4C	; 76
     e80:	79 f4       	brne	.+30     	; 0xea0 <main+0x13c>
     e82:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <ITflag>
				if(ITflag==1)
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	21 f4       	brne	.+8      	; 0xe92 <main+0x12e>
				{
					ITflag = 0;
     e8a:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <ITflag>
					init_timer();
     e8e:	01 dc       	rcall	.-2046   	; 0x692 <init_timer>
     e90:	07 c0       	rjmp	.+14     	; 0xea0 <main+0x13c>
					
				}
				else
				{
					Transmit("QT\r",0 , strlen("QT\r"));
     e92:	43 e0       	ldi	r20, 0x03	; 3
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	88 e8       	ldi	r24, 0x88	; 136
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	9d da       	rcall	.-2758   	; 0x3d6 <Transmit>
     e9c:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
					myTurn=2;
     ea0:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <rxWritePos>
				}						
					
			}	//future update : "else ILflag=1;" , wrong input avoidance		

			rxReadPos=rxWritePos;
     ea4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <rxReadPos>
     ea8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
		
		
		if((myTurn == 0)&&(mt == 0)){
     eac:	81 11       	cpse	r24, r1
     eae:	0a c0       	rjmp	.+20     	; 0xec4 <main+0x160>
     eb0:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <mt>
     eb4:	81 11       	cpse	r24, r1
     eb6:	06 c0       	rjmp	.+12     	; 0xec4 <main+0x160>
			//Possible speculation algo
			mt = 1;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <mt>
			init_timer();
     ebe:	e9 db       	rcall	.-2094   	; 0x692 <init_timer>
     ec0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			myTurn = 0;
		}
			
		
		if(myTurn==1){ //When its avr's turn
     ec4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	09 f0       	breq	.+2      	; 0xece <main+0x16a>
			mt = 0; //reset flag for HIS turn			
     ecc:	a3 cf       	rjmp	.-186    	; 0xe14 <main+0xb0>
     ece:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <mt>
			init_timer(); //reset timer
     ed2:	df db       	rcall	.-2114   	; 0x692 <init_timer>
			myTurn = 1;  //Important - collision with  init_timer
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			Algo();		//The actual algorithm
     eda:	e6 db       	rcall	.-2100   	; 0x6a8 <Algo>
     edc:	9b cf       	rjmp	.-202    	; 0xe14 <main+0xb0>

00000ede <malloc>:
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	91 05       	cpc	r25, r1
     eea:	10 f4       	brcc	.+4      	; 0xef0 <malloc+0x12>
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <__flp>
     ef4:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <__flp+0x1>
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	a0 e0       	ldi	r26, 0x00	; 0
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	30 97       	sbiw	r30, 0x00	; 0
     f02:	19 f1       	breq	.+70     	; 0xf4a <malloc+0x6c>
     f04:	40 81       	ld	r20, Z
     f06:	51 81       	ldd	r21, Z+1	; 0x01
     f08:	02 81       	ldd	r16, Z+2	; 0x02
     f0a:	13 81       	ldd	r17, Z+3	; 0x03
     f0c:	48 17       	cp	r20, r24
     f0e:	59 07       	cpc	r21, r25
     f10:	c8 f0       	brcs	.+50     	; 0xf44 <malloc+0x66>
     f12:	84 17       	cp	r24, r20
     f14:	95 07       	cpc	r25, r21
     f16:	69 f4       	brne	.+26     	; 0xf32 <malloc+0x54>
     f18:	10 97       	sbiw	r26, 0x00	; 0
     f1a:	31 f0       	breq	.+12     	; 0xf28 <malloc+0x4a>
     f1c:	12 96       	adiw	r26, 0x02	; 2
     f1e:	0c 93       	st	X, r16
     f20:	12 97       	sbiw	r26, 0x02	; 2
     f22:	13 96       	adiw	r26, 0x03	; 3
     f24:	1c 93       	st	X, r17
     f26:	27 c0       	rjmp	.+78     	; 0xf76 <malloc+0x98>
     f28:	00 93 9c 01 	sts	0x019C, r16	; 0x80019c <__flp>
     f2c:	10 93 9d 01 	sts	0x019D, r17	; 0x80019d <__flp+0x1>
     f30:	22 c0       	rjmp	.+68     	; 0xf76 <malloc+0x98>
     f32:	21 15       	cp	r18, r1
     f34:	31 05       	cpc	r19, r1
     f36:	19 f0       	breq	.+6      	; 0xf3e <malloc+0x60>
     f38:	42 17       	cp	r20, r18
     f3a:	53 07       	cpc	r21, r19
     f3c:	18 f4       	brcc	.+6      	; 0xf44 <malloc+0x66>
     f3e:	9a 01       	movw	r18, r20
     f40:	bd 01       	movw	r22, r26
     f42:	ef 01       	movw	r28, r30
     f44:	df 01       	movw	r26, r30
     f46:	f8 01       	movw	r30, r16
     f48:	db cf       	rjmp	.-74     	; 0xf00 <malloc+0x22>
     f4a:	21 15       	cp	r18, r1
     f4c:	31 05       	cpc	r19, r1
     f4e:	f9 f0       	breq	.+62     	; 0xf8e <malloc+0xb0>
     f50:	28 1b       	sub	r18, r24
     f52:	39 0b       	sbc	r19, r25
     f54:	24 30       	cpi	r18, 0x04	; 4
     f56:	31 05       	cpc	r19, r1
     f58:	80 f4       	brcc	.+32     	; 0xf7a <malloc+0x9c>
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	9b 81       	ldd	r25, Y+3	; 0x03
     f5e:	61 15       	cp	r22, r1
     f60:	71 05       	cpc	r23, r1
     f62:	21 f0       	breq	.+8      	; 0xf6c <malloc+0x8e>
     f64:	fb 01       	movw	r30, r22
     f66:	93 83       	std	Z+3, r25	; 0x03
     f68:	82 83       	std	Z+2, r24	; 0x02
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <malloc+0x96>
     f6c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <__flp+0x1>
     f70:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__flp>
     f74:	fe 01       	movw	r30, r28
     f76:	32 96       	adiw	r30, 0x02	; 2
     f78:	44 c0       	rjmp	.+136    	; 0x1002 <malloc+0x124>
     f7a:	fe 01       	movw	r30, r28
     f7c:	e2 0f       	add	r30, r18
     f7e:	f3 1f       	adc	r31, r19
     f80:	81 93       	st	Z+, r24
     f82:	91 93       	st	Z+, r25
     f84:	22 50       	subi	r18, 0x02	; 2
     f86:	31 09       	sbc	r19, r1
     f88:	39 83       	std	Y+1, r19	; 0x01
     f8a:	28 83       	st	Y, r18
     f8c:	3a c0       	rjmp	.+116    	; 0x1002 <malloc+0x124>
     f8e:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__brkval>
     f92:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__brkval+0x1>
     f96:	23 2b       	or	r18, r19
     f98:	41 f4       	brne	.+16     	; 0xfaa <malloc+0xcc>
     f9a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
     f9e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     fa2:	30 93 9b 01 	sts	0x019B, r19	; 0x80019b <__brkval+0x1>
     fa6:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <__brkval>
     faa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     fae:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     fb2:	21 15       	cp	r18, r1
     fb4:	31 05       	cpc	r19, r1
     fb6:	41 f4       	brne	.+16     	; 0xfc8 <malloc+0xea>
     fb8:	2d b7       	in	r18, 0x3d	; 61
     fba:	3e b7       	in	r19, 0x3e	; 62
     fbc:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     fc0:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     fc4:	24 1b       	sub	r18, r20
     fc6:	35 0b       	sbc	r19, r21
     fc8:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <__brkval>
     fcc:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <__brkval+0x1>
     fd0:	e2 17       	cp	r30, r18
     fd2:	f3 07       	cpc	r31, r19
     fd4:	a0 f4       	brcc	.+40     	; 0xffe <malloc+0x120>
     fd6:	2e 1b       	sub	r18, r30
     fd8:	3f 0b       	sbc	r19, r31
     fda:	28 17       	cp	r18, r24
     fdc:	39 07       	cpc	r19, r25
     fde:	78 f0       	brcs	.+30     	; 0xffe <malloc+0x120>
     fe0:	ac 01       	movw	r20, r24
     fe2:	4e 5f       	subi	r20, 0xFE	; 254
     fe4:	5f 4f       	sbci	r21, 0xFF	; 255
     fe6:	24 17       	cp	r18, r20
     fe8:	35 07       	cpc	r19, r21
     fea:	48 f0       	brcs	.+18     	; 0xffe <malloc+0x120>
     fec:	4e 0f       	add	r20, r30
     fee:	5f 1f       	adc	r21, r31
     ff0:	50 93 9b 01 	sts	0x019B, r21	; 0x80019b <__brkval+0x1>
     ff4:	40 93 9a 01 	sts	0x019A, r20	; 0x80019a <__brkval>
     ff8:	81 93       	st	Z+, r24
     ffa:	91 93       	st	Z+, r25
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <malloc+0x124>
     ffe:	e0 e0       	ldi	r30, 0x00	; 0
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	cf 01       	movw	r24, r30
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	08 95       	ret

0000100e <free>:
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	09 f4       	brne	.+2      	; 0x1018 <free+0xa>
    1016:	81 c0       	rjmp	.+258    	; 0x111a <free+0x10c>
    1018:	fc 01       	movw	r30, r24
    101a:	32 97       	sbiw	r30, 0x02	; 2
    101c:	13 82       	std	Z+3, r1	; 0x03
    101e:	12 82       	std	Z+2, r1	; 0x02
    1020:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <__flp>
    1024:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <__flp+0x1>
    1028:	10 97       	sbiw	r26, 0x00	; 0
    102a:	81 f4       	brne	.+32     	; 0x104c <free+0x3e>
    102c:	20 81       	ld	r18, Z
    102e:	31 81       	ldd	r19, Z+1	; 0x01
    1030:	82 0f       	add	r24, r18
    1032:	93 1f       	adc	r25, r19
    1034:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__brkval>
    1038:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__brkval+0x1>
    103c:	28 17       	cp	r18, r24
    103e:	39 07       	cpc	r19, r25
    1040:	51 f5       	brne	.+84     	; 0x1096 <free+0x88>
    1042:	f0 93 9b 01 	sts	0x019B, r31	; 0x80019b <__brkval+0x1>
    1046:	e0 93 9a 01 	sts	0x019A, r30	; 0x80019a <__brkval>
    104a:	67 c0       	rjmp	.+206    	; 0x111a <free+0x10c>
    104c:	ed 01       	movw	r28, r26
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	ce 17       	cp	r28, r30
    1054:	df 07       	cpc	r29, r31
    1056:	40 f4       	brcc	.+16     	; 0x1068 <free+0x5a>
    1058:	4a 81       	ldd	r20, Y+2	; 0x02
    105a:	5b 81       	ldd	r21, Y+3	; 0x03
    105c:	9e 01       	movw	r18, r28
    105e:	41 15       	cp	r20, r1
    1060:	51 05       	cpc	r21, r1
    1062:	f1 f0       	breq	.+60     	; 0x10a0 <free+0x92>
    1064:	ea 01       	movw	r28, r20
    1066:	f5 cf       	rjmp	.-22     	; 0x1052 <free+0x44>
    1068:	d3 83       	std	Z+3, r29	; 0x03
    106a:	c2 83       	std	Z+2, r28	; 0x02
    106c:	40 81       	ld	r20, Z
    106e:	51 81       	ldd	r21, Z+1	; 0x01
    1070:	84 0f       	add	r24, r20
    1072:	95 1f       	adc	r25, r21
    1074:	c8 17       	cp	r28, r24
    1076:	d9 07       	cpc	r29, r25
    1078:	59 f4       	brne	.+22     	; 0x1090 <free+0x82>
    107a:	88 81       	ld	r24, Y
    107c:	99 81       	ldd	r25, Y+1	; 0x01
    107e:	84 0f       	add	r24, r20
    1080:	95 1f       	adc	r25, r21
    1082:	02 96       	adiw	r24, 0x02	; 2
    1084:	91 83       	std	Z+1, r25	; 0x01
    1086:	80 83       	st	Z, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	93 83       	std	Z+3, r25	; 0x03
    108e:	82 83       	std	Z+2, r24	; 0x02
    1090:	21 15       	cp	r18, r1
    1092:	31 05       	cpc	r19, r1
    1094:	29 f4       	brne	.+10     	; 0x10a0 <free+0x92>
    1096:	f0 93 9d 01 	sts	0x019D, r31	; 0x80019d <__flp+0x1>
    109a:	e0 93 9c 01 	sts	0x019C, r30	; 0x80019c <__flp>
    109e:	3d c0       	rjmp	.+122    	; 0x111a <free+0x10c>
    10a0:	e9 01       	movw	r28, r18
    10a2:	fb 83       	std	Y+3, r31	; 0x03
    10a4:	ea 83       	std	Y+2, r30	; 0x02
    10a6:	49 91       	ld	r20, Y+
    10a8:	59 91       	ld	r21, Y+
    10aa:	c4 0f       	add	r28, r20
    10ac:	d5 1f       	adc	r29, r21
    10ae:	ec 17       	cp	r30, r28
    10b0:	fd 07       	cpc	r31, r29
    10b2:	61 f4       	brne	.+24     	; 0x10cc <free+0xbe>
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
    10b8:	84 0f       	add	r24, r20
    10ba:	95 1f       	adc	r25, r21
    10bc:	02 96       	adiw	r24, 0x02	; 2
    10be:	e9 01       	movw	r28, r18
    10c0:	99 83       	std	Y+1, r25	; 0x01
    10c2:	88 83       	st	Y, r24
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	93 81       	ldd	r25, Z+3	; 0x03
    10c8:	9b 83       	std	Y+3, r25	; 0x03
    10ca:	8a 83       	std	Y+2, r24	; 0x02
    10cc:	e0 e0       	ldi	r30, 0x00	; 0
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	12 96       	adiw	r26, 0x02	; 2
    10d2:	8d 91       	ld	r24, X+
    10d4:	9c 91       	ld	r25, X
    10d6:	13 97       	sbiw	r26, 0x03	; 3
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	19 f0       	breq	.+6      	; 0x10e2 <free+0xd4>
    10dc:	fd 01       	movw	r30, r26
    10de:	dc 01       	movw	r26, r24
    10e0:	f7 cf       	rjmp	.-18     	; 0x10d0 <free+0xc2>
    10e2:	8d 91       	ld	r24, X+
    10e4:	9c 91       	ld	r25, X
    10e6:	11 97       	sbiw	r26, 0x01	; 1
    10e8:	9d 01       	movw	r18, r26
    10ea:	2e 5f       	subi	r18, 0xFE	; 254
    10ec:	3f 4f       	sbci	r19, 0xFF	; 255
    10ee:	82 0f       	add	r24, r18
    10f0:	93 1f       	adc	r25, r19
    10f2:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__brkval>
    10f6:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__brkval+0x1>
    10fa:	28 17       	cp	r18, r24
    10fc:	39 07       	cpc	r19, r25
    10fe:	69 f4       	brne	.+26     	; 0x111a <free+0x10c>
    1100:	30 97       	sbiw	r30, 0x00	; 0
    1102:	29 f4       	brne	.+10     	; 0x110e <free+0x100>
    1104:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <__flp+0x1>
    1108:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <__flp>
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <free+0x104>
    110e:	13 82       	std	Z+3, r1	; 0x03
    1110:	12 82       	std	Z+2, r1	; 0x02
    1112:	b0 93 9b 01 	sts	0x019B, r27	; 0x80019b <__brkval+0x1>
    1116:	a0 93 9a 01 	sts	0x019A, r26	; 0x80019a <__brkval>
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <_exit>:
    1120:	f8 94       	cli

00001122 <__stop_program>:
    1122:	ff cf       	rjmp	.-2      	; 0x1122 <__stop_program>
