
M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000081c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  0000081c  000008b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000110  008000d6  008000d6  00000926  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000958  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cdc  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fb  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da3  00000000  00000000  00001f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fd5d  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000464  00000000  00000000  00012be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0001304d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  000130d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	70 c2       	rjmp	.+1248   	; 0x502 <__vector_8>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c1       	rjmp	.+648    	; 0x2b6 <__vector_11>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	3a c0       	rjmp	.+116    	; 0xaa <__vector_13>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3e       	cpi	r26, 0xE6	; 230
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	6a d1       	rcall	.+724    	; 0x35c <main>
  88:	c7 c3       	rjmp	.+1934   	; 0x818 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
  8c:	08 95       	ret

0000008e <Transmit>:


uint8_t CheckMove()
{
	
}
  8e:	9c 01       	movw	r18, r24
  90:	64 17       	cp	r22, r20
  92:	50 f4       	brcc	.+20     	; 0xa8 <Transmit+0x1a>
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <Transmit+0x6>
  98:	f9 01       	movw	r30, r18
  9a:	e6 0f       	add	r30, r22
  9c:	f1 1d       	adc	r31, r1
  9e:	90 81       	ld	r25, Z
  a0:	9c b9       	out	0x0c, r25	; 12
  a2:	6f 5f       	subi	r22, 0xFF	; 255
  a4:	46 13       	cpse	r20, r22
  a6:	f6 cf       	rjmp	.-20     	; 0x94 <Transmit+0x6>
  a8:	08 95       	ret

000000aa <__vector_13>:


ISR (USART_TXC_vect) { //  Interrupts for completed transmit data	
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
}
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <Check_Input>:
*	SUM: sum the certain data from memory  
*/

////////////////////////////////////////////CHECK_INPUT///////////////////////////////////////////////

void Check_Input(char data[]){
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	00 d0       	rcall	.+0      	; 0xc4 <Check_Input+0x6>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	9c 01       	movw	r18, r24
	
		if(data[rxReadPos]==CR[0]){
  ca:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <rxReadPos>
  ce:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <CR>
  d2:	f9 01       	movw	r30, r18
  d4:	e9 0f       	add	r30, r25
  d6:	f1 1d       	adc	r31, r1
  d8:	80 81       	ld	r24, Z
  da:	84 13       	cpse	r24, r20
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <Check_Input+0x26>
			rxReadPos++;
  de:	9f 5f       	subi	r25, 0xFF	; 255
  e0:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <rxReadPos>
		}
		//flag = 0;
		//Space_num = 0;
		
		if(ILflag == 1)
  e4:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	21 f4       	brne	.+8      	; 0xf4 <Check_Input+0x36>
		{
			ILflag=2;
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
			return;	
  f2:	dc c0       	rjmp	.+440    	; 0x2ac <Check_Input+0x1ee>
		}
		
		
		if(move_done == 1)
  f4:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	21 f4       	brne	.+8      	; 0x104 <Check_Input+0x46>
		{
			move_done=2;
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <move_done>
			return;	
 102:	d4 c0       	rjmp	.+424    	; 0x2ac <Check_Input+0x1ee>
 104:	b9 01       	movw	r22, r18
	


		//process
		// command AT
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
 106:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <rxReadPos>
 10a:	29 2f       	mov	r18, r25
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	fb 01       	movw	r30, r22
 110:	e2 0f       	add	r30, r18
 112:	f3 1f       	adc	r31, r19
 114:	90 81       	ld	r25, Z
 116:	91 34       	cpi	r25, 0x41	; 65
 118:	99 f4       	brne	.+38     	; 0x140 <Check_Input+0x82>
 11a:	fb 01       	movw	r30, r22
 11c:	e2 0f       	add	r30, r18
 11e:	f3 1f       	adc	r31, r19
 120:	81 81       	ldd	r24, Z+1	; 0x01
 122:	84 35       	cpi	r24, 0x54	; 84
 124:	09 f0       	breq	.+2      	; 0x128 <Check_Input+0x6a>
 126:	bd c0       	rjmp	.+378    	; 0x2a2 <Check_Input+0x1e4>
		{
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			if(data[rxReadPos+2] == CR[0]){
 128:	fb 01       	movw	r30, r22
 12a:	e2 0f       	add	r30, r18
 12c:	f3 1f       	adc	r31, r19
 12e:	82 81       	ldd	r24, Z+2	; 0x02
 130:	48 13       	cpse	r20, r24
 132:	b7 c0       	rjmp	.+366    	; 0x2a2 <Check_Input+0x1e4>
				Transmit("OK\r",0 , strlen("OK\r"));
 134:	43 e0       	ldi	r20, 0x03	; 3
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	87 e6       	ldi	r24, 0x67	; 103
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	a8 df       	rcall	.-176    	; 0x8e <Transmit>
 13e:	b1 c0       	rjmp	.+354    	; 0x2a2 <Check_Input+0x1e4>
			}
			else
				;//flag = 1;
		}
		//Checking for RST<CR> command.
		else if((data[rxReadPos] == 82)&&(data[rxReadPos + 1] == 83)&&(data[rxReadPos + 2] == 84))		
 140:	92 35       	cpi	r25, 0x52	; 82
 142:	a1 f4       	brne	.+40     	; 0x16c <Check_Input+0xae>
 144:	fb 01       	movw	r30, r22
 146:	e2 0f       	add	r30, r18
 148:	f3 1f       	adc	r31, r19
 14a:	81 81       	ldd	r24, Z+1	; 0x01
 14c:	83 35       	cpi	r24, 0x53	; 83
 14e:	09 f0       	breq	.+2      	; 0x152 <Check_Input+0x94>
 150:	a8 c0       	rjmp	.+336    	; 0x2a2 <Check_Input+0x1e4>
 152:	fb 01       	movw	r30, r22
 154:	e2 0f       	add	r30, r18
 156:	f3 1f       	adc	r31, r19
 158:	82 81       	ldd	r24, Z+2	; 0x02
 15a:	84 35       	cpi	r24, 0x54	; 84
 15c:	09 f0       	breq	.+2      	; 0x160 <Check_Input+0xa2>
 15e:	a1 c0       	rjmp	.+322    	; 0x2a2 <Check_Input+0x1e4>
		{
			Transmit("RST\r",0 , strlen("RST\r"));//RST();
 160:	44 e0       	ldi	r20, 0x04	; 4
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	8b e6       	ldi	r24, 0x6B	; 107
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	92 df       	rcall	.-220    	; 0x8e <Transmit>
			rxReadPos = rxWritePos; //
 16a:	9b c0       	rjmp	.+310    	; 0x2a2 <Check_Input+0x1e4>
		}	
		// SP<SPACE>{B/W}<CR>
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 80))
 16c:	93 35       	cpi	r25, 0x53	; 83
 16e:	d9 f4       	brne	.+54     	; 0x1a6 <Check_Input+0xe8>
 170:	fb 01       	movw	r30, r22
 172:	e2 0f       	add	r30, r18
 174:	f3 1f       	adc	r31, r19
 176:	81 81       	ldd	r24, Z+1	; 0x01
 178:	80 35       	cpi	r24, 0x50	; 80
 17a:	09 f0       	breq	.+2      	; 0x17e <Check_Input+0xc0>
 17c:	3c c0       	rjmp	.+120    	; 0x1f6 <Check_Input+0x138>
		{
			//(int)c - 65;
			if(data[rxReadPos + 3] == 66) //B
 17e:	fb 01       	movw	r30, r22
 180:	e2 0f       	add	r30, r18
 182:	f3 1f       	adc	r31, r19
 184:	83 81       	ldd	r24, Z+3	; 0x03
 186:	82 34       	cpi	r24, 0x42	; 66
 188:	19 f4       	brne	.+6      	; 0x190 <Check_Input+0xd2>
				MyColor = 0;
 18a:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <MyColor>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <Check_Input+0xdc>
			else if(data[rxReadPos + 3] == 87)  //W
 190:	87 35       	cpi	r24, 0x57	; 87
 192:	19 f4       	brne	.+6      	; 0x19a <Check_Input+0xdc>
				MyColor = 1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <MyColor>
			Transmit("SELECT PLAYER\r",0 , strlen("SELECT PLAYER\r"));//Transmit("\r",0 , strlen("\r"));
 19a:	4e e0       	ldi	r20, 0x0E	; 14
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	80 e7       	ldi	r24, 0x70	; 112
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	75 df       	rcall	.-278    	; 0x8e <Transmit>
			rxReadPos = rxWritePos;
 1a4:	7e c0       	rjmp	.+252    	; 0x2a2 <Check_Input+0x1e4>
		}
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
 1a6:	9e 34       	cpi	r25, 0x4E	; 78
 1a8:	b9 f4       	brne	.+46     	; 0x1d8 <Check_Input+0x11a>
 1aa:	fb 01       	movw	r30, r22
 1ac:	e2 0f       	add	r30, r18
 1ae:	f3 1f       	adc	r31, r19
 1b0:	81 81       	ldd	r24, Z+1	; 0x01
 1b2:	87 34       	cpi	r24, 0x47	; 71
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <Check_Input+0xfa>
 1b6:	75 c0       	rjmp	.+234    	; 0x2a2 <Check_Input+0x1e4>
		{
			if(MyColor == 0)// BLACK
 1b8:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <MyColor>
 1bc:	81 11       	cpse	r24, r1
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <Check_Input+0x10a>
				myTurn=1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <Check_Input+0x10e>
			else           //WHITE
				myTurn=0;
 1c8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			
			//TCNT1 =34286;		//set Timer;
			Transmit("NEW GAME\r",0 , strlen("NEW GAME\r"));
 1cc:	49 e0       	ldi	r20, 0x09	; 9
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	8f e7       	ldi	r24, 0x7F	; 127
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	5c df       	rcall	.-328    	; 0x8e <Transmit>
			rxReadPos = rxWritePos;
 1d6:	65 c0       	rjmp	.+202    	; 0x2a2 <Check_Input+0x1e4>
		}
		        //EG<CR>
		else if((data[rxReadPos] == 69)&&(data[rxReadPos + 1] == 71))
 1d8:	95 34       	cpi	r25, 0x45	; 69
 1da:	29 f5       	brne	.+74     	; 0x226 <Check_Input+0x168>
 1dc:	fb 01       	movw	r30, r22
 1de:	e2 0f       	add	r30, r18
 1e0:	f3 1f       	adc	r31, r19
 1e2:	81 81       	ldd	r24, Z+1	; 0x01
 1e4:	87 34       	cpi	r24, 0x47	; 71
 1e6:	09 f0       	breq	.+2      	; 0x1ea <Check_Input+0x12c>
 1e8:	5c c0       	rjmp	.+184    	; 0x2a2 <Check_Input+0x1e4>
		{
			//EndGameFlag = 1; // check this flag during waiting/calculating loop
			Transmit("END GAME\r",0 , strlen("END GAME\r"));
 1ea:	49 e0       	ldi	r20, 0x09	; 9
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	89 e8       	ldi	r24, 0x89	; 137
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	4d df       	rcall	.-358    	; 0x8e <Transmit>
			//Transmit("OK\r",0 , strlen("OK\r"));
			rxReadPos = rxWritePos;
 1f4:	56 c0       	rjmp	.+172    	; 0x2a2 <Check_Input+0x1e4>
			//EndGame();
		}
			 //ST<CR>
        else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 84))
 1f6:	fb 01       	movw	r30, r22
 1f8:	e2 0f       	add	r30, r18
 1fa:	f3 1f       	adc	r31, r19
 1fc:	81 81       	ldd	r24, Z+1	; 0x01
 1fe:	84 35       	cpi	r24, 0x54	; 84
 200:	09 f0       	breq	.+2      	; 0x204 <Check_Input+0x146>
 202:	4f c0       	rjmp	.+158    	; 0x2a2 <Check_Input+0x1e4>
        {
			Time = data[rxReadPos+3] - '0'; //
 204:	fb 01       	movw	r30, r22
 206:	e2 0f       	add	r30, r18
 208:	f3 1f       	adc	r31, r19
 20a:	83 81       	ldd	r24, Z+3	; 0x03
 20c:	80 53       	subi	r24, 0x30	; 48
 20e:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <Time>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 212:	4a e0       	ldi	r20, 0x0A	; 10
 214:	be 01       	movw	r22, r28
 216:	6f 5f       	subi	r22, 0xFF	; 255
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	90 e0       	ldi	r25, 0x00	; 0
			//Transmit("OK\r",0 , strlen("OK\r"));
			//Transmit("SET TIME\r\n",0 , strlen("SET TIME\r\n"));
			char  t[2];
			//itoa(65,t,10);
			Transmit(itoa(Time,t,10),0,1);
 21c:	ca d2       	rcall	.+1428   	; 0x7b2 <__itoa_ncheck>
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	35 df       	rcall	.-406    	; 0x8e <Transmit>
			rxReadPos = rxWritePos;
			//EndGame();
		}
			 //ST<CR>
        else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 84))
        {
 224:	3e c0       	rjmp	.+124    	; 0x2a2 <Check_Input+0x1e4>
			//itoa(65,t,10);
			Transmit(itoa(Time,t,10),0,1);
			rxReadPos = rxWritePos;
        }
			//MV<SP>{[A-H],[1-8]}<CR>
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 86))
 226:	9d 34       	cpi	r25, 0x4D	; 77
 228:	e1 f4       	brne	.+56     	; 0x262 <Check_Input+0x1a4>
 22a:	fb 01       	movw	r30, r22
 22c:	e2 0f       	add	r30, r18
 22e:	f3 1f       	adc	r31, r19
 230:	81 81       	ldd	r24, Z+1	; 0x01
 232:	86 35       	cpi	r24, 0x56	; 86
 234:	b1 f5       	brne	.+108    	; 0x2a2 <Check_Input+0x1e4>
		{
				if((data[rxReadPos+3] >= 65)&&(data[rxReadPos+3] <= 72)&&(data[rxReadPos+3] >= 49)&&(data[rxReadPos+4] <= 56))
 236:	fb 01       	movw	r30, r22
 238:	e2 0f       	add	r30, r18
 23a:	f3 1f       	adc	r31, r19
 23c:	83 81       	ldd	r24, Z+3	; 0x03
 23e:	81 54       	subi	r24, 0x41	; 65
 240:	88 30       	cpi	r24, 0x08	; 8
 242:	78 f5       	brcc	.+94     	; 0x2a2 <Check_Input+0x1e4>
 244:	fb 01       	movw	r30, r22
 246:	e2 0f       	add	r30, r18
 248:	f3 1f       	adc	r31, r19
 24a:	84 81       	ldd	r24, Z+4	; 0x04
 24c:	89 33       	cpi	r24, 0x39	; 57
						M[(((int)data[rxReadPos+3] - 65)*8) + (data[rxReadPos+4] - '0')] = !MyColor;
						Transmit("OK\r",0 , strlen("OK\r"));
						myTurn=1;
					}
					else{
						Transmit("IL\r",0 , strlen("IL\r"));
 24e:	4c f5       	brge	.+82     	; 0x2a2 <Check_Input+0x1e4>
 250:	43 e0       	ldi	r20, 0x03	; 3
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	83 e9       	ldi	r24, 0x93	; 147
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	1a df       	rcall	.-460    	; 0x8e <Transmit>
						ILflag =  1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
 260:	20 c0       	rjmp	.+64     	; 0x2a2 <Check_Input+0x1e4>
						
				} 	
		}

		//PASS
		else if ((data[rxReadPos] == 80)&&(data[rxReadPos + 1] == 83))
 262:	90 35       	cpi	r25, 0x50	; 80
 264:	89 f4       	brne	.+34     	; 0x288 <Check_Input+0x1ca>
 266:	fb 01       	movw	r30, r22
 268:	e2 0f       	add	r30, r18
 26a:	f3 1f       	adc	r31, r19
 26c:	81 81       	ldd	r24, Z+1	; 0x01
 26e:	83 35       	cpi	r24, 0x53	; 83
 270:	c1 f4       	brne	.+48     	; 0x2a2 <Check_Input+0x1e4>
		{
			myTurn=1;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			enemy_pass=1;
 278:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <enemy_pass>
			Transmit("OK\r",0,strlen("OK\r"));
 27c:	43 e0       	ldi	r20, 0x03	; 3
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	87 e6       	ldi	r24, 0x67	; 103
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	04 df       	rcall	.-504    	; 0x8e <Transmit>
 286:	0d c0       	rjmp	.+26     	; 0x2a2 <Check_Input+0x1e4>
		}
		//WN
		else if((data[rxReadPos] == 87)&&(data[rxReadPos + 1] == 78)){
 288:	97 35       	cpi	r25, 0x57	; 87
 28a:	59 f4       	brne	.+22     	; 0x2a2 <Check_Input+0x1e4>
 28c:	fb 01       	movw	r30, r22
 28e:	e2 0f       	add	r30, r18
 290:	f3 1f       	adc	r31, r19
 292:	81 81       	ldd	r24, Z+1	; 0x01
 294:	8e 34       	cpi	r24, 0x4E	; 78
			//I WIN
			//myturn=2;
			
			//Transmit("OK\r",0,strlen("OK\r"));
			Transmit("weeeee are the wiiii....SHUT UP\r",0 , strlen("Weeeee are the wiiii....SHUT UP\r"));
 296:	29 f4       	brne	.+10     	; 0x2a2 <Check_Input+0x1e4>
 298:	40 e2       	ldi	r20, 0x20	; 32
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	87 e9       	ldi	r24, 0x97	; 151
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	f6 de       	rcall	.-532    	; 0x8e <Transmit>
		}
		else
			NULL;
	rxReadPos=rxWritePos;		
	rxReadPos++;		//Ready for the next command (directs to the next letter) 
 2a2:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <rxWritePos>
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <rxReadPos>
	

				
}
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <__vector_11>:




ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
 2d8:	8c b1       	in	r24, 0x0c	; 12
 2da:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <rxWritePos>
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	e1 52       	subi	r30, 0x21	; 33
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
 2e6:	5d 9b       	sbis	0x0b, 5	; 11
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
 2ea:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
 2ec:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <rxWritePos>
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	e1 52       	subi	r30, 0x21	; 33
 2f4:	ff 4f       	sbci	r31, 0xFF	; 255
 2f6:	90 81       	ld	r25, Z
 2f8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <CR>
 2fc:	98 13       	cpse	r25, r24
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <__vector_11+0x50>
		Check_Input(myrxbuffer);
 300:	8f ed       	ldi	r24, 0xDF	; 223
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	dc de       	rcall	.-584    	; 0xbe <Check_Input>
	
	
	

	rxWritePos++;
 306:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <rxWritePos>
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <rxWritePos>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <init_serial>:



void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
 332:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
 334:	83 e3       	ldi	r24, 0x33	; 51
 336:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
 338:	80 b5       	in	r24, 0x20	; 32
 33a:	8f 7e       	andi	r24, 0xEF	; 239
 33c:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
 33e:	80 b5       	in	r24, 0x20	; 32
 340:	8f 7d       	andi	r24, 0xDF	; 223
 342:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
 344:	80 b5       	in	r24, 0x20	; 32
 346:	87 7f       	andi	r24, 0xF7	; 247
 348:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
 34a:	86 e8       	ldi	r24, 0x86	; 134
 34c:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
 34e:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
 350:	8a b1       	in	r24, 0x0a	; 10
 352:	88 61       	ori	r24, 0x18	; 24
 354:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
 356:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
 358:	57 9a       	sbi	0x0a, 7	; 10
 35a:	08 95       	ret

0000035c <main>:
volatile uint8_t *M ;



int main (void)
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	00 d0       	rcall	.+0      	; 0x362 <main+0x6>
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
	board_init();
 366:	92 de       	rcall	.-732    	; 0x8c <board_init>
	init_serial();
 368:	e4 df       	rcall	.-56     	; 0x332 <init_serial>
 36a:	80 e4       	ldi	r24, 0x40	; 64

		
	// question 2, accessing RAM and determine the position in memory, where the data will be stored.

	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	00 d1       	rcall	.+512    	; 0x570 <malloc>
 370:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <M+0x1>
 374:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <M>
 378:	19 82       	std	Y+1, r1	; 0x01
	
	volatile uint8_t i=0;
 37a:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t y = 0 ;
 37c:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0 ; i <= 7 ; i++)
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	88 30       	cpi	r24, 0x08	; 8
 382:	00 f5       	brcc	.+64     	; 0x3c4 <main+0x68>
 384:	22 e0       	ldi	r18, 0x02	; 2
	{
		for(y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
 386:	1a 82       	std	Y+2, r1	; 0x02
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
 388:	8a 81       	ldd	r24, Y+2	; 0x02
 38a:	88 30       	cpi	r24, 0x08	; 8
 38c:	a8 f4       	brcc	.+42     	; 0x3b8 <main+0x5c>
 38e:	39 81       	ldd	r19, Y+1	; 0x01
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	48 e0       	ldi	r20, 0x08	; 8
 396:	34 9f       	mul	r19, r20
 398:	80 0d       	add	r24, r0
 39a:	91 1d       	adc	r25, r1
 39c:	11 24       	eor	r1, r1
 39e:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <M>
 3a2:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <M+0x1>
 3a6:	e8 0f       	add	r30, r24
 3a8:	f9 1f       	adc	r31, r25
 3aa:	20 83       	st	Z, r18
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
 3b0:	8a 83       	std	Y+2, r24	; 0x02
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	88 30       	cpi	r24, 0x08	; 8
 3b6:	58 f3       	brcs	.-42     	; 0x38e <main+0x32>
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
	
	volatile uint8_t i=0;
	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	89 83       	std	Y+1, r24	; 0x01
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	88 30       	cpi	r24, 0x08	; 8
 3c2:	08 f3       	brcs	.-62     	; 0x386 <main+0x2a>
 3c4:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <M>
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
		}
	}

	M[3*8+3] = 1 ;
 3c8:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <M+0x1>
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	83 8f       	std	Z+27, r24	; 0x1b
 3d0:	14 8e       	std	Z+28, r1	; 0x1c
	M[3*8+4] = 0 ;
 3d2:	13 a2       	std	Z+35, r1	; 0x23
	M[4*8+3] = 0 ;
 3d4:	84 a3       	std	Z+36, r24	; 0x24
	M[4*8+4] = 1 ;
 3d6:	8d e0       	ldi	r24, 0x0D	; 13

	

	//////////////////////////////////////////////////////////////////////
	// delimiter carriage return
	strcpy(CR,"\xD");
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <enemy_pass>
 3de:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <CR>
 3e2:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <rxReadPos>

	// Initialization of pointers for buffer
	rxReadPos=0;
 3e6:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <rxWritePos>
	rxWritePos=0;
 3ea:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>
	ILflag =0;
 3ee:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <move_done>
	move_done=0;
 3f2:	82 e0       	ldi	r24, 0x02	; 2
	myTurn=2;
 3f4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
 3f8:	78 94       	sei

	sei();
 3fa:	0f 2e       	mov	r0, r31
			
			}
			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){
				//I lose
				rxReadPos=rxWritePos;
				Transmit("QT\r",0,"QT\r");
 3fc:	f8 eb       	ldi	r31, 0xB8	; 184
 3fe:	af 2e       	mov	r10, r31
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	bf 2e       	mov	r11, r31
 404:	f0 2d       	mov	r31, r0
 406:	f1 2c       	mov	r15, r1
		//Waiting for PC response - (ILLIGAL request)
		if(ILflag >= 1)
		{
			while(1){		
				if(ILflag==2){ // we received the response we were waiting
					ILflag=0;
 408:	9a 2c       	mov	r9, r10
			
			}
			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){
				//I lose
				rxReadPos=rxWritePos;
				Transmit("QT\r",0,"QT\r");
 40a:	cb 2c       	mov	r12, r11
 40c:	68 94       	set
						//EndGame();
						Transmit("LS\r",0,strlen("LS\r"));
						break;
					}
				}
				myTurn=2;	
 40e:	ee 24       	eor	r14, r14
 410:	e1 f8       	bld	r14, 1
 412:	dd 24       	eor	r13, r13
				move_done=1;
 414:	d3 94       	inc	r13
 416:	0f 2d       	mov	r16, r15
				{
					while(1)
					{
						if(move_done==2)
						{ // we received the response we were waiting
							move_done=0;
 418:	1f 2d       	mov	r17, r15
 41a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
	

	while(1){
		
		//Waiting for PC response - (ILLIGAL request)
		if(ILflag >= 1)
 41e:	88 23       	and	r24, r24
 420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	45 c0       	rjmp	.+138    	; 0x4ae <__stack+0x4f>
 424:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
		{
			while(1){		
				if(ILflag==2){ // we received the response we were waiting
 428:	82 30       	cpi	r24, 0x02	; 2
 42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	f0 92 d6 00 	sts	0x00D6, r15	; 0x8000d6 <__data_end>
					ILflag=0;
 430:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rxReadPos>
					break;
				}
			}
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75){
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	fc 01       	movw	r30, r24
 438:	e1 52       	subi	r30, 0x21	; 33
 43a:	ff 4f       	sbci	r31, 0xFF	; 255
 43c:	20 81       	ld	r18, Z
 43e:	2f 34       	cpi	r18, 0x4F	; 79
 440:	49 f4       	brne	.+18     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 442:	fc 01       	movw	r30, r24
 444:	e1 52       	subi	r30, 0x21	; 33
 446:	ff 4f       	sbci	r31, 0xFF	; 255
 448:	81 81       	ldd	r24, Z+1	; 0x01
 44a:	8b 34       	cpi	r24, 0x4B	; 75
 44c:	61 f5       	brne	.+88     	; 0x4a6 <__stack+0x47>
 44e:	e0 92 66 00 	sts	0x0066, r14	; 0x800066 <myTurn>
				// i win
				myTurn=2;
 452:	29 c0       	rjmp	.+82     	; 0x4a6 <__stack+0x47>
 454:	20 35       	cpi	r18, 0x50	; 80
			
			}
			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){
 456:	39 f5       	brne	.+78     	; 0x4a6 <__stack+0x47>
 458:	fc 01       	movw	r30, r24
 45a:	e1 52       	subi	r30, 0x21	; 33
 45c:	ff 4f       	sbci	r31, 0xFF	; 255
 45e:	81 81       	ldd	r24, Z+1	; 0x01
 460:	8c 34       	cpi	r24, 0x4C	; 76
 462:	09 f5       	brne	.+66     	; 0x4a6 <__stack+0x47>
 464:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <rxWritePos>
				//I lose
				rxReadPos=rxWritePos;
 468:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <rxReadPos>
 46c:	4a 2d       	mov	r20, r10
				Transmit("QT\r",0,"QT\r");
 46e:	6f 2d       	mov	r22, r15
 470:	89 2d       	mov	r24, r9
 472:	9c 2d       	mov	r25, r12
 474:	0c de       	rcall	.-1000   	; 0x8e <Transmit>
 476:	e0 91 d8 00 	lds	r30, 0x00D8	; 0x8000d8 <rxReadPos>
				//wait for ok;
				while(1){
					if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75 && myrxbuffer[rxReadPos+1] == CR[0]){
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	e1 52       	subi	r30, 0x21	; 33
 47e:	ff 4f       	sbci	r31, 0xFF	; 255
 480:	80 81       	ld	r24, Z
 482:	91 81       	ldd	r25, Z+1	; 0x01
 484:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <CR>
 488:	8f 34       	cpi	r24, 0x4F	; 79
 48a:	f1 f7       	brne	.-4      	; 0x488 <__stack+0x29>
 48c:	9b 34       	cpi	r25, 0x4B	; 75
 48e:	e1 f7       	brne	.-8      	; 0x488 <__stack+0x29>
 490:	2b 34       	cpi	r18, 0x4B	; 75
 492:	d1 f7       	brne	.-12     	; 0x488 <__stack+0x29>
 494:	43 e0       	ldi	r20, 0x03	; 3
						//EndGame();
						Transmit("LS\r",0,strlen("LS\r"));
 496:	6f 2d       	mov	r22, r15
 498:	8c eb       	ldi	r24, 0xBC	; 188
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	f8 dd       	rcall	.-1040   	; 0x8e <Transmit>
 49e:	e0 92 66 00 	sts	0x0066, r14	; 0x800066 <myTurn>
						break;
					}
				}
				myTurn=2;	
 4a2:	d0 92 db 00 	sts	0x00DB, r13	; 0x8000db <move_done>
				move_done=1;
 4a6:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <rxWritePos>
			}
			
			rxReadPos=rxWritePos;
 4aa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <rxReadPos>
 4ae:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
		
		//not illegal time && received  MV

		if(myTurn==1){
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <__stack+0x59>
 4b6:	b1 cf       	rjmp	.-158    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			//Transmit("OK\r",0 , strlen("OK\r"));
			Transmit("Calculating ALGO\r",0 , strlen("Calculating ALGO\r"));
 4b8:	41 e1       	ldi	r20, 0x11	; 17
 4ba:	6f 2d       	mov	r22, r15
 4bc:	80 ec       	ldi	r24, 0xC0	; 192
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	e6 dd       	rcall	.-1076   	; 0x8e <Transmit>
 4c2:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
 4c6:	a0 91 d8 00 	lds	r26, 0x00D8	; 0x8000d8 <rxReadPos>
						{ // we received the response we were waiting
							move_done=0;
							break;
						}
					}
					if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75)
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	fd 01       	movw	r30, r26
 4ce:	e1 52       	subi	r30, 0x21	; 33
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	a0 52       	subi	r26, 0x20	; 32
 4d4:	bf 4f       	sbci	r27, 0xFF	; 255
 4d6:	88 23       	and	r24, r24

			//Set timer
			//Algo();
		
			while(1){		// Check_Input does not support "OK" response so we check it here
				if(move_done >= 1)
 4d8:	f1 f3       	breq	.-4      	; 0x4d6 <__stack+0x77>
 4da:	82 30       	cpi	r24, 0x02	; 2
				{
					while(1)
					{
						if(move_done==2)
 4dc:	09 f0       	breq	.+2      	; 0x4e0 <__stack+0x81>
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stack+0x7f>
 4e0:	81 2f       	mov	r24, r17
						{ // we received the response we were waiting
							move_done=0;
 4e2:	90 81       	ld	r25, Z
							break;
						}
					}
					if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75)
 4e4:	9f 34       	cpi	r25, 0x4F	; 79
 4e6:	b9 f7       	brne	.-18     	; 0x4d6 <__stack+0x77>
 4e8:	80 2f       	mov	r24, r16
				{
					while(1)
					{
						if(move_done==2)
						{ // we received the response we were waiting
							move_done=0;
 4ea:	9c 91       	ld	r25, X
							break;
						}
					}
					if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75)
 4ec:	9b 34       	cpi	r25, 0x4B	; 75
 4ee:	99 f7       	brne	.-26     	; 0x4d6 <__stack+0x77>
 4f0:	f0 92 db 00 	sts	0x00DB, r15	; 0x8000db <move_done>
 4f4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <rxWritePos>
					{
						//set timer
						rxReadPos=rxWritePos;
 4f8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <rxReadPos>
 4fc:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <myTurn>
						myTurn=0;
 500:	8c cf       	rjmp	.-232    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

00000502 <__vector_8>:
						break;	
 502:	1f 92       	push	r1
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
}


 ISR (TIMER1_OVF_vect)    // Timer1 ISR
 {
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	2f 93       	push	r18
 50e:	3f 93       	push	r19
 510:	4f 93       	push	r20
 512:	5f 93       	push	r21
 514:	6f 93       	push	r22
 516:	7f 93       	push	r23
 518:	8f 93       	push	r24
 51a:	9f 93       	push	r25
 51c:	af 93       	push	r26
 51e:	bf 93       	push	r27
 520:	ef 93       	push	r30
 522:	ff 93       	push	r31
	 if(myTurn==1){
 524:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	29 f4       	brne	.+10     	; 0x536 <__vector_8+0x34>
		 // coming soon 
		 myTurn=0;
 52c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
		 move_done=1;
 530:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <move_done>
 534:	0c c0       	rjmp	.+24     	; 0x54e <__vector_8+0x4c>
	 } 
	 else if(myTurn == 0){
 536:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
 53a:	81 11       	cpse	r24, r1
 53c:	08 c0       	rjmp	.+16     	; 0x54e <__vector_8+0x4c>
		  Transmit("IT\r",0,strlen("IT\r"));
 53e:	43 e0       	ldi	r20, 0x03	; 3
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	82 ed       	ldi	r24, 0xD2	; 210
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	a3 dd       	rcall	.-1210   	; 0x8e <Transmit>
		  ILflag=1;
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
	 }
	 
 }
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	bf 91       	pop	r27
 554:	af 91       	pop	r26
 556:	9f 91       	pop	r25
 558:	8f 91       	pop	r24
 55a:	7f 91       	pop	r23
 55c:	6f 91       	pop	r22
 55e:	5f 91       	pop	r21
 560:	4f 91       	pop	r20
 562:	3f 91       	pop	r19
 564:	2f 91       	pop	r18
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	1f 90       	pop	r1
 56e:	18 95       	reti

00000570 <malloc>:
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	91 05       	cpc	r25, r1
 57c:	10 f4       	brcc	.+4      	; 0x582 <malloc+0x12>
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <__flp>
 586:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <__flp+0x1>
 58a:	20 e0       	ldi	r18, 0x00	; 0
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	a0 e0       	ldi	r26, 0x00	; 0
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	30 97       	sbiw	r30, 0x00	; 0
 594:	19 f1       	breq	.+70     	; 0x5dc <malloc+0x6c>
 596:	40 81       	ld	r20, Z
 598:	51 81       	ldd	r21, Z+1	; 0x01
 59a:	02 81       	ldd	r16, Z+2	; 0x02
 59c:	13 81       	ldd	r17, Z+3	; 0x03
 59e:	48 17       	cp	r20, r24
 5a0:	59 07       	cpc	r21, r25
 5a2:	c8 f0       	brcs	.+50     	; 0x5d6 <malloc+0x66>
 5a4:	84 17       	cp	r24, r20
 5a6:	95 07       	cpc	r25, r21
 5a8:	69 f4       	brne	.+26     	; 0x5c4 <malloc+0x54>
 5aa:	10 97       	sbiw	r26, 0x00	; 0
 5ac:	31 f0       	breq	.+12     	; 0x5ba <malloc+0x4a>
 5ae:	12 96       	adiw	r26, 0x02	; 2
 5b0:	0c 93       	st	X, r16
 5b2:	12 97       	sbiw	r26, 0x02	; 2
 5b4:	13 96       	adiw	r26, 0x03	; 3
 5b6:	1c 93       	st	X, r17
 5b8:	27 c0       	rjmp	.+78     	; 0x608 <malloc+0x98>
 5ba:	00 93 e4 01 	sts	0x01E4, r16	; 0x8001e4 <__flp>
 5be:	10 93 e5 01 	sts	0x01E5, r17	; 0x8001e5 <__flp+0x1>
 5c2:	22 c0       	rjmp	.+68     	; 0x608 <malloc+0x98>
 5c4:	21 15       	cp	r18, r1
 5c6:	31 05       	cpc	r19, r1
 5c8:	19 f0       	breq	.+6      	; 0x5d0 <malloc+0x60>
 5ca:	42 17       	cp	r20, r18
 5cc:	53 07       	cpc	r21, r19
 5ce:	18 f4       	brcc	.+6      	; 0x5d6 <malloc+0x66>
 5d0:	9a 01       	movw	r18, r20
 5d2:	bd 01       	movw	r22, r26
 5d4:	ef 01       	movw	r28, r30
 5d6:	df 01       	movw	r26, r30
 5d8:	f8 01       	movw	r30, r16
 5da:	db cf       	rjmp	.-74     	; 0x592 <malloc+0x22>
 5dc:	21 15       	cp	r18, r1
 5de:	31 05       	cpc	r19, r1
 5e0:	f9 f0       	breq	.+62     	; 0x620 <malloc+0xb0>
 5e2:	28 1b       	sub	r18, r24
 5e4:	39 0b       	sbc	r19, r25
 5e6:	24 30       	cpi	r18, 0x04	; 4
 5e8:	31 05       	cpc	r19, r1
 5ea:	80 f4       	brcc	.+32     	; 0x60c <malloc+0x9c>
 5ec:	8a 81       	ldd	r24, Y+2	; 0x02
 5ee:	9b 81       	ldd	r25, Y+3	; 0x03
 5f0:	61 15       	cp	r22, r1
 5f2:	71 05       	cpc	r23, r1
 5f4:	21 f0       	breq	.+8      	; 0x5fe <malloc+0x8e>
 5f6:	fb 01       	movw	r30, r22
 5f8:	93 83       	std	Z+3, r25	; 0x03
 5fa:	82 83       	std	Z+2, r24	; 0x02
 5fc:	04 c0       	rjmp	.+8      	; 0x606 <malloc+0x96>
 5fe:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <__flp+0x1>
 602:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__flp>
 606:	fe 01       	movw	r30, r28
 608:	32 96       	adiw	r30, 0x02	; 2
 60a:	44 c0       	rjmp	.+136    	; 0x694 <malloc+0x124>
 60c:	fe 01       	movw	r30, r28
 60e:	e2 0f       	add	r30, r18
 610:	f3 1f       	adc	r31, r19
 612:	81 93       	st	Z+, r24
 614:	91 93       	st	Z+, r25
 616:	22 50       	subi	r18, 0x02	; 2
 618:	31 09       	sbc	r19, r1
 61a:	39 83       	std	Y+1, r19	; 0x01
 61c:	28 83       	st	Y, r18
 61e:	3a c0       	rjmp	.+116    	; 0x694 <malloc+0x124>
 620:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <__brkval>
 624:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <__brkval+0x1>
 628:	23 2b       	or	r18, r19
 62a:	41 f4       	brne	.+16     	; 0x63c <malloc+0xcc>
 62c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 630:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 634:	30 93 e3 01 	sts	0x01E3, r19	; 0x8001e3 <__brkval+0x1>
 638:	20 93 e2 01 	sts	0x01E2, r18	; 0x8001e2 <__brkval>
 63c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 640:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 644:	21 15       	cp	r18, r1
 646:	31 05       	cpc	r19, r1
 648:	41 f4       	brne	.+16     	; 0x65a <malloc+0xea>
 64a:	2d b7       	in	r18, 0x3d	; 61
 64c:	3e b7       	in	r19, 0x3e	; 62
 64e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 652:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 656:	24 1b       	sub	r18, r20
 658:	35 0b       	sbc	r19, r21
 65a:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <__brkval>
 65e:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <__brkval+0x1>
 662:	e2 17       	cp	r30, r18
 664:	f3 07       	cpc	r31, r19
 666:	a0 f4       	brcc	.+40     	; 0x690 <malloc+0x120>
 668:	2e 1b       	sub	r18, r30
 66a:	3f 0b       	sbc	r19, r31
 66c:	28 17       	cp	r18, r24
 66e:	39 07       	cpc	r19, r25
 670:	78 f0       	brcs	.+30     	; 0x690 <malloc+0x120>
 672:	ac 01       	movw	r20, r24
 674:	4e 5f       	subi	r20, 0xFE	; 254
 676:	5f 4f       	sbci	r21, 0xFF	; 255
 678:	24 17       	cp	r18, r20
 67a:	35 07       	cpc	r19, r21
 67c:	48 f0       	brcs	.+18     	; 0x690 <malloc+0x120>
 67e:	4e 0f       	add	r20, r30
 680:	5f 1f       	adc	r21, r31
 682:	50 93 e3 01 	sts	0x01E3, r21	; 0x8001e3 <__brkval+0x1>
 686:	40 93 e2 01 	sts	0x01E2, r20	; 0x8001e2 <__brkval>
 68a:	81 93       	st	Z+, r24
 68c:	91 93       	st	Z+, r25
 68e:	02 c0       	rjmp	.+4      	; 0x694 <malloc+0x124>
 690:	e0 e0       	ldi	r30, 0x00	; 0
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	cf 01       	movw	r24, r30
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	08 95       	ret

000006a0 <free>:
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	00 97       	sbiw	r24, 0x00	; 0
 6a6:	09 f4       	brne	.+2      	; 0x6aa <free+0xa>
 6a8:	81 c0       	rjmp	.+258    	; 0x7ac <free+0x10c>
 6aa:	fc 01       	movw	r30, r24
 6ac:	32 97       	sbiw	r30, 0x02	; 2
 6ae:	13 82       	std	Z+3, r1	; 0x03
 6b0:	12 82       	std	Z+2, r1	; 0x02
 6b2:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <__flp>
 6b6:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <__flp+0x1>
 6ba:	10 97       	sbiw	r26, 0x00	; 0
 6bc:	81 f4       	brne	.+32     	; 0x6de <free+0x3e>
 6be:	20 81       	ld	r18, Z
 6c0:	31 81       	ldd	r19, Z+1	; 0x01
 6c2:	82 0f       	add	r24, r18
 6c4:	93 1f       	adc	r25, r19
 6c6:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <__brkval>
 6ca:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <__brkval+0x1>
 6ce:	28 17       	cp	r18, r24
 6d0:	39 07       	cpc	r19, r25
 6d2:	51 f5       	brne	.+84     	; 0x728 <free+0x88>
 6d4:	f0 93 e3 01 	sts	0x01E3, r31	; 0x8001e3 <__brkval+0x1>
 6d8:	e0 93 e2 01 	sts	0x01E2, r30	; 0x8001e2 <__brkval>
 6dc:	67 c0       	rjmp	.+206    	; 0x7ac <free+0x10c>
 6de:	ed 01       	movw	r28, r26
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	ce 17       	cp	r28, r30
 6e6:	df 07       	cpc	r29, r31
 6e8:	40 f4       	brcc	.+16     	; 0x6fa <free+0x5a>
 6ea:	4a 81       	ldd	r20, Y+2	; 0x02
 6ec:	5b 81       	ldd	r21, Y+3	; 0x03
 6ee:	9e 01       	movw	r18, r28
 6f0:	41 15       	cp	r20, r1
 6f2:	51 05       	cpc	r21, r1
 6f4:	f1 f0       	breq	.+60     	; 0x732 <free+0x92>
 6f6:	ea 01       	movw	r28, r20
 6f8:	f5 cf       	rjmp	.-22     	; 0x6e4 <free+0x44>
 6fa:	d3 83       	std	Z+3, r29	; 0x03
 6fc:	c2 83       	std	Z+2, r28	; 0x02
 6fe:	40 81       	ld	r20, Z
 700:	51 81       	ldd	r21, Z+1	; 0x01
 702:	84 0f       	add	r24, r20
 704:	95 1f       	adc	r25, r21
 706:	c8 17       	cp	r28, r24
 708:	d9 07       	cpc	r29, r25
 70a:	59 f4       	brne	.+22     	; 0x722 <free+0x82>
 70c:	88 81       	ld	r24, Y
 70e:	99 81       	ldd	r25, Y+1	; 0x01
 710:	84 0f       	add	r24, r20
 712:	95 1f       	adc	r25, r21
 714:	02 96       	adiw	r24, 0x02	; 2
 716:	91 83       	std	Z+1, r25	; 0x01
 718:	80 83       	st	Z, r24
 71a:	8a 81       	ldd	r24, Y+2	; 0x02
 71c:	9b 81       	ldd	r25, Y+3	; 0x03
 71e:	93 83       	std	Z+3, r25	; 0x03
 720:	82 83       	std	Z+2, r24	; 0x02
 722:	21 15       	cp	r18, r1
 724:	31 05       	cpc	r19, r1
 726:	29 f4       	brne	.+10     	; 0x732 <free+0x92>
 728:	f0 93 e5 01 	sts	0x01E5, r31	; 0x8001e5 <__flp+0x1>
 72c:	e0 93 e4 01 	sts	0x01E4, r30	; 0x8001e4 <__flp>
 730:	3d c0       	rjmp	.+122    	; 0x7ac <free+0x10c>
 732:	e9 01       	movw	r28, r18
 734:	fb 83       	std	Y+3, r31	; 0x03
 736:	ea 83       	std	Y+2, r30	; 0x02
 738:	49 91       	ld	r20, Y+
 73a:	59 91       	ld	r21, Y+
 73c:	c4 0f       	add	r28, r20
 73e:	d5 1f       	adc	r29, r21
 740:	ec 17       	cp	r30, r28
 742:	fd 07       	cpc	r31, r29
 744:	61 f4       	brne	.+24     	; 0x75e <free+0xbe>
 746:	80 81       	ld	r24, Z
 748:	91 81       	ldd	r25, Z+1	; 0x01
 74a:	84 0f       	add	r24, r20
 74c:	95 1f       	adc	r25, r21
 74e:	02 96       	adiw	r24, 0x02	; 2
 750:	e9 01       	movw	r28, r18
 752:	99 83       	std	Y+1, r25	; 0x01
 754:	88 83       	st	Y, r24
 756:	82 81       	ldd	r24, Z+2	; 0x02
 758:	93 81       	ldd	r25, Z+3	; 0x03
 75a:	9b 83       	std	Y+3, r25	; 0x03
 75c:	8a 83       	std	Y+2, r24	; 0x02
 75e:	e0 e0       	ldi	r30, 0x00	; 0
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	12 96       	adiw	r26, 0x02	; 2
 764:	8d 91       	ld	r24, X+
 766:	9c 91       	ld	r25, X
 768:	13 97       	sbiw	r26, 0x03	; 3
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	19 f0       	breq	.+6      	; 0x774 <free+0xd4>
 76e:	fd 01       	movw	r30, r26
 770:	dc 01       	movw	r26, r24
 772:	f7 cf       	rjmp	.-18     	; 0x762 <free+0xc2>
 774:	8d 91       	ld	r24, X+
 776:	9c 91       	ld	r25, X
 778:	11 97       	sbiw	r26, 0x01	; 1
 77a:	9d 01       	movw	r18, r26
 77c:	2e 5f       	subi	r18, 0xFE	; 254
 77e:	3f 4f       	sbci	r19, 0xFF	; 255
 780:	82 0f       	add	r24, r18
 782:	93 1f       	adc	r25, r19
 784:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <__brkval>
 788:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <__brkval+0x1>
 78c:	28 17       	cp	r18, r24
 78e:	39 07       	cpc	r19, r25
 790:	69 f4       	brne	.+26     	; 0x7ac <free+0x10c>
 792:	30 97       	sbiw	r30, 0x00	; 0
 794:	29 f4       	brne	.+10     	; 0x7a0 <free+0x100>
 796:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <__flp+0x1>
 79a:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <__flp>
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <free+0x104>
 7a0:	13 82       	std	Z+3, r1	; 0x03
 7a2:	12 82       	std	Z+2, r1	; 0x02
 7a4:	b0 93 e3 01 	sts	0x01E3, r27	; 0x8001e3 <__brkval+0x1>
 7a8:	a0 93 e2 01 	sts	0x01E2, r26	; 0x8001e2 <__brkval>
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <__itoa_ncheck>:
 7b2:	bb 27       	eor	r27, r27
 7b4:	4a 30       	cpi	r20, 0x0A	; 10
 7b6:	31 f4       	brne	.+12     	; 0x7c4 <__itoa_ncheck+0x12>
 7b8:	99 23       	and	r25, r25
 7ba:	22 f4       	brpl	.+8      	; 0x7c4 <__itoa_ncheck+0x12>
 7bc:	bd e2       	ldi	r27, 0x2D	; 45
 7be:	90 95       	com	r25
 7c0:	81 95       	neg	r24
 7c2:	9f 4f       	sbci	r25, 0xFF	; 255
 7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <__utoa_common>

000007c6 <__utoa_ncheck>:
 7c6:	bb 27       	eor	r27, r27

000007c8 <__utoa_common>:
 7c8:	fb 01       	movw	r30, r22
 7ca:	55 27       	eor	r21, r21
 7cc:	aa 27       	eor	r26, r26
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	aa 1f       	adc	r26, r26
 7d4:	a4 17       	cp	r26, r20
 7d6:	10 f0       	brcs	.+4      	; 0x7dc <__utoa_common+0x14>
 7d8:	a4 1b       	sub	r26, r20
 7da:	83 95       	inc	r24
 7dc:	50 51       	subi	r21, 0x10	; 16
 7de:	b9 f7       	brne	.-18     	; 0x7ce <__utoa_common+0x6>
 7e0:	a0 5d       	subi	r26, 0xD0	; 208
 7e2:	aa 33       	cpi	r26, 0x3A	; 58
 7e4:	08 f0       	brcs	.+2      	; 0x7e8 <__utoa_common+0x20>
 7e6:	a9 5d       	subi	r26, 0xD9	; 217
 7e8:	a1 93       	st	Z+, r26
 7ea:	00 97       	sbiw	r24, 0x00	; 0
 7ec:	79 f7       	brne	.-34     	; 0x7cc <__utoa_common+0x4>
 7ee:	b1 11       	cpse	r27, r1
 7f0:	b1 93       	st	Z+, r27
 7f2:	11 92       	st	Z+, r1
 7f4:	cb 01       	movw	r24, r22
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <strrev>

000007f8 <strrev>:
 7f8:	dc 01       	movw	r26, r24
 7fa:	fc 01       	movw	r30, r24
 7fc:	67 2f       	mov	r22, r23
 7fe:	71 91       	ld	r23, Z+
 800:	77 23       	and	r23, r23
 802:	e1 f7       	brne	.-8      	; 0x7fc <strrev+0x4>
 804:	32 97       	sbiw	r30, 0x02	; 2
 806:	04 c0       	rjmp	.+8      	; 0x810 <strrev+0x18>
 808:	7c 91       	ld	r23, X
 80a:	6d 93       	st	X+, r22
 80c:	70 83       	st	Z, r23
 80e:	62 91       	ld	r22, -Z
 810:	ae 17       	cp	r26, r30
 812:	bf 07       	cpc	r27, r31
 814:	c8 f3       	brcs	.-14     	; 0x808 <strrev+0x10>
 816:	08 95       	ret

00000818 <_exit>:
 818:	f8 94       	cli

0000081a <__stop_program>:
 81a:	ff cf       	rjmp	.-2      	; 0x81a <__stop_program>
