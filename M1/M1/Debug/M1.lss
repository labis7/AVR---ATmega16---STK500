
M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00001bce  00001c62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000121  008000ce  008000ce  00001cd0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016aa  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000815  00000000  00000000  000034b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001963  00000000  00000000  00003ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00005630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fe8f  00000000  00000000  00005a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c93  00000000  00000000  0001588f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00017522  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  00017602  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
       6:	00 00       	nop
       8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
       a:	00 00       	nop
       c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
       e:	00 00       	nop
      10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
      12:	00 00       	nop
      14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
      16:	00 00       	nop
      18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_8>
      24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
      26:	00 00       	nop
      28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__vector_11>
      30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
      32:	00 00       	nop
      34:	9b c7       	rjmp	.+3894   	; 0xf6c <__vector_13>
      36:	00 00       	nop
      38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
      3e:	00 00       	nop
      40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
      42:	00 00       	nop
      44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
      46:	00 00       	nop
      48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
      4e:	00 00       	nop
      50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3e       	cpi	r26, 0xEF	; 239
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <main>
      8a:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <_exit>

0000008e <__bad_interrupt>:
      8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
      90:	08 95       	ret

00000092 <CheckMove>:
			mymove[3] = '\x20';
			Transmit(mymove,0,4);
		}
	}
	Transmit("\n\r",0,strlen("\n\r"));
}
      92:	2f 92       	push	r2
      94:	3f 92       	push	r3
      96:	4f 92       	push	r4
      98:	5f 92       	push	r5
      9a:	6f 92       	push	r6
      9c:	7f 92       	push	r7
      9e:	8f 92       	push	r8
      a0:	9f 92       	push	r9
      a2:	af 92       	push	r10
      a4:	bf 92       	push	r11
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	0f 93       	push	r16
      b0:	1f 93       	push	r17
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	60 97       	sbiw	r28, 0x10	; 16
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61
      c6:	98 2e       	mov	r9, r24
      c8:	86 2e       	mov	r8, r22
      ca:	2d 83       	std	Y+5, r18	; 0x05
      cc:	26 2e       	mov	r2, r22
      ce:	31 2c       	mov	r3, r1
      d0:	68 2e       	mov	r6, r24
      d2:	71 2c       	mov	r7, r1
      d4:	61 01       	movw	r12, r2
      d6:	28 e0       	ldi	r18, 0x08	; 8
      d8:	82 9f       	mul	r24, r18
      da:	c0 0c       	add	r12, r0
      dc:	d1 1c       	adc	r13, r1
      de:	11 24       	eor	r1, r1
      e0:	db 86       	std	Y+11, r13	; 0x0b
      e2:	ca 86       	std	Y+10, r12	; 0x0a
      e4:	dd 86       	std	Y+13, r13	; 0x0d
      e6:	cc 86       	std	Y+12, r12	; 0x0c
      e8:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
      ec:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
      f0:	ec 0d       	add	r30, r12
      f2:	fd 1d       	adc	r31, r13
      f4:	80 81       	ld	r24, Z
      f6:	82 30       	cpi	r24, 0x02	; 2
      f8:	08 f4       	brcc	.+2      	; 0xfc <CheckMove+0x6a>
      fa:	52 c2       	rjmp	.+1188   	; 0x5a0 <__stack+0x141>
      fc:	c3 01       	movw	r24, r6
      fe:	01 97       	sbiw	r24, 0x01	; 1
     100:	9a 83       	std	Y+2, r25	; 0x02
     102:	89 83       	std	Y+1, r24	; 0x01
     104:	23 01       	movw	r4, r6
     106:	8f ef       	ldi	r24, 0xFF	; 255
     108:	48 1a       	sub	r4, r24
     10a:	58 0a       	sbc	r5, r24
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	9a 81       	ldd	r25, Y+2	; 0x02
     110:	48 16       	cp	r4, r24
     112:	59 06       	cpc	r5, r25
     114:	0c f4       	brge	.+2      	; 0x118 <CheckMove+0x86>
     116:	e1 c1       	rjmp	.+962    	; 0x4da <__stack+0x7b>
     118:	c1 2c       	mov	r12, r1
     11a:	18 8a       	std	Y+16, r1	; 0x10
     11c:	f1 01       	movw	r30, r2
     11e:	31 97       	sbiw	r30, 0x01	; 1
     120:	ff 83       	std	Y+7, r31	; 0x07
     122:	ee 83       	std	Y+6, r30	; 0x06
     124:	51 01       	movw	r10, r2
     126:	ff ef       	ldi	r31, 0xFF	; 255
     128:	af 1a       	sub	r10, r31
     12a:	bf 0a       	sbc	r11, r31
     12c:	98 86       	std	Y+8, r9	; 0x08
     12e:	69 87       	std	Y+9, r22	; 0x09
     130:	8c 2c       	mov	r8, r12
     132:	94 2e       	mov	r9, r20
     134:	89 81       	ldd	r24, Y+1	; 0x01
     136:	9a 81       	ldd	r25, Y+2	; 0x02
     138:	99 23       	and	r25, r25
     13a:	0c f4       	brge	.+2      	; 0x13e <CheckMove+0xac>
     13c:	bf c1       	rjmp	.+894    	; 0x4bc <__stack+0x5d>
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	9a 81       	ldd	r25, Y+2	; 0x02
     142:	08 97       	sbiw	r24, 0x08	; 8
     144:	0c f0       	brlt	.+2      	; 0x148 <CheckMove+0xb6>
     146:	ba c1       	rjmp	.+884    	; 0x4bc <__stack+0x5d>
     148:	ce 80       	ldd	r12, Y+6	; 0x06
     14a:	df 80       	ldd	r13, Y+7	; 0x07
     14c:	dc 82       	std	Y+4, r13	; 0x04
     14e:	cb 82       	std	Y+3, r12	; 0x03
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	9c 81       	ldd	r25, Y+4	; 0x04
     154:	a8 16       	cp	r10, r24
     156:	b9 06       	cpc	r11, r25
     158:	0c f4       	brge	.+2      	; 0x15c <CheckMove+0xca>
     15a:	b0 c1       	rjmp	.+864    	; 0x4bc <__stack+0x5d>
     15c:	8b 81       	ldd	r24, Y+3	; 0x03
     15e:	9c 81       	ldd	r25, Y+4	; 0x04
     160:	99 23       	and	r25, r25
     162:	0c f4       	brge	.+2      	; 0x166 <CheckMove+0xd4>
     164:	a0 c1       	rjmp	.+832    	; 0x4a6 <__stack+0x47>
     166:	8b 81       	ldd	r24, Y+3	; 0x03
     168:	9c 81       	ldd	r25, Y+4	; 0x04
     16a:	08 97       	sbiw	r24, 0x08	; 8
     16c:	0c f0       	brlt	.+2      	; 0x170 <CheckMove+0xde>
     16e:	9b c1       	rjmp	.+822    	; 0x4a6 <__stack+0x47>
     170:	40 91 e7 01 	lds	r20, 0x01E7	; 0x8001e7 <M>
     174:	50 91 e8 01 	lds	r21, 0x01E8	; 0x8001e8 <M+0x1>
     178:	e9 81       	ldd	r30, Y+1	; 0x01
     17a:	fa 81       	ldd	r31, Y+2	; 0x02
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	ee 0f       	add	r30, r30
     182:	ff 1f       	adc	r31, r31
     184:	ee 0f       	add	r30, r30
     186:	ff 1f       	adc	r31, r31
     188:	ee 0f       	add	r30, r30
     18a:	ff 1f       	adc	r31, r31
     18c:	e8 0f       	add	r30, r24
     18e:	f9 1f       	adc	r31, r25
     190:	e4 0f       	add	r30, r20
     192:	f5 1f       	adc	r31, r21
     194:	80 81       	ld	r24, Z
     196:	89 15       	cp	r24, r9
     198:	09 f4       	brne	.+2      	; 0x19c <CheckMove+0x10a>
     19a:	85 c1       	rjmp	.+778    	; 0x4a6 <__stack+0x47>
     19c:	e9 81       	ldd	r30, Y+1	; 0x01
     19e:	fa 81       	ldd	r31, Y+2	; 0x02
     1a0:	8b 81       	ldd	r24, Y+3	; 0x03
     1a2:	9c 81       	ldd	r25, Y+4	; 0x04
     1a4:	ee 0f       	add	r30, r30
     1a6:	ff 1f       	adc	r31, r31
     1a8:	ee 0f       	add	r30, r30
     1aa:	ff 1f       	adc	r31, r31
     1ac:	ee 0f       	add	r30, r30
     1ae:	ff 1f       	adc	r31, r31
     1b0:	e8 0f       	add	r30, r24
     1b2:	f9 1f       	adc	r31, r25
     1b4:	e4 0f       	add	r30, r20
     1b6:	f5 1f       	adc	r31, r21
     1b8:	80 81       	ld	r24, Z
     1ba:	82 30       	cpi	r24, 0x02	; 2
     1bc:	08 f0       	brcs	.+2      	; 0x1c0 <CheckMove+0x12e>
     1be:	73 c1       	rjmp	.+742    	; 0x4a6 <__stack+0x47>
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	9a 81       	ldd	r25, Y+2	; 0x02
     1c4:	68 16       	cp	r6, r24
     1c6:	79 06       	cpc	r7, r25
     1c8:	3c f0       	brlt	.+14     	; 0x1d8 <CheckMove+0x146>
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	68 16       	cp	r6, r24
     1d0:	79 06       	cpc	r7, r25
     1d2:	39 f0       	breq	.+14     	; 0x1e2 <CheckMove+0x150>
     1d4:	f1 2c       	mov	r15, r1
     1d6:	09 c0       	rjmp	.+18     	; 0x1ea <CheckMove+0x158>
     1d8:	0f 2e       	mov	r0, r31
     1da:	f7 e0       	ldi	r31, 0x07	; 7
     1dc:	ff 2e       	mov	r15, r31
     1de:	f0 2d       	mov	r31, r0
     1e0:	04 c0       	rjmp	.+8      	; 0x1ea <CheckMove+0x158>
     1e2:	0f 2e       	mov	r0, r31
     1e4:	f9 e0       	ldi	r31, 0x09	; 9
     1e6:	ff 2e       	mov	r15, r31
     1e8:	f0 2d       	mov	r31, r0
     1ea:	8b 81       	ldd	r24, Y+3	; 0x03
     1ec:	9c 81       	ldd	r25, Y+4	; 0x04
     1ee:	28 16       	cp	r2, r24
     1f0:	39 06       	cpc	r3, r25
     1f2:	3c f0       	brlt	.+14     	; 0x202 <CheckMove+0x170>
     1f4:	8b 81       	ldd	r24, Y+3	; 0x03
     1f6:	9c 81       	ldd	r25, Y+4	; 0x04
     1f8:	28 16       	cp	r2, r24
     1fa:	39 06       	cpc	r3, r25
     1fc:	39 f0       	breq	.+14     	; 0x20c <CheckMove+0x17a>
     1fe:	e1 2c       	mov	r14, r1
     200:	09 c0       	rjmp	.+18     	; 0x214 <CheckMove+0x182>
     202:	0f 2e       	mov	r0, r31
     204:	f7 e0       	ldi	r31, 0x07	; 7
     206:	ef 2e       	mov	r14, r31
     208:	f0 2d       	mov	r31, r0
     20a:	04 c0       	rjmp	.+8      	; 0x214 <CheckMove+0x182>
     20c:	0f 2e       	mov	r0, r31
     20e:	f9 e0       	ldi	r31, 0x09	; 9
     210:	ef 2e       	mov	r14, r31
     212:	f0 2d       	mov	r31, r0
     214:	a9 81       	ldd	r26, Y+1	; 0x01
     216:	ba 81       	ldd	r27, Y+2	; 0x02
     218:	d8 84       	ldd	r13, Y+8	; 0x08
     21a:	ad 19       	sub	r26, r13
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	9c 81       	ldd	r25, Y+4	; 0x04
     220:	b8 2f       	mov	r27, r24
     222:	29 85       	ldd	r18, Y+9	; 0x09
     224:	b2 1b       	sub	r27, r18
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	9a 81       	ldd	r25, Y+2	; 0x02
     22a:	68 2f       	mov	r22, r24
     22c:	2b 81       	ldd	r18, Y+3	; 0x03
     22e:	3c 81       	ldd	r19, Y+4	; 0x04
     230:	72 2f       	mov	r23, r18
     232:	ed 81       	ldd	r30, Y+5	; 0x05
     234:	ee 23       	and	r30, r30
     236:	41 f1       	breq	.+80     	; 0x288 <CheckMove+0x1f6>
     238:	99 27       	eor	r25, r25
     23a:	0a 2f       	mov	r16, r26
     23c:	10 e0       	ldi	r17, 0x00	; 0
     23e:	0f 0d       	add	r16, r15
     240:	11 1d       	adc	r17, r1
     242:	80 17       	cp	r24, r16
     244:	91 07       	cpc	r25, r17
     246:	09 f4       	brne	.+2      	; 0x24a <CheckMove+0x1b8>
     248:	2e c1       	rjmp	.+604    	; 0x4a6 <__stack+0x47>
     24a:	33 27       	eor	r19, r19
     24c:	eb 2f       	mov	r30, r27
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	6f 01       	movw	r12, r30
     252:	ce 0c       	add	r12, r14
     254:	d1 1c       	adc	r13, r1
     256:	df 86       	std	Y+15, r13	; 0x0f
     258:	ce 86       	std	Y+14, r12	; 0x0e
     25a:	2c 15       	cp	r18, r12
     25c:	3d 05       	cpc	r19, r13
     25e:	09 f4       	brne	.+2      	; 0x262 <CheckMove+0x1d0>
     260:	22 c1       	rjmp	.+580    	; 0x4a6 <__stack+0x47>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	82 0f       	add	r24, r18
     270:	93 1f       	adc	r25, r19
     272:	84 0f       	add	r24, r20
     274:	95 1f       	adc	r25, r21
     276:	fc 01       	movw	r30, r24
     278:	20 81       	ld	r18, Z
     27a:	22 30       	cpi	r18, 0x02	; 2
     27c:	08 f0       	brcs	.+2      	; 0x280 <CheckMove+0x1ee>
     27e:	13 c1       	rjmp	.+550    	; 0x4a6 <__stack+0x47>
     280:	80 81       	ld	r24, Z
     282:	98 12       	cpse	r9, r24
     284:	a4 c0       	rjmp	.+328    	; 0x3ce <CheckMove+0x33c>
     286:	93 c0       	rjmp	.+294    	; 0x3ae <CheckMove+0x31c>
     288:	99 27       	eor	r25, r25
     28a:	0a 2f       	mov	r16, r26
     28c:	10 e0       	ldi	r17, 0x00	; 0
     28e:	0f 0d       	add	r16, r15
     290:	11 1d       	adc	r17, r1
     292:	80 17       	cp	r24, r16
     294:	91 07       	cpc	r25, r17
     296:	09 f4       	brne	.+2      	; 0x29a <CheckMove+0x208>
     298:	06 c1       	rjmp	.+524    	; 0x4a6 <__stack+0x47>
     29a:	33 27       	eor	r19, r19
     29c:	eb 2f       	mov	r30, r27
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	6f 01       	movw	r12, r30
     2a2:	ce 0c       	add	r12, r14
     2a4:	d1 1c       	adc	r13, r1
     2a6:	df 86       	std	Y+15, r13	; 0x0f
     2a8:	ce 86       	std	Y+14, r12	; 0x0e
     2aa:	2c 15       	cp	r18, r12
     2ac:	3d 05       	cpc	r19, r13
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <CheckMove+0x220>
     2b0:	fa c0       	rjmp	.+500    	; 0x4a6 <__stack+0x47>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	88 0f       	add	r24, r24
     2b8:	99 1f       	adc	r25, r25
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	82 0f       	add	r24, r18
     2c0:	93 1f       	adc	r25, r19
     2c2:	84 0f       	add	r24, r20
     2c4:	95 1f       	adc	r25, r21
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 81       	ld	r18, Z
     2ca:	22 30       	cpi	r18, 0x02	; 2
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <CheckMove+0x23e>
     2ce:	eb c0       	rjmp	.+470    	; 0x4a6 <__stack+0x47>
     2d0:	80 81       	ld	r24, Z
     2d2:	98 12       	cpse	r9, r24
     2d4:	14 c0       	rjmp	.+40     	; 0x2fe <CheckMove+0x26c>
     2d6:	68 c1       	rjmp	.+720    	; 0x5a8 <__stack+0x149>
     2d8:	88 0f       	add	r24, r24
     2da:	99 1f       	adc	r25, r25
     2dc:	88 0f       	add	r24, r24
     2de:	99 1f       	adc	r25, r25
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
     2e4:	a8 0f       	add	r26, r24
     2e6:	b9 1f       	adc	r27, r25
     2e8:	a4 0f       	add	r26, r20
     2ea:	b5 1f       	adc	r27, r21
     2ec:	8c 91       	ld	r24, X
     2ee:	82 30       	cpi	r24, 0x02	; 2
     2f0:	08 f0       	brcs	.+2      	; 0x2f4 <CheckMove+0x262>
     2f2:	d9 c0       	rjmp	.+434    	; 0x4a6 <__stack+0x47>
     2f4:	8c 91       	ld	r24, X
     2f6:	98 16       	cp	r9, r24
     2f8:	09 f4       	brne	.+2      	; 0x2fc <CheckMove+0x26a>
     2fa:	54 c1       	rjmp	.+680    	; 0x5a4 <__stack+0x145>
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <CheckMove+0x274>
     2fe:	2a 2f       	mov	r18, r26
     300:	3b 2f       	mov	r19, r27
     302:	ee 85       	ldd	r30, Y+14	; 0x0e
     304:	ff 85       	ldd	r31, Y+15	; 0x0f
     306:	73 0f       	add	r23, r19
     308:	62 0f       	add	r22, r18
     30a:	86 2f       	mov	r24, r22
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	80 17       	cp	r24, r16
     310:	91 07       	cpc	r25, r17
     312:	09 f4       	brne	.+2      	; 0x316 <CheckMove+0x284>
     314:	c8 c0       	rjmp	.+400    	; 0x4a6 <__stack+0x47>
     316:	a7 2f       	mov	r26, r23
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	ae 17       	cp	r26, r30
     31c:	bf 07       	cpc	r27, r31
     31e:	e1 f6       	brne	.-72     	; 0x2d8 <CheckMove+0x246>
     320:	c2 c0       	rjmp	.+388    	; 0x4a6 <__stack+0x47>
     322:	e9 16       	cp	r14, r25
     324:	09 f4       	brne	.+2      	; 0x328 <CheckMove+0x296>
     326:	9c c0       	rjmp	.+312    	; 0x460 <__stack+0x1>
     328:	f9 01       	movw	r30, r18
     32a:	ff 27       	eor	r31, r31
     32c:	ee 0f       	add	r30, r30
     32e:	ff 1f       	adc	r31, r31
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	ee 0f       	add	r30, r30
     336:	ff 1f       	adc	r31, r31
     338:	e6 0f       	add	r30, r22
     33a:	f1 1d       	adc	r31, r1
     33c:	e4 0f       	add	r30, r20
     33e:	f5 1f       	adc	r31, r21
     340:	20 81       	ld	r18, Z
     342:	22 30       	cpi	r18, 0x02	; 2
     344:	08 f0       	brcs	.+2      	; 0x348 <CheckMove+0x2b6>
     346:	8f c0       	rjmp	.+286    	; 0x466 <__stack+0x7>
     348:	20 81       	ld	r18, Z
     34a:	92 12       	cpse	r9, r18
     34c:	12 c0       	rjmp	.+36     	; 0x372 <CheckMove+0x2e0>
     34e:	8e c0       	rjmp	.+284    	; 0x46c <__stack+0xd>
     350:	e9 2f       	mov	r30, r25
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	28 e0       	ldi	r18, 0x08	; 8
     356:	82 9f       	mul	r24, r18
     358:	e0 0d       	add	r30, r0
     35a:	f1 1d       	adc	r31, r1
     35c:	11 24       	eor	r1, r1
     35e:	e4 0f       	add	r30, r20
     360:	f5 1f       	adc	r31, r21
     362:	20 81       	ld	r18, Z
     364:	22 30       	cpi	r18, 0x02	; 2
     366:	08 f0       	brcs	.+2      	; 0x36a <CheckMove+0x2d8>
     368:	84 c0       	rjmp	.+264    	; 0x472 <__stack+0x13>
     36a:	20 81       	ld	r18, Z
     36c:	92 16       	cp	r9, r18
     36e:	09 f4       	brne	.+2      	; 0x372 <CheckMove+0x2e0>
     370:	83 c0       	rjmp	.+262    	; 0x478 <__stack+0x19>
     372:	83 94       	inc	r8
     374:	9b 0f       	add	r25, r27
     376:	8a 0f       	add	r24, r26
     378:	f8 16       	cp	r15, r24
     37a:	09 f4       	brne	.+2      	; 0x37e <CheckMove+0x2ec>
     37c:	80 c0       	rjmp	.+256    	; 0x47e <__stack+0x1f>
     37e:	e9 12       	cpse	r14, r25
     380:	e7 cf       	rjmp	.-50     	; 0x350 <CheckMove+0x2be>
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	88 8b       	std	Y+16, r24	; 0x10
     386:	8f c0       	rjmp	.+286    	; 0x4a6 <__stack+0x47>
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	a8 0f       	add	r26, r24
     396:	b9 1f       	adc	r27, r25
     398:	a4 0f       	add	r26, r20
     39a:	b5 1f       	adc	r27, r21
     39c:	8c 91       	ld	r24, X
     39e:	82 30       	cpi	r24, 0x02	; 2
     3a0:	08 f0       	brcs	.+2      	; 0x3a4 <CheckMove+0x312>
     3a2:	81 c0       	rjmp	.+258    	; 0x4a6 <__stack+0x47>
     3a4:	8c 91       	ld	r24, X
     3a6:	98 12       	cpse	r9, r24
     3a8:	16 c0       	rjmp	.+44     	; 0x3d6 <CheckMove+0x344>
     3aa:	a2 2f       	mov	r26, r18
     3ac:	b3 2f       	mov	r27, r19
     3ae:	ec 85       	ldd	r30, Y+12	; 0x0c
     3b0:	fd 85       	ldd	r31, Y+13	; 0x0d
     3b2:	e4 0f       	add	r30, r20
     3b4:	f5 1f       	adc	r31, r21
     3b6:	90 82       	st	Z, r9
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	9a 81       	ldd	r25, Y+2	; 0x02
     3bc:	48 2f       	mov	r20, r24
     3be:	6b 81       	ldd	r22, Y+3	; 0x03
     3c0:	7c 81       	ldd	r23, Y+4	; 0x04
     3c2:	56 2f       	mov	r21, r22
     3c4:	f8 12       	cpse	r15, r24
     3c6:	15 c0       	rjmp	.+42     	; 0x3f2 <CheckMove+0x360>
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	98 8b       	std	Y+16, r25	; 0x10
     3cc:	6c c0       	rjmp	.+216    	; 0x4a6 <__stack+0x47>
     3ce:	2a 2f       	mov	r18, r26
     3d0:	3b 2f       	mov	r19, r27
     3d2:	ee 85       	ldd	r30, Y+14	; 0x0e
     3d4:	ff 85       	ldd	r31, Y+15	; 0x0f
     3d6:	73 0f       	add	r23, r19
     3d8:	62 0f       	add	r22, r18
     3da:	86 2f       	mov	r24, r22
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	80 17       	cp	r24, r16
     3e0:	91 07       	cpc	r25, r17
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <CheckMove+0x354>
     3e4:	60 c0       	rjmp	.+192    	; 0x4a6 <__stack+0x47>
     3e6:	a7 2f       	mov	r26, r23
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	ae 17       	cp	r26, r30
     3ec:	bf 07       	cpc	r27, r31
     3ee:	61 f6       	brne	.-104    	; 0x388 <CheckMove+0x2f6>
     3f0:	5a c0       	rjmp	.+180    	; 0x4a6 <__stack+0x47>
     3f2:	e6 16       	cp	r14, r22
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <CheckMove+0x366>
     3f6:	46 c0       	rjmp	.+140    	; 0x484 <__stack+0x25>
     3f8:	99 27       	eor	r25, r25
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	86 0f       	add	r24, r22
     408:	91 1d       	adc	r25, r1
     40a:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <M>
     40e:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <M+0x1>
     412:	f9 01       	movw	r30, r18
     414:	e8 0f       	add	r30, r24
     416:	f9 1f       	adc	r31, r25
     418:	80 81       	ld	r24, Z
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	b0 f5       	brcc	.+108    	; 0x48a <__stack+0x2b>
     41e:	80 81       	ld	r24, Z
     420:	98 12       	cpse	r9, r24
     422:	14 c0       	rjmp	.+40     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     424:	35 c0       	rjmp	.+106    	; 0x490 <__stack+0x31>
     426:	e5 2f       	mov	r30, r21
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	28 e0       	ldi	r18, 0x08	; 8
     42c:	42 9f       	mul	r20, r18
     42e:	e0 0d       	add	r30, r0
     430:	f1 1d       	adc	r31, r1
     432:	11 24       	eor	r1, r1
     434:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <M>
     438:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <M+0x1>
     43c:	e8 0f       	add	r30, r24
     43e:	f9 1f       	adc	r31, r25
     440:	80 81       	ld	r24, Z
     442:	82 30       	cpi	r24, 0x02	; 2
     444:	40 f5       	brcc	.+80     	; 0x496 <__stack+0x37>
     446:	80 81       	ld	r24, Z
     448:	98 16       	cp	r9, r24
     44a:	41 f1       	breq	.+80     	; 0x49c <__stack+0x3d>
     44c:	90 82       	st	Z, r9
     44e:	5b 0f       	add	r21, r27
     450:	4a 0f       	add	r20, r26
     452:	f4 16       	cp	r15, r20
     454:	31 f1       	breq	.+76     	; 0x4a2 <__stack+0x43>
     456:	e5 12       	cpse	r14, r21
     458:	e6 cf       	rjmp	.-52     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	88 8b       	std	Y+16, r24	; 0x10
     45e:	23 c0       	rjmp	.+70     	; 0x4a6 <__stack+0x47>
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	98 8b       	std	Y+16, r25	; 0x10
     464:	20 c0       	rjmp	.+64     	; 0x4a6 <__stack+0x47>
     466:	e1 e0       	ldi	r30, 0x01	; 1
     468:	e8 8b       	std	Y+16, r30	; 0x10
     46a:	1d c0       	rjmp	.+58     	; 0x4a6 <__stack+0x47>
     46c:	f1 e0       	ldi	r31, 0x01	; 1
     46e:	f8 8b       	std	Y+16, r31	; 0x10
     470:	1a c0       	rjmp	.+52     	; 0x4a6 <__stack+0x47>
     472:	21 e0       	ldi	r18, 0x01	; 1
     474:	28 8b       	std	Y+16, r18	; 0x10
     476:	17 c0       	rjmp	.+46     	; 0x4a6 <__stack+0x47>
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	88 8b       	std	Y+16, r24	; 0x10
     47c:	14 c0       	rjmp	.+40     	; 0x4a6 <__stack+0x47>
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	98 8b       	std	Y+16, r25	; 0x10
     482:	11 c0       	rjmp	.+34     	; 0x4a6 <__stack+0x47>
     484:	e1 e0       	ldi	r30, 0x01	; 1
     486:	e8 8b       	std	Y+16, r30	; 0x10
     488:	0e c0       	rjmp	.+28     	; 0x4a6 <__stack+0x47>
     48a:	f1 e0       	ldi	r31, 0x01	; 1
     48c:	f8 8b       	std	Y+16, r31	; 0x10
     48e:	0b c0       	rjmp	.+22     	; 0x4a6 <__stack+0x47>
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	28 8b       	std	Y+16, r18	; 0x10
     494:	08 c0       	rjmp	.+16     	; 0x4a6 <__stack+0x47>
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	88 8b       	std	Y+16, r24	; 0x10
     49a:	05 c0       	rjmp	.+10     	; 0x4a6 <__stack+0x47>
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	98 8b       	std	Y+16, r25	; 0x10
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__stack+0x47>
     4a2:	e1 e0       	ldi	r30, 0x01	; 1
     4a4:	e8 8b       	std	Y+16, r30	; 0x10
     4a6:	8b 81       	ldd	r24, Y+3	; 0x03
     4a8:	9c 81       	ldd	r25, Y+4	; 0x04
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	9c 83       	std	Y+4, r25	; 0x04
     4ae:	8b 83       	std	Y+3, r24	; 0x03
     4b0:	8b 81       	ldd	r24, Y+3	; 0x03
     4b2:	9c 81       	ldd	r25, Y+4	; 0x04
     4b4:	a8 16       	cp	r10, r24
     4b6:	b9 06       	cpc	r11, r25
     4b8:	0c f0       	brlt	.+2      	; 0x4bc <__stack+0x5d>
     4ba:	50 ce       	rjmp	.-864    	; 0x15c <CheckMove+0xca>
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	9a 81       	ldd	r25, Y+2	; 0x02
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	9a 83       	std	Y+2, r25	; 0x02
     4c4:	89 83       	std	Y+1, r24	; 0x01
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ca:	48 16       	cp	r4, r24
     4cc:	59 06       	cpc	r5, r25
     4ce:	0c f0       	brlt	.+2      	; 0x4d2 <__stack+0x73>
     4d0:	31 ce       	rjmp	.-926    	; 0x134 <CheckMove+0xa2>
     4d2:	c8 2c       	mov	r12, r8
     4d4:	98 84       	ldd	r9, Y+8	; 0x08
     4d6:	89 84       	ldd	r8, Y+9	; 0x09
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <__stack+0x7f>
     4da:	c1 2c       	mov	r12, r1
     4dc:	18 8a       	std	Y+16, r1	; 0x10
     4de:	fd 81       	ldd	r31, Y+5	; 0x05
     4e0:	f1 11       	cpse	r31, r1
     4e2:	58 c0       	rjmp	.+176    	; 0x594 <__stack+0x135>
     4e4:	30 91 dc 00 	lds	r19, 0x00DC	; 0x8000dc <v1_max>
     4e8:	ea 85       	ldd	r30, Y+10	; 0x0a
     4ea:	fb 85       	ldd	r31, Y+11	; 0x0b
     4ec:	e9 59       	subi	r30, 0x99	; 153
     4ee:	ff 4f       	sbci	r31, 0xFF	; 255
     4f0:	20 81       	ld	r18, Z
     4f2:	8c 2d       	mov	r24, r12
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 96       	adiw	r24, 0x0e	; 14
     4f8:	82 0f       	add	r24, r18
     4fa:	91 1d       	adc	r25, r1
     4fc:	43 2f       	mov	r20, r19
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	48 17       	cp	r20, r24
     502:	59 07       	cpc	r21, r25
     504:	fc f4       	brge	.+62     	; 0x544 <__stack+0xe5>
     506:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <v2_max>
     50a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <v3_max>
     50e:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <vi2_max>
     512:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <vi3_max>
     516:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <vj2_max>
     51a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <vj3_max>
     51e:	30 93 e1 00 	sts	0x00E1, r19	; 0x8000e1 <v2_max>
     522:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <vi1_max>
     526:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <vi2_max>
     52a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <vj1_max>
     52e:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <vj2_max>
     532:	22 5f       	subi	r18, 0xF2	; 242
     534:	c2 0e       	add	r12, r18
     536:	c0 92 dc 00 	sts	0x00DC, r12	; 0x8000dc <v1_max>
     53a:	90 92 d6 00 	sts	0x00D6, r9	; 0x8000d6 <vi1_max>
     53e:	80 92 de 00 	sts	0x00DE, r8	; 0x8000de <vj1_max>
     542:	28 c0       	rjmp	.+80     	; 0x594 <__stack+0x135>
     544:	30 91 e1 00 	lds	r19, 0x00E1	; 0x8000e1 <v2_max>
     548:	43 2f       	mov	r20, r19
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	48 17       	cp	r20, r24
     54e:	59 07       	cpc	r21, r25
     550:	9c f4       	brge	.+38     	; 0x578 <__stack+0x119>
     552:	30 93 d1 00 	sts	0x00D1, r19	; 0x8000d1 <v3_max>
     556:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <vi2_max>
     55a:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <vi3_max>
     55e:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <vj2_max>
     562:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <vj3_max>
     566:	22 5f       	subi	r18, 0xF2	; 242
     568:	c2 0e       	add	r12, r18
     56a:	c0 92 e1 00 	sts	0x00E1, r12	; 0x8000e1 <v2_max>
     56e:	90 92 e5 00 	sts	0x00E5, r9	; 0x8000e5 <vi2_max>
     572:	80 92 ea 01 	sts	0x01EA, r8	; 0x8001ea <vj2_max>
     576:	0e c0       	rjmp	.+28     	; 0x594 <__stack+0x135>
     578:	40 91 d1 00 	lds	r20, 0x00D1	; 0x8000d1 <v3_max>
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	48 17       	cp	r20, r24
     580:	59 07       	cpc	r21, r25
     582:	44 f4       	brge	.+16     	; 0x594 <__stack+0x135>
     584:	22 5f       	subi	r18, 0xF2	; 242
     586:	c2 0e       	add	r12, r18
     588:	c0 92 d1 00 	sts	0x00D1, r12	; 0x8000d1 <v3_max>
     58c:	90 92 d3 00 	sts	0x00D3, r9	; 0x8000d3 <vi3_max>
     590:	80 92 d2 00 	sts	0x00D2, r8	; 0x8000d2 <vj3_max>
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	28 89       	ldd	r18, Y+16	; 0x10
     598:	21 30       	cpi	r18, 0x01	; 1
     59a:	89 f0       	breq	.+34     	; 0x5be <__stack+0x15f>
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0f c0       	rjmp	.+30     	; 0x5be <__stack+0x15f>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	0d c0       	rjmp	.+26     	; 0x5be <__stack+0x15f>
     5a4:	a2 2f       	mov	r26, r18
     5a6:	b3 2f       	mov	r27, r19
     5a8:	29 81       	ldd	r18, Y+1	; 0x01
     5aa:	3a 81       	ldd	r19, Y+2	; 0x02
     5ac:	82 2f       	mov	r24, r18
     5ae:	6b 81       	ldd	r22, Y+3	; 0x03
     5b0:	7c 81       	ldd	r23, Y+4	; 0x04
     5b2:	96 2f       	mov	r25, r22
     5b4:	f2 12       	cpse	r15, r18
     5b6:	b5 ce       	rjmp	.-662    	; 0x322 <CheckMove+0x290>
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	88 8b       	std	Y+16, r24	; 0x10
     5bc:	74 cf       	rjmp	.-280    	; 0x4a6 <__stack+0x47>
     5be:	60 96       	adiw	r28, 0x10	; 16
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	bf 90       	pop	r11
     5dc:	af 90       	pop	r10
     5de:	9f 90       	pop	r9
     5e0:	8f 90       	pop	r8
     5e2:	7f 90       	pop	r7
     5e4:	6f 90       	pop	r6
     5e6:	5f 90       	pop	r5
     5e8:	4f 90       	pop	r4
     5ea:	3f 90       	pop	r3
     5ec:	2f 90       	pop	r2
     5ee:	08 95       	ret

000005f0 <checkmove_sim>:
     5f0:	2f 92       	push	r2
     5f2:	3f 92       	push	r3
     5f4:	4f 92       	push	r4
     5f6:	5f 92       	push	r5
     5f8:	6f 92       	push	r6
     5fa:	7f 92       	push	r7
     5fc:	8f 92       	push	r8
     5fe:	9f 92       	push	r9
     600:	af 92       	push	r10
     602:	bf 92       	push	r11
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
     618:	2e 97       	sbiw	r28, 0x0e	; 14
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	88 2e       	mov	r8, r24
     626:	96 2e       	mov	r9, r22
     628:	2d 83       	std	Y+5, r18	; 0x05
     62a:	28 2e       	mov	r2, r24
     62c:	31 2c       	mov	r3, r1
     62e:	c1 01       	movw	r24, r2
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	9a 83       	std	Y+2, r25	; 0x02
     634:	89 83       	std	Y+1, r24	; 0x01
     636:	31 01       	movw	r6, r2
     638:	2f ef       	ldi	r18, 0xFF	; 255
     63a:	62 1a       	sub	r6, r18
     63c:	72 0a       	sbc	r7, r18
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	68 16       	cp	r6, r24
     644:	79 06       	cpc	r7, r25
     646:	0c f4       	brge	.+2      	; 0x64a <checkmove_sim+0x5a>
     648:	f0 c1       	rjmp	.+992    	; 0xa2a <checkmove_sim+0x43a>
     64a:	46 2e       	mov	r4, r22
     64c:	51 2c       	mov	r5, r1
     64e:	c1 01       	movw	r24, r2
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	fc 01       	movw	r30, r24
     65e:	e4 0d       	add	r30, r4
     660:	f5 1d       	adc	r31, r5
     662:	fb 87       	std	Y+11, r31	; 0x0b
     664:	ea 87       	std	Y+10, r30	; 0x0a
     666:	c1 2c       	mov	r12, r1
     668:	1e 86       	std	Y+14, r1	; 0x0e
     66a:	92 01       	movw	r18, r4
     66c:	21 50       	subi	r18, 0x01	; 1
     66e:	31 09       	sbc	r19, r1
     670:	3f 83       	std	Y+7, r19	; 0x07
     672:	2e 83       	std	Y+6, r18	; 0x06
     674:	52 01       	movw	r10, r4
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	a3 1a       	sub	r10, r19
     67a:	b3 0a       	sbc	r11, r19
     67c:	88 86       	std	Y+8, r8	; 0x08
     67e:	8c 2c       	mov	r8, r12
     680:	69 87       	std	Y+9, r22	; 0x09
     682:	94 2e       	mov	r9, r20
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	99 23       	and	r25, r25
     68a:	0c f4       	brge	.+2      	; 0x68e <checkmove_sim+0x9e>
     68c:	bf c1       	rjmp	.+894    	; 0xa0c <checkmove_sim+0x41c>
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	9a 81       	ldd	r25, Y+2	; 0x02
     692:	08 97       	sbiw	r24, 0x08	; 8
     694:	0c f0       	brlt	.+2      	; 0x698 <checkmove_sim+0xa8>
     696:	ba c1       	rjmp	.+884    	; 0xa0c <checkmove_sim+0x41c>
     698:	4e 81       	ldd	r20, Y+6	; 0x06
     69a:	5f 81       	ldd	r21, Y+7	; 0x07
     69c:	5c 83       	std	Y+4, r21	; 0x04
     69e:	4b 83       	std	Y+3, r20	; 0x03
     6a0:	8b 81       	ldd	r24, Y+3	; 0x03
     6a2:	9c 81       	ldd	r25, Y+4	; 0x04
     6a4:	a8 16       	cp	r10, r24
     6a6:	b9 06       	cpc	r11, r25
     6a8:	0c f4       	brge	.+2      	; 0x6ac <checkmove_sim+0xbc>
     6aa:	b0 c1       	rjmp	.+864    	; 0xa0c <checkmove_sim+0x41c>
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	9c 81       	ldd	r25, Y+4	; 0x04
     6b0:	99 23       	and	r25, r25
     6b2:	0c f4       	brge	.+2      	; 0x6b6 <checkmove_sim+0xc6>
     6b4:	a0 c1       	rjmp	.+832    	; 0x9f6 <checkmove_sim+0x406>
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ba:	08 97       	sbiw	r24, 0x08	; 8
     6bc:	0c f0       	brlt	.+2      	; 0x6c0 <checkmove_sim+0xd0>
     6be:	9b c1       	rjmp	.+822    	; 0x9f6 <checkmove_sim+0x406>
     6c0:	40 91 e7 01 	lds	r20, 0x01E7	; 0x8001e7 <M>
     6c4:	50 91 e8 01 	lds	r21, 0x01E8	; 0x8001e8 <M+0x1>
     6c8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ca:	fa 81       	ldd	r31, Y+2	; 0x02
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	e8 0f       	add	r30, r24
     6de:	f9 1f       	adc	r31, r25
     6e0:	e4 0f       	add	r30, r20
     6e2:	f5 1f       	adc	r31, r21
     6e4:	80 81       	ld	r24, Z
     6e6:	89 15       	cp	r24, r9
     6e8:	09 f4       	brne	.+2      	; 0x6ec <checkmove_sim+0xfc>
     6ea:	85 c1       	rjmp	.+778    	; 0x9f6 <checkmove_sim+0x406>
     6ec:	e9 81       	ldd	r30, Y+1	; 0x01
     6ee:	fa 81       	ldd	r31, Y+2	; 0x02
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	ee 0f       	add	r30, r30
     6f6:	ff 1f       	adc	r31, r31
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	ee 0f       	add	r30, r30
     6fe:	ff 1f       	adc	r31, r31
     700:	e8 0f       	add	r30, r24
     702:	f9 1f       	adc	r31, r25
     704:	e4 0f       	add	r30, r20
     706:	f5 1f       	adc	r31, r21
     708:	80 81       	ld	r24, Z
     70a:	82 30       	cpi	r24, 0x02	; 2
     70c:	08 f0       	brcs	.+2      	; 0x710 <checkmove_sim+0x120>
     70e:	73 c1       	rjmp	.+742    	; 0x9f6 <checkmove_sim+0x406>
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	28 16       	cp	r2, r24
     716:	39 06       	cpc	r3, r25
     718:	3c f0       	brlt	.+14     	; 0x728 <checkmove_sim+0x138>
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	9a 81       	ldd	r25, Y+2	; 0x02
     71e:	28 16       	cp	r2, r24
     720:	39 06       	cpc	r3, r25
     722:	39 f0       	breq	.+14     	; 0x732 <checkmove_sim+0x142>
     724:	f1 2c       	mov	r15, r1
     726:	09 c0       	rjmp	.+18     	; 0x73a <checkmove_sim+0x14a>
     728:	0f 2e       	mov	r0, r31
     72a:	f7 e0       	ldi	r31, 0x07	; 7
     72c:	ff 2e       	mov	r15, r31
     72e:	f0 2d       	mov	r31, r0
     730:	04 c0       	rjmp	.+8      	; 0x73a <checkmove_sim+0x14a>
     732:	0f 2e       	mov	r0, r31
     734:	f9 e0       	ldi	r31, 0x09	; 9
     736:	ff 2e       	mov	r15, r31
     738:	f0 2d       	mov	r31, r0
     73a:	8b 81       	ldd	r24, Y+3	; 0x03
     73c:	9c 81       	ldd	r25, Y+4	; 0x04
     73e:	48 16       	cp	r4, r24
     740:	59 06       	cpc	r5, r25
     742:	3c f0       	brlt	.+14     	; 0x752 <checkmove_sim+0x162>
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	9c 81       	ldd	r25, Y+4	; 0x04
     748:	48 16       	cp	r4, r24
     74a:	59 06       	cpc	r5, r25
     74c:	39 f0       	breq	.+14     	; 0x75c <checkmove_sim+0x16c>
     74e:	e1 2c       	mov	r14, r1
     750:	09 c0       	rjmp	.+18     	; 0x764 <checkmove_sim+0x174>
     752:	0f 2e       	mov	r0, r31
     754:	f7 e0       	ldi	r31, 0x07	; 7
     756:	ef 2e       	mov	r14, r31
     758:	f0 2d       	mov	r31, r0
     75a:	04 c0       	rjmp	.+8      	; 0x764 <checkmove_sim+0x174>
     75c:	0f 2e       	mov	r0, r31
     75e:	f9 e0       	ldi	r31, 0x09	; 9
     760:	ef 2e       	mov	r14, r31
     762:	f0 2d       	mov	r31, r0
     764:	a9 81       	ldd	r26, Y+1	; 0x01
     766:	ba 81       	ldd	r27, Y+2	; 0x02
     768:	88 85       	ldd	r24, Y+8	; 0x08
     76a:	a8 1b       	sub	r26, r24
     76c:	8b 81       	ldd	r24, Y+3	; 0x03
     76e:	9c 81       	ldd	r25, Y+4	; 0x04
     770:	b8 2f       	mov	r27, r24
     772:	e9 85       	ldd	r30, Y+9	; 0x09
     774:	be 1b       	sub	r27, r30
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	9a 81       	ldd	r25, Y+2	; 0x02
     77a:	68 2f       	mov	r22, r24
     77c:	2b 81       	ldd	r18, Y+3	; 0x03
     77e:	3c 81       	ldd	r19, Y+4	; 0x04
     780:	72 2f       	mov	r23, r18
     782:	fd 81       	ldd	r31, Y+5	; 0x05
     784:	ff 23       	and	r31, r31
     786:	41 f1       	breq	.+80     	; 0x7d8 <checkmove_sim+0x1e8>
     788:	99 27       	eor	r25, r25
     78a:	0a 2f       	mov	r16, r26
     78c:	10 e0       	ldi	r17, 0x00	; 0
     78e:	0f 0d       	add	r16, r15
     790:	11 1d       	adc	r17, r1
     792:	80 17       	cp	r24, r16
     794:	91 07       	cpc	r25, r17
     796:	09 f4       	brne	.+2      	; 0x79a <checkmove_sim+0x1aa>
     798:	2e c1       	rjmp	.+604    	; 0x9f6 <checkmove_sim+0x406>
     79a:	33 27       	eor	r19, r19
     79c:	eb 2f       	mov	r30, r27
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	6f 01       	movw	r12, r30
     7a2:	ce 0c       	add	r12, r14
     7a4:	d1 1c       	adc	r13, r1
     7a6:	dd 86       	std	Y+13, r13	; 0x0d
     7a8:	cc 86       	std	Y+12, r12	; 0x0c
     7aa:	2c 15       	cp	r18, r12
     7ac:	3d 05       	cpc	r19, r13
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <checkmove_sim+0x1c2>
     7b0:	22 c1       	rjmp	.+580    	; 0x9f6 <checkmove_sim+0x406>
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	82 0f       	add	r24, r18
     7c0:	93 1f       	adc	r25, r19
     7c2:	84 0f       	add	r24, r20
     7c4:	95 1f       	adc	r25, r21
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 81       	ld	r18, Z
     7ca:	22 30       	cpi	r18, 0x02	; 2
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <checkmove_sim+0x1e0>
     7ce:	13 c1       	rjmp	.+550    	; 0x9f6 <checkmove_sim+0x406>
     7d0:	80 81       	ld	r24, Z
     7d2:	98 12       	cpse	r9, r24
     7d4:	a4 c0       	rjmp	.+328    	; 0x91e <checkmove_sim+0x32e>
     7d6:	93 c0       	rjmp	.+294    	; 0x8fe <checkmove_sim+0x30e>
     7d8:	99 27       	eor	r25, r25
     7da:	0a 2f       	mov	r16, r26
     7dc:	10 e0       	ldi	r17, 0x00	; 0
     7de:	0f 0d       	add	r16, r15
     7e0:	11 1d       	adc	r17, r1
     7e2:	80 17       	cp	r24, r16
     7e4:	91 07       	cpc	r25, r17
     7e6:	09 f4       	brne	.+2      	; 0x7ea <checkmove_sim+0x1fa>
     7e8:	06 c1       	rjmp	.+524    	; 0x9f6 <checkmove_sim+0x406>
     7ea:	33 27       	eor	r19, r19
     7ec:	eb 2f       	mov	r30, r27
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	6f 01       	movw	r12, r30
     7f2:	ce 0c       	add	r12, r14
     7f4:	d1 1c       	adc	r13, r1
     7f6:	dd 86       	std	Y+13, r13	; 0x0d
     7f8:	cc 86       	std	Y+12, r12	; 0x0c
     7fa:	2c 15       	cp	r18, r12
     7fc:	3d 05       	cpc	r19, r13
     7fe:	09 f4       	brne	.+2      	; 0x802 <checkmove_sim+0x212>
     800:	fa c0       	rjmp	.+500    	; 0x9f6 <checkmove_sim+0x406>
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	82 0f       	add	r24, r18
     810:	93 1f       	adc	r25, r19
     812:	84 0f       	add	r24, r20
     814:	95 1f       	adc	r25, r21
     816:	fc 01       	movw	r30, r24
     818:	20 81       	ld	r18, Z
     81a:	22 30       	cpi	r18, 0x02	; 2
     81c:	08 f0       	brcs	.+2      	; 0x820 <checkmove_sim+0x230>
     81e:	eb c0       	rjmp	.+470    	; 0x9f6 <checkmove_sim+0x406>
     820:	80 81       	ld	r24, Z
     822:	98 12       	cpse	r9, r24
     824:	14 c0       	rjmp	.+40     	; 0x84e <checkmove_sim+0x25e>
     826:	64 c1       	rjmp	.+712    	; 0xaf0 <checkmove_sim+0x500>
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	a8 0f       	add	r26, r24
     836:	b9 1f       	adc	r27, r25
     838:	a4 0f       	add	r26, r20
     83a:	b5 1f       	adc	r27, r21
     83c:	8c 91       	ld	r24, X
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	08 f0       	brcs	.+2      	; 0x844 <checkmove_sim+0x254>
     842:	d9 c0       	rjmp	.+434    	; 0x9f6 <checkmove_sim+0x406>
     844:	8c 91       	ld	r24, X
     846:	98 16       	cp	r9, r24
     848:	09 f4       	brne	.+2      	; 0x84c <checkmove_sim+0x25c>
     84a:	50 c1       	rjmp	.+672    	; 0xaec <checkmove_sim+0x4fc>
     84c:	04 c0       	rjmp	.+8      	; 0x856 <checkmove_sim+0x266>
     84e:	2a 2f       	mov	r18, r26
     850:	3b 2f       	mov	r19, r27
     852:	ec 85       	ldd	r30, Y+12	; 0x0c
     854:	fd 85       	ldd	r31, Y+13	; 0x0d
     856:	73 0f       	add	r23, r19
     858:	62 0f       	add	r22, r18
     85a:	86 2f       	mov	r24, r22
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	80 17       	cp	r24, r16
     860:	91 07       	cpc	r25, r17
     862:	09 f4       	brne	.+2      	; 0x866 <checkmove_sim+0x276>
     864:	c8 c0       	rjmp	.+400    	; 0x9f6 <checkmove_sim+0x406>
     866:	a7 2f       	mov	r26, r23
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	ae 17       	cp	r26, r30
     86c:	bf 07       	cpc	r27, r31
     86e:	e1 f6       	brne	.-72     	; 0x828 <checkmove_sim+0x238>
     870:	c2 c0       	rjmp	.+388    	; 0x9f6 <checkmove_sim+0x406>
     872:	e9 16       	cp	r14, r25
     874:	09 f4       	brne	.+2      	; 0x878 <checkmove_sim+0x288>
     876:	9c c0       	rjmp	.+312    	; 0x9b0 <checkmove_sim+0x3c0>
     878:	f9 01       	movw	r30, r18
     87a:	ff 27       	eor	r31, r31
     87c:	ee 0f       	add	r30, r30
     87e:	ff 1f       	adc	r31, r31
     880:	ee 0f       	add	r30, r30
     882:	ff 1f       	adc	r31, r31
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	e6 0f       	add	r30, r22
     88a:	f1 1d       	adc	r31, r1
     88c:	e4 0f       	add	r30, r20
     88e:	f5 1f       	adc	r31, r21
     890:	20 81       	ld	r18, Z
     892:	22 30       	cpi	r18, 0x02	; 2
     894:	08 f0       	brcs	.+2      	; 0x898 <checkmove_sim+0x2a8>
     896:	8f c0       	rjmp	.+286    	; 0x9b6 <checkmove_sim+0x3c6>
     898:	20 81       	ld	r18, Z
     89a:	92 12       	cpse	r9, r18
     89c:	12 c0       	rjmp	.+36     	; 0x8c2 <checkmove_sim+0x2d2>
     89e:	8e c0       	rjmp	.+284    	; 0x9bc <checkmove_sim+0x3cc>
     8a0:	e9 2f       	mov	r30, r25
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	28 e0       	ldi	r18, 0x08	; 8
     8a6:	82 9f       	mul	r24, r18
     8a8:	e0 0d       	add	r30, r0
     8aa:	f1 1d       	adc	r31, r1
     8ac:	11 24       	eor	r1, r1
     8ae:	e4 0f       	add	r30, r20
     8b0:	f5 1f       	adc	r31, r21
     8b2:	20 81       	ld	r18, Z
     8b4:	22 30       	cpi	r18, 0x02	; 2
     8b6:	08 f0       	brcs	.+2      	; 0x8ba <checkmove_sim+0x2ca>
     8b8:	84 c0       	rjmp	.+264    	; 0x9c2 <checkmove_sim+0x3d2>
     8ba:	20 81       	ld	r18, Z
     8bc:	92 16       	cp	r9, r18
     8be:	09 f4       	brne	.+2      	; 0x8c2 <checkmove_sim+0x2d2>
     8c0:	83 c0       	rjmp	.+262    	; 0x9c8 <checkmove_sim+0x3d8>
     8c2:	83 94       	inc	r8
     8c4:	9b 0f       	add	r25, r27
     8c6:	8a 0f       	add	r24, r26
     8c8:	f8 16       	cp	r15, r24
     8ca:	09 f4       	brne	.+2      	; 0x8ce <checkmove_sim+0x2de>
     8cc:	80 c0       	rjmp	.+256    	; 0x9ce <checkmove_sim+0x3de>
     8ce:	e9 12       	cpse	r14, r25
     8d0:	e7 cf       	rjmp	.-50     	; 0x8a0 <checkmove_sim+0x2b0>
     8d2:	31 e0       	ldi	r19, 0x01	; 1
     8d4:	3e 87       	std	Y+14, r19	; 0x0e
     8d6:	8f c0       	rjmp	.+286    	; 0x9f6 <checkmove_sim+0x406>
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	a8 0f       	add	r26, r24
     8e6:	b9 1f       	adc	r27, r25
     8e8:	a4 0f       	add	r26, r20
     8ea:	b5 1f       	adc	r27, r21
     8ec:	8c 91       	ld	r24, X
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	08 f0       	brcs	.+2      	; 0x8f4 <checkmove_sim+0x304>
     8f2:	81 c0       	rjmp	.+258    	; 0x9f6 <checkmove_sim+0x406>
     8f4:	8c 91       	ld	r24, X
     8f6:	98 12       	cpse	r9, r24
     8f8:	16 c0       	rjmp	.+44     	; 0x926 <checkmove_sim+0x336>
     8fa:	a2 2f       	mov	r26, r18
     8fc:	b3 2f       	mov	r27, r19
     8fe:	ea 85       	ldd	r30, Y+10	; 0x0a
     900:	fb 85       	ldd	r31, Y+11	; 0x0b
     902:	e4 0f       	add	r30, r20
     904:	f5 1f       	adc	r31, r21
     906:	90 82       	st	Z, r9
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	48 2f       	mov	r20, r24
     90e:	6b 81       	ldd	r22, Y+3	; 0x03
     910:	7c 81       	ldd	r23, Y+4	; 0x04
     912:	56 2f       	mov	r21, r22
     914:	f8 12       	cpse	r15, r24
     916:	15 c0       	rjmp	.+42     	; 0x942 <checkmove_sim+0x352>
     918:	41 e0       	ldi	r20, 0x01	; 1
     91a:	4e 87       	std	Y+14, r20	; 0x0e
     91c:	6c c0       	rjmp	.+216    	; 0x9f6 <checkmove_sim+0x406>
     91e:	2a 2f       	mov	r18, r26
     920:	3b 2f       	mov	r19, r27
     922:	ec 85       	ldd	r30, Y+12	; 0x0c
     924:	fd 85       	ldd	r31, Y+13	; 0x0d
     926:	73 0f       	add	r23, r19
     928:	62 0f       	add	r22, r18
     92a:	86 2f       	mov	r24, r22
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	80 17       	cp	r24, r16
     930:	91 07       	cpc	r25, r17
     932:	09 f4       	brne	.+2      	; 0x936 <checkmove_sim+0x346>
     934:	60 c0       	rjmp	.+192    	; 0x9f6 <checkmove_sim+0x406>
     936:	a7 2f       	mov	r26, r23
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	ae 17       	cp	r26, r30
     93c:	bf 07       	cpc	r27, r31
     93e:	61 f6       	brne	.-104    	; 0x8d8 <checkmove_sim+0x2e8>
     940:	5a c0       	rjmp	.+180    	; 0x9f6 <checkmove_sim+0x406>
     942:	e6 16       	cp	r14, r22
     944:	09 f4       	brne	.+2      	; 0x948 <checkmove_sim+0x358>
     946:	46 c0       	rjmp	.+140    	; 0x9d4 <checkmove_sim+0x3e4>
     948:	99 27       	eor	r25, r25
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	86 0f       	add	r24, r22
     958:	91 1d       	adc	r25, r1
     95a:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <M>
     95e:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <M+0x1>
     962:	f9 01       	movw	r30, r18
     964:	e8 0f       	add	r30, r24
     966:	f9 1f       	adc	r31, r25
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	b0 f5       	brcc	.+108    	; 0x9da <checkmove_sim+0x3ea>
     96e:	80 81       	ld	r24, Z
     970:	98 12       	cpse	r9, r24
     972:	14 c0       	rjmp	.+40     	; 0x99c <checkmove_sim+0x3ac>
     974:	35 c0       	rjmp	.+106    	; 0x9e0 <checkmove_sim+0x3f0>
     976:	e5 2f       	mov	r30, r21
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	48 9f       	mul	r20, r24
     97e:	e0 0d       	add	r30, r0
     980:	f1 1d       	adc	r31, r1
     982:	11 24       	eor	r1, r1
     984:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <M>
     988:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <M+0x1>
     98c:	e8 0f       	add	r30, r24
     98e:	f9 1f       	adc	r31, r25
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	40 f5       	brcc	.+80     	; 0x9e6 <checkmove_sim+0x3f6>
     996:	80 81       	ld	r24, Z
     998:	98 16       	cp	r9, r24
     99a:	41 f1       	breq	.+80     	; 0x9ec <checkmove_sim+0x3fc>
     99c:	90 82       	st	Z, r9
     99e:	5b 0f       	add	r21, r27
     9a0:	4a 0f       	add	r20, r26
     9a2:	f4 16       	cp	r15, r20
     9a4:	31 f1       	breq	.+76     	; 0x9f2 <checkmove_sim+0x402>
     9a6:	e5 12       	cpse	r14, r21
     9a8:	e6 cf       	rjmp	.-52     	; 0x976 <checkmove_sim+0x386>
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	9e 87       	std	Y+14, r25	; 0x0e
     9ae:	23 c0       	rjmp	.+70     	; 0x9f6 <checkmove_sim+0x406>
     9b0:	e1 e0       	ldi	r30, 0x01	; 1
     9b2:	ee 87       	std	Y+14, r30	; 0x0e
     9b4:	20 c0       	rjmp	.+64     	; 0x9f6 <checkmove_sim+0x406>
     9b6:	f1 e0       	ldi	r31, 0x01	; 1
     9b8:	fe 87       	std	Y+14, r31	; 0x0e
     9ba:	1d c0       	rjmp	.+58     	; 0x9f6 <checkmove_sim+0x406>
     9bc:	21 e0       	ldi	r18, 0x01	; 1
     9be:	2e 87       	std	Y+14, r18	; 0x0e
     9c0:	1a c0       	rjmp	.+52     	; 0x9f6 <checkmove_sim+0x406>
     9c2:	31 e0       	ldi	r19, 0x01	; 1
     9c4:	3e 87       	std	Y+14, r19	; 0x0e
     9c6:	17 c0       	rjmp	.+46     	; 0x9f6 <checkmove_sim+0x406>
     9c8:	41 e0       	ldi	r20, 0x01	; 1
     9ca:	4e 87       	std	Y+14, r20	; 0x0e
     9cc:	14 c0       	rjmp	.+40     	; 0x9f6 <checkmove_sim+0x406>
     9ce:	51 e0       	ldi	r21, 0x01	; 1
     9d0:	5e 87       	std	Y+14, r21	; 0x0e
     9d2:	11 c0       	rjmp	.+34     	; 0x9f6 <checkmove_sim+0x406>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	8e 87       	std	Y+14, r24	; 0x0e
     9d8:	0e c0       	rjmp	.+28     	; 0x9f6 <checkmove_sim+0x406>
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	9e 87       	std	Y+14, r25	; 0x0e
     9de:	0b c0       	rjmp	.+22     	; 0x9f6 <checkmove_sim+0x406>
     9e0:	e1 e0       	ldi	r30, 0x01	; 1
     9e2:	ee 87       	std	Y+14, r30	; 0x0e
     9e4:	08 c0       	rjmp	.+16     	; 0x9f6 <checkmove_sim+0x406>
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	fe 87       	std	Y+14, r31	; 0x0e
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <checkmove_sim+0x406>
     9ec:	21 e0       	ldi	r18, 0x01	; 1
     9ee:	2e 87       	std	Y+14, r18	; 0x0e
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <checkmove_sim+0x406>
     9f2:	31 e0       	ldi	r19, 0x01	; 1
     9f4:	3e 87       	std	Y+14, r19	; 0x0e
     9f6:	8b 81       	ldd	r24, Y+3	; 0x03
     9f8:	9c 81       	ldd	r25, Y+4	; 0x04
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	9c 83       	std	Y+4, r25	; 0x04
     9fe:	8b 83       	std	Y+3, r24	; 0x03
     a00:	8b 81       	ldd	r24, Y+3	; 0x03
     a02:	9c 81       	ldd	r25, Y+4	; 0x04
     a04:	a8 16       	cp	r10, r24
     a06:	b9 06       	cpc	r11, r25
     a08:	0c f0       	brlt	.+2      	; 0xa0c <checkmove_sim+0x41c>
     a0a:	50 ce       	rjmp	.-864    	; 0x6ac <checkmove_sim+0xbc>
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	9a 81       	ldd	r25, Y+2	; 0x02
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	9a 83       	std	Y+2, r25	; 0x02
     a14:	89 83       	std	Y+1, r24	; 0x01
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	68 16       	cp	r6, r24
     a1c:	79 06       	cpc	r7, r25
     a1e:	0c f0       	brlt	.+2      	; 0xa22 <checkmove_sim+0x432>
     a20:	31 ce       	rjmp	.-926    	; 0x684 <checkmove_sim+0x94>
     a22:	c8 2c       	mov	r12, r8
     a24:	88 84       	ldd	r8, Y+8	; 0x08
     a26:	99 84       	ldd	r9, Y+9	; 0x09
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <checkmove_sim+0x43e>
     a2a:	c1 2c       	mov	r12, r1
     a2c:	1e 86       	std	Y+14, r1	; 0x0e
     a2e:	4d 81       	ldd	r20, Y+5	; 0x05
     a30:	41 11       	cpse	r20, r1
     a32:	56 c0       	rjmp	.+172    	; 0xae0 <checkmove_sim+0x4f0>
     a34:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <M>
     a38:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <M+0x1>
     a3c:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <vi_max>
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	ee 0f       	add	r30, r30
     a44:	ff 1f       	adc	r31, r31
     a46:	ee 0f       	add	r30, r30
     a48:	ff 1f       	adc	r31, r31
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <vj_max>
     a52:	e8 0f       	add	r30, r24
     a54:	f1 1d       	adc	r31, r1
     a56:	e2 0f       	add	r30, r18
     a58:	f3 1f       	adc	r31, r19
     a5a:	e0 81       	ld	r30, Z
     a5c:	22 0c       	add	r2, r2
     a5e:	33 1c       	adc	r3, r3
     a60:	22 0c       	add	r2, r2
     a62:	33 1c       	adc	r3, r3
     a64:	22 0c       	add	r2, r2
     a66:	33 1c       	adc	r3, r3
     a68:	c1 01       	movw	r24, r2
     a6a:	89 0d       	add	r24, r9
     a6c:	91 1d       	adc	r25, r1
     a6e:	dc 01       	movw	r26, r24
     a70:	a9 59       	subi	r26, 0x99	; 153
     a72:	bf 4f       	sbci	r27, 0xFF	; 255
     a74:	6c 91       	ld	r22, X
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	4c 2d       	mov	r20, r12
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	42 5f       	subi	r20, 0xF2	; 242
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	46 0f       	add	r20, r22
     a82:	51 1d       	adc	r21, r1
     a84:	4e 17       	cp	r20, r30
     a86:	5f 07       	cpc	r21, r31
     a88:	5c f1       	brlt	.+86     	; 0xae0 <checkmove_sim+0x4f0>
     a8a:	f9 01       	movw	r30, r18
     a8c:	e8 0f       	add	r30, r24
     a8e:	f9 1f       	adc	r31, r25
     a90:	62 5f       	subi	r22, 0xF2	; 242
     a92:	6c 0d       	add	r22, r12
     a94:	60 83       	st	Z, r22
     a96:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <vi_max>
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	ee 0f       	add	r30, r30
     aa2:	ff 1f       	adc	r31, r31
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <vj_max>
     aac:	af 01       	movw	r20, r30
     aae:	42 0f       	add	r20, r18
     ab0:	51 1d       	adc	r21, r1
     ab2:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     ab6:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     aba:	e4 0f       	add	r30, r20
     abc:	f5 1f       	adc	r31, r21
     abe:	20 81       	ld	r18, Z
     ac0:	23 30       	cpi	r18, 0x03	; 3
     ac2:	10 f0       	brcs	.+4      	; 0xac8 <checkmove_sim+0x4d8>
     ac4:	22 e0       	ldi	r18, 0x02	; 2
     ac6:	20 83       	st	Z, r18
     ac8:	80 92 e9 01 	sts	0x01E9, r8	; 0x8001e9 <vi_max>
     acc:	90 92 e0 00 	sts	0x00E0, r9	; 0x8000e0 <vj_max>
     ad0:	fc 01       	movw	r30, r24
     ad2:	e9 59       	subi	r30, 0x99	; 153
     ad4:	ff 4f       	sbci	r31, 0xFF	; 255
     ad6:	80 81       	ld	r24, Z
     ad8:	82 5f       	subi	r24, 0xF2	; 242
     ada:	c8 0e       	add	r12, r24
     adc:	c0 92 da 00 	sts	0x00DA, r12	; 0x8000da <v_max>
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	5e 85       	ldd	r21, Y+14	; 0x0e
     ae4:	51 30       	cpi	r21, 0x01	; 1
     ae6:	79 f0       	breq	.+30     	; 0xb06 <checkmove_sim+0x516>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	0d c0       	rjmp	.+26     	; 0xb06 <checkmove_sim+0x516>
     aec:	a2 2f       	mov	r26, r18
     aee:	b3 2f       	mov	r27, r19
     af0:	29 81       	ldd	r18, Y+1	; 0x01
     af2:	3a 81       	ldd	r19, Y+2	; 0x02
     af4:	82 2f       	mov	r24, r18
     af6:	6b 81       	ldd	r22, Y+3	; 0x03
     af8:	7c 81       	ldd	r23, Y+4	; 0x04
     afa:	96 2f       	mov	r25, r22
     afc:	f2 12       	cpse	r15, r18
     afe:	b9 ce       	rjmp	.-654    	; 0x872 <checkmove_sim+0x282>
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	8e 87       	std	Y+14, r24	; 0x0e
     b04:	78 cf       	rjmp	.-272    	; 0x9f6 <checkmove_sim+0x406>
     b06:	2e 96       	adiw	r28, 0x0e	; 14
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	cf 90       	pop	r12
     b22:	bf 90       	pop	r11
     b24:	af 90       	pop	r10
     b26:	9f 90       	pop	r9
     b28:	8f 90       	pop	r8
     b2a:	7f 90       	pop	r7
     b2c:	6f 90       	pop	r6
     b2e:	5f 90       	pop	r5
     b30:	4f 90       	pop	r4
     b32:	3f 90       	pop	r3
     b34:	2f 90       	pop	r2
     b36:	08 95       	ret

00000b38 <algo_sim>:
     b38:	2f 92       	push	r2
     b3a:	3f 92       	push	r3
     b3c:	4f 92       	push	r4
     b3e:	5f 92       	push	r5
     b40:	6f 92       	push	r6
     b42:	7f 92       	push	r7
     b44:	8f 92       	push	r8
     b46:	9f 92       	push	r9
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	61 97       	sbiw	r28, 0x11	; 17
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     b72:	83 e0       	ldi	r24, 0x03	; 3
     b74:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <vi_max>
     b78:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <vj_max>
     b7c:	21 e0       	ldi	r18, 0x01	; 1
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	3d 87       	std	Y+13, r19	; 0x0d
     b82:	2c 87       	std	Y+12, r18	; 0x0c
     b84:	1f 86       	std	Y+15, r1	; 0x0f
     b86:	1e 86       	std	Y+14, r1	; 0x0e
     b88:	1d 82       	std	Y+5, r1	; 0x05
     b8a:	f4 c0       	rjmp	.+488    	; 0xd74 <algo_sim+0x23c>
     b8c:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     b90:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     b94:	4e 81       	ldd	r20, Y+6	; 0x06
     b96:	5f 81       	ldd	r21, Y+7	; 0x07
     b98:	e4 0f       	add	r30, r20
     b9a:	f5 1f       	adc	r31, r21
     b9c:	20 81       	ld	r18, Z
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
     ba8:	41 11       	cpse	r20, r1
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <algo_sim+0x7c>
     bb2:	c2 c0       	rjmp	.+388    	; 0xd38 <algo_sim+0x200>
     bb4:	4d 80       	ldd	r4, Y+5	; 0x05
     bb6:	4a 94       	dec	r4
     bb8:	04 2d       	mov	r16, r4
     bba:	10 e0       	ldi	r17, 0x00	; 0
     bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bbe:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc0:	80 17       	cp	r24, r16
     bc2:	91 07       	cpc	r25, r17
     bc4:	0c f4       	brge	.+2      	; 0xbc8 <algo_sim+0x90>
     bc6:	b8 c0       	rjmp	.+368    	; 0xd38 <algo_sim+0x200>
     bc8:	31 01       	movw	r6, r2
     bca:	3b 86       	std	Y+11, r3	; 0x0b
     bcc:	2a 86       	std	Y+10, r2	; 0x0a
     bce:	97 e0       	ldi	r25, 0x07	; 7
     bd0:	94 15       	cp	r25, r4
     bd2:	08 f4       	brcc	.+2      	; 0xbd6 <algo_sim+0x9e>
     bd4:	a6 c0       	rjmp	.+332    	; 0xd22 <algo_sim+0x1ea>
     bd6:	dd 24       	eor	r13, r13
     bd8:	da 94       	dec	r13
     bda:	d5 0c       	add	r13, r5
     bdc:	8d 2d       	mov	r24, r13
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	2a 85       	ldd	r18, Y+10	; 0x0a
     be2:	3b 85       	ldd	r19, Y+11	; 0x0b
     be4:	28 17       	cp	r18, r24
     be6:	39 07       	cpc	r19, r25
     be8:	0c f4       	brge	.+2      	; 0xbec <algo_sim+0xb4>
     bea:	9b c0       	rjmp	.+310    	; 0xd22 <algo_sim+0x1ea>
     bec:	58 01       	movw	r10, r16
     bee:	aa 0c       	add	r10, r10
     bf0:	bb 1c       	adc	r11, r11
     bf2:	aa 0c       	add	r10, r10
     bf4:	bb 1c       	adc	r11, r11
     bf6:	aa 0c       	add	r10, r10
     bf8:	bb 1c       	adc	r11, r11
     bfa:	84 2c       	mov	r8, r4
     bfc:	91 2c       	mov	r9, r1
     bfe:	a4 01       	movw	r20, r8
     c00:	44 0f       	add	r20, r20
     c02:	55 1f       	adc	r21, r21
     c04:	44 0f       	add	r20, r20
     c06:	55 1f       	adc	r21, r21
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	5c 83       	std	Y+4, r21	; 0x04
     c0e:	4b 83       	std	Y+3, r20	; 0x03
     c10:	c4 2c       	mov	r12, r4
     c12:	5d 81       	ldd	r21, Y+5	; 0x05
     c14:	c5 1a       	sub	r12, r21
     c16:	2c 2d       	mov	r18, r12
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	3a 83       	std	Y+2, r19	; 0x02
     c1c:	29 83       	std	Y+1, r18	; 0x01
     c1e:	35 2e       	mov	r3, r21
     c20:	37 e0       	ldi	r19, 0x07	; 7
     c22:	3d 15       	cp	r19, r13
     c24:	08 f4       	brcc	.+2      	; 0xc28 <algo_sim+0xf0>
     c26:	76 c0       	rjmp	.+236    	; 0xd14 <algo_sim+0x1dc>
     c28:	e0 90 e7 01 	lds	r14, 0x01E7	; 0x8001e7 <M>
     c2c:	f0 90 e8 01 	lds	r15, 0x01E8	; 0x8001e8 <M+0x1>
     c30:	8a 0d       	add	r24, r10
     c32:	9b 1d       	adc	r25, r11
     c34:	f7 01       	movw	r30, r14
     c36:	e8 0f       	add	r30, r24
     c38:	f9 1f       	adc	r31, r25
     c3a:	80 81       	ld	r24, Z
     c3c:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <MyColor>
     c40:	89 13       	cpse	r24, r25
     c42:	68 c0       	rjmp	.+208    	; 0xd14 <algo_sim+0x1dc>
     c44:	34 14       	cp	r3, r4
     c46:	20 f0       	brcs	.+8      	; 0xc50 <algo_sim+0x118>
     c48:	34 14       	cp	r3, r4
     c4a:	21 f0       	breq	.+8      	; 0xc54 <algo_sim+0x11c>
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <algo_sim+0x11e>
     c50:	27 e0       	ldi	r18, 0x07	; 7
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <algo_sim+0x11e>
     c54:	2a e0       	ldi	r18, 0x0A	; 10
     c56:	5d 14       	cp	r5, r13
     c58:	20 f0       	brcs	.+8      	; 0xc62 <algo_sim+0x12a>
     c5a:	5d 14       	cp	r5, r13
     c5c:	21 f0       	breq	.+8      	; 0xc66 <algo_sim+0x12e>
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <algo_sim+0x130>
     c62:	37 e0       	ldi	r19, 0x07	; 7
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <algo_sim+0x130>
     c66:	3a e0       	ldi	r19, 0x0A	; 10
     c68:	9d 2d       	mov	r25, r13
     c6a:	95 19       	sub	r25, r5
     c6c:	49 81       	ldd	r20, Y+1	; 0x01
     c6e:	5a 81       	ldd	r21, Y+2	; 0x02
     c70:	42 0f       	add	r20, r18
     c72:	51 1d       	adc	r21, r1
     c74:	59 8b       	std	Y+17, r21	; 0x11
     c76:	48 8b       	std	Y+16, r20	; 0x10
     c78:	84 16       	cp	r8, r20
     c7a:	95 06       	cpc	r9, r21
     c7c:	09 f4       	brne	.+2      	; 0xc80 <algo_sim+0x148>
     c7e:	4a c0       	rjmp	.+148    	; 0xd14 <algo_sim+0x1dc>
     c80:	ed 2d       	mov	r30, r13
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	a9 2f       	mov	r26, r25
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	a3 0f       	add	r26, r19
     c8a:	b1 1d       	adc	r27, r1
     c8c:	ea 17       	cp	r30, r26
     c8e:	fb 07       	cpc	r31, r27
     c90:	09 f4       	brne	.+2      	; 0xc94 <algo_sim+0x15c>
     c92:	40 c0       	rjmp	.+128    	; 0xd14 <algo_sim+0x1dc>
     c94:	2b 81       	ldd	r18, Y+3	; 0x03
     c96:	3c 81       	ldd	r19, Y+4	; 0x04
     c98:	e2 0f       	add	r30, r18
     c9a:	f3 1f       	adc	r31, r19
     c9c:	ee 0d       	add	r30, r14
     c9e:	ff 1d       	adc	r31, r15
     ca0:	20 81       	ld	r18, Z
     ca2:	71 e0       	ldi	r23, 0x01	; 1
     ca4:	81 11       	cpse	r24, r1
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	07 2f       	mov	r16, r23
     caa:	10 e0       	ldi	r17, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	20 17       	cp	r18, r16
     cb0:	31 07       	cpc	r19, r17
     cb2:	81 f1       	breq	.+96     	; 0xd14 <algo_sim+0x1dc>
     cb4:	80 81       	ld	r24, Z
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	b1 f0       	breq	.+44     	; 0xce6 <algo_sim+0x1ae>
     cba:	6d 2d       	mov	r22, r13
     cbc:	84 2d       	mov	r24, r4
     cbe:	1c c0       	rjmp	.+56     	; 0xcf8 <algo_sim+0x1c0>
     cc0:	22 0f       	add	r18, r18
     cc2:	33 1f       	adc	r19, r19
     cc4:	22 0f       	add	r18, r18
     cc6:	33 1f       	adc	r19, r19
     cc8:	22 0f       	add	r18, r18
     cca:	33 1f       	adc	r19, r19
     ccc:	e2 0f       	add	r30, r18
     cce:	f3 1f       	adc	r31, r19
     cd0:	ee 0d       	add	r30, r14
     cd2:	ff 1d       	adc	r31, r15
     cd4:	20 81       	ld	r18, Z
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	20 17       	cp	r18, r16
     cda:	31 07       	cpc	r19, r17
     cdc:	d9 f0       	breq	.+54     	; 0xd14 <algo_sim+0x1dc>
     cde:	20 81       	ld	r18, Z
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	51 f4       	brne	.+20     	; 0xcf8 <algo_sim+0x1c0>
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <algo_sim+0x1b2>
     ce6:	6d 2d       	mov	r22, r13
     ce8:	84 2d       	mov	r24, r4
     cea:	51 e0       	ldi	r21, 0x01	; 1
     cec:	50 93 db 00 	sts	0x00DB, r21	; 0x8000db <move_done>
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	47 2f       	mov	r20, r23
     cf4:	7d dc       	rcall	.-1798   	; 0x5f0 <checkmove_sim>
     cf6:	0e c0       	rjmp	.+28     	; 0xd14 <algo_sim+0x1dc>
     cf8:	69 0f       	add	r22, r25
     cfa:	8c 0d       	add	r24, r12
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	48 89       	ldd	r20, Y+16	; 0x10
     d02:	59 89       	ldd	r21, Y+17	; 0x11
     d04:	24 17       	cp	r18, r20
     d06:	35 07       	cpc	r19, r21
     d08:	29 f0       	breq	.+10     	; 0xd14 <algo_sim+0x1dc>
     d0a:	e6 2f       	mov	r30, r22
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	ea 17       	cp	r30, r26
     d10:	fb 07       	cpc	r31, r27
     d12:	b1 f6       	brne	.-84     	; 0xcc0 <algo_sim+0x188>
     d14:	d3 94       	inc	r13
     d16:	8d 2d       	mov	r24, r13
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	68 16       	cp	r6, r24
     d1c:	79 06       	cpc	r7, r25
     d1e:	0c f0       	brlt	.+2      	; 0xd22 <algo_sim+0x1ea>
     d20:	7f cf       	rjmp	.-258    	; 0xc20 <algo_sim+0xe8>
     d22:	43 94       	inc	r4
     d24:	04 2d       	mov	r16, r4
     d26:	10 e0       	ldi	r17, 0x00	; 0
     d28:	88 85       	ldd	r24, Y+8	; 0x08
     d2a:	99 85       	ldd	r25, Y+9	; 0x09
     d2c:	80 17       	cp	r24, r16
     d2e:	91 07       	cpc	r25, r17
     d30:	0c f0       	brlt	.+2      	; 0xd34 <algo_sim+0x1fc>
     d32:	4d cf       	rjmp	.-358    	; 0xbce <algo_sim+0x96>
     d34:	2a 84       	ldd	r2, Y+10	; 0x0a
     d36:	3b 84       	ldd	r3, Y+11	; 0x0b
     d38:	53 94       	inc	r5
     d3a:	2e 81       	ldd	r18, Y+6	; 0x06
     d3c:	3f 81       	ldd	r19, Y+7	; 0x07
     d3e:	2f 5f       	subi	r18, 0xFF	; 255
     d40:	3f 4f       	sbci	r19, 0xFF	; 255
     d42:	3f 83       	std	Y+7, r19	; 0x07
     d44:	2e 83       	std	Y+6, r18	; 0x06
     d46:	3f ef       	ldi	r19, 0xFF	; 255
     d48:	23 1a       	sub	r2, r19
     d4a:	33 0a       	sbc	r3, r19
     d4c:	48 e0       	ldi	r20, 0x08	; 8
     d4e:	54 12       	cpse	r5, r20
     d50:	1d cf       	rjmp	.-454    	; 0xb8c <algo_sim+0x54>
     d52:	5d 81       	ldd	r21, Y+5	; 0x05
     d54:	5f 5f       	subi	r21, 0xFF	; 255
     d56:	5d 83       	std	Y+5, r21	; 0x05
     d58:	8e 85       	ldd	r24, Y+14	; 0x0e
     d5a:	9f 85       	ldd	r25, Y+15	; 0x0f
     d5c:	08 96       	adiw	r24, 0x08	; 8
     d5e:	9f 87       	std	Y+15, r25	; 0x0f
     d60:	8e 87       	std	Y+14, r24	; 0x0e
     d62:	2c 85       	ldd	r18, Y+12	; 0x0c
     d64:	3d 85       	ldd	r19, Y+13	; 0x0d
     d66:	2f 5f       	subi	r18, 0xFF	; 255
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	3d 87       	std	Y+13, r19	; 0x0d
     d6c:	2c 87       	std	Y+12, r18	; 0x0c
     d6e:	80 34       	cpi	r24, 0x40	; 64
     d70:	91 05       	cpc	r25, r1
     d72:	71 f0       	breq	.+28     	; 0xd90 <algo_sim+0x258>
     d74:	4e 85       	ldd	r20, Y+14	; 0x0e
     d76:	5f 85       	ldd	r21, Y+15	; 0x0f
     d78:	5f 83       	std	Y+7, r21	; 0x07
     d7a:	4e 83       	std	Y+6, r20	; 0x06
     d7c:	22 24       	eor	r2, r2
     d7e:	23 94       	inc	r2
     d80:	31 2c       	mov	r3, r1
     d82:	a1 2c       	mov	r10, r1
     d84:	8c 85       	ldd	r24, Y+12	; 0x0c
     d86:	9d 85       	ldd	r25, Y+13	; 0x0d
     d88:	99 87       	std	Y+9, r25	; 0x09
     d8a:	88 87       	std	Y+8, r24	; 0x08
     d8c:	5a 2c       	mov	r5, r10
     d8e:	fe ce       	rjmp	.-516    	; 0xb8c <algo_sim+0x54>
     d90:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
     d94:	81 11       	cpse	r24, r1
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <algo_sim+0x264>
     d98:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <v_max>
     d9c:	61 96       	adiw	r28, 0x11	; 17
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	bf 90       	pop	r11
     dba:	af 90       	pop	r10
     dbc:	9f 90       	pop	r9
     dbe:	8f 90       	pop	r8
     dc0:	7f 90       	pop	r7
     dc2:	6f 90       	pop	r6
     dc4:	5f 90       	pop	r5
     dc6:	4f 90       	pop	r4
     dc8:	3f 90       	pop	r3
     dca:	2f 90       	pop	r2
     dcc:	08 95       	ret

00000dce <simulate_opponent>:
     dce:	cf 93       	push	r28
     dd0:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <v1_max>
     dd4:	81 11       	cpse	r24, r1
     dd6:	19 c0       	rjmp	.+50     	; 0xe0a <simulate_opponent+0x3c>
     dd8:	bd c0       	rjmp	.+378    	; 0xf54 <simulate_opponent+0x186>
     dda:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <MB>
     dde:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <MB+0x1>
     de2:	e8 0f       	add	r30, r24
     de4:	f9 1f       	adc	r31, r25
     de6:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <M>
     dea:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <M+0x1>
     dee:	a8 0f       	add	r26, r24
     df0:	b9 1f       	adc	r27, r25
     df2:	2c 91       	ld	r18, X
     df4:	20 83       	st	Z, r18
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	84 17       	cp	r24, r20
     dfa:	95 07       	cpc	r25, r21
     dfc:	71 f7       	brne	.-36     	; 0xdda <simulate_opponent+0xc>
     dfe:	48 5f       	subi	r20, 0xF8	; 248
     e00:	5f 4f       	sbci	r21, 0xFF	; 255
     e02:	48 34       	cpi	r20, 0x48	; 72
     e04:	51 05       	cpc	r21, r1
     e06:	19 f4       	brne	.+6      	; 0xe0e <simulate_opponent+0x40>
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <simulate_opponent+0x46>
     e0a:	48 e0       	ldi	r20, 0x08	; 8
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	ca 01       	movw	r24, r20
     e10:	08 97       	sbiw	r24, 0x08	; 8
     e12:	e3 cf       	rjmp	.-58     	; 0xdda <simulate_opponent+0xc>
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
     e1a:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <vj1_max>
     e1e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <vi1_max>
     e22:	e6 db       	rcall	.-2100   	; 0x5f0 <checkmove_sim>
     e24:	89 de       	rcall	.-750    	; 0xb38 <algo_sim>
     e26:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <vi1_max>
     e2a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <vi_final>
     e2e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <vj1_max>
     e32:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <vj_final>
     e36:	c0 91 da 00 	lds	r28, 0x00DA	; 0x8000da <v_max>
     e3a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <v2_max>
     e3e:	81 11       	cpse	r24, r1
     e40:	19 c0       	rjmp	.+50     	; 0xe74 <simulate_opponent+0xa6>
     e42:	8d c0       	rjmp	.+282    	; 0xf5e <simulate_opponent+0x190>
     e44:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     e48:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     e4c:	e8 0f       	add	r30, r24
     e4e:	f9 1f       	adc	r31, r25
     e50:	a0 91 e3 00 	lds	r26, 0x00E3	; 0x8000e3 <MB>
     e54:	b0 91 e4 00 	lds	r27, 0x00E4	; 0x8000e4 <MB+0x1>
     e58:	a8 0f       	add	r26, r24
     e5a:	b9 1f       	adc	r27, r25
     e5c:	2c 91       	ld	r18, X
     e5e:	20 83       	st	Z, r18
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	84 17       	cp	r24, r20
     e64:	95 07       	cpc	r25, r21
     e66:	71 f7       	brne	.-36     	; 0xe44 <simulate_opponent+0x76>
     e68:	48 5f       	subi	r20, 0xF8	; 248
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	48 34       	cpi	r20, 0x48	; 72
     e6e:	51 05       	cpc	r21, r1
     e70:	19 f4       	brne	.+6      	; 0xe78 <simulate_opponent+0xaa>
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <simulate_opponent+0xb0>
     e74:	48 e0       	ldi	r20, 0x08	; 8
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	ca 01       	movw	r24, r20
     e7a:	08 97       	sbiw	r24, 0x08	; 8
     e7c:	e3 cf       	rjmp	.-58     	; 0xe44 <simulate_opponent+0x76>
     e7e:	21 e0       	ldi	r18, 0x01	; 1
     e80:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
     e84:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <vj2_max>
     e88:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <vi2_max>
     e8c:	b1 db       	rcall	.-2206   	; 0x5f0 <checkmove_sim>
     e8e:	54 de       	rcall	.-856    	; 0xb38 <algo_sim>
     e90:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <v_max>
     e94:	8c 17       	cp	r24, r28
     e96:	48 f4       	brcc	.+18     	; 0xeaa <simulate_opponent+0xdc>
     e98:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <vi2_max>
     e9c:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <vi_final>
     ea0:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <vj2_max>
     ea4:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <vj_final>
     ea8:	c8 2f       	mov	r28, r24
     eaa:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <v3_max>
     eae:	81 11       	cpse	r24, r1
     eb0:	19 c0       	rjmp	.+50     	; 0xee4 <simulate_opponent+0x116>
     eb2:	4b c0       	rjmp	.+150    	; 0xf4a <simulate_opponent+0x17c>
     eb4:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     eb8:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     ebc:	e8 0f       	add	r30, r24
     ebe:	f9 1f       	adc	r31, r25
     ec0:	a0 91 e3 00 	lds	r26, 0x00E3	; 0x8000e3 <MB>
     ec4:	b0 91 e4 00 	lds	r27, 0x00E4	; 0x8000e4 <MB+0x1>
     ec8:	a8 0f       	add	r26, r24
     eca:	b9 1f       	adc	r27, r25
     ecc:	2c 91       	ld	r18, X
     ece:	20 83       	st	Z, r18
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	84 17       	cp	r24, r20
     ed4:	95 07       	cpc	r25, r21
     ed6:	71 f7       	brne	.-36     	; 0xeb4 <simulate_opponent+0xe6>
     ed8:	48 5f       	subi	r20, 0xF8	; 248
     eda:	5f 4f       	sbci	r21, 0xFF	; 255
     edc:	48 34       	cpi	r20, 0x48	; 72
     ede:	51 05       	cpc	r21, r1
     ee0:	19 f4       	brne	.+6      	; 0xee8 <simulate_opponent+0x11a>
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <simulate_opponent+0x120>
     ee4:	48 e0       	ldi	r20, 0x08	; 8
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	ca 01       	movw	r24, r20
     eea:	08 97       	sbiw	r24, 0x08	; 8
     eec:	e3 cf       	rjmp	.-58     	; 0xeb4 <simulate_opponent+0xe6>
     eee:	21 e0       	ldi	r18, 0x01	; 1
     ef0:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
     ef4:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <vj3_max>
     ef8:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <vi3_max>
     efc:	79 db       	rcall	.-2318   	; 0x5f0 <checkmove_sim>
     efe:	1c de       	rcall	.-968    	; 0xb38 <algo_sim>
     f00:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <v_max>
     f04:	8c 17       	cp	r24, r28
     f06:	08 f5       	brcc	.+66     	; 0xf4a <simulate_opponent+0x17c>
     f08:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <vi3_max>
     f0c:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <vi_final>
     f10:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <vj3_max>
     f14:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <vj_final>
     f18:	18 c0       	rjmp	.+48     	; 0xf4a <simulate_opponent+0x17c>
     f1a:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     f1e:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     f22:	e8 0f       	add	r30, r24
     f24:	f9 1f       	adc	r31, r25
     f26:	a0 91 e3 00 	lds	r26, 0x00E3	; 0x8000e3 <MB>
     f2a:	b0 91 e4 00 	lds	r27, 0x00E4	; 0x8000e4 <MB+0x1>
     f2e:	a8 0f       	add	r26, r24
     f30:	b9 1f       	adc	r27, r25
     f32:	2c 91       	ld	r18, X
     f34:	20 83       	st	Z, r18
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	84 17       	cp	r24, r20
     f3a:	95 07       	cpc	r25, r21
     f3c:	71 f7       	brne	.-36     	; 0xf1a <simulate_opponent+0x14c>
     f3e:	48 5f       	subi	r20, 0xF8	; 248
     f40:	5f 4f       	sbci	r21, 0xFF	; 255
     f42:	48 34       	cpi	r20, 0x48	; 72
     f44:	51 05       	cpc	r21, r1
     f46:	19 f4       	brne	.+6      	; 0xf4e <simulate_opponent+0x180>
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <simulate_opponent+0x19a>
     f4a:	48 e0       	ldi	r20, 0x08	; 8
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	ca 01       	movw	r24, r20
     f50:	08 97       	sbiw	r24, 0x08	; 8
     f52:	e3 cf       	rjmp	.-58     	; 0xf1a <simulate_opponent+0x14c>
     f54:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <v2_max>
     f58:	81 11       	cpse	r24, r1
     f5a:	8c cf       	rjmp	.-232    	; 0xe74 <simulate_opponent+0xa6>
     f5c:	a6 cf       	rjmp	.-180    	; 0xeaa <simulate_opponent+0xdc>
     f5e:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <v3_max>
     f62:	81 11       	cpse	r24, r1
     f64:	bf cf       	rjmp	.-130    	; 0xee4 <simulate_opponent+0x116>
     f66:	f1 cf       	rjmp	.-30     	; 0xf4a <simulate_opponent+0x17c>
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <__vector_13>:
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <Transmit>:
     f80:	9c 01       	movw	r18, r24
     f82:	64 17       	cp	r22, r20
     f84:	50 f4       	brcc	.+20     	; 0xf9a <Transmit+0x1a>
     f86:	5d 9b       	sbis	0x0b, 5	; 11
     f88:	fe cf       	rjmp	.-4      	; 0xf86 <Transmit+0x6>
     f8a:	f9 01       	movw	r30, r18
     f8c:	e6 0f       	add	r30, r22
     f8e:	f1 1d       	adc	r31, r1
     f90:	90 81       	ld	r25, Z
     f92:	9c b9       	out	0x0c, r25	; 12
     f94:	6f 5f       	subi	r22, 0xFF	; 255
     f96:	46 13       	cpse	r20, r22
     f98:	f6 cf       	rjmp	.-20     	; 0xf86 <Transmit+0x6>
     f9a:	08 95       	ret

00000f9c <RST>:
     f9c:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__data_end>
     fa0:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <move_done>
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     faa:	c1 9a       	sbi	0x18, 1	; 24
     fac:	c2 9a       	sbi	0x18, 2	; 24
     fae:	c3 9a       	sbi	0x18, 3	; 24
     fb0:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <mt>
     fb4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
     fb8:	28 e0       	ldi	r18, 0x08	; 8
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	42 e0       	ldi	r20, 0x02	; 2
     fbe:	10 c0       	rjmp	.+32     	; 0xfe0 <RST+0x44>
     fc0:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     fc4:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     fc8:	e8 0f       	add	r30, r24
     fca:	f9 1f       	adc	r31, r25
     fcc:	40 83       	st	Z, r20
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	82 17       	cp	r24, r18
     fd2:	93 07       	cpc	r25, r19
     fd4:	a9 f7       	brne	.-22     	; 0xfc0 <RST+0x24>
     fd6:	28 5f       	subi	r18, 0xF8	; 248
     fd8:	3f 4f       	sbci	r19, 0xFF	; 255
     fda:	28 34       	cpi	r18, 0x48	; 72
     fdc:	31 05       	cpc	r19, r1
     fde:	19 f0       	breq	.+6      	; 0xfe6 <RST+0x4a>
     fe0:	c9 01       	movw	r24, r18
     fe2:	08 97       	sbiw	r24, 0x08	; 8
     fe4:	ed cf       	rjmp	.-38     	; 0xfc0 <RST+0x24>
     fe6:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
     fea:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	83 8f       	std	Z+27, r24	; 0x1b
     ff2:	14 8e       	std	Z+28, r1	; 0x1c
     ff4:	13 a2       	std	Z+35, r1	; 0x23
     ff6:	84 a3       	std	Z+36, r24	; 0x24
     ff8:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <enemy_pass>
     ffc:	1e bc       	out	0x2e, r1	; 46
     ffe:	84 e0       	ldi	r24, 0x04	; 4
    1000:	89 bf       	out	0x39, r24	; 57
    1002:	43 e0       	ldi	r20, 0x03	; 3
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	89 ea       	ldi	r24, 0xA9	; 169
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	ba df       	rcall	.-140    	; 0xf80 <Transmit>
    100c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
    1010:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
    1014:	08 95       	ret

00001016 <AnnounceRes>:


void AnnounceRes(uint8_t res)
{
	//after announcement, timer interrupts are disabled.
	TIMSK &= ~(1 << TOIE1) ;
    1016:	99 b7       	in	r25, 0x39	; 57
    1018:	9b 7f       	andi	r25, 0xFB	; 251
    101a:	99 bf       	out	0x39, r25	; 57
	if(res == 1)
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	51 f4       	brne	.+20     	; 0x1034 <AnnounceRes+0x1e>
	{
		Transmit("WN\r",0,strlen("WN\r"));
    1020:	43 e0       	ldi	r20, 0x03	; 3
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	82 eb       	ldi	r24, 0xB2	; 178
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	ab df       	rcall	.-170    	; 0xf80 <Transmit>
		PORTB ^= (1<<PORTB1);             //Toggle LED
    102a:	98 b3       	in	r25, 0x18	; 24
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	89 27       	eor	r24, r25
    1030:	88 bb       	out	0x18, r24	; 24
    1032:	15 c0       	rjmp	.+42     	; 0x105e <AnnounceRes+0x48>
	}
	else if(res == 0)
    1034:	81 11       	cpse	r24, r1
    1036:	0a c0       	rjmp	.+20     	; 0x104c <AnnounceRes+0x36>
	{
		Transmit("LS\r",0,strlen("LS\r"));
    1038:	43 e0       	ldi	r20, 0x03	; 3
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	86 eb       	ldi	r24, 0xB6	; 182
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	9f df       	rcall	.-194    	; 0xf80 <Transmit>
		PORTB ^= (1<<PORTB2);			//Toggle LED
    1042:	98 b3       	in	r25, 0x18	; 24
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	89 27       	eor	r24, r25
    1048:	88 bb       	out	0x18, r24	; 24
    104a:	09 c0       	rjmp	.+18     	; 0x105e <AnnounceRes+0x48>
	}
	else
	{
		Transmit("TE\r",0,strlen("TE\r"));
    104c:	43 e0       	ldi	r20, 0x03	; 3
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	8a eb       	ldi	r24, 0xBA	; 186
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	95 df       	rcall	.-214    	; 0xf80 <Transmit>
		PORTB ^= (1<<PORTB3);			//Toggle LED
    1056:	98 b3       	in	r25, 0x18	; 24
    1058:	88 e0       	ldi	r24, 0x08	; 8
    105a:	89 27       	eor	r24, r25
    105c:	88 bb       	out	0x18, r24	; 24
	}
	TCCR1B = 0x00;         //Clearing timer -- total reset
    105e:	1e bc       	out	0x2e, r1	; 46
	TIMSK = (1 << TOIE1) ; //Overflow interrupts -- disabled
    1060:	84 e0       	ldi	r24, 0x04	; 4
    1062:	89 bf       	out	0x39, r24	; 57
    1064:	08 95       	ret

00001066 <EndGame>:

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
    1066:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
    106a:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    106e:	bf 01       	movw	r22, r30
    1070:	60 5c       	subi	r22, 0xC0	; 192
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;
    1074:	40 e0       	ldi	r20, 0x00	; 0

/////////////////////////////////////////////////////////////////////////////////////// END GAME & ANNOUNCEMENT /////////////////////////////////////////////////////////////////////

//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	11 c0       	rjmp	.+34     	; 0x109c <EndGame+0x36>

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
		{
			if(M[i*8 + y] == 0)  // 0 == black , 1 == white, 2 == empty
    107a:	df 01       	movw	r26, r30
    107c:	80 81       	ld	r24, Z
    107e:	81 11       	cpse	r24, r1
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <EndGame+0x1e>
			b++;
    1082:	9f 5f       	subi	r25, 0xFF	; 255
			if(M[i*8 + y] == 1)
    1084:	8c 91       	ld	r24, X
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	09 f4       	brne	.+2      	; 0x108c <EndGame+0x26>
			w++;
    108a:	4f 5f       	subi	r20, 0xFF	; 255
    108c:	31 96       	adiw	r30, 0x01	; 1
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
	{
		for(uint8_t y = 0 ; y <= 7 ; y++)
    108e:	2e 17       	cp	r18, r30
    1090:	3f 07       	cpc	r19, r31
    1092:	99 f7       	brne	.-26     	; 0x107a <EndGame+0x14>
    1094:	f9 01       	movw	r30, r18
//EG instruction function, blacks and whites counting, and it will announce the winner
void EndGame(){
	uint8_t b=0;
	uint8_t w=0;

	for(uint8_t i = 0 ; i <= 7 ; i++)
    1096:	26 17       	cp	r18, r22
    1098:	37 07       	cpc	r19, r23
    109a:	21 f0       	breq	.+8      	; 0x10a4 <EndGame+0x3e>
    109c:	9f 01       	movw	r18, r30
    109e:	28 5f       	subi	r18, 0xF8	; 248
    10a0:	3f 4f       	sbci	r19, 0xFF	; 255
    10a2:	eb cf       	rjmp	.-42     	; 0x107a <EndGame+0x14>
			b++;
			if(M[i*8 + y] == 1)
			w++;
		}
	}
	if(b == w)
    10a4:	94 13       	cpse	r25, r20
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <EndGame+0x48>
	{
		AnnounceRes(2);	//TIE -LED3
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	b5 df       	rcall	.-150    	; 0x1016 <AnnounceRes>
    10ac:	14 c0       	rjmp	.+40     	; 0x10d6 <EndGame+0x70>

	}
	else if(b>w)
    10ae:	49 17       	cp	r20, r25
    10b0:	50 f4       	brcc	.+20     	; 0x10c6 <EndGame+0x60>
	{
		if(MyColor == 0) //black
    10b2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <MyColor>
    10b6:	81 11       	cpse	r24, r1
    10b8:	03 c0       	rjmp	.+6      	; 0x10c0 <EndGame+0x5a>
		AnnounceRes(1);//WIN - LED1
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	ac df       	rcall	.-168    	; 0x1016 <AnnounceRes>
    10be:	0b c0       	rjmp	.+22     	; 0x10d6 <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	a9 df       	rcall	.-174    	; 0x1016 <AnnounceRes>
    10c4:	08 c0       	rjmp	.+16     	; 0x10d6 <EndGame+0x70>
    10c6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <MyColor>
	}
	else
	{
		if(MyColor == 1) //white
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	11 f4       	brne	.+4      	; 0x10d2 <EndGame+0x6c>
		AnnounceRes(1);//WIN - LED1
    10ce:	a3 df       	rcall	.-186    	; 0x1016 <AnnounceRes>
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <EndGame+0x70>
		else
		AnnounceRes(0); //LOST -LED2
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	a0 df       	rcall	.-192    	; 0x1016 <AnnounceRes>
    10d6:	82 e0       	ldi	r24, 0x02	; 2
	}

	//after announcement wait for ok in while loop(set move_done = 1)
	myTurn = 2;
    10d8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    10dc:	08 95       	ret

000010de <__vector_8>:
    10de:	1f 92       	push	r1
}



 ISR (TIMER1_OVF_vect)    // Timer1 ISR
 {
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
	 //Every time we sub 1 from the count cycles(e.g. 6 sec, 
	 //we need to sub 1 from time_tmp 6 times so the counter will count up to 1 sec 6 times back to back until we let him send 'IT')
	 time_tmp--; 
    1100:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <time_tmp>
    1104:	81 50       	subi	r24, 0x01	; 1
    1106:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <time_tmp>
	 if(time_tmp==0){
    110a:	81 11       	cpse	r24, r1
    110c:	19 c0       	rjmp	.+50     	; 0x1140 <__vector_8+0x62>
		 time_tmp=Time;
    110e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Time>
    1112:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <time_tmp>
		 if(myTurn==1){		     					 
    1116:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	19 f4       	brne	.+6      	; 0x1124 <__vector_8+0x46>
			 myTurn =0;
    111e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
    1122:	0e c0       	rjmp	.+28     	; 0x1140 <__vector_8+0x62>
		 } 
		 else if(myTurn == 0){
    1124:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
    1128:	81 11       	cpse	r24, r1
    112a:	0a c0       	rjmp	.+20     	; 0x1140 <__vector_8+0x62>
			  Transmit("IT\r",0,strlen("IT\r"));
    112c:	43 e0       	ldi	r20, 0x03	; 3
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	8e eb       	ldi	r24, 0xBE	; 190
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	25 df       	rcall	.-438    	; 0xf80 <Transmit>
			  ITflag = 1;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <ITflag>
			  ILflag = 1;
    113c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>
		 }	 
	 }
	 
	TCNT1 = 65536-(10000000/1024);//3036;//x=number of seconds  //2^16 = 65536 - X(10,000,000/1024)
    1140:	8b ed       	ldi	r24, 0xDB	; 219
    1142:	99 ed       	ldi	r25, 0xD9	; 217
    1144:	9d bd       	out	0x2d, r25	; 45
    1146:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00; //Default - Cleared
    1148:	1f bc       	out	0x2f, r1	; 47
		 
 }
    114a:	ff 91       	pop	r31
    114c:	ef 91       	pop	r30
    114e:	bf 91       	pop	r27
    1150:	af 91       	pop	r26
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	7f 91       	pop	r23
    1158:	6f 91       	pop	r22
    115a:	5f 91       	pop	r21
    115c:	4f 91       	pop	r20
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

0000116c <init_leds>:

 //////////////////////////////////////////////// INITIALIZATION ///////////////////////////////////////////////////////////

 void init_leds()
 {
	DDRB |= (1<<DDB1);
    116c:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1<<DDB2);
    116e:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= (1<<DDB3);
    1170:	bb 9a       	sbi	0x17, 3	; 23
	PORTB |= (1<<PORTB1);
    1172:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= (1<<PORTB2);
    1174:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB3);
    1176:	c3 9a       	sbi	0x18, 3	; 24
    1178:	08 95       	ret

0000117a <init_timer>:
 }

void init_timer(){
	//cli();
	time_tmp=Time;
    117a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Time>
    117e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <time_tmp>
	 //////////Timer/Counter Initialization/////////
	 /* Timer starts from a specific value, 
		so we can take advantage of ISR
	 */
	//if the result is negative, we will need to two timers (or one timer used 2 times)
	TCNT1 = 65536-(10000000/1024);//3036;//x=number of seconds  //2^16 = 65536 - X(10,000,000/1024) 
    1182:	8b ed       	ldi	r24, 0xDB	; 219
    1184:	99 ed       	ldi	r25, 0xD9	; 217
    1186:	9d bd       	out	0x2d, r25	; 45
    1188:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00; //Default - Cleared
    118a:	1f bc       	out	0x2f, r1	; 47

	/*	The CLK/64 
	*/
	//TCCR1B &=  ~(1<<CS11);  
	
	TCCR1B |=  (1<<CS12);// |(1<<CS10);
    118c:	8e b5       	in	r24, 0x2e	; 46
    118e:	84 60       	ori	r24, 0x04	; 4
    1190:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |=  (1<<CS10);
    1192:	8e b5       	in	r24, 0x2e	; 46
    1194:	81 60       	ori	r24, 0x01	; 1
    1196:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	89 bf       	out	0x39, r24	; 57
    119c:	08 95       	ret

0000119e <Algo>:



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
    119e:	2f 92       	push	r2
    11a0:	3f 92       	push	r3
    11a2:	4f 92       	push	r4
    11a4:	5f 92       	push	r5
    11a6:	6f 92       	push	r6
    11a8:	7f 92       	push	r7
    11aa:	8f 92       	push	r8
    11ac:	9f 92       	push	r9
    11ae:	af 92       	push	r10
    11b0:	bf 92       	push	r11
    11b2:	cf 92       	push	r12
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	66 97       	sbiw	r28, 0x16	; 22
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
	uint8_t mi,my,i,j,u,z,ibar,ybar,skip;
	uint8_t istep,ystep;
	myTurn = 1;		//Important - collision with  init_timer
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
	
	v1_max = 0;
    11d8:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <v1_max>
	v2_max = 0;
    11dc:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <v2_max>
	v3_max = 0;
    11e0:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <v3_max>
    11e4:	21 e0       	ldi	r18, 0x01	; 1
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3c 8b       	std	Y+20, r19	; 0x14
    11ea:	2b 8b       	std	Y+19, r18	; 0x13
    11ec:	1e 8a       	std	Y+22, r1	; 0x16
    11ee:	1d 8a       	std	Y+21, r1	; 0x15


	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
    11f0:	1a 8a       	std	Y+18, r1	; 0x12
    11f2:	e7 c0       	rjmp	.+462    	; 0x13c2 <Algo+0x224>
	{
		for(my=0; my<=7; my++)
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
    11f4:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
    11f8:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    11fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    11fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    1200:	e6 0f       	add	r30, r22
    1202:	f7 1f       	adc	r31, r23
    1204:	90 81       	ld	r25, Z
    1206:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <MyColor>
    120a:	98 13       	cpse	r25, r24
    120c:	bc c0       	rjmp	.+376    	; 0x1386 <Algo+0x1e8>
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
    120e:	4a 88       	ldd	r4, Y+18	; 0x12
    1210:	4a 94       	dec	r4
    1212:	e4 2c       	mov	r14, r4
    1214:	f1 2c       	mov	r15, r1
    1216:	8b 89       	ldd	r24, Y+19	; 0x13
    1218:	9c 89       	ldd	r25, Y+20	; 0x14
    121a:	8e 15       	cp	r24, r14
    121c:	9f 05       	cpc	r25, r15
    121e:	0c f4       	brge	.+2      	; 0x1222 <Algo+0x84>
    1220:	b2 c0       	rjmp	.+356    	; 0x1386 <Algo+0x1e8>
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
    1222:	31 01       	movw	r6, r2
							
							//Setting up y barrier
							if(j > my)
							ybar = 7;
							else if(j == my)
							ybar = 10;
    1224:	39 8a       	std	Y+17, r3	; 0x11
    1226:	28 8a       	std	Y+16, r2	; 0x10
    1228:	04 2d       	mov	r16, r4
    122a:	5b 86       	std	Y+11, r5	; 0x0b
    122c:	aa 88       	ldd	r10, Y+18	; 0x12
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
    122e:	08 30       	cpi	r16, 0x08	; 8
    1230:	08 f0       	brcs	.+2      	; 0x1234 <Algo+0x96>
    1232:	9d c0       	rjmp	.+314    	; 0x136e <Algo+0x1d0>
						continue;
					for(j = my - 1; j<=(my+1); ++j)
    1234:	1b 85       	ldd	r17, Y+11	; 0x0b
    1236:	11 50       	subi	r17, 0x01	; 1
    1238:	81 2f       	mov	r24, r17
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	28 89       	ldd	r18, Y+16	; 0x10
    123e:	39 89       	ldd	r19, Y+17	; 0x11
    1240:	28 17       	cp	r18, r24
    1242:	39 07       	cpc	r19, r25
    1244:	0c f4       	brge	.+2      	; 0x1248 <Algo+0xaa>
    1246:	93 c0       	rjmp	.+294    	; 0x136e <Algo+0x1d0>
						if(j<0||j>7) //Matrix out of border protection 
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
    1248:	47 01       	movw	r8, r14
    124a:	88 0c       	add	r8, r8
    124c:	99 1c       	adc	r9, r9
    124e:	88 0c       	add	r8, r8
    1250:	99 1c       	adc	r9, r9
    1252:	88 0c       	add	r8, r8
    1254:	99 1c       	adc	r9, r9


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    1256:	40 2e       	mov	r4, r16
    1258:	51 2c       	mov	r5, r1
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
    125a:	b2 01       	movw	r22, r4
    125c:	66 0f       	add	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	66 0f       	add	r22, r22
    1262:	77 1f       	adc	r23, r23
    1264:	66 0f       	add	r22, r22
    1266:	77 1f       	adc	r23, r23
    1268:	7a 87       	std	Y+10, r23	; 0x0a
    126a:	69 87       	std	Y+9, r22	; 0x09
							ybar = 10;
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
    126c:	b0 2e       	mov	r11, r16
    126e:	ba 18       	sub	r11, r10


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    1270:	2b 2d       	mov	r18, r11
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	38 87       	std	Y+8, r19	; 0x08
    1276:	2f 83       	std	Y+7, r18	; 0x07
    1278:	3b 84       	ldd	r3, Y+11	; 0x0b
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
					{
						if(j<0||j>7) //Matrix out of border protection 
    127a:	18 30       	cpi	r17, 0x08	; 8
    127c:	08 f0       	brcs	.+2      	; 0x1280 <Algo+0xe2>
    127e:	70 c0       	rjmp	.+224    	; 0x1360 <Algo+0x1c2>
							continue;

						//our pawn has en enemy pawn adjacent to it,
						//so we will find the borders+direction we need to search
						if((M[i*8 + j] == !MyColor))		
    1280:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <M>
    1284:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <M+0x1>
    1288:	88 0d       	add	r24, r8
    128a:	99 1d       	adc	r25, r9
    128c:	fd 01       	movw	r30, r26
    128e:	e8 0f       	add	r30, r24
    1290:	f9 1f       	adc	r31, r25
    1292:	20 81       	ld	r18, Z
    1294:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	41 11       	cpse	r20, r1
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	28 17       	cp	r18, r24
    12a4:	39 07       	cpc	r19, r25
    12a6:	09 f0       	breq	.+2      	; 0x12aa <Algo+0x10c>
    12a8:	5b c0       	rjmp	.+182    	; 0x1360 <Algo+0x1c2>
						{

							//Setting up i barrier (board)
							if(i > mi)
    12aa:	a0 16       	cp	r10, r16
    12ac:	20 f0       	brcs	.+8      	; 0x12b6 <Algo+0x118>
							ibar = 7 ;
							else if(i == mi)
    12ae:	a0 16       	cp	r10, r16
    12b0:	21 f0       	breq	.+8      	; 0x12ba <Algo+0x11c>
							ibar = 10;   //big enough, so the other axis will break while below
							else
							ibar = 0;
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <Algo+0x11e>
						if((M[i*8 + j] == !MyColor))		
						{

							//Setting up i barrier (board)
							if(i > mi)
							ibar = 7 ;
    12b6:	87 e0       	ldi	r24, 0x07	; 7
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <Algo+0x11e>
							else if(i == mi)
							ibar = 10;   //big enough, so the other axis will break while below
    12ba:	8a e0       	ldi	r24, 0x0A	; 10
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > my)
    12bc:	31 16       	cp	r3, r17
    12be:	20 f0       	brcs	.+8      	; 0x12c8 <Algo+0x12a>
							ybar = 7;
							else if(j == my)
    12c0:	31 16       	cp	r3, r17
    12c2:	21 f0       	breq	.+8      	; 0x12cc <Algo+0x12e>
							ybar = 10;
							else
							ybar = 0;
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <Algo+0x130>
							else
							ibar = 0;
							
							//Setting up y barrier
							if(j > my)
							ybar = 7;
    12c8:	57 e0       	ldi	r21, 0x07	; 7
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <Algo+0x130>
							else if(j == my)
							ybar = 10;
    12cc:	5a e0       	ldi	r21, 0x0A	; 10
							else
							ybar = 0;

							//setting up steps, (for the loops)
							istep = i - mi;
							ystep = j - my;
    12ce:	91 2f       	mov	r25, r17
    12d0:	93 19       	sub	r25, r3


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    12d2:	cf 80       	ldd	r12, Y+7	; 0x07
    12d4:	d8 84       	ldd	r13, Y+8	; 0x08
    12d6:	c8 0e       	add	r12, r24
    12d8:	d1 1c       	adc	r13, r1
    12da:	4c 14       	cp	r4, r12
    12dc:	5d 04       	cpc	r5, r13
    12de:	09 f4       	brne	.+2      	; 0x12e2 <Algo+0x144>
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <Algo+0x1c2>
    12e2:	21 2f       	mov	r18, r17
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	e9 2e       	mov	r14, r25
    12e8:	f1 2c       	mov	r15, r1
    12ea:	e5 0e       	add	r14, r21
    12ec:	f1 1c       	adc	r15, r1
    12ee:	2e 15       	cp	r18, r14
    12f0:	3f 05       	cpc	r19, r15
    12f2:	b1 f1       	breq	.+108    	; 0x1360 <Algo+0x1c2>
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
    12f4:	69 85       	ldd	r22, Y+9	; 0x09
    12f6:	7a 85       	ldd	r23, Y+10	; 0x0a
    12f8:	26 0f       	add	r18, r22
    12fa:	37 1f       	adc	r19, r23
    12fc:	fd 01       	movw	r30, r26
    12fe:	e2 0f       	add	r30, r18
    1300:	f3 1f       	adc	r31, r19
    1302:	80 81       	ld	r24, Z
    1304:	48 17       	cp	r20, r24
    1306:	61 f1       	breq	.+88     	; 0x1360 <Algo+0x1c2>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
    1308:	80 81       	ld	r24, Z
    130a:	82 30       	cpi	r24, 0x02	; 2
    130c:	a1 f0       	breq	.+40     	; 0x1336 <Algo+0x198>
    130e:	61 2f       	mov	r22, r17
    1310:	80 2f       	mov	r24, r16
    1312:	1a c0       	rjmp	.+52     	; 0x1348 <Algo+0x1aa>
							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
							{
								if(M[u*8 + z] == MyColor ) //Break, because we need empty slot(to put our move in it)
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	22 0f       	add	r18, r18
    131a:	33 1f       	adc	r19, r19
    131c:	22 0f       	add	r18, r18
    131e:	33 1f       	adc	r19, r19
    1320:	e2 0f       	add	r30, r18
    1322:	f3 1f       	adc	r31, r19
    1324:	ea 0f       	add	r30, r26
    1326:	fb 1f       	adc	r31, r27
    1328:	20 81       	ld	r18, Z
    132a:	42 17       	cp	r20, r18
    132c:	c9 f0       	breq	.+50     	; 0x1360 <Algo+0x1c2>
								{
									break;
								}
								
								if( M[u*8 + z] == 2){			//We found a valid empty slot
    132e:	20 81       	ld	r18, Z
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	51 f4       	brne	.+20     	; 0x1348 <Algo+0x1aa>
    1334:	02 c0       	rjmp	.+4      	; 0x133a <Algo+0x19c>
    1336:	61 2f       	mov	r22, r17
    1338:	80 2f       	mov	r24, r16
									skip = 0;
									move_done=1;
    133a:	71 e0       	ldi	r23, 0x01	; 1
    133c:	70 93 db 00 	sts	0x00DB, r23	; 0x8000db <move_done>
									
									CheckMove(u, z, MyColor, 0); //Calculate and 'write'(if its the greatest till now) on board(in the specific slot we found) the result score of this possible move.
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	0e 94 49 00 	call	0x92	; 0x92 <CheckMove>

									break;
    1346:	0c c0       	rjmp	.+24     	; 0x1360 <Algo+0x1c2>
								}

								z+= ystep;
    1348:	69 0f       	add	r22, r25
								u+= istep;
    134a:	8b 0d       	add	r24, r11


							skip = 1;//reset

							//Now,its gonna find a valid path(which will get colorized accordingly)
							while((u != (ibar+istep))&&(z != (ybar+ystep))) 
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	2c 15       	cp	r18, r12
    1352:	3d 05       	cpc	r19, r13
    1354:	29 f0       	breq	.+10     	; 0x1360 <Algo+0x1c2>
    1356:	e6 2f       	mov	r30, r22
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	ee 15       	cp	r30, r14
    135c:	ff 05       	cpc	r31, r15
    135e:	d1 f6       	brne	.-76     	; 0x1314 <Algo+0x176>
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
				{
					if(i<0||i>7) //Matrix out of border protection 
						continue;
					for(j = my - 1; j<=(my+1); ++j)
    1360:	1f 5f       	subi	r17, 0xFF	; 255
    1362:	81 2f       	mov	r24, r17
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	68 16       	cp	r6, r24
    1368:	79 06       	cpc	r7, r25
    136a:	0c f0       	brlt	.+2      	; 0x136e <Algo+0x1d0>
    136c:	86 cf       	rjmp	.-244    	; 0x127a <Algo+0xdc>
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
    136e:	0f 5f       	subi	r16, 0xFF	; 255
    1370:	e0 2e       	mov	r14, r16
    1372:	f1 2c       	mov	r15, r1
    1374:	8e 85       	ldd	r24, Y+14	; 0x0e
    1376:	9f 85       	ldd	r25, Y+15	; 0x0f
    1378:	8e 15       	cp	r24, r14
    137a:	9f 05       	cpc	r25, r15
    137c:	0c f0       	brlt	.+2      	; 0x1380 <Algo+0x1e2>
    137e:	57 cf       	rjmp	.-338    	; 0x122e <Algo+0x90>
    1380:	28 88       	ldd	r2, Y+16	; 0x10
    1382:	39 88       	ldd	r3, Y+17	; 0x11
    1384:	5b 84       	ldd	r5, Y+11	; 0x0b
	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
	{
		for(my=0; my<=7; my++)
    1386:	53 94       	inc	r5
    1388:	2c 85       	ldd	r18, Y+12	; 0x0c
    138a:	3d 85       	ldd	r19, Y+13	; 0x0d
    138c:	2f 5f       	subi	r18, 0xFF	; 255
    138e:	3f 4f       	sbci	r19, 0xFF	; 255
    1390:	3d 87       	std	Y+13, r19	; 0x0d
    1392:	2c 87       	std	Y+12, r18	; 0x0c
    1394:	3f ef       	ldi	r19, 0xFF	; 255
    1396:	23 1a       	sub	r2, r19
    1398:	33 0a       	sbc	r3, r19
    139a:	68 e0       	ldi	r22, 0x08	; 8
    139c:	56 12       	cpse	r5, r22
    139e:	2a cf       	rjmp	.-428    	; 0x11f4 <Algo+0x56>


	char mymove[6];
	
	//The next 2 for loop are responsible to find(scanning whole board) our pawns  ----------------------------------------- U P D A T E : we will save the positions of our pawns
	for(mi=0;mi<=7;mi++)
    13a0:	7a 89       	ldd	r23, Y+18	; 0x12
    13a2:	7f 5f       	subi	r23, 0xFF	; 255
    13a4:	7a 8b       	std	Y+18, r23	; 0x12
    13a6:	8d 89       	ldd	r24, Y+21	; 0x15
    13a8:	9e 89       	ldd	r25, Y+22	; 0x16
    13aa:	08 96       	adiw	r24, 0x08	; 8
    13ac:	9e 8b       	std	Y+22, r25	; 0x16
    13ae:	8d 8b       	std	Y+21, r24	; 0x15
    13b0:	2b 89       	ldd	r18, Y+19	; 0x13
    13b2:	3c 89       	ldd	r19, Y+20	; 0x14
    13b4:	2f 5f       	subi	r18, 0xFF	; 255
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	3c 8b       	std	Y+20, r19	; 0x14
    13ba:	2b 8b       	std	Y+19, r18	; 0x13
    13bc:	80 34       	cpi	r24, 0x40	; 64
    13be:	91 05       	cpc	r25, r1
    13c0:	71 f0       	breq	.+28     	; 0x13de <Algo+0x240>



//////////////////////////////////////////////////////////////////////////// ALGORITHM   /////////////////////////////////////////////////////////////////////////////
void Algo(void)
{
    13c2:	6d 89       	ldd	r22, Y+21	; 0x15
    13c4:	7e 89       	ldd	r23, Y+22	; 0x16
    13c6:	7d 87       	std	Y+13, r23	; 0x0d
    13c8:	6c 87       	std	Y+12, r22	; 0x0c
    13ca:	22 24       	eor	r2, r2
    13cc:	23 94       	inc	r2
    13ce:	31 2c       	mov	r3, r1
    13d0:	81 2c       	mov	r8, r1
		{
			 // we found one of our pawns, so we start to check potential move 
			if(M[mi*8+my] == MyColor)  
			{					
				//The next 2 for loops find scanning the 8 slots/positions around the pawn we found.
				for(i = mi - 1; i<=(mi+1); ++i)
    13d2:	8b 89       	ldd	r24, Y+19	; 0x13
    13d4:	9c 89       	ldd	r25, Y+20	; 0x14
    13d6:	9f 87       	std	Y+15, r25	; 0x0f
    13d8:	8e 87       	std	Y+14, r24	; 0x0e
    13da:	58 2c       	mov	r5, r8
    13dc:	0b cf       	rjmp	.-490    	; 0x11f4 <Algo+0x56>
			}//if  (find our pawn)

		}//for my

	}//for mi
	if(move_done)
    13de:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
    13e2:	88 23       	and	r24, r24
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <Algo+0x24a>
    13e6:	49 c0       	rjmp	.+146    	; 0x147a <Algo+0x2dc>
	{

		simulate_opponent();
    13e8:	f2 dc       	rcall	.-1564   	; 0xdce <simulate_opponent>

		
		CheckMove(vi_final, vj_final, MyColor ,1); // Paint the best possible slot
    13ea:	21 e0       	ldi	r18, 0x01	; 1
    13ec:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <MyColor>
    13f0:	60 91 d7 00 	lds	r22, 0x00D7	; 0x8000d7 <vj_final>
    13f4:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <vi_final>
    13f8:	0e 94 49 00 	call	0x92	; 0x92 <CheckMove>
		mymove[0] = 'M';
    13fc:	8d e4       	ldi	r24, 0x4D	; 77
    13fe:	89 83       	std	Y+1, r24	; 0x01
		mymove[1] = 'M';
    1400:	8a 83       	std	Y+2, r24	; 0x02
		mymove[2] = '\x20';
    1402:	80 e2       	ldi	r24, 0x20	; 32
    1404:	8b 83       	std	Y+3, r24	; 0x03
		mymove[3] = vi_final+65;
    1406:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <vi_final>
    140a:	8f 5b       	subi	r24, 0xBF	; 191
    140c:	8c 83       	std	Y+4, r24	; 0x04
		mymove[4] = (vj_final+1)+'0';
    140e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <vj_final>
    1412:	8f 5c       	subi	r24, 0xCF	; 207
    1414:	8d 83       	std	Y+5, r24	; 0x05
		mymove[5] = '\r';
    1416:	8d e0       	ldi	r24, 0x0D	; 13
    1418:	8e 83       	std	Y+6, r24	; 0x06
		//Board();
		Transmit(mymove,0,6); //Transmit our Move
    141a:	46 e0       	ldi	r20, 0x06	; 6
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	ce 01       	movw	r24, r28
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	ae dd       	rcall	.-1188   	; 0xf80 <Transmit>
	
	//if move_done == 0 , that means that we cant find solution, we pass                           
	//while loop until 'OK' response
	while(1)
	{		// Check_Input does not support "OK" response so we check it here
		if(move_done >= 1)
    1424:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
    1428:	88 23       	and	r24, r24
    142a:	39 f1       	breq	.+78     	; 0x147a <Algo+0x2dc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    142c:	87 ea       	ldi	r24, 0xA7	; 167
    142e:	91 e6       	ldi	r25, 0x61	; 97
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <Algo+0x292>
    1434:	00 c0       	rjmp	.+0      	; 0x1436 <Algo+0x298>
    1436:	00 00       	nop
		{
			while(1)
			{
				_delay_ms(10);
				if((move_done == 2)||(myTurn==2))  //myturn==2 means that a RST was made. and we can break this loop.
    1438:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
    143c:	82 30       	cpi	r24, 0x02	; 2
    143e:	21 f0       	breq	.+8      	; 0x1448 <Algo+0x2aa>
    1440:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	91 f7       	brne	.-28     	; 0x142c <Algo+0x28e>
				{ // we received the response we were waiting'
					move_done = 0;
    1448:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <move_done>
					break;
				}
			}
			
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75) //Response ok for our MM
    144c:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <rxReadPos>
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	fc 01       	movw	r30, r24
    1454:	e9 51       	subi	r30, 0x19	; 25
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	20 81       	ld	r18, Z
    145a:	2f 34       	cpi	r18, 0x4F	; 79
    145c:	19 f7       	brne	.-58     	; 0x1424 <Algo+0x286>
    145e:	fc 01       	movw	r30, r24
    1460:	e9 51       	subi	r30, 0x19	; 25
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	81 81       	ldd	r24, Z+1	; 0x01
    1466:	8b 34       	cpi	r24, 0x4B	; 75
			{
				init_timer();
    1468:	e9 f6       	brne	.-70     	; 0x1424 <Algo+0x286>
    146a:	87 de       	rcall	.-754    	; 0x117a <init_timer>
				rxReadPos=rxWritePos;
    146c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
    1470:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
				myTurn = 0;
    1474:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
				break;
    1478:	0b c0       	rjmp	.+22     	; 0x1490 <Algo+0x2f2>
			}

		}
		else if(move_done == 0)//No solution was found
		{
			if (enemy_pass == 1) //Enemy sent pass too
    147a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <enemy_pass>
    147e:	81 30       	cpi	r24, 0x01	; 1
			{
				EndGame();		//Go count pawns and announce the winner
    1480:	11 f4       	brne	.+4      	; 0x1486 <Algo+0x2e8>
    1482:	f1 dd       	rcall	.-1054   	; 0x1066 <EndGame>
				break;
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <Algo+0x2f2>
			}
			else
			{
				Transmit("MP\r",0,strlen("MP\r")); //Transmit MYPASS
    1486:	43 e0       	ldi	r20, 0x03	; 3
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	82 ec       	ldi	r24, 0xC2	; 194
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	78 dd       	rcall	.-1296   	; 0xf80 <Transmit>
				break;
			}
		}
	}
	
}
    1490:	66 96       	adiw	r28, 0x16	; 22
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	df 90       	pop	r13
    14aa:	cf 90       	pop	r12
    14ac:	bf 90       	pop	r11
    14ae:	af 90       	pop	r10
    14b0:	9f 90       	pop	r9
    14b2:	8f 90       	pop	r8
    14b4:	7f 90       	pop	r7
    14b6:	6f 90       	pop	r6
    14b8:	5f 90       	pop	r5
    14ba:	4f 90       	pop	r4
    14bc:	3f 90       	pop	r3
    14be:	2f 90       	pop	r2
    14c0:	08 95       	ret

000014c2 <Check_Input>:



///////////////////////////////////////////////////////////////////////////////////////////   CHECK_INPUT    /////////////////////////////////////////////////////////////////////////////////////////

void Check_Input(char data[]){
    14c2:	9c 01       	movw	r18, r24
	
		if(data[rxReadPos]==CR[0]){
    14c4:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <rxReadPos>
    14c8:	40 91 d8 00 	lds	r20, 0x00D8	; 0x8000d8 <CR>
    14cc:	f9 01       	movw	r30, r18
    14ce:	e9 0f       	add	r30, r25
    14d0:	f1 1d       	adc	r31, r1
    14d2:	80 81       	ld	r24, Z
    14d4:	84 13       	cpse	r24, r20
    14d6:	03 c0       	rjmp	.+6      	; 0x14de <Check_Input+0x1c>
			rxReadPos++;
    14d8:	9f 5f       	subi	r25, 0xFF	; 255
    14da:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <rxReadPos>
		//flag = 0;
		//Space_num = 0;
		

		//ILFlag will help us spot "OK" or "PL" terminal answer
		if(ILflag == 1)
    14de:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	21 f4       	brne	.+8      	; 0x14ee <Check_Input+0x2c>
		{
			ILflag=2;  //answer spotted, you can proceed.
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>
			return;	
    14ec:	08 95       	ret
		}
		
		//it will help to spot "OK"  terminal answer
		if(move_done == 1)
    14ee:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <move_done>
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	21 f4       	brne	.+8      	; 0x14fe <Check_Input+0x3c>
		{	
			move_done=2; //answer spotted, you can proceed.
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <move_done>
			return;	
    14fc:	08 95       	ret
    14fe:	b9 01       	movw	r22, r18
	


		//process
		// command AT
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
    1500:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <rxReadPos>
    1504:	29 2f       	mov	r18, r25
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	fb 01       	movw	r30, r22
    150a:	e2 0f       	add	r30, r18
    150c:	f3 1f       	adc	r31, r19
    150e:	90 81       	ld	r25, Z
    1510:	91 34       	cpi	r25, 0x41	; 65
    1512:	99 f4       	brne	.+38     	; 0x153a <Check_Input+0x78>
    1514:	fb 01       	movw	r30, r22
    1516:	e2 0f       	add	r30, r18
    1518:	f3 1f       	adc	r31, r19
    151a:	91 81       	ldd	r25, Z+1	; 0x01
    151c:	94 35       	cpi	r25, 0x54	; 84
    151e:	09 f0       	breq	.+2      	; 0x1522 <Check_Input+0x60>
    1520:	0b c1       	rjmp	.+534    	; 0x1738 <Check_Input+0x276>
		{
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			if(data[rxReadPos+2] == CR[0]){
    1522:	fb 01       	movw	r30, r22
    1524:	e2 0f       	add	r30, r18
    1526:	f3 1f       	adc	r31, r19
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	48 13       	cpse	r20, r24
    152c:	05 c1       	rjmp	.+522    	; 0x1738 <Check_Input+0x276>
				Transmit("OK\r",0 , strlen("OK\r"));
    152e:	43 e0       	ldi	r20, 0x03	; 3
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	89 ea       	ldi	r24, 0xA9	; 169
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	24 dd       	rcall	.-1464   	; 0xf80 <Transmit>
    1538:	ff c0       	rjmp	.+510    	; 0x1738 <Check_Input+0x276>
				rxReadPos = rxWritePos;
			}

		}
		//Checking for RST<CR> command.
		else if((data[rxReadPos] == 82)&&(data[rxReadPos + 1] == 83)&&(data[rxReadPos + 2] == 84))		
    153a:	92 35       	cpi	r25, 0x52	; 82
    153c:	81 f4       	brne	.+32     	; 0x155e <Check_Input+0x9c>
    153e:	fb 01       	movw	r30, r22
    1540:	e2 0f       	add	r30, r18
    1542:	f3 1f       	adc	r31, r19
    1544:	91 81       	ldd	r25, Z+1	; 0x01
    1546:	93 35       	cpi	r25, 0x53	; 83
    1548:	09 f0       	breq	.+2      	; 0x154c <Check_Input+0x8a>
    154a:	f6 c0       	rjmp	.+492    	; 0x1738 <Check_Input+0x276>
    154c:	fb 01       	movw	r30, r22
    154e:	e2 0f       	add	r30, r18
    1550:	f3 1f       	adc	r31, r19
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	84 35       	cpi	r24, 0x54	; 84
    1556:	09 f0       	breq	.+2      	; 0x155a <Check_Input+0x98>
		{
			RST();
    1558:	ef c0       	rjmp	.+478    	; 0x1738 <Check_Input+0x276>
    155a:	20 dd       	rcall	.-1472   	; 0xf9c <RST>
    155c:	ed c0       	rjmp	.+474    	; 0x1738 <Check_Input+0x276>
		}	
		// SP<SPACE>{B/W}<CR>
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 80))
    155e:	93 35       	cpi	r25, 0x53	; 83
    1560:	d9 f4       	brne	.+54     	; 0x1598 <Check_Input+0xd6>
    1562:	fb 01       	movw	r30, r22
    1564:	e2 0f       	add	r30, r18
    1566:	f3 1f       	adc	r31, r19
    1568:	91 81       	ldd	r25, Z+1	; 0x01
    156a:	90 35       	cpi	r25, 0x50	; 80
    156c:	09 f0       	breq	.+2      	; 0x1570 <Check_Input+0xae>
    156e:	64 c0       	rjmp	.+200    	; 0x1638 <Check_Input+0x176>
		{
			//(int)c - 65;
			if(data[rxReadPos + 3] == 66)		//B
    1570:	fb 01       	movw	r30, r22
    1572:	e2 0f       	add	r30, r18
    1574:	f3 1f       	adc	r31, r19
    1576:	83 81       	ldd	r24, Z+3	; 0x03
    1578:	82 34       	cpi	r24, 0x42	; 66
    157a:	19 f4       	brne	.+6      	; 0x1582 <Check_Input+0xc0>
				MyColor = 0;					//Saving myColor
    157c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <MyColor>
    1580:	05 c0       	rjmp	.+10     	; 0x158c <Check_Input+0xca>
			else if(data[rxReadPos + 3] == 87)  //W
    1582:	87 35       	cpi	r24, 0x57	; 87
    1584:	19 f4       	brne	.+6      	; 0x158c <Check_Input+0xca>
				MyColor = 1;					//Saving myColor
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <MyColor>
			Transmit("OK\r",0 , strlen("OK\r"));
    158c:	43 e0       	ldi	r20, 0x03	; 3
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	89 ea       	ldi	r24, 0xA9	; 169
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	f5 dc       	rcall	.-1558   	; 0xf80 <Transmit>
			rxReadPos = rxWritePos;
    1596:	d0 c0       	rjmp	.+416    	; 0x1738 <Check_Input+0x276>
		}
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
    1598:	9e 34       	cpi	r25, 0x4E	; 78
    159a:	d1 f5       	brne	.+116    	; 0x1610 <Check_Input+0x14e>
    159c:	fb 01       	movw	r30, r22
    159e:	e2 0f       	add	r30, r18
    15a0:	f3 1f       	adc	r31, r19
    15a2:	81 81       	ldd	r24, Z+1	; 0x01
    15a4:	87 34       	cpi	r24, 0x47	; 71
    15a6:	09 f0       	breq	.+2      	; 0x15aa <Check_Input+0xe8>
    15a8:	c7 c0       	rjmp	.+398    	; 0x1738 <Check_Input+0x276>
		{
			//RST();
			move_done=0;
    15aa:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <move_done>
    15ae:	28 e0       	ldi	r18, 0x08	; 8
    15b0:	30 e0       	ldi	r19, 0x00	; 0
			for(uint8_t i = 0 ; i <= 7 ; i++)
			{
				for(uint8_t y = 0 ; y <= 7 ; y++)
				{
					M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
    15b2:	42 e0       	ldi	r20, 0x02	; 2
    15b4:	10 c0       	rjmp	.+32     	; 0x15d6 <Check_Input+0x114>
    15b6:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
    15ba:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    15be:	e8 0f       	add	r30, r24
    15c0:	f9 1f       	adc	r31, r25
    15c2:	40 83       	st	Z, r20
    15c4:	01 96       	adiw	r24, 0x01	; 1
		{
			//RST();
			move_done=0;
			for(uint8_t i = 0 ; i <= 7 ; i++)
			{
				for(uint8_t y = 0 ; y <= 7 ; y++)
    15c6:	82 17       	cp	r24, r18
    15c8:	93 07       	cpc	r25, r19
    15ca:	a9 f7       	brne	.-22     	; 0x15b6 <Check_Input+0xf4>
    15cc:	28 5f       	subi	r18, 0xF8	; 248
    15ce:	3f 4f       	sbci	r19, 0xFF	; 255
		    //NG  ---- NEW GAME ------
		else if((data[rxReadPos] == 78)&&(data[rxReadPos + 1] == 71))
		{
			//RST();
			move_done=0;
			for(uint8_t i = 0 ; i <= 7 ; i++)
    15d0:	28 34       	cpi	r18, 0x48	; 72
    15d2:	31 05       	cpc	r19, r1
    15d4:	19 f0       	breq	.+6      	; 0x15dc <Check_Input+0x11a>
    15d6:	c9 01       	movw	r24, r18
    15d8:	08 97       	sbiw	r24, 0x08	; 8
    15da:	ed cf       	rjmp	.-38     	; 0x15b6 <Check_Input+0xf4>
				{
					M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
				}
			}
			//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
			M[3*8+3] = 1 ;
    15dc:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
    15e0:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	83 8f       	std	Z+27, r24	; 0x1b
			M[3*8+4] = 0 ;
    15e8:	14 8e       	std	Z+28, r1	; 0x1c
			M[4*8+3] = 0 ;
    15ea:	13 a2       	std	Z+35, r1	; 0x23
			M[4*8+4] = 1 ;
    15ec:	84 a3       	std	Z+36, r24	; 0x24
			if(MyColor == 0)// BLACK
    15ee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <MyColor>
    15f2:	81 11       	cpse	r24, r1
    15f4:	09 c0       	rjmp	.+18     	; 0x1608 <Check_Input+0x146>
			{
				myTurn=1;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
				Transmit("OK\r",0 , strlen("OK\r"));
    15fc:	43 e0       	ldi	r20, 0x03	; 3
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	89 ea       	ldi	r24, 0xA9	; 169
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	bd dc       	rcall	.-1670   	; 0xf80 <Transmit>
			}
			else           //WHITE
			{
				RST();  //FIXING bug with whites(rst contains OK Transmit)
    1606:	98 c0       	rjmp	.+304    	; 0x1738 <Check_Input+0x276>
    1608:	c9 dc       	rcall	.-1646   	; 0xf9c <RST>
				myTurn=0;
    160a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			}
			
			//init_timer();
			//Transmit("OK\r",0 , strlen("OK\r"));           This is the 2nd OK, not important, RST contains OK transmit
			rxReadPos = rxWritePos;
    160e:	94 c0       	rjmp	.+296    	; 0x1738 <Check_Input+0x276>
		}
		        //EG<CR>
		else if((data[rxReadPos] == 69)&&(data[rxReadPos + 1] == 71))
    1610:	95 34       	cpi	r25, 0x45	; 69
    1612:	41 f5       	brne	.+80     	; 0x1664 <Check_Input+0x1a2>
    1614:	fb 01       	movw	r30, r22
    1616:	e2 0f       	add	r30, r18
    1618:	f3 1f       	adc	r31, r19
    161a:	81 81       	ldd	r24, Z+1	; 0x01
    161c:	87 34       	cpi	r24, 0x47	; 71
    161e:	09 f0       	breq	.+2      	; 0x1622 <Check_Input+0x160>
		{
			//EndGameFlag = 1; // check this flag during waiting/calculating loop
			Transmit("OK\r",0 , strlen("OK\r"));
    1620:	8b c0       	rjmp	.+278    	; 0x1738 <Check_Input+0x276>
    1622:	43 e0       	ldi	r20, 0x03	; 3
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	89 ea       	ldi	r24, 0xA9	; 169
    1628:	90 e0       	ldi	r25, 0x00	; 0
			rxReadPos = rxWritePos;
    162a:	aa dc       	rcall	.-1708   	; 0xf80 <Transmit>
    162c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
    1630:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
			EndGame();
    1634:	18 dd       	rcall	.-1488   	; 0x1066 <EndGame>
    1636:	80 c0       	rjmp	.+256    	; 0x1738 <Check_Input+0x276>
		}
			 //ST<CR>
        else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 84))
    1638:	fb 01       	movw	r30, r22
    163a:	e2 0f       	add	r30, r18
    163c:	f3 1f       	adc	r31, r19
    163e:	81 81       	ldd	r24, Z+1	; 0x01
    1640:	84 35       	cpi	r24, 0x54	; 84
    1642:	09 f0       	breq	.+2      	; 0x1646 <Check_Input+0x184>
    1644:	79 c0       	rjmp	.+242    	; 0x1738 <Check_Input+0x276>
        {
			Time = data[rxReadPos+3] - '0';    //String to Int
    1646:	fb 01       	movw	r30, r22
    1648:	e2 0f       	add	r30, r18
    164a:	f3 1f       	adc	r31, r19
    164c:	83 81       	ldd	r24, Z+3	; 0x03
    164e:	80 53       	subi	r24, 0x30	; 48
    1650:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <Time>
			time_tmp=Time;
    1654:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <time_tmp>
			Transmit("OK\r",0 , strlen("OK\r"));
    1658:	43 e0       	ldi	r20, 0x03	; 3
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	89 ea       	ldi	r24, 0xA9	; 169
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	8f dc       	rcall	.-1762   	; 0xf80 <Transmit>
			rxReadPos = rxWritePos;
    1662:	6a c0       	rjmp	.+212    	; 0x1738 <Check_Input+0x276>
        }
			//MV<SP>{[A-H],[1-8]}<CR>
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 86))
    1664:	9d 34       	cpi	r25, 0x4D	; 77
    1666:	09 f0       	breq	.+2      	; 0x166a <Check_Input+0x1a8>
    1668:	42 c0       	rjmp	.+132    	; 0x16ee <Check_Input+0x22c>
    166a:	fb 01       	movw	r30, r22
    166c:	e2 0f       	add	r30, r18
    166e:	f3 1f       	adc	r31, r19
    1670:	81 81       	ldd	r24, Z+1	; 0x01
    1672:	86 35       	cpi	r24, 0x56	; 86
    1674:	09 f0       	breq	.+2      	; 0x1678 <Check_Input+0x1b6>
    1676:	60 c0       	rjmp	.+192    	; 0x1738 <Check_Input+0x276>
		{
				if((data[rxReadPos+3] >= 65)&&(data[rxReadPos+3] <= 72)&&(data[rxReadPos+4] >= 49)&&(data[rxReadPos+4] <= 56))  // Checking input
    1678:	f9 01       	movw	r30, r18
    167a:	33 96       	adiw	r30, 0x03	; 3
    167c:	e6 0f       	add	r30, r22
    167e:	f7 1f       	adc	r31, r23
    1680:	80 81       	ld	r24, Z
    1682:	81 54       	subi	r24, 0x41	; 65
    1684:	88 30       	cpi	r24, 0x08	; 8
    1686:	08 f0       	brcs	.+2      	; 0x168a <Check_Input+0x1c8>
    1688:	57 c0       	rjmp	.+174    	; 0x1738 <Check_Input+0x276>
    168a:	2c 5f       	subi	r18, 0xFC	; 252
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	db 01       	movw	r26, r22
    1690:	a2 0f       	add	r26, r18
    1692:	b3 1f       	adc	r27, r19
    1694:	8c 91       	ld	r24, X
    1696:	81 53       	subi	r24, 0x31	; 49
    1698:	88 30       	cpi	r24, 0x08	; 8
    169a:	08 f0       	brcs	.+2      	; 0x169e <Check_Input+0x1dc>
    169c:	4d c0       	rjmp	.+154    	; 0x1738 <Check_Input+0x276>
				{
					enemy_pass = 0;
    169e:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <enemy_pass>
					uint8_t moveok = CheckMove(((int)data[rxReadPos+3] - 65),((data[rxReadPos+4] - '0') - 1), !MyColor, 1 );  //Check opponents move.
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <MyColor>
    16a8:	81 11       	cpse	r24, r1
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	6c 91       	ld	r22, X
    16ae:	61 53       	subi	r22, 0x31	; 49
    16b0:	80 81       	ld	r24, Z
    16b2:	21 e0       	ldi	r18, 0x01	; 1
    16b4:	81 54       	subi	r24, 0x41	; 65
    16b6:	0e 94 49 00 	call	0x92	; 0x92 <CheckMove>
					//If opponent's move is legal, send ok and reset timer, else 
					//send IL and wait for PC response, if response OK --> I win else(PL) --> I LOSE
					if(moveok == 1)		
    16ba:	81 30       	cpi	r24, 0x01	; 1
					{
						// Saving opponent's move in my local game board
						//M[(((int)data[rxReadPos+3] - 65)*8) + (data[rxReadPos+4] - '0')] = !MyColor;  // Saving opponent's move in my local game board
						Transmit("OK\r",0 , strlen("OK\r"));
    16bc:	51 f4       	brne	.+20     	; 0x16d2 <Check_Input+0x210>
    16be:	43 e0       	ldi	r20, 0x03	; 3
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	89 ea       	ldi	r24, 0xA9	; 169
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	5c dc       	rcall	.-1864   	; 0xf80 <Transmit>
						init_timer();
    16c8:	58 dd       	rcall	.-1360   	; 0x117a <init_timer>
						myTurn=1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    16d0:	33 c0       	rjmp	.+102    	; 0x1738 <Check_Input+0x276>
					}
					else{
						Transmit("IL\r",0 , strlen("IL\r"));
    16d2:	43 e0       	ldi	r20, 0x03	; 3
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	86 ec       	ldi	r24, 0xC6	; 198
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	52 dc       	rcall	.-1884   	; 0xf80 <Transmit>
    16dc:	81 e0       	ldi	r24, 0x01	; 1
						ILflag =  1;							//Waiting mode for PC's response
    16de:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>
    16e2:	82 e0       	ldi	r24, 0x02	; 2
						myTurn=2;
    16e4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    16e8:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <mt>
						mt=0;
    16ec:	25 c0       	rjmp	.+74     	; 0x1738 <Check_Input+0x276>
    16ee:	90 35       	cpi	r25, 0x50	; 80
						
				} 	
		}

		//PASS
		else if ((data[rxReadPos] == 80)&&(data[rxReadPos + 1] == 83))
    16f0:	89 f4       	brne	.+34     	; 0x1714 <Check_Input+0x252>
    16f2:	fb 01       	movw	r30, r22
    16f4:	e2 0f       	add	r30, r18
    16f6:	f3 1f       	adc	r31, r19
    16f8:	81 81       	ldd	r24, Z+1	; 0x01
    16fa:	83 35       	cpi	r24, 0x53	; 83
    16fc:	e9 f4       	brne	.+58     	; 0x1738 <Check_Input+0x276>
		{
			myTurn=1;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			//This flag will help us end game in case we pass after opponent's pass
			enemy_pass = 1;   
    1704:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <enemy_pass>
			Transmit("OK\r",0,strlen("OK\r"));
    1708:	43 e0       	ldi	r20, 0x03	; 3
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	89 ea       	ldi	r24, 0xA9	; 169
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	37 dc       	rcall	.-1938   	; 0xf80 <Transmit>
    1712:	12 c0       	rjmp	.+36     	; 0x1738 <Check_Input+0x276>
		}
		//WN

		else if((data[rxReadPos] == 87)&&(data[rxReadPos + 1] == 78)){
    1714:	97 35       	cpi	r25, 0x57	; 87
    1716:	81 f4       	brne	.+32     	; 0x1738 <Check_Input+0x276>
    1718:	fb 01       	movw	r30, r22
    171a:	e2 0f       	add	r30, r18
    171c:	f3 1f       	adc	r31, r19
    171e:	81 81       	ldd	r24, Z+1	; 0x01
    1720:	8e 34       	cpi	r24, 0x4E	; 78
			AnnounceRes(1);  //announce i win with led1
    1722:	51 f4       	brne	.+20     	; 0x1738 <Check_Input+0x276>
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	77 dc       	rcall	.-1810   	; 0x1016 <AnnounceRes>
			myTurn=2;			
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
			Transmit("OK\r",0,strlen("OK\r"));
    172e:	43 e0       	ldi	r20, 0x03	; 3
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	89 ea       	ldi	r24, 0xA9	; 169
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	24 dc       	rcall	.-1976   	; 0xf80 <Transmit>
    1738:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
		}
		else
			NULL;
	rxReadPos=rxWritePos;		
	rxReadPos++;		//Ready for the next command (directs to the next letter, the one after <CR>) 
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
    1742:	08 95       	ret

00001744 <__vector_11>:
    1744:	1f 92       	push	r1

//////////////////////////////////////////////////////////////////////////////////////////



ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
    1746:	0f 92       	push	r0
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	0f 92       	push	r0
    174c:	11 24       	eor	r1, r1
    174e:	2f 93       	push	r18
    1750:	3f 93       	push	r19
    1752:	4f 93       	push	r20
    1754:	5f 93       	push	r21
    1756:	6f 93       	push	r22
    1758:	7f 93       	push	r23
    175a:	8f 93       	push	r24
    175c:	9f 93       	push	r25
    175e:	af 93       	push	r26
    1760:	bf 93       	push	r27
    1762:	ef 93       	push	r30
    1764:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
    1766:	8c b1       	in	r24, 0x0c	; 12
    1768:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <rxWritePos>
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	e9 51       	subi	r30, 0x19	; 25
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
    1774:	5d 9b       	sbis	0x0b, 5	; 11
    1776:	fe cf       	rjmp	.-4      	; 0x1774 <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
    1778:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
    177a:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <rxWritePos>
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	e9 51       	subi	r30, 0x19	; 25
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	90 81       	ld	r25, Z
    1786:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <CR>
    178a:	98 13       	cpse	r25, r24
    178c:	03 c0       	rjmp	.+6      	; 0x1794 <__vector_11+0x50>
		Check_Input(myrxbuffer);
    178e:	87 ee       	ldi	r24, 0xE7	; 231
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	97 de       	rcall	.-722    	; 0x14c2 <Check_Input>


	rxWritePos++;
    1794:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
    1798:	8f 5f       	subi	r24, 0xFF	; 255
    179a:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <rxWritePos>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
    179e:	ff 91       	pop	r31
    17a0:	ef 91       	pop	r30
    17a2:	bf 91       	pop	r27
    17a4:	af 91       	pop	r26
    17a6:	9f 91       	pop	r25
    17a8:	8f 91       	pop	r24
    17aa:	7f 91       	pop	r23
    17ac:	6f 91       	pop	r22
    17ae:	5f 91       	pop	r21
    17b0:	4f 91       	pop	r20
    17b2:	3f 91       	pop	r19
    17b4:	2f 91       	pop	r18
    17b6:	0f 90       	pop	r0
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	0f 90       	pop	r0
    17bc:	1f 90       	pop	r1
    17be:	18 95       	reti

000017c0 <init_serial>:
}


void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
    17c0:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
    17c2:	80 e4       	ldi	r24, 0x40	; 64
    17c4:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
    17c6:	80 b5       	in	r24, 0x20	; 32
    17c8:	8f 7e       	andi	r24, 0xEF	; 239
    17ca:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
    17cc:	80 b5       	in	r24, 0x20	; 32
    17ce:	8f 7d       	andi	r24, 0xDF	; 223
    17d0:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
    17d2:	80 b5       	in	r24, 0x20	; 32
    17d4:	87 7f       	andi	r24, 0xF7	; 247
    17d6:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
    17d8:	86 e8       	ldi	r24, 0x86	; 134
    17da:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
    17dc:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
    17de:	8a b1       	in	r24, 0x0a	; 10
    17e0:	88 61       	ori	r24, 0x18	; 24
    17e2:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
    17e4:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
    17e6:	57 9a       	sbi	0x0a, 7	; 10
    17e8:	08 95       	ret

000017ea <main>:




int main (void)
{
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <main+0x6>
    17f0:	1f 92       	push	r1
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
	board_init();
    17f6:	0e 94 48 00 	call	0x90	; 0x90 <board_init>
	init_serial();
    17fa:	e2 df       	rcall	.-60     	; 0x17c0 <init_serial>
	init_leds();
    17fc:	b7 dc       	rcall	.-1682   	; 0x116c <init_leds>
    17fe:	8d e0       	ldi	r24, 0x0D	; 13
	// delimiter carriage return
	strcpy(CR,"\xD");
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <enemy_pass>
    1806:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <CR>
    180a:	c1 9a       	sbi	0x18, 1	; 24

	//Turning off leds(atmega16)
	PORTB |= (1<<PORTB1); 
    180c:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= (1<<PORTB2);
    180e:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= (1<<PORTB3);
    1810:	80 e4       	ldi	r24, 0x40	; 64
		

	//Game board initialization
	M= (uint8_t *)malloc(sizeof(uint8_t)*64);
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	b9 d0       	rcall	.+370    	; 0x1988 <malloc>
    1816:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <M+0x1>
    181a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <M>
    181e:	80 e4       	ldi	r24, 0x40	; 64
	MB = (uint8_t *)malloc(sizeof(uint8_t)*64);
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	b2 d0       	rcall	.+356    	; 0x1988 <malloc>
    1824:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <MB+0x1>
    1828:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <MB>
    182c:	1a 82       	std	Y+2, r1	; 0x02
    182e:	19 82       	std	Y+1, r1	; 0x01

	volatile int i=0;
    1830:	1b 82       	std	Y+3, r1	; 0x03
    1832:	1a 82       	std	Y+2, r1	; 0x02
	/////////////////////////////////TASK MANAGER - RAM USAGE////////////////////////////////
	//%empty
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
    1834:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0 ; i <= 7 ; i++)
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	08 97       	sbiw	r24, 0x08	; 8
    183c:	34 f5       	brge	.+76     	; 0x188a <main+0xa0>
    183e:	22 e0       	ldi	r18, 0x02	; 2
    1840:	1b 82       	std	Y+3, r1	; 0x03
	{
		for(y = 0 ; y <= 7 ; y++)
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
    1844:	88 30       	cpi	r24, 0x08	; 8
    1846:	c0 f4       	brcc	.+48     	; 0x1878 <main+0x8e>
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
    184c:	3b 81       	ldd	r19, Y+3	; 0x03
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	83 0f       	add	r24, r19
    185c:	91 1d       	adc	r25, r1
    185e:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
    1862:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    1866:	e8 0f       	add	r30, r24
    1868:	f9 1f       	adc	r31, r25
    186a:	20 83       	st	Z, r18
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	8f 5f       	subi	r24, 0xFF	; 255
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
	{
		for(y = 0 ; y <= 7 ; y++)
    1870:	8b 83       	std	Y+3, r24	; 0x03
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	88 30       	cpi	r24, 0x08	; 8
    1876:	40 f3       	brcs	.-48     	; 0x1848 <main+0x5e>
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	9a 81       	ldd	r25, Y+2	; 0x02
	/////////////////////////////////TASK MANAGER - RAM USAGE////////////////////////////////
	//%empty
	///////////////////////////////////////////////////////////////////////////

	volatile uint8_t y = 0 ;
	for(i = 0 ; i <= 7 ; i++)
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	08 97       	sbiw	r24, 0x08	; 8
    1888:	dc f2       	brlt	.-74     	; 0x1840 <main+0x56>
    188a:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <M>
		{
			M[8*i + y] = (uint8_t)2 ; // 0 == black , 1 == white, 2 == empty
		}
	}
	//[ x , y ] ? [ X*8 + Y ](AVR), [ NUM ](AVR) ? [ (NUM)div8 , (NUM)mod8 ]
	M[3*8+3] = 1 ;
    188e:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <M+0x1>
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	83 8f       	std	Z+27, r24	; 0x1b
    1896:	14 8e       	std	Z+28, r1	; 0x1c
    1898:	13 a2       	std	Z+35, r1	; 0x23
	M[3*8+4] = 0 ;
    189a:	84 a3       	std	Z+36, r24	; 0x24
	M[4*8+3] = 0 ;
    189c:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <rxReadPos>

	/////////////////////////////////////////////////////////////////////////////
	

	//buffer pointers init
	rxReadPos=0;
    18a0:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <rxWritePos>
	rxWritePos=0;
    18a4:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <ITflag>
	//flag Initialization 
	ITflag = 0;
    18a8:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__data_end>
	ILflag = 0;
    18ac:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <move_done>
	move_done = 0;
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <myTurn>
	myTurn = 2;
    18b6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <MyColor>
	MyColor = 1;
    18ba:	78 94       	sei
    18bc:	12 e0       	ldi	r17, 0x02	; 2
	

	sei();
    18be:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
	
	while(1){


		//Waiting for PC response - (ILLIGAL request)
		if(ILflag >= 1)
    18c2:	88 23       	and	r24, r24
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <main+0xde>
    18c6:	45 c0       	rjmp	.+138    	; 0x1952 <main+0x168>
    18c8:	87 ea       	ldi	r24, 0xA7	; 167
    18ca:	91 e6       	ldi	r25, 0x61	; 97
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <main+0xe2>
    18d0:	00 c0       	rjmp	.+0      	; 0x18d2 <main+0xe8>
    18d2:	00 00       	nop
    18d4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
		{
			//Transmit("Waiting OK for announcement\r",0,"Waiting OK for announcement\r");
			_delay_ms(10);
			while(1){		
				if(ILflag == 2){ // we received the response we were waiting
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	e1 f7       	brne	.-8      	; 0x18d4 <main+0xea>
    18dc:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__data_end>
					ILflag = 0;
    18e0:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <rxReadPos>
					break;
				}
			}
			if(myrxbuffer[rxReadPos] == 79 && myrxbuffer[rxReadPos+1] == 75){ // "ok"
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	fc 01       	movw	r30, r24
    18e8:	e9 51       	subi	r30, 0x19	; 25
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	20 81       	ld	r18, Z
    18ee:	2f 34       	cpi	r18, 0x4F	; 79
    18f0:	71 f4       	brne	.+28     	; 0x190e <main+0x124>
    18f2:	fc 01       	movw	r30, r24
    18f4:	e9 51       	subi	r30, 0x19	; 25
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	81 81       	ldd	r24, Z+1	; 0x01
    18fa:	8b 34       	cpi	r24, 0x4B	; 75
    18fc:	31 f5       	brne	.+76     	; 0x194a <main+0x160>
    18fe:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
			   rxReadPos=rxWritePos;
    1902:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
    1906:	81 e0       	ldi	r24, 0x01	; 1
				AnnounceRes(1); //WIN - LED1
    1908:	86 db       	rcall	.-2292   	; 0x1016 <AnnounceRes>
    190a:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
				myTurn=2;
    190e:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <rxReadPos>
				
			
			}//future update : "else ILflag=1;" , wrong input avoidance

			if(myrxbuffer[rxReadPos] == 80 && myrxbuffer[rxReadPos+1] == 76){ //"PL"
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	fc 01       	movw	r30, r24
    1916:	e9 51       	subi	r30, 0x19	; 25
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	20 81       	ld	r18, Z
    191c:	20 35       	cpi	r18, 0x50	; 80
    191e:	a9 f4       	brne	.+42     	; 0x194a <main+0x160>
    1920:	fc 01       	movw	r30, r24
    1922:	e9 51       	subi	r30, 0x19	; 25
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	81 81       	ldd	r24, Z+1	; 0x01
    1928:	8c 34       	cpi	r24, 0x4C	; 76
    192a:	79 f4       	brne	.+30     	; 0x194a <main+0x160>
    192c:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <ITflag>
				if(ITflag==1)
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	21 f4       	brne	.+8      	; 0x193c <main+0x152>
    1934:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <ITflag>
				{
					ITflag = 0;
    1938:	20 dc       	rcall	.-1984   	; 0x117a <init_timer>
					init_timer();
    193a:	07 c0       	rjmp	.+14     	; 0x194a <main+0x160>
    193c:	43 e0       	ldi	r20, 0x03	; 3
					
				}
				else
				{
					Transmit("QT\r",0 , strlen("QT\r"));
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	8a ec       	ldi	r24, 0xCA	; 202
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	1d db       	rcall	.-2502   	; 0xf80 <Transmit>
    1946:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <myTurn>
					myTurn=2;
    194a:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rxWritePos>
				}						
					
			}	//future update : "else ILflag=1;" , wrong input avoidance		

			rxReadPos=rxWritePos;
    194e:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rxReadPos>
    1952:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
		
		
		if((myTurn == 0)&&(mt == 0)){
    1956:	81 11       	cpse	r24, r1
    1958:	0a c0       	rjmp	.+20     	; 0x196e <main+0x184>
    195a:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <mt>
    195e:	81 11       	cpse	r24, r1
    1960:	06 c0       	rjmp	.+12     	; 0x196e <main+0x184>
    1962:	81 e0       	ldi	r24, 0x01	; 1
			//Possible speculation algo
			mt = 1;
    1964:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <mt>
    1968:	08 dc       	rcall	.-2032   	; 0x117a <init_timer>
			init_timer();
    196a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <myTurn>
			myTurn = 0;
    196e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <myTurn>
		}
			
		
		if(myTurn==1){ //When its avr's turn
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	09 f0       	breq	.+2      	; 0x1978 <main+0x18e>
    1976:	a3 cf       	rjmp	.-186    	; 0x18be <main+0xd4>
			mt = 0; //reset flag for HIS turn			
    1978:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <mt>
			init_timer(); //reset timer
    197c:	fe db       	rcall	.-2052   	; 0x117a <init_timer>
    197e:	81 e0       	ldi	r24, 0x01	; 1
			myTurn = 1;  //Important - collision with  init_timer
    1980:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <myTurn>
    1984:	0c dc       	rcall	.-2024   	; 0x119e <Algo>
			Algo();		//The actual algorithm
    1986:	9b cf       	rjmp	.-202    	; 0x18be <main+0xd4>

00001988 <malloc>:
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	82 30       	cpi	r24, 0x02	; 2
    1992:	91 05       	cpc	r25, r1
    1994:	10 f4       	brcc	.+4      	; 0x199a <malloc+0x12>
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <__flp>
    199e:	f0 91 ee 01 	lds	r31, 0x01EE	; 0x8001ee <__flp+0x1>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	a0 e0       	ldi	r26, 0x00	; 0
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	30 97       	sbiw	r30, 0x00	; 0
    19ac:	19 f1       	breq	.+70     	; 0x19f4 <malloc+0x6c>
    19ae:	40 81       	ld	r20, Z
    19b0:	51 81       	ldd	r21, Z+1	; 0x01
    19b2:	02 81       	ldd	r16, Z+2	; 0x02
    19b4:	13 81       	ldd	r17, Z+3	; 0x03
    19b6:	48 17       	cp	r20, r24
    19b8:	59 07       	cpc	r21, r25
    19ba:	c8 f0       	brcs	.+50     	; 0x19ee <malloc+0x66>
    19bc:	84 17       	cp	r24, r20
    19be:	95 07       	cpc	r25, r21
    19c0:	69 f4       	brne	.+26     	; 0x19dc <malloc+0x54>
    19c2:	10 97       	sbiw	r26, 0x00	; 0
    19c4:	31 f0       	breq	.+12     	; 0x19d2 <malloc+0x4a>
    19c6:	12 96       	adiw	r26, 0x02	; 2
    19c8:	0c 93       	st	X, r16
    19ca:	12 97       	sbiw	r26, 0x02	; 2
    19cc:	13 96       	adiw	r26, 0x03	; 3
    19ce:	1c 93       	st	X, r17
    19d0:	27 c0       	rjmp	.+78     	; 0x1a20 <malloc+0x98>
    19d2:	00 93 ed 01 	sts	0x01ED, r16	; 0x8001ed <__flp>
    19d6:	10 93 ee 01 	sts	0x01EE, r17	; 0x8001ee <__flp+0x1>
    19da:	22 c0       	rjmp	.+68     	; 0x1a20 <malloc+0x98>
    19dc:	21 15       	cp	r18, r1
    19de:	31 05       	cpc	r19, r1
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <malloc+0x60>
    19e2:	42 17       	cp	r20, r18
    19e4:	53 07       	cpc	r21, r19
    19e6:	18 f4       	brcc	.+6      	; 0x19ee <malloc+0x66>
    19e8:	9a 01       	movw	r18, r20
    19ea:	bd 01       	movw	r22, r26
    19ec:	ef 01       	movw	r28, r30
    19ee:	df 01       	movw	r26, r30
    19f0:	f8 01       	movw	r30, r16
    19f2:	db cf       	rjmp	.-74     	; 0x19aa <malloc+0x22>
    19f4:	21 15       	cp	r18, r1
    19f6:	31 05       	cpc	r19, r1
    19f8:	f9 f0       	breq	.+62     	; 0x1a38 <malloc+0xb0>
    19fa:	28 1b       	sub	r18, r24
    19fc:	39 0b       	sbc	r19, r25
    19fe:	24 30       	cpi	r18, 0x04	; 4
    1a00:	31 05       	cpc	r19, r1
    1a02:	80 f4       	brcc	.+32     	; 0x1a24 <malloc+0x9c>
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	61 15       	cp	r22, r1
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	21 f0       	breq	.+8      	; 0x1a16 <malloc+0x8e>
    1a0e:	fb 01       	movw	r30, r22
    1a10:	93 83       	std	Z+3, r25	; 0x03
    1a12:	82 83       	std	Z+2, r24	; 0x02
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <malloc+0x96>
    1a16:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <__flp+0x1>
    1a1a:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <__flp>
    1a1e:	fe 01       	movw	r30, r28
    1a20:	32 96       	adiw	r30, 0x02	; 2
    1a22:	44 c0       	rjmp	.+136    	; 0x1aac <malloc+0x124>
    1a24:	fe 01       	movw	r30, r28
    1a26:	e2 0f       	add	r30, r18
    1a28:	f3 1f       	adc	r31, r19
    1a2a:	81 93       	st	Z+, r24
    1a2c:	91 93       	st	Z+, r25
    1a2e:	22 50       	subi	r18, 0x02	; 2
    1a30:	31 09       	sbc	r19, r1
    1a32:	39 83       	std	Y+1, r19	; 0x01
    1a34:	28 83       	st	Y, r18
    1a36:	3a c0       	rjmp	.+116    	; 0x1aac <malloc+0x124>
    1a38:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <__brkval>
    1a3c:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <__brkval+0x1>
    1a40:	23 2b       	or	r18, r19
    1a42:	41 f4       	brne	.+16     	; 0x1a54 <malloc+0xcc>
    1a44:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1a48:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1a4c:	30 93 ec 01 	sts	0x01EC, r19	; 0x8001ec <__brkval+0x1>
    1a50:	20 93 eb 01 	sts	0x01EB, r18	; 0x8001eb <__brkval>
    1a54:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    1a58:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    1a5c:	21 15       	cp	r18, r1
    1a5e:	31 05       	cpc	r19, r1
    1a60:	41 f4       	brne	.+16     	; 0x1a72 <malloc+0xea>
    1a62:	2d b7       	in	r18, 0x3d	; 61
    1a64:	3e b7       	in	r19, 0x3e	; 62
    1a66:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1a6a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1a6e:	24 1b       	sub	r18, r20
    1a70:	35 0b       	sbc	r19, r21
    1a72:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <__brkval>
    1a76:	f0 91 ec 01 	lds	r31, 0x01EC	; 0x8001ec <__brkval+0x1>
    1a7a:	e2 17       	cp	r30, r18
    1a7c:	f3 07       	cpc	r31, r19
    1a7e:	a0 f4       	brcc	.+40     	; 0x1aa8 <malloc+0x120>
    1a80:	2e 1b       	sub	r18, r30
    1a82:	3f 0b       	sbc	r19, r31
    1a84:	28 17       	cp	r18, r24
    1a86:	39 07       	cpc	r19, r25
    1a88:	78 f0       	brcs	.+30     	; 0x1aa8 <malloc+0x120>
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	4e 5f       	subi	r20, 0xFE	; 254
    1a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a90:	24 17       	cp	r18, r20
    1a92:	35 07       	cpc	r19, r21
    1a94:	48 f0       	brcs	.+18     	; 0x1aa8 <malloc+0x120>
    1a96:	4e 0f       	add	r20, r30
    1a98:	5f 1f       	adc	r21, r31
    1a9a:	50 93 ec 01 	sts	0x01EC, r21	; 0x8001ec <__brkval+0x1>
    1a9e:	40 93 eb 01 	sts	0x01EB, r20	; 0x8001eb <__brkval>
    1aa2:	81 93       	st	Z+, r24
    1aa4:	91 93       	st	Z+, r25
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <malloc+0x124>
    1aa8:	e0 e0       	ldi	r30, 0x00	; 0
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	cf 01       	movw	r24, r30
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	08 95       	ret

00001ab8 <free>:
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <free+0xa>
    1ac0:	81 c0       	rjmp	.+258    	; 0x1bc4 <free+0x10c>
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	32 97       	sbiw	r30, 0x02	; 2
    1ac6:	13 82       	std	Z+3, r1	; 0x03
    1ac8:	12 82       	std	Z+2, r1	; 0x02
    1aca:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <__flp>
    1ace:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <__flp+0x1>
    1ad2:	10 97       	sbiw	r26, 0x00	; 0
    1ad4:	81 f4       	brne	.+32     	; 0x1af6 <free+0x3e>
    1ad6:	20 81       	ld	r18, Z
    1ad8:	31 81       	ldd	r19, Z+1	; 0x01
    1ada:	82 0f       	add	r24, r18
    1adc:	93 1f       	adc	r25, r19
    1ade:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <__brkval>
    1ae2:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <__brkval+0x1>
    1ae6:	28 17       	cp	r18, r24
    1ae8:	39 07       	cpc	r19, r25
    1aea:	51 f5       	brne	.+84     	; 0x1b40 <free+0x88>
    1aec:	f0 93 ec 01 	sts	0x01EC, r31	; 0x8001ec <__brkval+0x1>
    1af0:	e0 93 eb 01 	sts	0x01EB, r30	; 0x8001eb <__brkval>
    1af4:	67 c0       	rjmp	.+206    	; 0x1bc4 <free+0x10c>
    1af6:	ed 01       	movw	r28, r26
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	ce 17       	cp	r28, r30
    1afe:	df 07       	cpc	r29, r31
    1b00:	40 f4       	brcc	.+16     	; 0x1b12 <free+0x5a>
    1b02:	4a 81       	ldd	r20, Y+2	; 0x02
    1b04:	5b 81       	ldd	r21, Y+3	; 0x03
    1b06:	9e 01       	movw	r18, r28
    1b08:	41 15       	cp	r20, r1
    1b0a:	51 05       	cpc	r21, r1
    1b0c:	f1 f0       	breq	.+60     	; 0x1b4a <free+0x92>
    1b0e:	ea 01       	movw	r28, r20
    1b10:	f5 cf       	rjmp	.-22     	; 0x1afc <free+0x44>
    1b12:	d3 83       	std	Z+3, r29	; 0x03
    1b14:	c2 83       	std	Z+2, r28	; 0x02
    1b16:	40 81       	ld	r20, Z
    1b18:	51 81       	ldd	r21, Z+1	; 0x01
    1b1a:	84 0f       	add	r24, r20
    1b1c:	95 1f       	adc	r25, r21
    1b1e:	c8 17       	cp	r28, r24
    1b20:	d9 07       	cpc	r29, r25
    1b22:	59 f4       	brne	.+22     	; 0x1b3a <free+0x82>
    1b24:	88 81       	ld	r24, Y
    1b26:	99 81       	ldd	r25, Y+1	; 0x01
    1b28:	84 0f       	add	r24, r20
    1b2a:	95 1f       	adc	r25, r21
    1b2c:	02 96       	adiw	r24, 0x02	; 2
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	9b 81       	ldd	r25, Y+3	; 0x03
    1b36:	93 83       	std	Z+3, r25	; 0x03
    1b38:	82 83       	std	Z+2, r24	; 0x02
    1b3a:	21 15       	cp	r18, r1
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	29 f4       	brne	.+10     	; 0x1b4a <free+0x92>
    1b40:	f0 93 ee 01 	sts	0x01EE, r31	; 0x8001ee <__flp+0x1>
    1b44:	e0 93 ed 01 	sts	0x01ED, r30	; 0x8001ed <__flp>
    1b48:	3d c0       	rjmp	.+122    	; 0x1bc4 <free+0x10c>
    1b4a:	e9 01       	movw	r28, r18
    1b4c:	fb 83       	std	Y+3, r31	; 0x03
    1b4e:	ea 83       	std	Y+2, r30	; 0x02
    1b50:	49 91       	ld	r20, Y+
    1b52:	59 91       	ld	r21, Y+
    1b54:	c4 0f       	add	r28, r20
    1b56:	d5 1f       	adc	r29, r21
    1b58:	ec 17       	cp	r30, r28
    1b5a:	fd 07       	cpc	r31, r29
    1b5c:	61 f4       	brne	.+24     	; 0x1b76 <free+0xbe>
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	84 0f       	add	r24, r20
    1b64:	95 1f       	adc	r25, r21
    1b66:	02 96       	adiw	r24, 0x02	; 2
    1b68:	e9 01       	movw	r28, r18
    1b6a:	99 83       	std	Y+1, r25	; 0x01
    1b6c:	88 83       	st	Y, r24
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	9b 83       	std	Y+3, r25	; 0x03
    1b74:	8a 83       	std	Y+2, r24	; 0x02
    1b76:	e0 e0       	ldi	r30, 0x00	; 0
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	12 96       	adiw	r26, 0x02	; 2
    1b7c:	8d 91       	ld	r24, X+
    1b7e:	9c 91       	ld	r25, X
    1b80:	13 97       	sbiw	r26, 0x03	; 3
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	19 f0       	breq	.+6      	; 0x1b8c <free+0xd4>
    1b86:	fd 01       	movw	r30, r26
    1b88:	dc 01       	movw	r26, r24
    1b8a:	f7 cf       	rjmp	.-18     	; 0x1b7a <free+0xc2>
    1b8c:	8d 91       	ld	r24, X+
    1b8e:	9c 91       	ld	r25, X
    1b90:	11 97       	sbiw	r26, 0x01	; 1
    1b92:	9d 01       	movw	r18, r26
    1b94:	2e 5f       	subi	r18, 0xFE	; 254
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	82 0f       	add	r24, r18
    1b9a:	93 1f       	adc	r25, r19
    1b9c:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <__brkval>
    1ba0:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <__brkval+0x1>
    1ba4:	28 17       	cp	r18, r24
    1ba6:	39 07       	cpc	r19, r25
    1ba8:	69 f4       	brne	.+26     	; 0x1bc4 <free+0x10c>
    1baa:	30 97       	sbiw	r30, 0x00	; 0
    1bac:	29 f4       	brne	.+10     	; 0x1bb8 <free+0x100>
    1bae:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <__flp+0x1>
    1bb2:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <__flp>
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <free+0x104>
    1bb8:	13 82       	std	Z+3, r1	; 0x03
    1bba:	12 82       	std	Z+2, r1	; 0x02
    1bbc:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <__brkval+0x1>
    1bc0:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <__brkval>
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	08 95       	ret

00001bca <_exit>:
    1bca:	f8 94       	cli

00001bcc <__stop_program>:
    1bcc:	ff cf       	rjmp	.-2      	; 0x1bcc <__stop_program>
