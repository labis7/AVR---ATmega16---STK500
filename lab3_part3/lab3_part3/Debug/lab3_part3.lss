
lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000c04  00000c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000030a  0080007a  0080007a  00000cb2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b7  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080e  00000000  00000000  00001f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb6  00000000  00000000  0000275d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00003714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fd89  00000000  00000000  0000386c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000863  00000000  00000000  000135f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00013e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  00013f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c5       	rjmp	.+2708   	; 0xa9e <__vector_2>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fa c4       	rjmp	.+2548   	; 0xa22 <__vector_11>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	3a c0       	rjmp	.+116    	; 0xaa <__vector_13>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	66 d5       	rcall	.+2764   	; 0xb54 <main>
  88:	bb c5       	rjmp	.+2934   	; 0xc00 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
  8c:	08 95       	ret

0000008e <Transmit>:
}


// TRANSMIT function : transmits a string

void Transmit(char data[],uint8_t x,uint8_t y){
  8e:	9c 01       	movw	r18, r24
	

	for (uint8_t i = x ; i < y  ; i++ ){
  90:	64 17       	cp	r22, r20
  92:	50 f4       	brcc	.+20     	; 0xa8 <Transmit+0x1a>
		while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <Transmit+0x6>
		;
		UDR = data[i];
  98:	f9 01       	movw	r30, r18
  9a:	e6 0f       	add	r30, r22
  9c:	f1 1d       	adc	r31, r1
  9e:	90 81       	ld	r25, Z
  a0:	9c b9       	out	0x0c, r25	; 12
// TRANSMIT function : transmits a string

void Transmit(char data[],uint8_t x,uint8_t y){
	

	for (uint8_t i = x ; i < y  ; i++ ){
  a2:	6f 5f       	subi	r22, 0xFF	; 255
  a4:	46 13       	cpse	r20, r22
  a6:	f6 cf       	rjmp	.-20     	; 0x94 <Transmit+0x6>
  a8:	08 95       	ret

000000aa <__vector_13>:

}



ISR (USART_TXC_vect) { //  Interrupts for completed transmit data	
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
}
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <Check_Input>:
*	AT : XOFF/XON protocol
*	MW : memory write
*	MR : memory read
*	SUM: sum the certain data from memory  
*/
void Check_Input(char data[]){
  be:	af 92       	push	r10
  c0:	bf 92       	push	r11
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	00 d0       	rcall	.+0      	; 0xd4 <Check_Input+0x16>
  d4:	00 d0       	rcall	.+0      	; 0xd6 <Check_Input+0x18>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	ac 01       	movw	r20, r24
	
		flag = 0;
  dc:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <flag>
		Space_num = 0;
  e0:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <Space_num>
		
		//process
		
		// command AT
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
  e4:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <rxReadPos>
  e8:	83 2f       	mov	r24, r19
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	fa 01       	movw	r30, r20
  ee:	e8 0f       	add	r30, r24
  f0:	f9 1f       	adc	r31, r25
  f2:	20 81       	ld	r18, Z
  f4:	21 34       	cpi	r18, 0x41	; 65
  f6:	e9 f4       	brne	.+58     	; 0x132 <Check_Input+0x74>
  f8:	fa 01       	movw	r30, r20
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	21 81       	ldd	r18, Z+1	; 0x01
 100:	24 35       	cpi	r18, 0x54	; 84
 102:	09 f0       	breq	.+2      	; 0x106 <Check_Input+0x48>
 104:	0f c4       	rjmp	.+2078   	; 0x924 <__stack+0x4c5>
		{
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			if(data[rxReadPos+2] == CR[0]){
 106:	fa 01       	movw	r30, r20
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	92 81       	ldd	r25, Z+2	; 0x02
 10e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <CR>
 112:	98 13       	cpse	r25, r24
 114:	0a c0       	rjmp	.+20     	; 0x12a <Check_Input+0x6c>
				Transmit("\nOK\n\r",0 , strlen("\nOK\n\r"));
 116:	45 e0       	ldi	r20, 0x05	; 5
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	81 e6       	ldi	r24, 0x61	; 97
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	b7 df       	rcall	.-146    	; 0x8e <Transmit>
				rxReadPos = rxWritePos;
 120:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 124:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <rxReadPos>
 128:	01 c4       	rjmp	.+2050   	; 0x92c <__stack+0x4cd>
			}
			else
				flag = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
 130:	01 c4       	rjmp	.+2050   	; 0x934 <__stack+0x4d5>
		}
		//Checking for MW<SP>X<SP>Y<CR> command.
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 87))		// "M" , "W"
 132:	2d 34       	cpi	r18, 0x4D	; 77
 134:	09 f0       	breq	.+2      	; 0x138 <Check_Input+0x7a>
 136:	0c c2       	rjmp	.+1048   	; 0x550 <__stack+0xf1>
 138:	fa 01       	movw	r30, r20
 13a:	e8 0f       	add	r30, r24
 13c:	f9 1f       	adc	r31, r25
 13e:	81 81       	ldd	r24, Z+1	; 0x01
 140:	87 35       	cpi	r24, 0x57	; 87
 142:	09 f0       	breq	.+2      	; 0x146 <Check_Input+0x88>
 144:	bf c0       	rjmp	.+382    	; 0x2c4 <Check_Input+0x206>
		{
			rxReadPos++;
 146:	3f 5f       	subi	r19, 0xFF	; 255
 148:	30 93 7b 00 	sts	0x007B, r19	; 0x80007b <rxReadPos>
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			while(data[rxReadPos] != CR[0])
 14c:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <CR>
					break;
				}

				rxReadPos++;
				//Detecting Spaces
				if(data[rxReadPos] == SPACE)
 150:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <SPACE>
 154:	ae 2e       	mov	r10, r30
 156:	b1 2c       	mov	r11, r1
						break;
					}	
				}
				//the above while has broken because we detected a space so we cancel the rxreadpos increase
				//must be counted in the next loop, as a part of the space detection code
				if((data[rxReadPos] == SPACE))  
 158:	c1 2c       	mov	r12, r1
 15a:	d1 2c       	mov	r13, r1
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 15c:	ee 24       	eor	r14, r14
 15e:	e3 94       	inc	r14
		//Checking for MW<SP>X<SP>Y<CR> command.
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 87))		// "M" , "W"
		{
			rxReadPos++;
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			while(data[rxReadPos] != CR[0])
 160:	8e c0       	rjmp	.+284    	; 0x27e <Check_Input+0x1c0>
			{	
				// error checking : too many spaces used
				if(Space_num == 2)
 162:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <Space_num>
 166:	92 30       	cpi	r25, 0x02	; 2
 168:	21 f4       	brne	.+8      	; 0x172 <Check_Input+0xb4>
				{
					flag = 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
 170:	e1 c3       	rjmp	.+1986   	; 0x934 <__stack+0x4d5>
					break;
				}

				rxReadPos++;
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	28 0f       	add	r18, r24
 176:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <rxReadPos>
				//Detecting Spaces
				if(data[rxReadPos] == SPACE)
 17a:	da 01       	movw	r26, r20
 17c:	a2 0f       	add	r26, r18
 17e:	b1 1d       	adc	r27, r1
 180:	2c 91       	ld	r18, X
 182:	02 2e       	mov	r0, r18
 184:	00 0c       	add	r0, r0
 186:	33 0b       	sbc	r19, r19
 188:	2a 15       	cp	r18, r10
 18a:	3b 05       	cpc	r19, r11
 18c:	99 f4       	brne	.+38     	; 0x1b4 <Check_Input+0xf6>
				{
					++rxReadPos;
 18e:	a2 e0       	ldi	r26, 0x02	; 2
 190:	a8 0f       	add	r26, r24
 192:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <rxReadPos>
					++Space_num;
 196:	ff 24       	eor	r15, r15
 198:	f3 94       	inc	r15
 19a:	f9 0e       	add	r15, r25
 19c:	f0 92 82 02 	sts	0x0282, r15	; 0x800282 <Space_num>
				{
					flag = 1;
					break;
				}
				//Detecting 3* digit number and convert to 8 bit integer 
				Number_num=0;
 1a0:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <Number_num>
				uint16_t k = 0;
				//check if number exceeds 3 digit or we detect a CR or SPACE 
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 1a4:	9a 01       	movw	r18, r20
 1a6:	2a 0f       	add	r18, r26
 1a8:	31 1d       	adc	r19, r1
 1aa:	f9 01       	movw	r30, r18
 1ac:	90 81       	ld	r25, Z
 1ae:	79 13       	cpse	r23, r25
 1b0:	26 c0       	rjmp	.+76     	; 0x1fe <Check_Input+0x140>
 1b2:	cf c3       	rjmp	.+1950   	; 0x952 <__stack+0x4f3>
					++rxReadPos;
					++Space_num;
				}
				else
				{
					flag = 1;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
					break;
 1ba:	14 c4       	rjmp	.+2088   	; 0x9e4 <__stack+0x585>
				uint16_t k = 0;
				//check if number exceeds 3 digit or we detect a CR or SPACE 
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 1bc:	90 53       	subi	r25, 0x30	; 48
 1be:	9a 30       	cpi	r25, 0x0A	; 10
 1c0:	d8 f4       	brcc	.+54     	; 0x1f8 <Check_Input+0x13a>
					{
						Number_num++;
 1c2:	6f 5f       	subi	r22, 0xFF	; 255
 1c4:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <Number_num>
 1c8:	89 01       	movw	r16, r18
 1ca:	00 0f       	add	r16, r16
 1cc:	11 1f       	adc	r17, r17
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
 1da:	20 0f       	add	r18, r16
 1dc:	31 1f       	adc	r19, r17
 1de:	20 53       	subi	r18, 0x30	; 48
 1e0:	31 09       	sbc	r19, r1

						k = 10 * k + (data[rxReadPos] - '0');	//conversion to int
 1e2:	9c 91       	ld	r25, X
 1e4:	29 0f       	add	r18, r25
 1e6:	31 1d       	adc	r19, r1
 1e8:	97 fd       	sbrc	r25, 7
 1ea:	3a 95       	dec	r19
						rxReadPos++;
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <rxReadPos>
				}
				//Detecting 3* digit number and convert to 8 bit integer 
				Number_num=0;
				uint16_t k = 0;
				//check if number exceeds 3 digit or we detect a CR or SPACE 
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 1f2:	63 30       	cpi	r22, 0x03	; 3
 1f4:	79 f4       	brne	.+30     	; 0x214 <Check_Input+0x156>
 1f6:	16 c0       	rjmp	.+44     	; 0x224 <Check_Input+0x166>
						k = 10 * k + (data[rxReadPos] - '0');	//conversion to int
						rxReadPos++;
					}
					else
					{
						flag = 1;
 1f8:	e0 92 7d 00 	sts	0x007D, r14	; 0x80007d <flag>
						break;
 1fc:	13 c0       	rjmp	.+38     	; 0x224 <Check_Input+0x166>
				}
				//Detecting 3* digit number and convert to 8 bit integer 
				Number_num=0;
				uint16_t k = 0;
				//check if number exceeds 3 digit or we detect a CR or SPACE 
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 1fe:	90 32       	cpi	r25, 0x20	; 32
 200:	09 f4       	brne	.+2      	; 0x204 <Check_Input+0x146>
 202:	a7 c3       	rjmp	.+1870   	; 0x952 <__stack+0x4f3>
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 204:	90 53       	subi	r25, 0x30	; 48
 206:	9a 30       	cpi	r25, 0x0A	; 10
 208:	08 f4       	brcc	.+2      	; 0x20c <Check_Input+0x14e>
 20a:	c4 c3       	rjmp	.+1928   	; 0x994 <__stack+0x535>
				}
				//Detecting 3* digit number and convert to 8 bit integer 
				Number_num=0;
				uint16_t k = 0;
				//check if number exceeds 3 digit or we detect a CR or SPACE 
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 20c:	60 e0       	ldi	r22, 0x00	; 0
					flag = 1;
					break;
				}
				//Detecting 3* digit number and convert to 8 bit integer 
				Number_num=0;
				uint16_t k = 0;
 20e:	2c 2d       	mov	r18, r12
 210:	3d 2d       	mov	r19, r13
 212:	f2 cf       	rjmp	.-28     	; 0x1f8 <Check_Input+0x13a>
				//check if number exceeds 3 digit or we detect a CR or SPACE 
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 214:	da 01       	movw	r26, r20
 216:	a8 0f       	add	r26, r24
 218:	b1 1d       	adc	r27, r1
 21a:	9c 91       	ld	r25, X
 21c:	79 17       	cp	r23, r25
 21e:	11 f0       	breq	.+4      	; 0x224 <Check_Input+0x166>
 220:	90 32       	cpi	r25, 0x20	; 32
 222:	61 f6       	brne	.-104    	; 0x1bc <Check_Input+0xfe>
						break;
					}	
				}
				//the above while has broken because we detected a space so we cancel the rxreadpos increase
				//must be counted in the next loop, as a part of the space detection code
				if((data[rxReadPos] == SPACE))  
 224:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <rxReadPos>
 228:	ca 01       	movw	r24, r20
 22a:	8a 0f       	add	r24, r26
 22c:	91 1d       	adc	r25, r1
 22e:	fc 01       	movw	r30, r24
 230:	80 81       	ld	r24, Z
 232:	08 2e       	mov	r0, r24
 234:	00 0c       	add	r0, r0
 236:	99 0b       	sbc	r25, r25
 238:	a8 16       	cp	r10, r24
 23a:	b9 06       	cpc	r11, r25
 23c:	39 f4       	brne	.+14     	; 0x24c <Check_Input+0x18e>
 23e:	03 c0       	rjmp	.+6      	; 0x246 <Check_Input+0x188>
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	2c 2d       	mov	r18, r12
 244:	3d 2d       	mov	r19, r13
					rxReadPos--;
 246:	a1 50       	subi	r26, 0x01	; 1
 248:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <rxReadPos>
				if(Number_num == 0)				//if not valid number parameter
 24c:	61 11       	cpse	r22, r1
 24e:	04 c0       	rjmp	.+8      	; 0x258 <Check_Input+0x19a>
				{
					flag = 1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
					break;
 256:	c6 c3       	rjmp	.+1932   	; 0x9e4 <__stack+0x585>
				}
				if(k > 255)		//if number exceeds the limit (255)
 258:	2f 3f       	cpi	r18, 0xFF	; 255
 25a:	31 05       	cpc	r19, r1
 25c:	29 f0       	breq	.+10     	; 0x268 <Check_Input+0x1aa>
 25e:	20 f0       	brcs	.+8      	; 0x268 <Check_Input+0x1aa>
				{
					flag = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
					break;
 266:	be c3       	rjmp	.+1916   	; 0x9e4 <__stack+0x585>
				}
				// assigns each parameter to 8 bit integer variable ( X input of the command)
				if(Space_num == 1)
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	ff 12       	cpse	r15, r31
 26c:	03 c0       	rjmp	.+6      	; 0x274 <Check_Input+0x1b6>
					par1 =(uint8_t) k ;
 26e:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <par1>
 272:	05 c0       	rjmp	.+10     	; 0x27e <Check_Input+0x1c0>
				else if(Space_num == 2)	// Y input of the  command
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	f8 12       	cpse	r15, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <Check_Input+0x1c0>
					par2 =(uint8_t) k ;
 27a:	20 93 81 02 	sts	0x0281, r18	; 0x800281 <par2>
		//Checking for MW<SP>X<SP>Y<CR> command.
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 87))		// "M" , "W"
		{
			rxReadPos++;
			//Checking if user finished entering the command by checking if he typed the <CR> character.
			while(data[rxReadPos] != CR[0])
 27e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <rxReadPos>
 282:	da 01       	movw	r26, r20
 284:	a8 0f       	add	r26, r24
 286:	b1 1d       	adc	r27, r1
 288:	9c 91       	ld	r25, X
 28a:	97 13       	cpse	r25, r23
 28c:	6a cf       	rjmp	.-300    	; 0x162 <Check_Input+0xa4>
					par2 =(uint8_t) k ;
				else
					NULL;
			}//WHILE LOOP 
			// error checking: too few spaces used 
			if((Space_num == 1)||(Space_num == 0)){
 28e:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <Space_num>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	20 f4       	brcc	.+8      	; 0x29e <Check_Input+0x1e0>
				flag = 1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
 29c:	4b c3       	rjmp	.+1686   	; 0x934 <__stack+0x4d5>
			}
			
			//Command execution
			if (flag != 1)
 29e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <flag>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <Check_Input+0x1ea>
 2a6:	46 c3       	rjmp	.+1676   	; 0x934 <__stack+0x4d5>
			{
				MEM[par1]=par2;
 2a8:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <par1>
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	e1 58       	subi	r30, 0x81	; 129
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <par2>
 2b6:	80 83       	st	Z, r24
				Transmit("\nOK\n\r",0,strlen("\nOK\n\r"));
 2b8:	45 e0       	ldi	r20, 0x05	; 5
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e6       	ldi	r24, 0x61	; 97
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	e6 de       	rcall	.-564    	; 0x8e <Transmit>
 2c2:	34 c3       	rjmp	.+1640   	; 0x92c <__stack+0x4cd>
			}
			
		}
		// Command : MR		M=77	R=82
		else if ((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 82))				
 2c4:	82 35       	cpi	r24, 0x52	; 82
 2c6:	09 f0       	breq	.+2      	; 0x2ca <Check_Input+0x20c>
 2c8:	2d c3       	rjmp	.+1626   	; 0x924 <__stack+0x4c5>
		{
			rxReadPos++;
 2ca:	3f 5f       	subi	r19, 0xFF	; 255
 2cc:	30 93 7b 00 	sts	0x007B, r19	; 0x80007b <rxReadPos>
			while(data[rxReadPos] != CR[0])
 2d0:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <CR>
					flag = 1;
					break;
				}

				rxReadPos++;
				if(data[rxReadPos] == SPACE)
 2d4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <SPACE>
 2d8:	ae 2e       	mov	r10, r30
 2da:	b1 2c       	mov	r11, r1
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE)) 
 2dc:	c1 2c       	mov	r12, r1
 2de:	d1 2c       	mov	r13, r1
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 2e0:	ee 24       	eor	r14, r14
 2e2:	e3 94       	inc	r14
		}
		// Command : MR		M=77	R=82
		else if ((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 82))				
		{
			rxReadPos++;
			while(data[rxReadPos] != CR[0])
 2e4:	88 c0       	rjmp	.+272    	; 0x3f6 <Check_Input+0x338>
			{
				if(Space_num == 1)
 2e6:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <Space_num>
 2ea:	91 30       	cpi	r25, 0x01	; 1
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <Check_Input+0x238>
				{
					flag = 1;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
 2f4:	1f c3       	rjmp	.+1598   	; 0x934 <__stack+0x4d5>
					break;
				}

				rxReadPos++;
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	28 0f       	add	r18, r24
 2fa:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <rxReadPos>
				if(data[rxReadPos] == SPACE)
 2fe:	da 01       	movw	r26, r20
 300:	a2 0f       	add	r26, r18
 302:	b1 1d       	adc	r27, r1
 304:	2c 91       	ld	r18, X
 306:	02 2e       	mov	r0, r18
 308:	00 0c       	add	r0, r0
 30a:	33 0b       	sbc	r19, r19
 30c:	2a 15       	cp	r18, r10
 30e:	3b 05       	cpc	r19, r11
 310:	99 f4       	brne	.+38     	; 0x338 <Check_Input+0x27a>
				{
					++rxReadPos;
 312:	a2 e0       	ldi	r26, 0x02	; 2
 314:	a8 0f       	add	r26, r24
 316:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <rxReadPos>
					++Space_num;
 31a:	ff 24       	eor	r15, r15
 31c:	f3 94       	inc	r15
 31e:	f9 0e       	add	r15, r25
 320:	f0 92 82 02 	sts	0x0282, r15	; 0x800282 <Space_num>
				else
				{
					flag = 1;
					break;
				}
				Number_num=0;
 324:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <Number_num>
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 328:	9a 01       	movw	r18, r20
 32a:	2a 0f       	add	r18, r26
 32c:	31 1d       	adc	r19, r1
 32e:	f9 01       	movw	r30, r18
 330:	90 81       	ld	r25, Z
 332:	79 13       	cpse	r23, r25
 334:	26 c0       	rjmp	.+76     	; 0x382 <Check_Input+0x2c4>
 336:	15 c3       	rjmp	.+1578   	; 0x962 <__stack+0x503>
					++rxReadPos;
					++Space_num;
				}
				else
				{
					flag = 1;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
					break;
 33e:	58 c3       	rjmp	.+1712   	; 0x9f0 <__stack+0x591>
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 340:	90 53       	subi	r25, 0x30	; 48
 342:	9a 30       	cpi	r25, 0x0A	; 10
 344:	d8 f4       	brcc	.+54     	; 0x37c <Check_Input+0x2be>
					{
						Number_num++;
 346:	6f 5f       	subi	r22, 0xFF	; 255
 348:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <Number_num>
 34c:	89 01       	movw	r16, r18
 34e:	00 0f       	add	r16, r16
 350:	11 1f       	adc	r17, r17
 352:	22 0f       	add	r18, r18
 354:	33 1f       	adc	r19, r19
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	20 0f       	add	r18, r16
 360:	31 1f       	adc	r19, r17
 362:	20 53       	subi	r18, 0x30	; 48
 364:	31 09       	sbc	r19, r1

						k = 10 * k + (data[rxReadPos] - '0');
 366:	9c 91       	ld	r25, X
 368:	29 0f       	add	r18, r25
 36a:	31 1d       	adc	r19, r1
 36c:	97 fd       	sbrc	r25, 7
 36e:	3a 95       	dec	r19
						rxReadPos++;
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <rxReadPos>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 376:	63 30       	cpi	r22, 0x03	; 3
 378:	79 f4       	brne	.+30     	; 0x398 <Check_Input+0x2da>
 37a:	16 c0       	rjmp	.+44     	; 0x3a8 <Check_Input+0x2ea>
						k = 10 * k + (data[rxReadPos] - '0');
						rxReadPos++;
					}
					else
					{
						flag = 1;
 37c:	e0 92 7d 00 	sts	0x007D, r14	; 0x80007d <flag>
						break;
 380:	13 c0       	rjmp	.+38     	; 0x3a8 <Check_Input+0x2ea>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 382:	90 32       	cpi	r25, 0x20	; 32
 384:	09 f4       	brne	.+2      	; 0x388 <Check_Input+0x2ca>
 386:	ed c2       	rjmp	.+1498   	; 0x962 <__stack+0x503>
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 388:	90 53       	subi	r25, 0x30	; 48
 38a:	9a 30       	cpi	r25, 0x0A	; 10
 38c:	08 f4       	brcc	.+2      	; 0x390 <Check_Input+0x2d2>
 38e:	10 c3       	rjmp	.+1568   	; 0x9b0 <__stack+0x551>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 390:	60 e0       	ldi	r22, 0x00	; 0
				{
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
 392:	2c 2d       	mov	r18, r12
 394:	3d 2d       	mov	r19, r13
 396:	f2 cf       	rjmp	.-28     	; 0x37c <Check_Input+0x2be>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 398:	da 01       	movw	r26, r20
 39a:	a8 0f       	add	r26, r24
 39c:	b1 1d       	adc	r27, r1
 39e:	9c 91       	ld	r25, X
 3a0:	79 17       	cp	r23, r25
 3a2:	11 f0       	breq	.+4      	; 0x3a8 <Check_Input+0x2ea>
 3a4:	90 32       	cpi	r25, 0x20	; 32
 3a6:	61 f6       	brne	.-104    	; 0x340 <Check_Input+0x282>
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE)) 
 3a8:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <rxReadPos>
 3ac:	ca 01       	movw	r24, r20
 3ae:	8a 0f       	add	r24, r26
 3b0:	91 1d       	adc	r25, r1
 3b2:	fc 01       	movw	r30, r24
 3b4:	80 81       	ld	r24, Z
 3b6:	08 2e       	mov	r0, r24
 3b8:	00 0c       	add	r0, r0
 3ba:	99 0b       	sbc	r25, r25
 3bc:	a8 16       	cp	r10, r24
 3be:	b9 06       	cpc	r11, r25
 3c0:	39 f4       	brne	.+14     	; 0x3d0 <Check_Input+0x312>
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <Check_Input+0x30c>
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	2c 2d       	mov	r18, r12
 3c8:	3d 2d       	mov	r19, r13
				rxReadPos--;
 3ca:	a1 50       	subi	r26, 0x01	; 1
 3cc:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <rxReadPos>
				if(Number_num == 0)				
 3d0:	61 11       	cpse	r22, r1
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <Check_Input+0x31e>
				{
					flag = 1;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
					break;
 3da:	0a c3       	rjmp	.+1556   	; 0x9f0 <__stack+0x591>
				}
				if(k > 255)
 3dc:	2f 3f       	cpi	r18, 0xFF	; 255
 3de:	31 05       	cpc	r19, r1
 3e0:	29 f0       	breq	.+10     	; 0x3ec <Check_Input+0x32e>
 3e2:	20 f0       	brcs	.+8      	; 0x3ec <Check_Input+0x32e>
				{
					flag = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
					break;
 3ea:	02 c3       	rjmp	.+1540   	; 0x9f0 <__stack+0x591>
				}
				if(Space_num == 1)
 3ec:	f1 e0       	ldi	r31, 0x01	; 1
 3ee:	ff 12       	cpse	r15, r31
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <Check_Input+0x338>
				par1 =(uint8_t) k ;
 3f2:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <par1>
		}
		// Command : MR		M=77	R=82
		else if ((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 82))				
		{
			rxReadPos++;
			while(data[rxReadPos] != CR[0])
 3f6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <rxReadPos>
 3fa:	da 01       	movw	r26, r20
 3fc:	a8 0f       	add	r26, r24
 3fe:	b1 1d       	adc	r27, r1
 400:	9c 91       	ld	r25, X
 402:	97 13       	cpse	r25, r23
 404:	70 cf       	rjmp	.-288    	; 0x2e6 <Check_Input+0x228>
				if(Space_num == 1)
				par1 =(uint8_t) k ;
				else
				NULL;
			}//WHILE LOOP END
			if((Space_num == 0)){
 406:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <Space_num>
 40a:	81 11       	cpse	r24, r1
 40c:	04 c0       	rjmp	.+8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				flag = 1;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
 414:	8f c2       	rjmp	.+1310   	; 0x934 <__stack+0x4d5>
			}
			
			if (flag != 1)
 416:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <flag>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	8a c2       	rjmp	.+1300   	; 0x934 <__stack+0x4d5>
			{
				par2 = MEM[par1];
 420:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <par1>
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	e1 58       	subi	r30, 0x81	; 129
 428:	ff 4f       	sbci	r31, 0xFF	; 255
 42a:	80 81       	ld	r24, Z
 42c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <par2>
				char t[3];
				
				//We use an extra \n before every transmit just for the output to be easily readable 
				Transmit("\n",0,strlen("\n"));
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	87 e6       	ldi	r24, 0x67	; 103
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	2a de       	rcall	.-940    	; 0x8e <Transmit>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 43a:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <par2>
 43e:	09 e2       	ldi	r16, 0x29	; 41
 440:	80 9f       	mul	r24, r16
 442:	81 2d       	mov	r24, r1
 444:	11 24       	eor	r1, r1
 446:	1d ec       	ldi	r17, 0xCD	; 205
 448:	82 95       	swap	r24
 44a:	8f 70       	andi	r24, 0x0F	; 15
 44c:	4a e0       	ldi	r20, 0x0A	; 10
 44e:	be 01       	movw	r22, r28
 450:	6f 5f       	subi	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	a1 d3       	rcall	.+1858   	; 0xb9a <__itoa_ncheck>
				//cropping and converting integer to character
				Transmit(itoa( (par2/(100))%(10),t,10),0,strlen(itoa((par2/(100))%(10),t,10)));
 458:	fc 01       	movw	r30, r24
 45a:	01 90       	ld	r0, Z+
 45c:	00 20       	and	r0, r0
 45e:	e9 f7       	brne	.-6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	7f 01       	movw	r14, r30
 464:	e8 1a       	sub	r14, r24
 466:	f9 0a       	sbc	r15, r25
 468:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <par2>
 46c:	80 9f       	mul	r24, r16
 46e:	81 2d       	mov	r24, r1
 470:	11 24       	eor	r1, r1
 472:	82 95       	swap	r24
 474:	8f 70       	andi	r24, 0x0F	; 15
 476:	4a e0       	ldi	r20, 0x0A	; 10
 478:	be 01       	movw	r22, r28
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	8c d3       	rcall	.+1816   	; 0xb9a <__itoa_ncheck>
 482:	4e 2d       	mov	r20, r14
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	03 de       	rcall	.-1018   	; 0x8e <Transmit>
 488:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <par2>
 48c:	80 9f       	mul	r24, r16
 48e:	81 2d       	mov	r24, r1
 490:	11 24       	eor	r1, r1
 492:	82 95       	swap	r24
 494:	8f 70       	andi	r24, 0x0F	; 15
 496:	4a e0       	ldi	r20, 0x0A	; 10
 498:	be 01       	movw	r22, r28
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	7c d3       	rcall	.+1784   	; 0xb9a <__itoa_ncheck>
				Transmit(itoa( (par2/(10))%(10),t,10),0,strlen(itoa((par2/(100))%(10),t,10)));
 4a2:	fc 01       	movw	r30, r24
 4a4:	01 90       	ld	r0, Z+
 4a6:	00 20       	and	r0, r0
 4a8:	e9 f7       	brne	.-6      	; 0x4a4 <__stack+0x45>
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	7f 01       	movw	r14, r30
 4ae:	e8 1a       	sub	r14, r24
 4b0:	f9 0a       	sbc	r15, r25
 4b2:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <par2>
 4b6:	81 9f       	mul	r24, r17
 4b8:	81 2d       	mov	r24, r1
 4ba:	11 24       	eor	r1, r1
 4bc:	86 95       	lsr	r24
 4be:	86 95       	lsr	r24
 4c0:	86 95       	lsr	r24
 4c2:	81 9f       	mul	r24, r17
 4c4:	91 2d       	mov	r25, r1
 4c6:	11 24       	eor	r1, r1
 4c8:	96 95       	lsr	r25
 4ca:	96 95       	lsr	r25
 4cc:	96 95       	lsr	r25
 4ce:	99 0f       	add	r25, r25
 4d0:	29 2f       	mov	r18, r25
 4d2:	22 0f       	add	r18, r18
 4d4:	22 0f       	add	r18, r18
 4d6:	92 0f       	add	r25, r18
 4d8:	89 1b       	sub	r24, r25
 4da:	4a e0       	ldi	r20, 0x0A	; 10
 4dc:	be 01       	movw	r22, r28
 4de:	6f 5f       	subi	r22, 0xFF	; 255
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	5a d3       	rcall	.+1716   	; 0xb9a <__itoa_ncheck>
 4e6:	4e 2d       	mov	r20, r14
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	d1 dd       	rcall	.-1118   	; 0x8e <Transmit>
 4ec:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <par2>
 4f0:	80 9f       	mul	r24, r16
 4f2:	81 2d       	mov	r24, r1
 4f4:	11 24       	eor	r1, r1
 4f6:	82 95       	swap	r24
 4f8:	8f 70       	andi	r24, 0x0F	; 15
 4fa:	4a e0       	ldi	r20, 0x0A	; 10
 4fc:	be 01       	movw	r22, r28
 4fe:	6f 5f       	subi	r22, 0xFF	; 255
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	4a d3       	rcall	.+1684   	; 0xb9a <__itoa_ncheck>
				Transmit(itoa( (par2/(1))%(10),t,10),0,strlen(itoa((par2/(100))%(10),t,10)));
 506:	fc 01       	movw	r30, r24
 508:	01 90       	ld	r0, Z+
 50a:	00 20       	and	r0, r0
 50c:	e9 f7       	brne	.-6      	; 0x508 <__stack+0xa9>
 50e:	31 97       	sbiw	r30, 0x01	; 1
 510:	7f 01       	movw	r14, r30
 512:	e8 1a       	sub	r14, r24
 514:	f9 0a       	sbc	r15, r25
 516:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <par2>
 51a:	81 9f       	mul	r24, r17
 51c:	91 2d       	mov	r25, r1
 51e:	11 24       	eor	r1, r1
 520:	96 95       	lsr	r25
 522:	96 95       	lsr	r25
 524:	96 95       	lsr	r25
 526:	99 0f       	add	r25, r25
 528:	29 2f       	mov	r18, r25
 52a:	22 0f       	add	r18, r18
 52c:	22 0f       	add	r18, r18
 52e:	92 0f       	add	r25, r18
 530:	89 1b       	sub	r24, r25
 532:	4a e0       	ldi	r20, 0x0A	; 10
 534:	be 01       	movw	r22, r28
 536:	6f 5f       	subi	r22, 0xFF	; 255
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	2e d3       	rcall	.+1628   	; 0xb9a <__itoa_ncheck>
 53e:	4e 2d       	mov	r20, r14
 540:	60 e0       	ldi	r22, 0x00	; 0
				Transmit("\n\r",0,strlen("\n\r"));
 542:	a5 dd       	rcall	.-1206   	; 0x8e <Transmit>
 544:	42 e0       	ldi	r20, 0x02	; 2
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	84 e6       	ldi	r24, 0x64	; 100
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	a0 dd       	rcall	.-1216   	; 0x8e <Transmit>
 54e:	ee c1       	rjmp	.+988    	; 0x92c <__stack+0x4cd>
			}
			
		}
		//////////////////////////////////////////////// SUM /////////////////////////////////////////////////////
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 85) &&(data[rxReadPos + 2] == 77) ){
 550:	23 35       	cpi	r18, 0x53	; 83
 552:	09 f0       	breq	.+2      	; 0x556 <__stack+0xf7>
 554:	e7 c1       	rjmp	.+974    	; 0x924 <__stack+0x4c5>
 556:	fa 01       	movw	r30, r20
 558:	e8 0f       	add	r30, r24
 55a:	f9 1f       	adc	r31, r25
 55c:	21 81       	ldd	r18, Z+1	; 0x01
 55e:	25 35       	cpi	r18, 0x55	; 85
 560:	09 f0       	breq	.+2      	; 0x564 <__stack+0x105>
 562:	e0 c1       	rjmp	.+960    	; 0x924 <__stack+0x4c5>
 564:	fa 01       	movw	r30, r20
 566:	e8 0f       	add	r30, r24
 568:	f9 1f       	adc	r31, r25
 56a:	82 81       	ldd	r24, Z+2	; 0x02
 56c:	8d 34       	cpi	r24, 0x4D	; 77
 56e:	09 f0       	breq	.+2      	; 0x572 <__stack+0x113>
 570:	d9 c1       	rjmp	.+946    	; 0x924 <__stack+0x4c5>
			rxReadPos+=2;
 572:	3e 5f       	subi	r19, 0xFE	; 254
 574:	30 93 7b 00 	sts	0x007B, r19	; 0x80007b <rxReadPos>
			while(data[rxReadPos] != CR[0])
 578:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <CR>
					flag = 1;
					break;
				}

				rxReadPos++;
				if(data[rxReadPos] == SPACE)
 57c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <SPACE>
 580:	f0 e0       	ldi	r31, 0x00	; 0
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE))  
 582:	c1 2c       	mov	r12, r1
 584:	d1 2c       	mov	r13, r1
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	
					{
						Number_num++;
 586:	ee 24       	eor	r14, r14
 588:	e3 94       	inc	r14
			
		}
		//////////////////////////////////////////////// SUM /////////////////////////////////////////////////////
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 85) &&(data[rxReadPos + 2] == 77) ){
			rxReadPos+=2;
			while(data[rxReadPos] != CR[0])
 58a:	95 c0       	rjmp	.+298    	; 0x6b6 <__stack+0x257>
			{
				if(Space_num == 2)
 58c:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <Space_num>
 590:	62 30       	cpi	r22, 0x02	; 2
 592:	21 f4       	brne	.+8      	; 0x59c <__stack+0x13d>
				{
					flag = 1;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
					break;
 59a:	99 c0       	rjmp	.+306    	; 0x6ce <__stack+0x26f>
				}

				rxReadPos++;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	83 0f       	add	r24, r19
 5a0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <rxReadPos>
				if(data[rxReadPos] == SPACE)
 5a4:	da 01       	movw	r26, r20
 5a6:	a8 0f       	add	r26, r24
 5a8:	b1 1d       	adc	r27, r1
 5aa:	8c 91       	ld	r24, X
 5ac:	08 2e       	mov	r0, r24
 5ae:	00 0c       	add	r0, r0
 5b0:	99 0b       	sbc	r25, r25
 5b2:	8e 17       	cp	r24, r30
 5b4:	9f 07       	cpc	r25, r31
 5b6:	91 f4       	brne	.+36     	; 0x5dc <__stack+0x17d>
				{
					++rxReadPos;
 5b8:	22 e0       	ldi	r18, 0x02	; 2
 5ba:	23 0f       	add	r18, r19
 5bc:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <rxReadPos>
					++Space_num;
 5c0:	ff 24       	eor	r15, r15
 5c2:	f3 94       	inc	r15
 5c4:	f6 0e       	add	r15, r22
 5c6:	f0 92 82 02 	sts	0x0282, r15	; 0x800282 <Space_num>
				else
				{
					flag = 1;
					break;
				}
				Number_num=0;
 5ca:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <Number_num>
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 5ce:	da 01       	movw	r26, r20
 5d0:	a2 0f       	add	r26, r18
 5d2:	b1 1d       	adc	r27, r1
 5d4:	8c 91       	ld	r24, X
 5d6:	78 13       	cpse	r23, r24
 5d8:	25 c0       	rjmp	.+74     	; 0x624 <__stack+0x1c5>
 5da:	cb c1       	rjmp	.+918    	; 0x972 <__stack+0x513>
					++rxReadPos;
					++Space_num;
				}
				else
				{
					flag = 1;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
					break;
 5e2:	71 c0       	rjmp	.+226    	; 0x6c6 <__stack+0x267>
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	
 5e4:	20 53       	subi	r18, 0x30	; 48
 5e6:	2a 30       	cpi	r18, 0x0A	; 10
 5e8:	d0 f4       	brcc	.+52     	; 0x61e <__stack+0x1bf>
					{
						Number_num++;
 5ea:	6f 5f       	subi	r22, 0xFF	; 255
 5ec:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <Number_num>
 5f0:	8c 01       	movw	r16, r24
 5f2:	00 0f       	add	r16, r16
 5f4:	11 1f       	adc	r17, r17
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	80 0f       	add	r24, r16
 604:	91 1f       	adc	r25, r17
 606:	c0 97       	sbiw	r24, 0x30	; 48

						k = 10 * k + (data[rxReadPos] - '0');
 608:	2c 91       	ld	r18, X
 60a:	82 0f       	add	r24, r18
 60c:	91 1d       	adc	r25, r1
 60e:	27 fd       	sbrc	r18, 7
 610:	9a 95       	dec	r25
						rxReadPos++;
 612:	3f 5f       	subi	r19, 0xFF	; 255
 614:	30 93 7b 00 	sts	0x007B, r19	; 0x80007b <rxReadPos>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 618:	63 30       	cpi	r22, 0x03	; 3
 61a:	79 f4       	brne	.+30     	; 0x63a <__stack+0x1db>
 61c:	16 c0       	rjmp	.+44     	; 0x64a <__stack+0x1eb>
						k = 10 * k + (data[rxReadPos] - '0');
						rxReadPos++;
					}
					else
					{
						flag = 1;
 61e:	e0 92 7d 00 	sts	0x007D, r14	; 0x80007d <flag>
						break;
 622:	13 c0       	rjmp	.+38     	; 0x64a <__stack+0x1eb>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 624:	80 32       	cpi	r24, 0x20	; 32
 626:	09 f4       	brne	.+2      	; 0x62a <__stack+0x1cb>
 628:	a4 c1       	rjmp	.+840    	; 0x972 <__stack+0x513>
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	
 62a:	80 53       	subi	r24, 0x30	; 48
 62c:	8a 30       	cpi	r24, 0x0A	; 10
 62e:	08 f4       	brcc	.+2      	; 0x632 <__stack+0x1d3>
 630:	cd c1       	rjmp	.+922    	; 0x9cc <__stack+0x56d>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 632:	60 e0       	ldi	r22, 0x00	; 0
				{
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
 634:	8c 2d       	mov	r24, r12
 636:	9d 2d       	mov	r25, r13
 638:	f2 cf       	rjmp	.-28     	; 0x61e <__stack+0x1bf>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 63a:	da 01       	movw	r26, r20
 63c:	a3 0f       	add	r26, r19
 63e:	b1 1d       	adc	r27, r1
 640:	2c 91       	ld	r18, X
 642:	72 17       	cp	r23, r18
 644:	11 f0       	breq	.+4      	; 0x64a <__stack+0x1eb>
 646:	20 32       	cpi	r18, 0x20	; 32
 648:	69 f6       	brne	.-102    	; 0x5e4 <__stack+0x185>
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE))  
 64a:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <rxReadPos>
 64e:	da 01       	movw	r26, r20
 650:	a2 0f       	add	r26, r18
 652:	b1 1d       	adc	r27, r1
 654:	ac 91       	ld	r26, X
 656:	0a 2e       	mov	r0, r26
 658:	00 0c       	add	r0, r0
 65a:	bb 0b       	sbc	r27, r27
 65c:	ea 17       	cp	r30, r26
 65e:	fb 07       	cpc	r31, r27
 660:	39 f4       	brne	.+14     	; 0x670 <__stack+0x211>
 662:	03 c0       	rjmp	.+6      	; 0x66a <__stack+0x20b>
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	8c 2d       	mov	r24, r12
 668:	9d 2d       	mov	r25, r13
				rxReadPos--;
 66a:	21 50       	subi	r18, 0x01	; 1
 66c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <rxReadPos>
				if(Number_num == 0)				
 670:	61 11       	cpse	r22, r1
 672:	04 c0       	rjmp	.+8      	; 0x67c <__stack+0x21d>
				{
					flag = 1;
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
					break;
 67a:	25 c0       	rjmp	.+74     	; 0x6c6 <__stack+0x267>
				}
				if(k > 255 && Space_num ==1)
 67c:	8f 3f       	cpi	r24, 0xFF	; 255
 67e:	91 05       	cpc	r25, r1
 680:	29 f0       	breq	.+10     	; 0x68c <__stack+0x22d>
 682:	20 f0       	brcs	.+8      	; 0x68c <__stack+0x22d>
 684:	21 e0       	ldi	r18, 0x01	; 1
 686:	f2 12       	cpse	r15, r18
 688:	7c c1       	rjmp	.+760    	; 0x982 <__stack+0x523>
 68a:	2f c0       	rjmp	.+94     	; 0x6ea <__stack+0x28b>
				{
					flag = 1;
					break;
				}
				else if (k > 15 && Space_num ==2)
 68c:	80 31       	cpi	r24, 0x10	; 16
 68e:	91 05       	cpc	r25, r1
 690:	38 f0       	brcs	.+14     	; 0x6a0 <__stack+0x241>
 692:	32 e0       	ldi	r19, 0x02	; 2
 694:	f3 12       	cpse	r15, r19
 696:	79 c1       	rjmp	.+754    	; 0x98a <__stack+0x52b>
				{
					flag = 1;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
					break;
 69e:	17 c0       	rjmp	.+46     	; 0x6ce <__stack+0x26f>
				}
				if(Space_num == 1)
 6a0:	21 e0       	ldi	r18, 0x01	; 1
 6a2:	f2 12       	cpse	r15, r18
 6a4:	03 c0       	rjmp	.+6      	; 0x6ac <__stack+0x24d>
				par1 =(uint8_t) k ;
 6a6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <par1>
 6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <__stack+0x257>
				else if(Space_num == 2)
 6ac:	32 e0       	ldi	r19, 0x02	; 2
 6ae:	f3 12       	cpse	r15, r19
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <__stack+0x257>
				par2 =(uint8_t)k ;
 6b2:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <par2>
			
		}
		//////////////////////////////////////////////// SUM /////////////////////////////////////////////////////
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 85) &&(data[rxReadPos + 2] == 77) ){
			rxReadPos+=2;
			while(data[rxReadPos] != CR[0])
 6b6:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <rxReadPos>
 6ba:	da 01       	movw	r26, r20
 6bc:	a3 0f       	add	r26, r19
 6be:	b1 1d       	adc	r27, r1
 6c0:	8c 91       	ld	r24, X
 6c2:	87 13       	cpse	r24, r23
 6c4:	63 cf       	rjmp	.-314    	; 0x58c <__stack+0x12d>
				else if(Space_num == 2)
				par2 =(uint8_t)k ;
				else
				NULL;
			}//WHILE LOOP END
			if((Space_num == 1)||(Space_num == 0) || (par1+par2>255)){
 6c6:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <Space_num>
 6ca:	82 30       	cpi	r24, 0x02	; 2
 6cc:	70 f0       	brcs	.+28     	; 0x6ea <__stack+0x28b>
 6ce:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <par1>
 6d2:	8e 2f       	mov	r24, r30
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <par2>
 6da:	50 e0       	ldi	r21, 0x00	; 0
 6dc:	9c 01       	movw	r18, r24
 6de:	24 0f       	add	r18, r20
 6e0:	35 1f       	adc	r19, r21
 6e2:	2f 3f       	cpi	r18, 0xFF	; 255
 6e4:	31 05       	cpc	r19, r1
 6e6:	29 f0       	breq	.+10     	; 0x6f2 <__stack+0x293>
 6e8:	24 f0       	brlt	.+8      	; 0x6f2 <__stack+0x293>
				flag = 1;
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
 6f0:	21 c1       	rjmp	.+578    	; 0x934 <__stack+0x4d5>
			}
			
			if (flag!=1)
 6f2:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <flag>
 6f6:	21 30       	cpi	r18, 0x01	; 1
 6f8:	09 f4       	brne	.+2      	; 0x6fc <__stack+0x29d>
 6fa:	1c c1       	rjmp	.+568    	; 0x934 <__stack+0x4d5>
			{
				uint16_t sum=0;
				for(int i = par1; i<=par2 ; i++)
 6fc:	48 17       	cp	r20, r24
 6fe:	59 07       	cpc	r21, r25
 700:	6c f0       	brlt	.+26     	; 0x71c <__stack+0x2bd>
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	e1 58       	subi	r30, 0x81	; 129
 706:	ff 4f       	sbci	r31, 0xFF	; 255
 708:	00 e0       	ldi	r16, 0x00	; 0
 70a:	10 e0       	ldi	r17, 0x00	; 0
				{
					sum+=MEM[i];
 70c:	21 91       	ld	r18, Z+
 70e:	02 0f       	add	r16, r18
			}
			
			if (flag!=1)
			{
				uint16_t sum=0;
				for(int i = par1; i<=par2 ; i++)
 710:	11 1d       	adc	r17, r1
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	48 17       	cp	r20, r24
 716:	59 07       	cpc	r21, r25
 718:	cc f7       	brge	.-14     	; 0x70c <__stack+0x2ad>
				flag = 1;
			}
			
			if (flag!=1)
			{
				uint16_t sum=0;
 71a:	02 c0       	rjmp	.+4      	; 0x720 <__stack+0x2c1>
 71c:	00 e0       	ldi	r16, 0x00	; 0
				for(int i = par1; i<=par2 ; i++)
				{
					sum+=MEM[i];
				}
				char t[4];
				Transmit("\n",0,strlen("\n"));
 71e:	10 e0       	ldi	r17, 0x00	; 0
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	87 e6       	ldi	r24, 0x67	; 103
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	b2 dc       	rcall	.-1692   	; 0x8e <Transmit>
 72a:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <par2>
 72e:	0f 2e       	mov	r0, r31
 730:	f9 e2       	ldi	r31, 0x29	; 41
 732:	df 2e       	mov	r13, r31
 734:	f0 2d       	mov	r31, r0
 736:	8d 9d       	mul	r24, r13
 738:	81 2d       	mov	r24, r1
 73a:	11 24       	eor	r1, r1
 73c:	82 95       	swap	r24
 73e:	8f 70       	andi	r24, 0x0F	; 15
 740:	4a e0       	ldi	r20, 0x0A	; 10
 742:	be 01       	movw	r22, r28
 744:	6f 5f       	subi	r22, 0xFF	; 255
 746:	7f 4f       	sbci	r23, 0xFF	; 255
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	27 d2       	rcall	.+1102   	; 0xb9a <__itoa_ncheck>
				Transmit(itoa( (sum/(1000))%(10),t,10),0,strlen(itoa((par2/(100))%(10),t,10)));
 74c:	fc 01       	movw	r30, r24
 74e:	01 90       	ld	r0, Z+
 750:	00 20       	and	r0, r0
 752:	e9 f7       	brne	.-6      	; 0x74e <__stack+0x2ef>
 754:	31 97       	sbiw	r30, 0x01	; 1
 756:	7f 01       	movw	r14, r30
 758:	e8 1a       	sub	r14, r24
 75a:	f9 0a       	sbc	r15, r25
 75c:	98 01       	movw	r18, r16
 75e:	36 95       	lsr	r19
 760:	27 95       	ror	r18
 762:	36 95       	lsr	r19
 764:	27 95       	ror	r18
 766:	36 95       	lsr	r19
 768:	27 95       	ror	r18
 76a:	a5 ec       	ldi	r26, 0xC5	; 197
 76c:	b0 e2       	ldi	r27, 0x20	; 32
 76e:	06 d2       	rcall	.+1036   	; 0xb7c <__umulhisi3>
 770:	fc 01       	movw	r30, r24
 772:	f2 95       	swap	r31
 774:	e2 95       	swap	r30
 776:	ef 70       	andi	r30, 0x0F	; 15
 778:	ef 27       	eor	r30, r31
 77a:	ff 70       	andi	r31, 0x0F	; 15
 77c:	ef 27       	eor	r30, r31
 77e:	9f 01       	movw	r18, r30
 780:	ad ec       	ldi	r26, 0xCD	; 205
 782:	bc ec       	ldi	r27, 0xCC	; 204
 784:	fb d1       	rcall	.+1014   	; 0xb7c <__umulhisi3>
 786:	96 95       	lsr	r25
 788:	87 95       	ror	r24
 78a:	96 95       	lsr	r25
 78c:	87 95       	ror	r24
 78e:	96 95       	lsr	r25
 790:	87 95       	ror	r24
 792:	9c 01       	movw	r18, r24
 794:	22 0f       	add	r18, r18
 796:	33 1f       	adc	r19, r19
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	82 0f       	add	r24, r18
 7a6:	93 1f       	adc	r25, r19
 7a8:	4a e0       	ldi	r20, 0x0A	; 10
 7aa:	be 01       	movw	r22, r28
 7ac:	6f 5f       	subi	r22, 0xFF	; 255
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	9f 01       	movw	r18, r30
 7b2:	28 1b       	sub	r18, r24
 7b4:	39 0b       	sbc	r19, r25
 7b6:	c9 01       	movw	r24, r18
 7b8:	f0 d1       	rcall	.+992    	; 0xb9a <__itoa_ncheck>
 7ba:	4e 2d       	mov	r20, r14
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	67 dc       	rcall	.-1842   	; 0x8e <Transmit>
 7c0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <par2>
 7c4:	8d 9d       	mul	r24, r13
 7c6:	81 2d       	mov	r24, r1
 7c8:	11 24       	eor	r1, r1
 7ca:	82 95       	swap	r24
 7cc:	8f 70       	andi	r24, 0x0F	; 15
 7ce:	4a e0       	ldi	r20, 0x0A	; 10
 7d0:	be 01       	movw	r22, r28
 7d2:	6f 5f       	subi	r22, 0xFF	; 255
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	e0 d1       	rcall	.+960    	; 0xb9a <__itoa_ncheck>
				Transmit(itoa( (sum/(100))%(10),t,10),0,strlen(itoa((par2/(100))%(10),t,10)));
 7da:	fc 01       	movw	r30, r24
 7dc:	01 90       	ld	r0, Z+
 7de:	00 20       	and	r0, r0
 7e0:	e9 f7       	brne	.-6      	; 0x7dc <__stack+0x37d>
 7e2:	31 97       	sbiw	r30, 0x01	; 1
 7e4:	7f 01       	movw	r14, r30
 7e6:	e8 1a       	sub	r14, r24
 7e8:	f9 0a       	sbc	r15, r25
 7ea:	98 01       	movw	r18, r16
 7ec:	36 95       	lsr	r19
 7ee:	27 95       	ror	r18
 7f0:	36 95       	lsr	r19
 7f2:	27 95       	ror	r18
 7f4:	ab e7       	ldi	r26, 0x7B	; 123
 7f6:	b4 e1       	ldi	r27, 0x14	; 20
 7f8:	c1 d1       	rcall	.+898    	; 0xb7c <__umulhisi3>
 7fa:	fc 01       	movw	r30, r24
 7fc:	f6 95       	lsr	r31
 7fe:	e7 95       	ror	r30
 800:	9f 01       	movw	r18, r30
 802:	ad ec       	ldi	r26, 0xCD	; 205
 804:	bc ec       	ldi	r27, 0xCC	; 204
 806:	ba d1       	rcall	.+884    	; 0xb7c <__umulhisi3>
 808:	96 95       	lsr	r25
 80a:	87 95       	ror	r24
 80c:	96 95       	lsr	r25
 80e:	87 95       	ror	r24
 810:	96 95       	lsr	r25
 812:	87 95       	ror	r24
 814:	9c 01       	movw	r18, r24
 816:	22 0f       	add	r18, r18
 818:	33 1f       	adc	r19, r19
 81a:	88 0f       	add	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	82 0f       	add	r24, r18
 828:	93 1f       	adc	r25, r19
 82a:	4a e0       	ldi	r20, 0x0A	; 10
 82c:	be 01       	movw	r22, r28
 82e:	6f 5f       	subi	r22, 0xFF	; 255
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	9f 01       	movw	r18, r30
 834:	28 1b       	sub	r18, r24
 836:	39 0b       	sbc	r19, r25
 838:	c9 01       	movw	r24, r18
 83a:	af d1       	rcall	.+862    	; 0xb9a <__itoa_ncheck>
 83c:	4e 2d       	mov	r20, r14
 83e:	60 e0       	ldi	r22, 0x00	; 0
 840:	26 dc       	rcall	.-1972   	; 0x8e <Transmit>
 842:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <par2>
 846:	8d 9d       	mul	r24, r13
 848:	81 2d       	mov	r24, r1
 84a:	11 24       	eor	r1, r1
 84c:	82 95       	swap	r24
 84e:	8f 70       	andi	r24, 0x0F	; 15
 850:	4a e0       	ldi	r20, 0x0A	; 10
 852:	be 01       	movw	r22, r28
 854:	6f 5f       	subi	r22, 0xFF	; 255
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	90 e0       	ldi	r25, 0x00	; 0
				Transmit(itoa( (sum/(10))%(10),t,10),0,strlen(itoa((par2/(100))%(10),t,10)));
 85a:	9f d1       	rcall	.+830    	; 0xb9a <__itoa_ncheck>
 85c:	fc 01       	movw	r30, r24
 85e:	01 90       	ld	r0, Z+
 860:	00 20       	and	r0, r0
 862:	e9 f7       	brne	.-6      	; 0x85e <__stack+0x3ff>
 864:	31 97       	sbiw	r30, 0x01	; 1
 866:	5f 01       	movw	r10, r30
 868:	a8 1a       	sub	r10, r24
 86a:	b9 0a       	sbc	r11, r25
 86c:	98 01       	movw	r18, r16
 86e:	ad ec       	ldi	r26, 0xCD	; 205
 870:	bc ec       	ldi	r27, 0xCC	; 204
 872:	84 d1       	rcall	.+776    	; 0xb7c <__umulhisi3>
 874:	7c 01       	movw	r14, r24
 876:	f6 94       	lsr	r15
 878:	e7 94       	ror	r14
 87a:	f6 94       	lsr	r15
 87c:	e7 94       	ror	r14
 87e:	f6 94       	lsr	r15
 880:	e7 94       	ror	r14
 882:	97 01       	movw	r18, r14
 884:	7b d1       	rcall	.+758    	; 0xb7c <__umulhisi3>
 886:	96 95       	lsr	r25
 888:	87 95       	ror	r24
 88a:	96 95       	lsr	r25
 88c:	87 95       	ror	r24
 88e:	96 95       	lsr	r25
 890:	87 95       	ror	r24
 892:	9c 01       	movw	r18, r24
 894:	22 0f       	add	r18, r18
 896:	33 1f       	adc	r19, r19
 898:	88 0f       	add	r24, r24
 89a:	99 1f       	adc	r25, r25
 89c:	88 0f       	add	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	82 0f       	add	r24, r18
 8a6:	93 1f       	adc	r25, r19
 8a8:	4a e0       	ldi	r20, 0x0A	; 10
 8aa:	be 01       	movw	r22, r28
 8ac:	6f 5f       	subi	r22, 0xFF	; 255
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	f7 01       	movw	r30, r14
 8b2:	e8 1b       	sub	r30, r24
 8b4:	f9 0b       	sbc	r31, r25
 8b6:	cf 01       	movw	r24, r30
 8b8:	70 d1       	rcall	.+736    	; 0xb9a <__itoa_ncheck>
 8ba:	4a 2d       	mov	r20, r10
 8bc:	60 e0       	ldi	r22, 0x00	; 0
 8be:	e7 db       	rcall	.-2098   	; 0x8e <Transmit>
 8c0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <par2>
 8c4:	8d 9d       	mul	r24, r13
 8c6:	81 2d       	mov	r24, r1
 8c8:	11 24       	eor	r1, r1
 8ca:	82 95       	swap	r24
 8cc:	8f 70       	andi	r24, 0x0F	; 15
 8ce:	4a e0       	ldi	r20, 0x0A	; 10
 8d0:	be 01       	movw	r22, r28
 8d2:	6f 5f       	subi	r22, 0xFF	; 255
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	60 d1       	rcall	.+704    	; 0xb9a <__itoa_ncheck>
				Transmit(itoa( (sum/(1))%(10),t,10),0,strlen(itoa((par2/(100))%(10),t,10)));
 8da:	fc 01       	movw	r30, r24
 8dc:	01 90       	ld	r0, Z+
 8de:	00 20       	and	r0, r0
 8e0:	e9 f7       	brne	.-6      	; 0x8dc <__stack+0x47d>
 8e2:	31 97       	sbiw	r30, 0x01	; 1
 8e4:	6f 01       	movw	r12, r30
 8e6:	c8 1a       	sub	r12, r24
 8e8:	d9 0a       	sbc	r13, r25
 8ea:	c7 01       	movw	r24, r14
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	ee 0c       	add	r14, r14
 8f2:	ff 1c       	adc	r15, r15
 8f4:	ee 0c       	add	r14, r14
 8f6:	ff 1c       	adc	r15, r15
 8f8:	ee 0c       	add	r14, r14
 8fa:	ff 1c       	adc	r15, r15
 8fc:	8e 0d       	add	r24, r14
 8fe:	9f 1d       	adc	r25, r15
 900:	4a e0       	ldi	r20, 0x0A	; 10
 902:	be 01       	movw	r22, r28
 904:	6f 5f       	subi	r22, 0xFF	; 255
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	98 01       	movw	r18, r16
 90a:	28 1b       	sub	r18, r24
 90c:	39 0b       	sbc	r19, r25
 90e:	c9 01       	movw	r24, r18
 910:	44 d1       	rcall	.+648    	; 0xb9a <__itoa_ncheck>
 912:	4c 2d       	mov	r20, r12
 914:	60 e0       	ldi	r22, 0x00	; 0
				Transmit("\n\r",0,strlen("\n\r"));
 916:	bb db       	rcall	.-2186   	; 0x8e <Transmit>
 918:	42 e0       	ldi	r20, 0x02	; 2
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	84 e6       	ldi	r24, 0x64	; 100
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	b6 db       	rcall	.-2196   	; 0x8e <Transmit>
 922:	04 c0       	rjmp	.+8      	; 0x92c <__stack+0x4cd>
				
			}
		}
		else
			flag = 1;
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <flag>
 92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0x4d5>
			
		

	if(flag == 1)        // Error found, break while loop (rxreadps --> CR)
 92c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <flag>
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	49 f4       	brne	.+18     	; 0x946 <__stack+0x4e7>
	{					
		rxReadPos = rxWritePos;  
 934:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 938:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <rxReadPos>
		Transmit("\nER\n\r",0,strlen("\nER\n\r"));
 93c:	45 e0       	ldi	r20, 0x05	; 5
 93e:	60 e0       	ldi	r22, 0x00	; 0
 940:	89 e6       	ldi	r24, 0x69	; 105
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	a4 db       	rcall	.-2232   	; 0x8e <Transmit>
 946:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <rxReadPos>
	}

	rxReadPos++;		//Ready for the next command (directs to the next letter) 
 94a:	8f 5f       	subi	r24, 0xFF	; 255
 94c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <rxReadPos>
 950:	59 c0       	rjmp	.+178    	; 0xa04 <__stack+0x5a5>
	

				
}
 952:	89 2f       	mov	r24, r25
						break;
					}	
				}
				//the above while has broken because we detected a space so we cancel the rxreadpos increase
				//must be counted in the next loop, as a part of the space detection code
				if((data[rxReadPos] == SPACE))  
 954:	99 0f       	add	r25, r25
 956:	99 0b       	sbc	r25, r25
 958:	a8 16       	cp	r10, r24
 95a:	b9 06       	cpc	r11, r25
 95c:	09 f4       	brne	.+2      	; 0x960 <__stack+0x501>
 95e:	70 cc       	rjmp	.-1824   	; 0x240 <Check_Input+0x182>
 960:	77 cc       	rjmp	.-1810   	; 0x250 <Check_Input+0x192>
 962:	89 2f       	mov	r24, r25
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE)) 
 964:	99 0f       	add	r25, r25
 966:	99 0b       	sbc	r25, r25
 968:	a8 16       	cp	r10, r24
 96a:	b9 06       	cpc	r11, r25
 96c:	09 f4       	brne	.+2      	; 0x970 <__stack+0x511>
 96e:	2a cd       	rjmp	.-1452   	; 0x3c4 <Check_Input+0x306>
 970:	31 cd       	rjmp	.-1438   	; 0x3d4 <Check_Input+0x316>
 972:	08 2e       	mov	r0, r24
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE))  
 974:	00 0c       	add	r0, r0
 976:	99 0b       	sbc	r25, r25
 978:	e8 17       	cp	r30, r24
 97a:	f9 07       	cpc	r31, r25
 97c:	09 f4       	brne	.+2      	; 0x980 <__stack+0x521>
 97e:	72 ce       	rjmp	.-796    	; 0x664 <__stack+0x205>
 980:	79 ce       	rjmp	.-782    	; 0x674 <__stack+0x215>
 982:	80 31       	cpi	r24, 0x10	; 16
				if(k > 255 && Space_num ==1)
				{
					flag = 1;
					break;
				}
				else if (k > 15 && Space_num ==2)
 984:	91 05       	cpc	r25, r1
 986:	d0 f5       	brcc	.+116    	; 0x9fc <__stack+0x59d>
 988:	91 ce       	rjmp	.-734    	; 0x6ac <__stack+0x24d>
 98a:	31 e0       	ldi	r19, 0x01	; 1
				{
					flag = 1;
					break;
				}
				if(Space_num == 1)
 98c:	f3 16       	cp	r15, r19
 98e:	09 f4       	brne	.+2      	; 0x992 <__stack+0x533>
 990:	8a ce       	rjmp	.-748    	; 0x6a6 <__stack+0x247>
 992:	91 ce       	rjmp	.-734    	; 0x6b6 <__stack+0x257>
 994:	e0 92 80 02 	sts	0x0280, r14	; 0x800280 <Number_num>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 998:	f9 01       	movw	r30, r18

						k = 10 * k + (data[rxReadPos] - '0');	//conversion to int
 99a:	20 81       	ld	r18, Z
 99c:	02 2e       	mov	r0, r18
 99e:	00 0c       	add	r0, r0
 9a0:	33 0b       	sbc	r19, r19
 9a2:	20 53       	subi	r18, 0x30	; 48
 9a4:	31 09       	sbc	r19, r1
 9a6:	8d 5f       	subi	r24, 0xFD	; 253
						rxReadPos++;
 9a8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <rxReadPos>
 9ac:	61 e0       	ldi	r22, 0x01	; 1
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 9ae:	32 cc       	rjmp	.-1948   	; 0x214 <Check_Input+0x156>
 9b0:	e0 92 80 02 	sts	0x0280, r14	; 0x800280 <Number_num>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 9b4:	f9 01       	movw	r30, r18

						k = 10 * k + (data[rxReadPos] - '0');
 9b6:	20 81       	ld	r18, Z
 9b8:	02 2e       	mov	r0, r18
 9ba:	00 0c       	add	r0, r0
 9bc:	33 0b       	sbc	r19, r19
 9be:	20 53       	subi	r18, 0x30	; 48
 9c0:	31 09       	sbc	r19, r1
 9c2:	8d 5f       	subi	r24, 0xFD	; 253
						rxReadPos++;
 9c4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <rxReadPos>
 9c8:	61 e0       	ldi	r22, 0x01	; 1
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 9ca:	e6 cc       	rjmp	.-1588   	; 0x398 <Check_Input+0x2da>
 9cc:	e0 92 80 02 	sts	0x0280, r14	; 0x800280 <Number_num>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	
					{
						Number_num++;
 9d0:	8c 91       	ld	r24, X

						k = 10 * k + (data[rxReadPos] - '0');
 9d2:	08 2e       	mov	r0, r24
 9d4:	00 0c       	add	r0, r0
 9d6:	99 0b       	sbc	r25, r25
 9d8:	c0 97       	sbiw	r24, 0x30	; 48
 9da:	3d 5f       	subi	r19, 0xFD	; 253
						rxReadPos++;
 9dc:	30 93 7b 00 	sts	0x007B, r19	; 0x80007b <rxReadPos>
 9e0:	61 e0       	ldi	r22, 0x01	; 1
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	
					{
						Number_num++;
 9e2:	2b ce       	rjmp	.-938    	; 0x63a <__stack+0x1db>
 9e4:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <Space_num>
					par2 =(uint8_t) k ;
				else
					NULL;
			}//WHILE LOOP 
			// error checking: too few spaces used 
			if((Space_num == 1)||(Space_num == 0)){
 9e8:	82 30       	cpi	r24, 0x02	; 2
 9ea:	08 f4       	brcc	.+2      	; 0x9ee <__stack+0x58f>
 9ec:	54 cc       	rjmp	.-1880   	; 0x296 <Check_Input+0x1d8>
 9ee:	a2 cf       	rjmp	.-188    	; 0x934 <__stack+0x4d5>
 9f0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <Space_num>
				if(Space_num == 1)
				par1 =(uint8_t) k ;
				else
				NULL;
			}//WHILE LOOP END
			if((Space_num == 0)){
 9f4:	88 23       	and	r24, r24
 9f6:	09 f4       	brne	.+2      	; 0x9fa <__stack+0x59b>
 9f8:	0a cd       	rjmp	.-1516   	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 9fa:	9c cf       	rjmp	.-200    	; 0x934 <__stack+0x4d5>
 9fc:	22 e0       	ldi	r18, 0x02	; 2
				if(k > 255 && Space_num ==1)
				{
					flag = 1;
					break;
				}
				else if (k > 15 && Space_num ==2)
 9fe:	f2 12       	cpse	r15, r18
 a00:	5a ce       	rjmp	.-844    	; 0x6b6 <__stack+0x257>
 a02:	4a ce       	rjmp	.-876    	; 0x698 <__stack+0x239>
 a04:	0f 90       	pop	r0

	rxReadPos++;		//Ready for the next command (directs to the next letter) 
	

				
}
 a06:	0f 90       	pop	r0
 a08:	0f 90       	pop	r0
 a0a:	0f 90       	pop	r0
 a0c:	df 91       	pop	r29
 a0e:	cf 91       	pop	r28
 a10:	1f 91       	pop	r17
 a12:	0f 91       	pop	r16
 a14:	ff 90       	pop	r15
 a16:	ef 90       	pop	r14
 a18:	df 90       	pop	r13
 a1a:	cf 90       	pop	r12
 a1c:	bf 90       	pop	r11
 a1e:	af 90       	pop	r10
 a20:	08 95       	ret

00000a22 <__vector_11>:
 a22:	1f 92       	push	r1


ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
 a24:	0f 92       	push	r0
 a26:	0f b6       	in	r0, 0x3f	; 63
 a28:	0f 92       	push	r0
 a2a:	11 24       	eor	r1, r1
 a2c:	2f 93       	push	r18
 a2e:	3f 93       	push	r19
 a30:	4f 93       	push	r20
 a32:	5f 93       	push	r21
 a34:	6f 93       	push	r22
 a36:	7f 93       	push	r23
 a38:	8f 93       	push	r24
 a3a:	9f 93       	push	r25
 a3c:	af 93       	push	r26
 a3e:	bf 93       	push	r27
 a40:	ef 93       	push	r30
 a42:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
 a44:	8c b1       	in	r24, 0x0c	; 12
 a46:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	ec 57       	subi	r30, 0x7C	; 124
 a4e:	fd 4f       	sbci	r31, 0xFD	; 253
 a50:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
 a52:	5d 9b       	sbis	0x0b, 5	; 11
 a54:	fe cf       	rjmp	.-4      	; 0xa52 <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
 a56:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
 a58:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	ec 57       	subi	r30, 0x7C	; 124
 a60:	fd 4f       	sbci	r31, 0xFD	; 253
 a62:	90 81       	ld	r25, Z
 a64:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <CR>
 a68:	98 13       	cpse	r25, r24
 a6a:	03 c0       	rjmp	.+6      	; 0xa72 <__vector_11+0x50>
		Check_Input(myrxbuffer);
 a6c:	84 e8       	ldi	r24, 0x84	; 132
 a6e:	92 e0       	ldi	r25, 0x02	; 2
 a70:	26 db       	rcall	.-2484   	; 0xbe <Check_Input>
	

	rxWritePos++;
 a72:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 a76:	8f 5f       	subi	r24, 0xFF	; 255
 a78:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
 a7c:	ff 91       	pop	r31
 a7e:	ef 91       	pop	r30
 a80:	bf 91       	pop	r27
 a82:	af 91       	pop	r26
 a84:	9f 91       	pop	r25
 a86:	8f 91       	pop	r24
 a88:	7f 91       	pop	r23
 a8a:	6f 91       	pop	r22
 a8c:	5f 91       	pop	r21
 a8e:	4f 91       	pop	r20
 a90:	3f 91       	pop	r19
 a92:	2f 91       	pop	r18
 a94:	0f 90       	pop	r0
 a96:	0f be       	out	0x3f, r0	; 63
 a98:	0f 90       	pop	r0
 a9a:	1f 90       	pop	r1
 a9c:	18 95       	reti

00000a9e <__vector_2>:
*   External interrupt handler
*	When the button is pushed, the next led will turn on while the previous one	will turn off
*/

ISR(INT1_vect)
{
 a9e:	1f 92       	push	r1
 aa0:	0f 92       	push	r0
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	0f 92       	push	r0
 aa6:	11 24       	eor	r1, r1
 aa8:	8f 93       	push	r24
 aaa:	9f 93       	push	r25
	// prevent ring progress until we disable the GICR (external interrupt)
	if(cliflag == 0)
 aac:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <cliflag>
 ab0:	81 11       	cpse	r24, r1
 ab2:	34 c0       	rjmp	.+104    	; 0xb1c <__vector_2+0x7e>
	{
		++state;
 ab4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <state>
 ab8:	8f 5f       	subi	r24, 0xFF	; 255
 aba:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <state>
		if(state >= 5)
 abe:	85 30       	cpi	r24, 0x05	; 5
 ac0:	20 f0       	brcs	.+8      	; 0xaca <__vector_2+0x2c>
		state = 1;
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <state>
 ac8:	02 c0       	rjmp	.+4      	; 0xace <__vector_2+0x30>
		if(state == 1)
 aca:	81 30       	cpi	r24, 0x01	; 1
 acc:	31 f4       	brne	.+12     	; 0xada <__vector_2+0x3c>
		{
			PORTB |= (1<<PORTB0);
 ace:	c0 9a       	sbi	0x18, 0	; 24
			PORTB ^= (1<<PORTB3);
 ad0:	98 b3       	in	r25, 0x18	; 24
 ad2:	88 e0       	ldi	r24, 0x08	; 8
 ad4:	89 27       	eor	r24, r25
 ad6:	88 bb       	out	0x18, r24	; 24
 ad8:	1e c0       	rjmp	.+60     	; 0xb16 <__vector_2+0x78>
		}
		else if (state == 2)
 ada:	82 30       	cpi	r24, 0x02	; 2
 adc:	49 f4       	brne	.+18     	; 0xaf0 <__vector_2+0x52>
		{
			PORTB ^= (1<<PORTB3);
 ade:	98 b3       	in	r25, 0x18	; 24
 ae0:	88 e0       	ldi	r24, 0x08	; 8
 ae2:	89 27       	eor	r24, r25
 ae4:	88 bb       	out	0x18, r24	; 24
			PORTB ^= (1<<PORTB2);
 ae6:	98 b3       	in	r25, 0x18	; 24
 ae8:	84 e0       	ldi	r24, 0x04	; 4
 aea:	89 27       	eor	r24, r25
 aec:	88 bb       	out	0x18, r24	; 24
 aee:	13 c0       	rjmp	.+38     	; 0xb16 <__vector_2+0x78>
		}
		else if (state == 3)
 af0:	83 30       	cpi	r24, 0x03	; 3
 af2:	49 f4       	brne	.+18     	; 0xb06 <__vector_2+0x68>
		{
			PORTB ^= (1<<PORTB2);
 af4:	98 b3       	in	r25, 0x18	; 24
 af6:	84 e0       	ldi	r24, 0x04	; 4
 af8:	89 27       	eor	r24, r25
 afa:	88 bb       	out	0x18, r24	; 24
			PORTB ^= (1<<PORTB1);
 afc:	98 b3       	in	r25, 0x18	; 24
 afe:	82 e0       	ldi	r24, 0x02	; 2
 b00:	89 27       	eor	r24, r25
 b02:	88 bb       	out	0x18, r24	; 24
 b04:	08 c0       	rjmp	.+16     	; 0xb16 <__vector_2+0x78>
		}
		else
		{
			PORTB ^= (1<<PORTB1);
 b06:	98 b3       	in	r25, 0x18	; 24
 b08:	82 e0       	ldi	r24, 0x02	; 2
 b0a:	89 27       	eor	r24, r25
 b0c:	88 bb       	out	0x18, r24	; 24
			PORTB ^= (1<<PORTB0);
 b0e:	98 b3       	in	r25, 0x18	; 24
 b10:	81 e0       	ldi	r24, 0x01	; 1
 b12:	89 27       	eor	r24, r25
 b14:	88 bb       	out	0x18, r24	; 24
		}
		cliflag = 1;
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <cliflag>
	}
	

	
}
 b1c:	9f 91       	pop	r25
 b1e:	8f 91       	pop	r24
 b20:	0f 90       	pop	r0
 b22:	0f be       	out	0x3f, r0	; 63
 b24:	0f 90       	pop	r0
 b26:	1f 90       	pop	r1
 b28:	18 95       	reti

00000b2a <init_serial>:



void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
 b2a:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
 b2c:	83 e3       	ldi	r24, 0x33	; 51
 b2e:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
 b30:	80 b5       	in	r24, 0x20	; 32
 b32:	8f 7e       	andi	r24, 0xEF	; 239
 b34:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
 b36:	80 b5       	in	r24, 0x20	; 32
 b38:	8f 7d       	andi	r24, 0xDF	; 223
 b3a:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
 b3c:	80 b5       	in	r24, 0x20	; 32
 b3e:	87 7f       	andi	r24, 0xF7	; 247
 b40:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
 b42:	86 e8       	ldi	r24, 0x86	; 134
 b44:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
 b46:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
 b48:	8a b1       	in	r24, 0x0a	; 10
 b4a:	88 61       	ori	r24, 0x18	; 24
 b4c:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
 b4e:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
 b50:	57 9a       	sbi	0x0a, 7	; 10
 b52:	08 95       	ret

00000b54 <main>:
unsigned char USART_Receive(void);


int main (void)
{
	board_init();
 b54:	9b da       	rcall	.-2762   	; 0x8c <board_init>
	init_serial();
 b56:	e9 df       	rcall	.-46     	; 0xb2a <init_serial>
 b58:	78 94       	sei
	sei();
 b5a:	49 e0       	ldi	r20, 0x09	; 9
			cliflag = 0;
		}
	}
	
	*/
	Transmit("\n\rGoodbye",0,strlen("\n\rGoodbye"));
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	8f e6       	ldi	r24, 0x6F	; 111
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	95 da       	rcall	.-2774   	; 0x8e <Transmit>
 b64:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b66:	84 e3       	ldi	r24, 0x34	; 52
 b68:	9c e0       	ldi	r25, 0x0C	; 12
 b6a:	21 50       	subi	r18, 0x01	; 1
 b6c:	80 40       	sbci	r24, 0x00	; 0
 b6e:	90 40       	sbci	r25, 0x00	; 0
 b70:	e1 f7       	brne	.-8      	; 0xb6a <main+0x16>
 b72:	00 c0       	rjmp	.+0      	; 0xb74 <main+0x20>
 b74:	00 00       	nop
 b76:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(500);
}
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	08 95       	ret

00000b7c <__umulhisi3>:
 b7c:	a2 9f       	mul	r26, r18
 b7e:	b0 01       	movw	r22, r0
 b80:	b3 9f       	mul	r27, r19
 b82:	c0 01       	movw	r24, r0
 b84:	a3 9f       	mul	r26, r19
 b86:	70 0d       	add	r23, r0
 b88:	81 1d       	adc	r24, r1
 b8a:	11 24       	eor	r1, r1
 b8c:	91 1d       	adc	r25, r1
 b8e:	b2 9f       	mul	r27, r18
 b90:	70 0d       	add	r23, r0
 b92:	81 1d       	adc	r24, r1
 b94:	11 24       	eor	r1, r1
 b96:	91 1d       	adc	r25, r1
 b98:	08 95       	ret

00000b9a <__itoa_ncheck>:
 b9a:	bb 27       	eor	r27, r27
 b9c:	4a 30       	cpi	r20, 0x0A	; 10
 b9e:	31 f4       	brne	.+12     	; 0xbac <__itoa_ncheck+0x12>
 ba0:	99 23       	and	r25, r25
 ba2:	22 f4       	brpl	.+8      	; 0xbac <__itoa_ncheck+0x12>
 ba4:	bd e2       	ldi	r27, 0x2D	; 45
 ba6:	90 95       	com	r25
 ba8:	81 95       	neg	r24
 baa:	9f 4f       	sbci	r25, 0xFF	; 255
 bac:	01 c0       	rjmp	.+2      	; 0xbb0 <__utoa_common>

00000bae <__utoa_ncheck>:
 bae:	bb 27       	eor	r27, r27

00000bb0 <__utoa_common>:
 bb0:	fb 01       	movw	r30, r22
 bb2:	55 27       	eor	r21, r21
 bb4:	aa 27       	eor	r26, r26
 bb6:	88 0f       	add	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	aa 1f       	adc	r26, r26
 bbc:	a4 17       	cp	r26, r20
 bbe:	10 f0       	brcs	.+4      	; 0xbc4 <__utoa_common+0x14>
 bc0:	a4 1b       	sub	r26, r20
 bc2:	83 95       	inc	r24
 bc4:	50 51       	subi	r21, 0x10	; 16
 bc6:	b9 f7       	brne	.-18     	; 0xbb6 <__utoa_common+0x6>
 bc8:	a0 5d       	subi	r26, 0xD0	; 208
 bca:	aa 33       	cpi	r26, 0x3A	; 58
 bcc:	08 f0       	brcs	.+2      	; 0xbd0 <__utoa_common+0x20>
 bce:	a9 5d       	subi	r26, 0xD9	; 217
 bd0:	a1 93       	st	Z+, r26
 bd2:	00 97       	sbiw	r24, 0x00	; 0
 bd4:	79 f7       	brne	.-34     	; 0xbb4 <__utoa_common+0x4>
 bd6:	b1 11       	cpse	r27, r1
 bd8:	b1 93       	st	Z+, r27
 bda:	11 92       	st	Z+, r1
 bdc:	cb 01       	movw	r24, r22
 bde:	00 c0       	rjmp	.+0      	; 0xbe0 <strrev>

00000be0 <strrev>:
 be0:	dc 01       	movw	r26, r24
 be2:	fc 01       	movw	r30, r24
 be4:	67 2f       	mov	r22, r23
 be6:	71 91       	ld	r23, Z+
 be8:	77 23       	and	r23, r23
 bea:	e1 f7       	brne	.-8      	; 0xbe4 <strrev+0x4>
 bec:	32 97       	sbiw	r30, 0x02	; 2
 bee:	04 c0       	rjmp	.+8      	; 0xbf8 <strrev+0x18>
 bf0:	7c 91       	ld	r23, X
 bf2:	6d 93       	st	X+, r22
 bf4:	70 83       	st	Z, r23
 bf6:	62 91       	ld	r22, -Z
 bf8:	ae 17       	cp	r26, r30
 bfa:	bf 07       	cpc	r27, r31
 bfc:	c8 f3       	brcs	.-14     	; 0xbf0 <strrev+0x10>
 bfe:	08 95       	ret

00000c00 <_exit>:
 c00:	f8 94       	cli

00000c02 <__stop_program>:
 c02:	ff cf       	rjmp	.-2      	; 0xc02 <__stop_program>
