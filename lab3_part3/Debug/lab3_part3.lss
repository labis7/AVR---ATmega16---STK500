
lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000008f6  0000098a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000030b  0080007c  0080007c  000009a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e73  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000841  00000000  00000000  00001907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f5c  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  000030a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fdc1  00000000  00000000  00003200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000728  00000000  00000000  00012fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000136e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  000137d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b9 c3       	rjmp	.+1906   	; 0x7a0 <__vector_11>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	3a c0       	rjmp	.+116    	; 0xaa <__vector_13>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	df d3       	rcall	.+1982   	; 0x846 <main>
  88:	34 c4       	rjmp	.+2152   	; 0x8f2 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
  8c:	08 95       	ret

0000008e <Transmit>:
			Sendmsg((char)i); //This func is used(easier),because 1 char per time is sent
			_delay_ms(500);
		}
		
	}
}
  8e:	9c 01       	movw	r18, r24
  90:	64 17       	cp	r22, r20
  92:	50 f4       	brcc	.+20     	; 0xa8 <Transmit+0x1a>
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <Transmit+0x6>
  98:	f9 01       	movw	r30, r18
  9a:	e6 0f       	add	r30, r22
  9c:	f1 1d       	adc	r31, r1
  9e:	90 81       	ld	r25, Z
  a0:	9c b9       	out	0x0c, r25	; 12
  a2:	6f 5f       	subi	r22, 0xFF	; 255
  a4:	46 13       	cpse	r20, r22
  a6:	f6 cf       	rjmp	.-20     	; 0x94 <Transmit+0x6>
  a8:	08 95       	ret

000000aa <__vector_13>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



ISR (USART_TXC_vect) { //  Interrupts for completed transmit data
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
		txReadPos++;
	}
	if(txReadPos >= BUFFER_SIZE)
		txReadPos = 0;
		*/
}
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <Check_Input>:



void Check_Input(char data[]){
  be:	af 92       	push	r10
  c0:	bf 92       	push	r11
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	00 d0       	rcall	.+0      	; 0xd4 <Check_Input+0x16>
  d4:	1f 92       	push	r1
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	ac 01       	movw	r20, r24
	
	//while(data[rxReadPos] != CR[0]){
		//
		flag = 0;
  dc:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <flag>
		Space_num = 0;
  e0:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <Space_num>
		
		//process
		//Transmit(myrxbuffer,0,rxWritePos);
		//Checking for AT<CR> command.
		
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
  e4:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <rxReadPos>
  e8:	83 2f       	mov	r24, r19
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	fa 01       	movw	r30, r20
  ee:	e8 0f       	add	r30, r24
  f0:	f9 1f       	adc	r31, r25
  f2:	20 81       	ld	r18, Z
  f4:	21 34       	cpi	r18, 0x41	; 65
  f6:	e9 f4       	brne	.+58     	; 0x132 <Check_Input+0x74>
  f8:	fa 01       	movw	r30, r20
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	21 81       	ldd	r18, Z+1	; 0x01
 100:	24 35       	cpi	r18, 0x54	; 84
 102:	09 f0       	breq	.+2      	; 0x106 <Check_Input+0x48>
 104:	d7 c2       	rjmp	.+1454   	; 0x6b4 <__stack+0x255>
		{
			if(data[rxReadPos+2] == CR[0]){
 106:	fa 01       	movw	r30, r20
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	92 81       	ldd	r25, Z+2	; 0x02
 10e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <CR>
 112:	98 13       	cpse	r25, r24
 114:	0a c0       	rjmp	.+20     	; 0x12a <Check_Input+0x6c>
				Transmit("OK\r",0 , strlen("OK\r"));
 116:	43 e0       	ldi	r20, 0x03	; 3
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	8c e6       	ldi	r24, 0x6C	; 108
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	b7 df       	rcall	.-146    	; 0x8e <Transmit>
				rxReadPos = rxWritePos;
 120:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 124:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rxReadPos>
 128:	c9 c2       	rjmp	.+1426   	; 0x6bc <__stack+0x25d>
			}
			else
				flag = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
 130:	c9 c2       	rjmp	.+1426   	; 0x6c4 <__stack+0x265>
		}
			//Checking for MW<SP>?<SP>?<CR> and SUM<SP>?<SP>?<CR> command.
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 87))		// "M" , "W"
 132:	2d 34       	cpi	r18, 0x4D	; 77
 134:	09 f0       	breq	.+2      	; 0x138 <Check_Input+0x7a>
 136:	05 c2       	rjmp	.+1034   	; 0x542 <__stack+0xe3>
 138:	fa 01       	movw	r30, r20
 13a:	e8 0f       	add	r30, r24
 13c:	f9 1f       	adc	r31, r25
 13e:	81 81       	ldd	r24, Z+1	; 0x01
 140:	87 35       	cpi	r24, 0x57	; 87
 142:	09 f0       	breq	.+2      	; 0x146 <Check_Input+0x88>
 144:	bf c0       	rjmp	.+382    	; 0x2c4 <Check_Input+0x206>
		{
			rxReadPos++;
 146:	3f 5f       	subi	r19, 0xFF	; 255
 148:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <rxReadPos>
			while(data[rxReadPos] != CR[0])
 14c:	70 91 7e 00 	lds	r23, 0x007E	; 0x80007e <CR>
					flag = 1;
					break;
				}

				rxReadPos++;
				if(data[rxReadPos] == SPACE)
 150:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <SPACE>
 154:	ae 2e       	mov	r10, r30
 156:	b1 2c       	mov	r11, r1
						flag = 1;
						break;
					}	
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 158:	c1 2c       	mov	r12, r1
 15a:	d1 2c       	mov	r13, r1
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 15c:	ee 24       	eor	r14, r14
 15e:	e3 94       	inc	r14
		}
			//Checking for MW<SP>?<SP>?<CR> and SUM<SP>?<SP>?<CR> command.
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 87))		// "M" , "W"
		{
			rxReadPos++;
			while(data[rxReadPos] != CR[0])
 160:	8e c0       	rjmp	.+284    	; 0x27e <Check_Input+0x1c0>
			{	
				if(Space_num == 2)
 162:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <Space_num>
 166:	92 30       	cpi	r25, 0x02	; 2
 168:	21 f4       	brne	.+8      	; 0x172 <Check_Input+0xb4>
				{
					flag = 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
 170:	a9 c2       	rjmp	.+1362   	; 0x6c4 <__stack+0x265>
					break;
				}

				rxReadPos++;
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	28 0f       	add	r18, r24
 176:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <rxReadPos>
				if(data[rxReadPos] == SPACE)
 17a:	da 01       	movw	r26, r20
 17c:	a2 0f       	add	r26, r18
 17e:	b1 1d       	adc	r27, r1
 180:	2c 91       	ld	r18, X
 182:	02 2e       	mov	r0, r18
 184:	00 0c       	add	r0, r0
 186:	33 0b       	sbc	r19, r19
 188:	2a 15       	cp	r18, r10
 18a:	3b 05       	cpc	r19, r11
 18c:	99 f4       	brne	.+38     	; 0x1b4 <Check_Input+0xf6>
				{
					++rxReadPos;
 18e:	a2 e0       	ldi	r26, 0x02	; 2
 190:	a8 0f       	add	r26, r24
 192:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <rxReadPos>
					++Space_num;
 196:	ff 24       	eor	r15, r15
 198:	f3 94       	inc	r15
 19a:	f9 0e       	add	r15, r25
 19c:	f0 92 85 02 	sts	0x0285, r15	; 0x800285 <Space_num>
				else
				{
					flag = 1;
					break;
				}
				Number_num=0;
 1a0:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <Number_num>
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 1a4:	9a 01       	movw	r18, r20
 1a6:	2a 0f       	add	r18, r26
 1a8:	31 1d       	adc	r19, r1
 1aa:	f9 01       	movw	r30, r18
 1ac:	90 81       	ld	r25, Z
 1ae:	79 13       	cpse	r23, r25
 1b0:	26 c0       	rjmp	.+76     	; 0x1fe <Check_Input+0x140>
 1b2:	97 c2       	rjmp	.+1326   	; 0x6e2 <__stack+0x283>
					++rxReadPos;
					++Space_num;
				}
				else
				{
					flag = 1;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
					break;
 1ba:	d8 c2       	rjmp	.+1456   	; 0x76c <__stack+0x30d>
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 1bc:	90 53       	subi	r25, 0x30	; 48
 1be:	9a 30       	cpi	r25, 0x0A	; 10
 1c0:	d8 f4       	brcc	.+54     	; 0x1f8 <Check_Input+0x13a>
					{
						Number_num++;
 1c2:	6f 5f       	subi	r22, 0xFF	; 255
 1c4:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <Number_num>
 1c8:	89 01       	movw	r16, r18
 1ca:	00 0f       	add	r16, r16
 1cc:	11 1f       	adc	r17, r17
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
 1da:	20 0f       	add	r18, r16
 1dc:	31 1f       	adc	r19, r17
 1de:	20 53       	subi	r18, 0x30	; 48
 1e0:	31 09       	sbc	r19, r1

						k = 10 * k + (data[rxReadPos] - '0');
 1e2:	9c 91       	ld	r25, X
 1e4:	29 0f       	add	r18, r25
 1e6:	31 1d       	adc	r19, r1
 1e8:	97 fd       	sbrc	r25, 7
 1ea:	3a 95       	dec	r19
						rxReadPos++;
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rxReadPos>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 1f2:	63 30       	cpi	r22, 0x03	; 3
 1f4:	79 f4       	brne	.+30     	; 0x214 <Check_Input+0x156>
 1f6:	16 c0       	rjmp	.+44     	; 0x224 <Check_Input+0x166>
						k = 10 * k + (data[rxReadPos] - '0');
						rxReadPos++;
					}
					else
					{
						flag = 1;
 1f8:	e0 92 7f 00 	sts	0x007F, r14	; 0x80007f <flag>
						break;
 1fc:	13 c0       	rjmp	.+38     	; 0x224 <Check_Input+0x166>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 1fe:	90 32       	cpi	r25, 0x20	; 32
 200:	09 f4       	brne	.+2      	; 0x204 <Check_Input+0x146>
 202:	6f c2       	rjmp	.+1246   	; 0x6e2 <__stack+0x283>
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 204:	90 53       	subi	r25, 0x30	; 48
 206:	9a 30       	cpi	r25, 0x0A	; 10
 208:	08 f4       	brcc	.+2      	; 0x20c <Check_Input+0x14e>
 20a:	88 c2       	rjmp	.+1296   	; 0x71c <__stack+0x2bd>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 20c:	60 e0       	ldi	r22, 0x00	; 0
				{
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
 20e:	2c 2d       	mov	r18, r12
 210:	3d 2d       	mov	r19, r13
 212:	f2 cf       	rjmp	.-28     	; 0x1f8 <Check_Input+0x13a>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 214:	da 01       	movw	r26, r20
 216:	a8 0f       	add	r26, r24
 218:	b1 1d       	adc	r27, r1
 21a:	9c 91       	ld	r25, X
 21c:	79 17       	cp	r23, r25
 21e:	11 f0       	breq	.+4      	; 0x224 <Check_Input+0x166>
 220:	90 32       	cpi	r25, 0x20	; 32
 222:	61 f6       	brne	.-104    	; 0x1bc <Check_Input+0xfe>
						flag = 1;
						break;
					}	
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 224:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <rxReadPos>
 228:	ca 01       	movw	r24, r20
 22a:	8a 0f       	add	r24, r26
 22c:	91 1d       	adc	r25, r1
 22e:	fc 01       	movw	r30, r24
 230:	80 81       	ld	r24, Z
 232:	08 2e       	mov	r0, r24
 234:	00 0c       	add	r0, r0
 236:	99 0b       	sbc	r25, r25
 238:	a8 16       	cp	r10, r24
 23a:	b9 06       	cpc	r11, r25
 23c:	39 f4       	brne	.+14     	; 0x24c <Check_Input+0x18e>
 23e:	03 c0       	rjmp	.+6      	; 0x246 <Check_Input+0x188>
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	2c 2d       	mov	r18, r12
 244:	3d 2d       	mov	r19, r13
					rxReadPos--;
 246:	a1 50       	subi	r26, 0x01	; 1
 248:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <rxReadPos>
				if(Number_num == 0)				//if not valid number parameter
 24c:	61 11       	cpse	r22, r1
 24e:	04 c0       	rjmp	.+8      	; 0x258 <Check_Input+0x19a>
				{
					flag = 1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
					break;
 256:	8a c2       	rjmp	.+1300   	; 0x76c <__stack+0x30d>
				}
				if(k > 255)
 258:	2f 3f       	cpi	r18, 0xFF	; 255
 25a:	31 05       	cpc	r19, r1
 25c:	29 f0       	breq	.+10     	; 0x268 <Check_Input+0x1aa>
 25e:	20 f0       	brcs	.+8      	; 0x268 <Check_Input+0x1aa>
				{
					flag = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
					break;
 266:	82 c2       	rjmp	.+1284   	; 0x76c <__stack+0x30d>
				}
				if(Space_num == 1)
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	ff 12       	cpse	r15, r31
 26c:	03 c0       	rjmp	.+6      	; 0x274 <Check_Input+0x1b6>
					par1 =(uint8_t) k ;
 26e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <par1>
 272:	05 c0       	rjmp	.+10     	; 0x27e <Check_Input+0x1c0>
				else if(Space_num == 2)
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	f8 12       	cpse	r15, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <Check_Input+0x1c0>
					par2 =(uint8_t) k ;
 27a:	20 93 83 02 	sts	0x0283, r18	; 0x800283 <par2>
		}
			//Checking for MW<SP>?<SP>?<CR> and SUM<SP>?<SP>?<CR> command.
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 87))		// "M" , "W"
		{
			rxReadPos++;
			while(data[rxReadPos] != CR[0])
 27e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <rxReadPos>
 282:	da 01       	movw	r26, r20
 284:	a8 0f       	add	r26, r24
 286:	b1 1d       	adc	r27, r1
 288:	9c 91       	ld	r25, X
 28a:	97 13       	cpse	r25, r23
 28c:	6a cf       	rjmp	.-300    	; 0x162 <Check_Input+0xa4>
				else if(Space_num == 2)
					par2 =(uint8_t) k ;
				else
					NULL;
			}//WHILE LOOP END
			if((Space_num == 1)||(Space_num == 0)){
 28e:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <Space_num>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	20 f4       	brcc	.+8      	; 0x29e <Check_Input+0x1e0>
				flag = 1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
 29c:	13 c2       	rjmp	.+1062   	; 0x6c4 <__stack+0x265>
			}
			
			if (flag != 1)
 29e:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <flag>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <Check_Input+0x1ea>
 2a6:	0e c2       	rjmp	.+1052   	; 0x6c4 <__stack+0x265>
			{
				MEM[par1]=par2;
 2a8:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <par1>
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	ee 57       	subi	r30, 0x7E	; 126
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <par2>
 2b6:	80 83       	st	Z, r24
				Transmit("OK\r\n",0,strlen("OK\n\r"));
 2b8:	44 e0       	ldi	r20, 0x04	; 4
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	80 e7       	ldi	r24, 0x70	; 112
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	e6 de       	rcall	.-564    	; 0x8e <Transmit>
 2c2:	fc c1       	rjmp	.+1016   	; 0x6bc <__stack+0x25d>
			}
			
		}
		/////////////////////////////////////////// MR ////////////////////////////////////////////////////////////////////
		else if ((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 82))				// Command : MR		M=77	R=82
 2c4:	82 35       	cpi	r24, 0x52	; 82
 2c6:	09 f0       	breq	.+2      	; 0x2ca <Check_Input+0x20c>
 2c8:	f5 c1       	rjmp	.+1002   	; 0x6b4 <__stack+0x255>
		{
			rxReadPos++;
 2ca:	3f 5f       	subi	r19, 0xFF	; 255
 2cc:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <rxReadPos>
			while(data[rxReadPos] != CR[0])
 2d0:	70 91 7e 00 	lds	r23, 0x007E	; 0x80007e <CR>
					flag = 1;
					break;
				}

				rxReadPos++;
				if(data[rxReadPos] == SPACE)
 2d4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <SPACE>
 2d8:	ae 2e       	mov	r10, r30
 2da:	b1 2c       	mov	r11, r1
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 2dc:	c1 2c       	mov	r12, r1
 2de:	d1 2c       	mov	r13, r1
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 2e0:	ee 24       	eor	r14, r14
 2e2:	e3 94       	inc	r14
		}
		/////////////////////////////////////////// MR ////////////////////////////////////////////////////////////////////
		else if ((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 82))				// Command : MR		M=77	R=82
		{
			rxReadPos++;
			while(data[rxReadPos] != CR[0])
 2e4:	88 c0       	rjmp	.+272    	; 0x3f6 <Check_Input+0x338>
			{
				if(Space_num == 1)
 2e6:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <Space_num>
 2ea:	91 30       	cpi	r25, 0x01	; 1
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <Check_Input+0x238>
				{
					flag = 1;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
 2f4:	e7 c1       	rjmp	.+974    	; 0x6c4 <__stack+0x265>
					break;
				}

				rxReadPos++;
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	28 0f       	add	r18, r24
 2fa:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <rxReadPos>
				if(data[rxReadPos] == SPACE)
 2fe:	da 01       	movw	r26, r20
 300:	a2 0f       	add	r26, r18
 302:	b1 1d       	adc	r27, r1
 304:	2c 91       	ld	r18, X
 306:	02 2e       	mov	r0, r18
 308:	00 0c       	add	r0, r0
 30a:	33 0b       	sbc	r19, r19
 30c:	2a 15       	cp	r18, r10
 30e:	3b 05       	cpc	r19, r11
 310:	99 f4       	brne	.+38     	; 0x338 <Check_Input+0x27a>
				{
					++rxReadPos;
 312:	a2 e0       	ldi	r26, 0x02	; 2
 314:	a8 0f       	add	r26, r24
 316:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <rxReadPos>
					++Space_num;
 31a:	ff 24       	eor	r15, r15
 31c:	f3 94       	inc	r15
 31e:	f9 0e       	add	r15, r25
 320:	f0 92 85 02 	sts	0x0285, r15	; 0x800285 <Space_num>
				else
				{
					flag = 1;
					break;
				}
				Number_num=0;
 324:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <Number_num>
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 328:	9a 01       	movw	r18, r20
 32a:	2a 0f       	add	r18, r26
 32c:	31 1d       	adc	r19, r1
 32e:	f9 01       	movw	r30, r18
 330:	90 81       	ld	r25, Z
 332:	79 13       	cpse	r23, r25
 334:	26 c0       	rjmp	.+76     	; 0x382 <Check_Input+0x2c4>
 336:	dd c1       	rjmp	.+954    	; 0x6f2 <__stack+0x293>
					++rxReadPos;
					++Space_num;
				}
				else
				{
					flag = 1;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
					break;
 33e:	1c c2       	rjmp	.+1080   	; 0x778 <__stack+0x319>
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 340:	90 53       	subi	r25, 0x30	; 48
 342:	9a 30       	cpi	r25, 0x0A	; 10
 344:	d8 f4       	brcc	.+54     	; 0x37c <Check_Input+0x2be>
					{
						Number_num++;
 346:	6f 5f       	subi	r22, 0xFF	; 255
 348:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <Number_num>
 34c:	89 01       	movw	r16, r18
 34e:	00 0f       	add	r16, r16
 350:	11 1f       	adc	r17, r17
 352:	22 0f       	add	r18, r18
 354:	33 1f       	adc	r19, r19
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	20 0f       	add	r18, r16
 360:	31 1f       	adc	r19, r17
 362:	20 53       	subi	r18, 0x30	; 48
 364:	31 09       	sbc	r19, r1

						k = 10 * k + (data[rxReadPos] - '0');
 366:	9c 91       	ld	r25, X
 368:	29 0f       	add	r18, r25
 36a:	31 1d       	adc	r19, r1
 36c:	97 fd       	sbrc	r25, 7
 36e:	3a 95       	dec	r19
						rxReadPos++;
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rxReadPos>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 376:	63 30       	cpi	r22, 0x03	; 3
 378:	79 f4       	brne	.+30     	; 0x398 <Check_Input+0x2da>
 37a:	16 c0       	rjmp	.+44     	; 0x3a8 <Check_Input+0x2ea>
						k = 10 * k + (data[rxReadPos] - '0');
						rxReadPos++;
					}
					else
					{
						flag = 1;
 37c:	e0 92 7f 00 	sts	0x007F, r14	; 0x80007f <flag>
						break;
 380:	13 c0       	rjmp	.+38     	; 0x3a8 <Check_Input+0x2ea>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 382:	90 32       	cpi	r25, 0x20	; 32
 384:	09 f4       	brne	.+2      	; 0x388 <Check_Input+0x2ca>
 386:	b5 c1       	rjmp	.+874    	; 0x6f2 <__stack+0x293>
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 388:	90 53       	subi	r25, 0x30	; 48
 38a:	9a 30       	cpi	r25, 0x0A	; 10
 38c:	08 f4       	brcc	.+2      	; 0x390 <Check_Input+0x2d2>
 38e:	d4 c1       	rjmp	.+936    	; 0x738 <__stack+0x2d9>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 390:	60 e0       	ldi	r22, 0x00	; 0
				{
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
 392:	2c 2d       	mov	r18, r12
 394:	3d 2d       	mov	r19, r13
 396:	f2 cf       	rjmp	.-28     	; 0x37c <Check_Input+0x2be>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 398:	da 01       	movw	r26, r20
 39a:	a8 0f       	add	r26, r24
 39c:	b1 1d       	adc	r27, r1
 39e:	9c 91       	ld	r25, X
 3a0:	79 17       	cp	r23, r25
 3a2:	11 f0       	breq	.+4      	; 0x3a8 <Check_Input+0x2ea>
 3a4:	90 32       	cpi	r25, 0x20	; 32
 3a6:	61 f6       	brne	.-104    	; 0x340 <Check_Input+0x282>
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 3a8:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <rxReadPos>
 3ac:	ca 01       	movw	r24, r20
 3ae:	8a 0f       	add	r24, r26
 3b0:	91 1d       	adc	r25, r1
 3b2:	fc 01       	movw	r30, r24
 3b4:	80 81       	ld	r24, Z
 3b6:	08 2e       	mov	r0, r24
 3b8:	00 0c       	add	r0, r0
 3ba:	99 0b       	sbc	r25, r25
 3bc:	a8 16       	cp	r10, r24
 3be:	b9 06       	cpc	r11, r25
 3c0:	39 f4       	brne	.+14     	; 0x3d0 <Check_Input+0x312>
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <Check_Input+0x30c>
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	2c 2d       	mov	r18, r12
 3c8:	3d 2d       	mov	r19, r13
				rxReadPos--;
 3ca:	a1 50       	subi	r26, 0x01	; 1
 3cc:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <rxReadPos>
				if(Number_num == 0)				//if not valid number parameter
 3d0:	61 11       	cpse	r22, r1
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <Check_Input+0x31e>
				{
					flag = 1;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
					break;
 3da:	ce c1       	rjmp	.+924    	; 0x778 <__stack+0x319>
				}
				if(k > 255)
 3dc:	2f 3f       	cpi	r18, 0xFF	; 255
 3de:	31 05       	cpc	r19, r1
 3e0:	29 f0       	breq	.+10     	; 0x3ec <Check_Input+0x32e>
 3e2:	20 f0       	brcs	.+8      	; 0x3ec <Check_Input+0x32e>
				{
					flag = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
					break;
 3ea:	c6 c1       	rjmp	.+908    	; 0x778 <__stack+0x319>
				}
				if(Space_num == 1)
 3ec:	f1 e0       	ldi	r31, 0x01	; 1
 3ee:	ff 12       	cpse	r15, r31
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <Check_Input+0x338>
				par1 =(uint8_t) k ;
 3f2:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <par1>
		}
		/////////////////////////////////////////// MR ////////////////////////////////////////////////////////////////////
		else if ((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 82))				// Command : MR		M=77	R=82
		{
			rxReadPos++;
			while(data[rxReadPos] != CR[0])
 3f6:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <rxReadPos>
 3fa:	da 01       	movw	r26, r20
 3fc:	a8 0f       	add	r26, r24
 3fe:	b1 1d       	adc	r27, r1
 400:	9c 91       	ld	r25, X
 402:	97 13       	cpse	r25, r23
 404:	70 cf       	rjmp	.-288    	; 0x2e6 <Check_Input+0x228>
				if(Space_num == 1)
				par1 =(uint8_t) k ;
				else
				NULL;
			}//WHILE LOOP END
			if((Space_num == 0)){
 406:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <Space_num>
 40a:	81 11       	cpse	r24, r1
 40c:	04 c0       	rjmp	.+8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				flag = 1;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
 414:	57 c1       	rjmp	.+686    	; 0x6c4 <__stack+0x265>
			}
			
			if (flag != 1)
 416:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <flag>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	52 c1       	rjmp	.+676    	; 0x6c4 <__stack+0x265>
			{
				par2 = MEM[par1];
 420:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <par1>
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	ee 57       	subi	r30, 0x7E	; 126
 428:	ff 4f       	sbci	r31, 0xFF	; 255
 42a:	80 81       	ld	r24, Z
 42c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <par2>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 430:	09 e2       	ldi	r16, 0x29	; 41
 432:	80 9f       	mul	r24, r16
 434:	81 2d       	mov	r24, r1
 436:	11 24       	eor	r1, r1
 438:	1d ec       	ldi	r17, 0xCD	; 205
 43a:	82 95       	swap	r24
 43c:	8f 70       	andi	r24, 0x0F	; 15
 43e:	4a e0       	ldi	r20, 0x0A	; 10
 440:	be 01       	movw	r22, r28
 442:	6f 5f       	subi	r22, 0xFF	; 255
 444:	7f 4f       	sbci	r23, 0xFF	; 255
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	21 d2       	rcall	.+1090   	; 0x88c <__itoa_ncheck>
				//par2=145;
				char t[3];
				Transmit(itoa( (par2/(100))%(10),t,10),0,strlen(itoa((par2/(100))%(10),t,10)));
 44a:	fc 01       	movw	r30, r24
 44c:	01 90       	ld	r0, Z+
 44e:	00 20       	and	r0, r0
 450:	e9 f7       	brne	.-6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	7f 01       	movw	r14, r30
 456:	e8 1a       	sub	r14, r24
 458:	f9 0a       	sbc	r15, r25
 45a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <par2>
 45e:	80 9f       	mul	r24, r16
 460:	81 2d       	mov	r24, r1
 462:	11 24       	eor	r1, r1
 464:	82 95       	swap	r24
 466:	8f 70       	andi	r24, 0x0F	; 15
 468:	4a e0       	ldi	r20, 0x0A	; 10
 46a:	be 01       	movw	r22, r28
 46c:	6f 5f       	subi	r22, 0xFF	; 255
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0c d2       	rcall	.+1048   	; 0x88c <__itoa_ncheck>
 474:	4e 2d       	mov	r20, r14
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	0a de       	rcall	.-1004   	; 0x8e <Transmit>
 47a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <par2>
 47e:	80 9f       	mul	r24, r16
 480:	81 2d       	mov	r24, r1
 482:	11 24       	eor	r1, r1
 484:	82 95       	swap	r24
 486:	8f 70       	andi	r24, 0x0F	; 15
 488:	4a e0       	ldi	r20, 0x0A	; 10
 48a:	be 01       	movw	r22, r28
 48c:	6f 5f       	subi	r22, 0xFF	; 255
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	fc d1       	rcall	.+1016   	; 0x88c <__itoa_ncheck>
				Transmit(itoa( (par2/(10))%(10),t,10),0,strlen(itoa((par2/(100))%(10),t,10)));
 494:	fc 01       	movw	r30, r24
 496:	01 90       	ld	r0, Z+
 498:	00 20       	and	r0, r0
 49a:	e9 f7       	brne	.-6      	; 0x496 <__stack+0x37>
 49c:	31 97       	sbiw	r30, 0x01	; 1
 49e:	7f 01       	movw	r14, r30
 4a0:	e8 1a       	sub	r14, r24
 4a2:	f9 0a       	sbc	r15, r25
 4a4:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <par2>
 4a8:	81 9f       	mul	r24, r17
 4aa:	81 2d       	mov	r24, r1
 4ac:	11 24       	eor	r1, r1
 4ae:	86 95       	lsr	r24
 4b0:	86 95       	lsr	r24
 4b2:	86 95       	lsr	r24
 4b4:	81 9f       	mul	r24, r17
 4b6:	91 2d       	mov	r25, r1
 4b8:	11 24       	eor	r1, r1
 4ba:	96 95       	lsr	r25
 4bc:	96 95       	lsr	r25
 4be:	96 95       	lsr	r25
 4c0:	99 0f       	add	r25, r25
 4c2:	29 2f       	mov	r18, r25
 4c4:	22 0f       	add	r18, r18
 4c6:	22 0f       	add	r18, r18
 4c8:	92 0f       	add	r25, r18
 4ca:	89 1b       	sub	r24, r25
 4cc:	4a e0       	ldi	r20, 0x0A	; 10
 4ce:	be 01       	movw	r22, r28
 4d0:	6f 5f       	subi	r22, 0xFF	; 255
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	da d1       	rcall	.+948    	; 0x88c <__itoa_ncheck>
 4d8:	4e 2d       	mov	r20, r14
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	d8 dd       	rcall	.-1104   	; 0x8e <Transmit>
 4de:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <par2>
 4e2:	80 9f       	mul	r24, r16
 4e4:	81 2d       	mov	r24, r1
 4e6:	11 24       	eor	r1, r1
 4e8:	82 95       	swap	r24
 4ea:	8f 70       	andi	r24, 0x0F	; 15
 4ec:	4a e0       	ldi	r20, 0x0A	; 10
 4ee:	be 01       	movw	r22, r28
 4f0:	6f 5f       	subi	r22, 0xFF	; 255
 4f2:	7f 4f       	sbci	r23, 0xFF	; 255
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	ca d1       	rcall	.+916    	; 0x88c <__itoa_ncheck>
				Transmit(itoa( (par2/(1))%(10),t,10),0,strlen(itoa((par2/(100))%(10),t,10)));
 4f8:	fc 01       	movw	r30, r24
 4fa:	01 90       	ld	r0, Z+
 4fc:	00 20       	and	r0, r0
 4fe:	e9 f7       	brne	.-6      	; 0x4fa <__stack+0x9b>
 500:	31 97       	sbiw	r30, 0x01	; 1
 502:	7f 01       	movw	r14, r30
 504:	e8 1a       	sub	r14, r24
 506:	f9 0a       	sbc	r15, r25
 508:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <par2>
 50c:	81 9f       	mul	r24, r17
 50e:	91 2d       	mov	r25, r1
 510:	11 24       	eor	r1, r1
 512:	96 95       	lsr	r25
 514:	96 95       	lsr	r25
 516:	96 95       	lsr	r25
 518:	99 0f       	add	r25, r25
 51a:	29 2f       	mov	r18, r25
 51c:	22 0f       	add	r18, r18
 51e:	22 0f       	add	r18, r18
 520:	92 0f       	add	r25, r18
 522:	89 1b       	sub	r24, r25
 524:	4a e0       	ldi	r20, 0x0A	; 10
 526:	be 01       	movw	r22, r28
 528:	6f 5f       	subi	r22, 0xFF	; 255
 52a:	7f 4f       	sbci	r23, 0xFF	; 255
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	ae d1       	rcall	.+860    	; 0x88c <__itoa_ncheck>
 530:	4e 2d       	mov	r20, r14
 532:	60 e0       	ldi	r22, 0x00	; 0
				Transmit("\n\r",0,strlen("\n\r"));
 534:	ac dd       	rcall	.-1192   	; 0x8e <Transmit>
 536:	42 e0       	ldi	r20, 0x02	; 2
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	85 e7       	ldi	r24, 0x75	; 117
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	a7 dd       	rcall	.-1202   	; 0x8e <Transmit>
 540:	bd c0       	rjmp	.+378    	; 0x6bc <__stack+0x25d>
			}
			
		}
		//////////////////////////////////////////////// SUM /////////////////////////////////////////////////////
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 85) &&(data[rxReadPos + 2] == 77) ){
 542:	23 35       	cpi	r18, 0x53	; 83
 544:	09 f0       	breq	.+2      	; 0x548 <__stack+0xe9>
 546:	b6 c0       	rjmp	.+364    	; 0x6b4 <__stack+0x255>
 548:	fa 01       	movw	r30, r20
 54a:	e8 0f       	add	r30, r24
 54c:	f9 1f       	adc	r31, r25
 54e:	21 81       	ldd	r18, Z+1	; 0x01
 550:	25 35       	cpi	r18, 0x55	; 85
 552:	09 f0       	breq	.+2      	; 0x556 <__stack+0xf7>
 554:	af c0       	rjmp	.+350    	; 0x6b4 <__stack+0x255>
 556:	fa 01       	movw	r30, r20
 558:	e8 0f       	add	r30, r24
 55a:	f9 1f       	adc	r31, r25
 55c:	82 81       	ldd	r24, Z+2	; 0x02
 55e:	8d 34       	cpi	r24, 0x4D	; 77
 560:	09 f0       	breq	.+2      	; 0x564 <__stack+0x105>
 562:	a8 c0       	rjmp	.+336    	; 0x6b4 <__stack+0x255>
			rxReadPos+=2;
 564:	3e 5f       	subi	r19, 0xFE	; 254
 566:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <rxReadPos>
			while(data[rxReadPos] != CR[0])
 56a:	70 91 7e 00 	lds	r23, 0x007E	; 0x80007e <CR>
					flag = 1;
					break;
				}

				rxReadPos++;
				if(data[rxReadPos] == SPACE)
 56e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <SPACE>
 572:	f0 e0       	ldi	r31, 0x00	; 0
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 574:	c1 2c       	mov	r12, r1
 576:	d1 2c       	mov	r13, r1
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 578:	ee 24       	eor	r14, r14
 57a:	e3 94       	inc	r14
			
		}
		//////////////////////////////////////////////// SUM /////////////////////////////////////////////////////
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 85) &&(data[rxReadPos + 2] == 77) ){
			rxReadPos+=2;
			while(data[rxReadPos] != CR[0])
 57c:	8b c0       	rjmp	.+278    	; 0x694 <__stack+0x235>
			{
				if(Space_num == 2)
 57e:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <Space_num>
 582:	62 30       	cpi	r22, 0x02	; 2
 584:	21 f4       	brne	.+8      	; 0x58e <__stack+0x12f>
				{
					flag = 1;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
 58c:	9b c0       	rjmp	.+310    	; 0x6c4 <__stack+0x265>
					break;
				}

				rxReadPos++;
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	83 0f       	add	r24, r19
 592:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rxReadPos>
				if(data[rxReadPos] == SPACE)
 596:	da 01       	movw	r26, r20
 598:	a8 0f       	add	r26, r24
 59a:	b1 1d       	adc	r27, r1
 59c:	8c 91       	ld	r24, X
 59e:	08 2e       	mov	r0, r24
 5a0:	00 0c       	add	r0, r0
 5a2:	99 0b       	sbc	r25, r25
 5a4:	8e 17       	cp	r24, r30
 5a6:	9f 07       	cpc	r25, r31
 5a8:	91 f4       	brne	.+36     	; 0x5ce <__stack+0x16f>
				{
					++rxReadPos;
 5aa:	22 e0       	ldi	r18, 0x02	; 2
 5ac:	23 0f       	add	r18, r19
 5ae:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <rxReadPos>
					++Space_num;
 5b2:	ff 24       	eor	r15, r15
 5b4:	f3 94       	inc	r15
 5b6:	f6 0e       	add	r15, r22
 5b8:	f0 92 85 02 	sts	0x0285, r15	; 0x800285 <Space_num>
				else
				{
					flag = 1;
					break;
				}
				Number_num=0;
 5bc:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <Number_num>
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 5c0:	da 01       	movw	r26, r20
 5c2:	a2 0f       	add	r26, r18
 5c4:	b1 1d       	adc	r27, r1
 5c6:	8c 91       	ld	r24, X
 5c8:	78 13       	cpse	r23, r24
 5ca:	25 c0       	rjmp	.+74     	; 0x616 <__stack+0x1b7>
 5cc:	9a c0       	rjmp	.+308    	; 0x702 <__stack+0x2a3>
					++rxReadPos;
					++Space_num;
				}
				else
				{
					flag = 1;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
					break;
 5d4:	9e c0       	rjmp	.+316    	; 0x712 <__stack+0x2b3>
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 5d6:	20 53       	subi	r18, 0x30	; 48
 5d8:	2a 30       	cpi	r18, 0x0A	; 10
 5da:	d0 f4       	brcc	.+52     	; 0x610 <__stack+0x1b1>
					{
						Number_num++;
 5dc:	6f 5f       	subi	r22, 0xFF	; 255
 5de:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <Number_num>
 5e2:	8c 01       	movw	r16, r24
 5e4:	00 0f       	add	r16, r16
 5e6:	11 1f       	adc	r17, r17
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	80 0f       	add	r24, r16
 5f6:	91 1f       	adc	r25, r17
 5f8:	c0 97       	sbiw	r24, 0x30	; 48

						k = 10 * k + (data[rxReadPos] - '0');
 5fa:	2c 91       	ld	r18, X
 5fc:	82 0f       	add	r24, r18
 5fe:	91 1d       	adc	r25, r1
 600:	27 fd       	sbrc	r18, 7
 602:	9a 95       	dec	r25
						rxReadPos++;
 604:	3f 5f       	subi	r19, 0xFF	; 255
 606:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <rxReadPos>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 60a:	63 30       	cpi	r22, 0x03	; 3
 60c:	79 f4       	brne	.+30     	; 0x62c <__stack+0x1cd>
 60e:	16 c0       	rjmp	.+44     	; 0x63c <__stack+0x1dd>
						k = 10 * k + (data[rxReadPos] - '0');
						rxReadPos++;
					}
					else
					{
						flag = 1;
 610:	e0 92 7f 00 	sts	0x007F, r14	; 0x80007f <flag>
						break;
 614:	13 c0       	rjmp	.+38     	; 0x63c <__stack+0x1dd>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 616:	80 32       	cpi	r24, 0x20	; 32
 618:	09 f4       	brne	.+2      	; 0x61c <__stack+0x1bd>
 61a:	73 c0       	rjmp	.+230    	; 0x702 <__stack+0x2a3>
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 61c:	80 53       	subi	r24, 0x30	; 48
 61e:	8a 30       	cpi	r24, 0x0A	; 10
 620:	08 f4       	brcc	.+2      	; 0x624 <__stack+0x1c5>
 622:	98 c0       	rjmp	.+304    	; 0x754 <__stack+0x2f5>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 624:	60 e0       	ldi	r22, 0x00	; 0
				{
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
 626:	8c 2d       	mov	r24, r12
 628:	9d 2d       	mov	r25, r13
 62a:	f2 cf       	rjmp	.-28     	; 0x610 <__stack+0x1b1>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 62c:	da 01       	movw	r26, r20
 62e:	a3 0f       	add	r26, r19
 630:	b1 1d       	adc	r27, r1
 632:	2c 91       	ld	r18, X
 634:	72 17       	cp	r23, r18
 636:	11 f0       	breq	.+4      	; 0x63c <__stack+0x1dd>
 638:	20 32       	cpi	r18, 0x20	; 32
 63a:	69 f6       	brne	.-102    	; 0x5d6 <__stack+0x177>
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 63c:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <rxReadPos>
 640:	da 01       	movw	r26, r20
 642:	a2 0f       	add	r26, r18
 644:	b1 1d       	adc	r27, r1
 646:	ac 91       	ld	r26, X
 648:	0a 2e       	mov	r0, r26
 64a:	00 0c       	add	r0, r0
 64c:	bb 0b       	sbc	r27, r27
 64e:	ea 17       	cp	r30, r26
 650:	fb 07       	cpc	r31, r27
 652:	39 f4       	brne	.+14     	; 0x662 <__stack+0x203>
 654:	03 c0       	rjmp	.+6      	; 0x65c <__stack+0x1fd>
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	8c 2d       	mov	r24, r12
 65a:	9d 2d       	mov	r25, r13
				rxReadPos--;
 65c:	21 50       	subi	r18, 0x01	; 1
 65e:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <rxReadPos>
				if(Number_num == 0)				//if not valid number parameter
 662:	61 11       	cpse	r22, r1
 664:	04 c0       	rjmp	.+8      	; 0x66e <__stack+0x20f>
				{
					flag = 1;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
					break;
 66c:	52 c0       	rjmp	.+164    	; 0x712 <__stack+0x2b3>
				}
				if(k > 255)
 66e:	8f 3f       	cpi	r24, 0xFF	; 255
 670:	91 05       	cpc	r25, r1
 672:	29 f0       	breq	.+10     	; 0x67e <__stack+0x21f>
 674:	20 f0       	brcs	.+8      	; 0x67e <__stack+0x21f>
				{
					flag = 1;
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
					break;
 67c:	4a c0       	rjmp	.+148    	; 0x712 <__stack+0x2b3>
				}
				if(Space_num == 1)
 67e:	21 e0       	ldi	r18, 0x01	; 1
 680:	f2 12       	cpse	r15, r18
 682:	03 c0       	rjmp	.+6      	; 0x68a <__stack+0x22b>
				par1 =(uint8_t) k ;
 684:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <par1>
 688:	05 c0       	rjmp	.+10     	; 0x694 <__stack+0x235>
				else if(Space_num == 2)
 68a:	22 e0       	ldi	r18, 0x02	; 2
 68c:	f2 12       	cpse	r15, r18
 68e:	02 c0       	rjmp	.+4      	; 0x694 <__stack+0x235>
				par2 =(uint8_t)k ;
 690:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <par2>
			
		}
		//////////////////////////////////////////////// SUM /////////////////////////////////////////////////////
		else if((data[rxReadPos] == 83)&&(data[rxReadPos + 1] == 85) &&(data[rxReadPos + 2] == 77) ){
			rxReadPos+=2;
			while(data[rxReadPos] != CR[0])
 694:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <rxReadPos>
 698:	da 01       	movw	r26, r20
 69a:	a3 0f       	add	r26, r19
 69c:	b1 1d       	adc	r27, r1
 69e:	8c 91       	ld	r24, X
 6a0:	87 13       	cpse	r24, r23
 6a2:	6d cf       	rjmp	.-294    	; 0x57e <__stack+0x11f>
				else if(Space_num == 2)
				par2 =(uint8_t)k ;
				else
				NULL;
			}//WHILE LOOP END
			if((Space_num == 1)||(Space_num == 0)){
 6a4:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <Space_num>
 6a8:	82 30       	cpi	r24, 0x02	; 2
 6aa:	40 f4       	brcc	.+16     	; 0x6bc <__stack+0x25d>
				flag = 1;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
 6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <__stack+0x265>
			}
		}
		else
			flag = 1;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <flag>
 6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <__stack+0x265>
		

	//Transmit("MPIKA",0,strlen("MPIKA"));


	if(flag == 1)        // Error found, break while loop (rxreadps --> CR)
 6bc:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <flag>
 6c0:	81 30       	cpi	r24, 0x01	; 1
	{					
		rxReadPos = rxWritePos;  
 6c2:	49 f4       	brne	.+18     	; 0x6d6 <__stack+0x277>
 6c4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 6c8:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rxReadPos>
		Transmit("ER\r",0,strlen("ER\r"));
 6cc:	43 e0       	ldi	r20, 0x03	; 3
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	88 e7       	ldi	r24, 0x78	; 120
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	dc dc       	rcall	.-1608   	; 0x8e <Transmit>
	}
	//char Val[10];
	//Transmit(itoa(par1,Val,16),0,10);


	rxReadPos++;		//Ready for the next command (deixnei sto 1o gramma) 
 6d6:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <rxReadPos>
 6da:	8f 5f       	subi	r24, 0xFF	; 255
 6dc:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rxReadPos>
	

				
}
 6e0:	51 c0       	rjmp	.+162    	; 0x784 <__stack+0x325>
						flag = 1;
						break;
					}	
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 6e2:	89 2f       	mov	r24, r25
 6e4:	99 0f       	add	r25, r25
 6e6:	99 0b       	sbc	r25, r25
 6e8:	a8 16       	cp	r10, r24
 6ea:	b9 06       	cpc	r11, r25
 6ec:	09 f4       	brne	.+2      	; 0x6f0 <__stack+0x291>
 6ee:	a8 cd       	rjmp	.-1200   	; 0x240 <Check_Input+0x182>
 6f0:	af cd       	rjmp	.-1186   	; 0x250 <Check_Input+0x192>
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 6f2:	89 2f       	mov	r24, r25
 6f4:	99 0f       	add	r25, r25
 6f6:	99 0b       	sbc	r25, r25
 6f8:	a8 16       	cp	r10, r24
 6fa:	b9 06       	cpc	r11, r25
 6fc:	09 f4       	brne	.+2      	; 0x700 <__stack+0x2a1>
 6fe:	62 ce       	rjmp	.-828    	; 0x3c4 <Check_Input+0x306>
 700:	69 ce       	rjmp	.-814    	; 0x3d4 <Check_Input+0x316>
						flag = 1;
						break;
					}
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 702:	08 2e       	mov	r0, r24
 704:	00 0c       	add	r0, r0
 706:	99 0b       	sbc	r25, r25
 708:	e8 17       	cp	r30, r24
 70a:	f9 07       	cpc	r31, r25
 70c:	09 f4       	brne	.+2      	; 0x710 <__stack+0x2b1>
 70e:	a3 cf       	rjmp	.-186    	; 0x656 <__stack+0x1f7>
 710:	aa cf       	rjmp	.-172    	; 0x666 <__stack+0x207>
				else if(Space_num == 2)
				par2 =(uint8_t)k ;
				else
				NULL;
			}//WHILE LOOP END
			if((Space_num == 1)||(Space_num == 0)){
 712:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <Space_num>
 716:	82 30       	cpi	r24, 0x02	; 2
 718:	a8 f6       	brcc	.-86     	; 0x6c4 <__stack+0x265>
 71a:	c8 cf       	rjmp	.-112    	; 0x6ac <__stack+0x24d>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 71c:	e0 92 82 02 	sts	0x0282, r14	; 0x800282 <Number_num>

						k = 10 * k + (data[rxReadPos] - '0');
 720:	f9 01       	movw	r30, r18
 722:	20 81       	ld	r18, Z
 724:	02 2e       	mov	r0, r18
 726:	00 0c       	add	r0, r0
 728:	33 0b       	sbc	r19, r19
 72a:	20 53       	subi	r18, 0x30	; 48
 72c:	31 09       	sbc	r19, r1
						rxReadPos++;
 72e:	8d 5f       	subi	r24, 0xFD	; 253
 730:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rxReadPos>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 734:	61 e0       	ldi	r22, 0x01	; 1
 736:	6e cd       	rjmp	.-1316   	; 0x214 <Check_Input+0x156>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 738:	e0 92 82 02 	sts	0x0282, r14	; 0x800282 <Number_num>

						k = 10 * k + (data[rxReadPos] - '0');
 73c:	f9 01       	movw	r30, r18
 73e:	20 81       	ld	r18, Z
 740:	02 2e       	mov	r0, r18
 742:	00 0c       	add	r0, r0
 744:	33 0b       	sbc	r19, r19
 746:	20 53       	subi	r18, 0x30	; 48
 748:	31 09       	sbc	r19, r1
						rxReadPos++;
 74a:	8d 5f       	subi	r24, 0xFD	; 253
 74c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rxReadPos>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 750:	61 e0       	ldi	r22, 0x01	; 1
 752:	22 ce       	rjmp	.-956    	; 0x398 <Check_Input+0x2da>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 754:	e0 92 82 02 	sts	0x0282, r14	; 0x800282 <Number_num>

						k = 10 * k + (data[rxReadPos] - '0');
 758:	8c 91       	ld	r24, X
 75a:	08 2e       	mov	r0, r24
 75c:	00 0c       	add	r0, r0
 75e:	99 0b       	sbc	r25, r25
 760:	c0 97       	sbiw	r24, 0x30	; 48
						rxReadPos++;
 762:	3d 5f       	subi	r19, 0xFD	; 253
 764:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <rxReadPos>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
					{
						Number_num++;
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	60 cf       	rjmp	.-320    	; 0x62c <__stack+0x1cd>
				else if(Space_num == 2)
					par2 =(uint8_t) k ;
				else
					NULL;
			}//WHILE LOOP END
			if((Space_num == 1)||(Space_num == 0)){
 76c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <Space_num>
 770:	82 30       	cpi	r24, 0x02	; 2
 772:	08 f4       	brcc	.+2      	; 0x776 <__stack+0x317>
 774:	90 cd       	rjmp	.-1248   	; 0x296 <Check_Input+0x1d8>
 776:	a6 cf       	rjmp	.-180    	; 0x6c4 <__stack+0x265>
				if(Space_num == 1)
				par1 =(uint8_t) k ;
				else
				NULL;
			}//WHILE LOOP END
			if((Space_num == 0)){
 778:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <Space_num>
 77c:	88 23       	and	r24, r24
 77e:	09 f4       	brne	.+2      	; 0x782 <__stack+0x323>
 780:	46 ce       	rjmp	.-884    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 782:	a0 cf       	rjmp	.-192    	; 0x6c4 <__stack+0x265>

	rxReadPos++;		//Ready for the next command (deixnei sto 1o gramma) 
	

				
}
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	ff 90       	pop	r15
 794:	ef 90       	pop	r14
 796:	df 90       	pop	r13
 798:	cf 90       	pop	r12
 79a:	bf 90       	pop	r11
 79c:	af 90       	pop	r10
 79e:	08 95       	ret

000007a0 <__vector_11>:


ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
 7aa:	2f 93       	push	r18
 7ac:	3f 93       	push	r19
 7ae:	4f 93       	push	r20
 7b0:	5f 93       	push	r21
 7b2:	6f 93       	push	r22
 7b4:	7f 93       	push	r23
 7b6:	8f 93       	push	r24
 7b8:	9f 93       	push	r25
 7ba:	af 93       	push	r26
 7bc:	bf 93       	push	r27
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
 7c2:	8c b1       	in	r24, 0x0c	; 12
 7c4:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__data_end>
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	ea 57       	subi	r30, 0x7A	; 122
 7cc:	fd 4f       	sbci	r31, 0xFD	; 253
 7ce:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
 7d0:	5d 9b       	sbis	0x0b, 5	; 11
 7d2:	fe cf       	rjmp	.-4      	; 0x7d0 <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
 7d4:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
 7d6:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__data_end>
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	ea 57       	subi	r30, 0x7A	; 122
 7de:	fd 4f       	sbci	r31, 0xFD	; 253
 7e0:	90 81       	ld	r25, Z
 7e2:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <CR>
 7e6:	98 13       	cpse	r25, r24
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <__vector_11+0x50>
		Check_Input(myrxbuffer);
 7ea:	86 e8       	ldi	r24, 0x86	; 134
 7ec:	92 e0       	ldi	r25, 0x02	; 2
 7ee:	67 dc       	rcall	.-1842   	; 0xbe <Check_Input>
	

	rxWritePos++;
 7f0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 7f4:	8f 5f       	subi	r24, 0xFF	; 255
 7f6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
 7fa:	ff 91       	pop	r31
 7fc:	ef 91       	pop	r30
 7fe:	bf 91       	pop	r27
 800:	af 91       	pop	r26
 802:	9f 91       	pop	r25
 804:	8f 91       	pop	r24
 806:	7f 91       	pop	r23
 808:	6f 91       	pop	r22
 80a:	5f 91       	pop	r21
 80c:	4f 91       	pop	r20
 80e:	3f 91       	pop	r19
 810:	2f 91       	pop	r18
 812:	0f 90       	pop	r0
 814:	0f be       	out	0x3f, r0	; 63
 816:	0f 90       	pop	r0
 818:	1f 90       	pop	r1
 81a:	18 95       	reti

0000081c <init_serial>:



void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
 81c:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
 81e:	83 e3       	ldi	r24, 0x33	; 51
 820:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
 822:	80 b5       	in	r24, 0x20	; 32
 824:	8f 7e       	andi	r24, 0xEF	; 239
 826:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
 828:	80 b5       	in	r24, 0x20	; 32
 82a:	8f 7d       	andi	r24, 0xDF	; 223
 82c:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
 82e:	80 b5       	in	r24, 0x20	; 32
 830:	87 7f       	andi	r24, 0xF7	; 247
 832:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
 834:	86 e8       	ldi	r24, 0x86	; 134
 836:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
 838:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
 83a:	8a b1       	in	r24, 0x0a	; 10
 83c:	88 61       	ori	r24, 0x18	; 24
 83e:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
 840:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
 842:	57 9a       	sbi	0x0a, 7	; 10
 844:	08 95       	ret

00000846 <main>:
unsigned char USART_Receive(void);


int main (void)
{
	board_init();
 846:	22 dc       	rcall	.-1980   	; 0x8c <board_init>
	init_serial();
 848:	e9 df       	rcall	.-46     	; 0x81c <init_serial>
 84a:	78 94       	sei
	
	sei();
 84c:	8d e0       	ldi	r24, 0x0D	; 13
	
	//String copy
	//strcpy(SPACE,"\x20");
	
	strcpy(CR,"\xD"); 
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <flag>
 854:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <CR>
 858:	83 e1       	ldi	r24, 0x13	; 19
	strcpy(Pause_Code,"\x13"); // ^S	
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <Space_num>
 860:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <Pause_Code>
 864:	81 e1       	ldi	r24, 0x11	; 17
	strcpy(Resume_Code,"\x11"); //^Q
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <__bss_end>
 86c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <Resume_Code>
 870:	83 e0       	ldi	r24, 0x03	; 3
	strcpy(Stop_Code,"\x03");	   // ^C
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <par1>
 878:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Stop_Code>
 87c:	8f ef       	ldi	r24, 0xFF	; 255

	//SpecialInputFlag will help at specifying
	//the state of the program according the last input code.
	SpecialInputFlag = -1;
 87e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <SpecialInputFlag>
 882:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <rxReadPos>
	}


	*/
	//after the 'T' input has been received, we can start the normal program.
	rxReadPos=0;
 886:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
	rxWritePos=0;
 88a:	ff cf       	rjmp	.-2      	; 0x88a <main+0x44>

0000088c <__itoa_ncheck>:
 88c:	bb 27       	eor	r27, r27
 88e:	4a 30       	cpi	r20, 0x0A	; 10
 890:	31 f4       	brne	.+12     	; 0x89e <__itoa_ncheck+0x12>
 892:	99 23       	and	r25, r25
 894:	22 f4       	brpl	.+8      	; 0x89e <__itoa_ncheck+0x12>
 896:	bd e2       	ldi	r27, 0x2D	; 45
 898:	90 95       	com	r25
 89a:	81 95       	neg	r24
 89c:	9f 4f       	sbci	r25, 0xFF	; 255
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__utoa_common>

000008a0 <__utoa_ncheck>:
 8a0:	bb 27       	eor	r27, r27

000008a2 <__utoa_common>:
 8a2:	fb 01       	movw	r30, r22
 8a4:	55 27       	eor	r21, r21
 8a6:	aa 27       	eor	r26, r26
 8a8:	88 0f       	add	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	aa 1f       	adc	r26, r26
 8ae:	a4 17       	cp	r26, r20
 8b0:	10 f0       	brcs	.+4      	; 0x8b6 <__utoa_common+0x14>
 8b2:	a4 1b       	sub	r26, r20
 8b4:	83 95       	inc	r24
 8b6:	50 51       	subi	r21, 0x10	; 16
 8b8:	b9 f7       	brne	.-18     	; 0x8a8 <__utoa_common+0x6>
 8ba:	a0 5d       	subi	r26, 0xD0	; 208
 8bc:	aa 33       	cpi	r26, 0x3A	; 58
 8be:	08 f0       	brcs	.+2      	; 0x8c2 <__utoa_common+0x20>
 8c0:	a9 5d       	subi	r26, 0xD9	; 217
 8c2:	a1 93       	st	Z+, r26
 8c4:	00 97       	sbiw	r24, 0x00	; 0
 8c6:	79 f7       	brne	.-34     	; 0x8a6 <__utoa_common+0x4>
 8c8:	b1 11       	cpse	r27, r1
 8ca:	b1 93       	st	Z+, r27
 8cc:	11 92       	st	Z+, r1
 8ce:	cb 01       	movw	r24, r22
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <strrev>

000008d2 <strrev>:
 8d2:	dc 01       	movw	r26, r24
 8d4:	fc 01       	movw	r30, r24
 8d6:	67 2f       	mov	r22, r23
 8d8:	71 91       	ld	r23, Z+
 8da:	77 23       	and	r23, r23
 8dc:	e1 f7       	brne	.-8      	; 0x8d6 <strrev+0x4>
 8de:	32 97       	sbiw	r30, 0x02	; 2
 8e0:	04 c0       	rjmp	.+8      	; 0x8ea <strrev+0x18>
 8e2:	7c 91       	ld	r23, X
 8e4:	6d 93       	st	X+, r22
 8e6:	70 83       	st	Z, r23
 8e8:	62 91       	ld	r22, -Z
 8ea:	ae 17       	cp	r26, r30
 8ec:	bf 07       	cpc	r27, r31
 8ee:	c8 f3       	brcs	.-14     	; 0x8e2 <strrev+0x10>
 8f0:	08 95       	ret

000008f2 <_exit>:
 8f2:	f8 94       	cli

000008f4 <__stop_program>:
 8f4:	ff cf       	rjmp	.-2      	; 0x8f4 <__stop_program>
