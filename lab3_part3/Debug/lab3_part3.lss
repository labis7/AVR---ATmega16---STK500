
lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000478  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000020d  00800092  00800092  0000053e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca4  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a7  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c65  00000000  00000000  00001a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fd9e  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cd  00000000  00000000  000125be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0001298b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003589  00000000  00000000  00012a23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	ad c1       	rjmp	.+858    	; 0x388 <__vector_11>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	3a c0       	rjmp	.+116    	; 0xaa <__vector_13>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 39       	cpi	r26, 0x9F	; 159
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	d3 d1       	rcall	.+934    	; 0x42e <main>
  88:	f5 c1       	rjmp	.+1002   	; 0x474 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
  8c:	08 95       	ret

0000008e <Transmit>:
			Sendmsg((char)i); //This func is used(easier),because 1 char per time is sent
			_delay_ms(500);
		}
		
	}
}
  8e:	9c 01       	movw	r18, r24
  90:	64 17       	cp	r22, r20
  92:	50 f4       	brcc	.+20     	; 0xa8 <Transmit+0x1a>
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <Transmit+0x6>
  98:	f9 01       	movw	r30, r18
  9a:	e6 0f       	add	r30, r22
  9c:	f1 1d       	adc	r31, r1
  9e:	90 81       	ld	r25, Z
  a0:	9c b9       	out	0x0c, r25	; 12
  a2:	6f 5f       	subi	r22, 0xFF	; 255
  a4:	46 13       	cpse	r20, r22
  a6:	f6 cf       	rjmp	.-20     	; 0x94 <Transmit+0x6>
  a8:	08 95       	ret

000000aa <__vector_13>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



ISR (USART_TXC_vect) { //  Interrupts for completed transmit data
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
		txReadPos++;
	}
	if(txReadPos >= BUFFER_SIZE)
		txReadPos = 0;
		*/
}
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <Check_Input>:



void Check_Input(char data[]){
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	8c 01       	movw	r16, r24
	
	//while(data[rxReadPos] != CR[0]){
		//
		flag = 0;
  cc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <flag>
		Space_num = 0;
  d0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Space_num>
		
		//process
		//Transmit(myrxbuffer,0,rxWritePos);
		//Checking for AT<CR> command.
		
		if((data[rxReadPos] == 65)&&(data[rxReadPos+1] == 84))  // 65 = "A" , 84 = "T"
  d4:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <rxReadPos>
  d8:	83 2f       	mov	r24, r19
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	f8 01       	movw	r30, r16
  de:	e8 0f       	add	r30, r24
  e0:	f9 1f       	adc	r31, r25
  e2:	20 81       	ld	r18, Z
  e4:	21 34       	cpi	r18, 0x41	; 65
  e6:	e9 f4       	brne	.+58     	; 0x122 <Check_Input+0x64>
  e8:	f8 01       	movw	r30, r16
  ea:	e8 0f       	add	r30, r24
  ec:	f9 1f       	adc	r31, r25
  ee:	21 81       	ldd	r18, Z+1	; 0x01
  f0:	24 35       	cpi	r18, 0x54	; 84
  f2:	09 f0       	breq	.+2      	; 0xf6 <Check_Input+0x38>
  f4:	1b c1       	rjmp	.+566    	; 0x32c <Check_Input+0x26e>
		{
			//Transmit("MPIKA",0,strlen("MPIKA"));
			if(data[rxReadPos+2] == CR[0]){
  f6:	f8 01       	movw	r30, r16
  f8:	e8 0f       	add	r30, r24
  fa:	f9 1f       	adc	r31, r25
  fc:	92 81       	ldd	r25, Z+2	; 0x02
  fe:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <CR>
 102:	98 13       	cpse	r25, r24
 104:	0a c0       	rjmp	.+20     	; 0x11a <Check_Input+0x5c>
				Transmit("OK\r",0 , strlen("OK\r"));
 106:	43 e0       	ldi	r20, 0x03	; 3
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	8c e6       	ldi	r24, 0x6C	; 108
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	bf df       	rcall	.-130    	; 0x8e <Transmit>
				rxReadPos = rxWritePos;
 110:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 114:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <rxReadPos>
 118:	0d c1       	rjmp	.+538    	; 0x334 <Check_Input+0x276>
			}
			else
				flag = 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <flag>
 120:	0d c1       	rjmp	.+538    	; 0x33c <Check_Input+0x27e>
		}
			//Checking for MW<SP>?<SP>?<CR> and SUM<SP>?<SP>?<CR> command.
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 87))		// "M" , "W"
 122:	2d 34       	cpi	r18, 0x4D	; 77
 124:	09 f0       	breq	.+2      	; 0x128 <Check_Input+0x6a>
 126:	02 c1       	rjmp	.+516    	; 0x32c <Check_Input+0x26e>
 128:	f8 01       	movw	r30, r16
 12a:	e8 0f       	add	r30, r24
 12c:	f9 1f       	adc	r31, r25
 12e:	81 81       	ldd	r24, Z+1	; 0x01
 130:	87 35       	cpi	r24, 0x57	; 87
 132:	09 f0       	breq	.+2      	; 0x136 <Check_Input+0x78>
 134:	fb c0       	rjmp	.+502    	; 0x32c <Check_Input+0x26e>
		{
			rxReadPos++;
 136:	3f 5f       	subi	r19, 0xFF	; 255
 138:	30 93 93 00 	sts	0x0093, r19	; 0x800093 <rxReadPos>
						flag = 1;
						break;
					}	
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 13c:	e1 2c       	mov	r14, r1
 13e:	f1 2c       	mov	r15, r1
		}
			//Checking for MW<SP>?<SP>?<CR> and SUM<SP>?<SP>?<CR> command.
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 87))		// "M" , "W"
		{
			rxReadPos++;
			while(data[rxReadPos] != CR[0])
 140:	de c0       	rjmp	.+444    	; 0x2fe <Check_Input+0x240>
			{	
				if(Space_num == 2)
 142:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Space_num>
 146:	92 30       	cpi	r25, 0x02	; 2
 148:	49 f4       	brne	.+18     	; 0x15c <Check_Input+0x9e>
				{
					Transmit("1",0,strlen("1"));
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	80 e7       	ldi	r24, 0x70	; 112
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	9d df       	rcall	.-198    	; 0x8e <Transmit>
					flag = 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <flag>
					break;
 15a:	0a c1       	rjmp	.+532    	; 0x370 <Check_Input+0x2b2>
				}

				rxReadPos++;
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <rxReadPos>
				Transmit("\r\nA\r\n",0,strlen("\r\nA\r\n"));
 162:	45 e0       	ldi	r20, 0x05	; 5
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	82 e7       	ldi	r24, 0x72	; 114
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	91 df       	rcall	.-222    	; 0x8e <Transmit>
				Transmit(data,rxReadPos,rxWritePos);
 16c:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 170:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <rxReadPos>
 174:	c8 01       	movw	r24, r16
 176:	8b df       	rcall	.-234    	; 0x8e <Transmit>
				if(data[rxReadPos] == SPACE)
 178:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <rxReadPos>
 17c:	f8 01       	movw	r30, r16
 17e:	e8 0f       	add	r30, r24
 180:	f1 1d       	adc	r31, r1
 182:	40 81       	ld	r20, Z
 184:	04 2e       	mov	r0, r20
 186:	00 0c       	add	r0, r0
 188:	55 0b       	sbc	r21, r21
 18a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <SPACE>
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	42 17       	cp	r20, r18
 192:	53 07       	cpc	r21, r19
 194:	01 f5       	brne	.+64     	; 0x1d6 <Check_Input+0x118>
				{
					++rxReadPos;
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <rxReadPos>
					Transmit("\r\nB\r\n",0,strlen("\r\nA\r\n"));
 19c:	45 e0       	ldi	r20, 0x05	; 5
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	88 e7       	ldi	r24, 0x78	; 120
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	74 df       	rcall	.-280    	; 0x8e <Transmit>
					Transmit(data,rxReadPos,rxWritePos);
 1a6:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
 1aa:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <rxReadPos>
 1ae:	c8 01       	movw	r24, r16
 1b0:	6e df       	rcall	.-292    	; 0x8e <Transmit>
					++Space_num;
 1b2:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Space_num>
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Space_num>
				{
					Transmit("2",0,strlen("2"));
					flag = 1;
					break;
				}
				Number_num=0;
 1bc:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <Number_num>
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 1c0:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <rxReadPos>
 1c4:	f8 01       	movw	r30, r16
 1c6:	e2 0f       	add	r30, r18
 1c8:	f1 1d       	adc	r31, r1
 1ca:	80 81       	ld	r24, Z
 1cc:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <CR>
 1d0:	89 13       	cpse	r24, r25
 1d2:	43 c0       	rjmp	.+134    	; 0x25a <Check_Input+0x19c>
					Transmit(data,rxReadPos,rxWritePos);
					++Space_num;
				}
				else
				{
					Transmit("2",0,strlen("2"));
 1d4:	c2 c0       	rjmp	.+388    	; 0x35a <Check_Input+0x29c>
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	8e e7       	ldi	r24, 0x7E	; 126
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	57 df       	rcall	.-338    	; 0x8e <Transmit>
					flag = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <flag>
					break;
 1e6:	c4 c0       	rjmp	.+392    	; 0x370 <Check_Input+0x2b2>
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 1e8:	80 53       	subi	r24, 0x30	; 48
 1ea:	8a 30       	cpi	r24, 0x0A	; 10
 1ec:	20 f0       	brcs	.+8      	; 0x1f6 <Check_Input+0x138>
 1ee:	2c c0       	rjmp	.+88     	; 0x248 <Check_Input+0x18a>
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	ce 2d       	mov	r28, r14
 1f4:	df 2d       	mov	r29, r15
					{
						Number_num++;
 1f6:	9f 5f       	subi	r25, 0xFF	; 255
 1f8:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <Number_num>
 1fc:	ce 01       	movw	r24, r28
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	cc 0f       	add	r28, r28
 204:	dd 1f       	adc	r29, r29
 206:	cc 0f       	add	r28, r28
 208:	dd 1f       	adc	r29, r29
 20a:	cc 0f       	add	r28, r28
 20c:	dd 1f       	adc	r29, r29
 20e:	c8 0f       	add	r28, r24
 210:	d9 1f       	adc	r29, r25
 212:	e0 97       	sbiw	r28, 0x30	; 48

						k = 10 * k + (data[rxReadPos] - '0');
 214:	80 81       	ld	r24, Z
 216:	c8 0f       	add	r28, r24
 218:	d1 1d       	adc	r29, r1
 21a:	87 fd       	sbrc	r24, 7
						Transmit("\r\nC\r\n",0,strlen("\r\nA\r\n"));
 21c:	da 95       	dec	r29
 21e:	45 e0       	ldi	r20, 0x05	; 5
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	90 e0       	ldi	r25, 0x00	; 0
						Transmit(data,rxReadPos,rxReadPos+1);
 226:	33 df       	rcall	.-410    	; 0x8e <Transmit>
 228:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <rxReadPos>
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	46 0f       	add	r20, r22
 230:	c8 01       	movw	r24, r16
 232:	2d df       	rcall	.-422    	; 0x8e <Transmit>
						rxReadPos++;
 234:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <rxReadPos>
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <rxReadPos>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 23e:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <Number_num>
 242:	93 30       	cpi	r25, 0x03	; 3
 244:	98 f0       	brcs	.+38     	; 0x26c <Check_Input+0x1ae>
						Transmit(data,rxReadPos,rxReadPos+1);
						rxReadPos++;
					}
					else
					{
						Transmit("3",0,strlen("3"));
 246:	1d c0       	rjmp	.+58     	; 0x282 <Check_Input+0x1c4>
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	86 e8       	ldi	r24, 0x86	; 134
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	1e df       	rcall	.-452    	; 0x8e <Transmit>
						flag = 1;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <flag>
						break;
 258:	14 c0       	rjmp	.+40     	; 0x282 <Check_Input+0x1c4>
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 25a:	80 32       	cpi	r24, 0x20	; 32
 25c:	09 f4       	brne	.+2      	; 0x260 <Check_Input+0x1a2>
 25e:	7d c0       	rjmp	.+250    	; 0x35a <Check_Input+0x29c>
				{
					
					if( (data[rxReadPos] >= 48)&&(data[rxReadPos] <= 57))	 // checking number parameter
 260:	80 53       	subi	r24, 0x30	; 48
 262:	8a 30       	cpi	r24, 0x0A	; 10
 264:	28 f2       	brcs	.-118    	; 0x1f0 <Check_Input+0x132>
					Transmit("2",0,strlen("2"));
					flag = 1;
					break;
				}
				Number_num=0;
				uint16_t k = 0;
 266:	ce 2d       	mov	r28, r14
 268:	df 2d       	mov	r29, r15
 26a:	ee cf       	rjmp	.-36     	; 0x248 <Check_Input+0x18a>
				while((Number_num < 3)&&(data[rxReadPos] != CR[0])&&(data[rxReadPos] != 32))
 26c:	f8 01       	movw	r30, r16
 26e:	e8 0f       	add	r30, r24
 270:	f1 1d       	adc	r31, r1
 272:	80 81       	ld	r24, Z
 274:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <CR>
 278:	82 17       	cp	r24, r18
 27a:	19 f0       	breq	.+6      	; 0x282 <Check_Input+0x1c4>
 27c:	80 32       	cpi	r24, 0x20	; 32
 27e:	09 f0       	breq	.+2      	; 0x282 <Check_Input+0x1c4>
 280:	b3 cf       	rjmp	.-154    	; 0x1e8 <Check_Input+0x12a>
						flag = 1;
						break;
					}	
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 282:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <rxReadPos>
 286:	f8 01       	movw	r30, r16
 288:	e2 0f       	add	r30, r18
 28a:	f1 1d       	adc	r31, r1
 28c:	40 81       	ld	r20, Z
 28e:	04 2e       	mov	r0, r20
 290:	00 0c       	add	r0, r0
 292:	55 0b       	sbc	r21, r21
 294:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SPACE>
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	48 17       	cp	r20, r24
 29c:	59 07       	cpc	r21, r25
 29e:	31 f4       	brne	.+12     	; 0x2ac <Check_Input+0x1ee>
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <Check_Input+0x1e8>
 2a2:	ce 2d       	mov	r28, r14
 2a4:	df 2d       	mov	r29, r15
					rxReadPos--;
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	20 93 93 00 	sts	0x0093, r18	; 0x800093 <rxReadPos>
				if(Number_num == 0)				//if not valid number parameter
 2ac:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <Number_num>
 2b0:	81 11       	cpse	r24, r1
				{
					Transmit("4",0,strlen("4"));
 2b2:	09 c0       	rjmp	.+18     	; 0x2c6 <Check_Input+0x208>
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	88 e8       	ldi	r24, 0x88	; 136
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	e8 de       	rcall	.-560    	; 0x8e <Transmit>
					flag = 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <flag>
					break;
				}
				if(k > 255)
 2c4:	55 c0       	rjmp	.+170    	; 0x370 <Check_Input+0x2b2>
 2c6:	cf 3f       	cpi	r28, 0xFF	; 255
 2c8:	d1 05       	cpc	r29, r1
 2ca:	51 f0       	breq	.+20     	; 0x2e0 <Check_Input+0x222>
				{
					Transmit("5",0,strlen("5"));
 2cc:	48 f0       	brcs	.+18     	; 0x2e0 <Check_Input+0x222>
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	8a e8       	ldi	r24, 0x8A	; 138
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	db de       	rcall	.-586    	; 0x8e <Transmit>
					flag = 1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <flag>
					break;
 2de:	48 c0       	rjmp	.+144    	; 0x370 <Check_Input+0x2b2>
				}
				if(Space_num == 1)
 2e0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Space_num>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	29 f4       	brne	.+10     	; 0x2f2 <Check_Input+0x234>
					par1 = k ;
 2e8:	d0 93 98 00 	sts	0x0098, r29	; 0x800098 <par1+0x1>
 2ec:	c0 93 97 00 	sts	0x0097, r28	; 0x800097 <par1>
 2f0:	06 c0       	rjmp	.+12     	; 0x2fe <Check_Input+0x240>
				else if(Space_num == 2)
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	21 f4       	brne	.+8      	; 0x2fe <Check_Input+0x240>
					par2 = k ;
 2f6:	d0 93 9b 01 	sts	0x019B, r29	; 0x80019b <par2+0x1>
 2fa:	c0 93 9a 01 	sts	0x019A, r28	; 0x80019a <par2>
		}
			//Checking for MW<SP>?<SP>?<CR> and SUM<SP>?<SP>?<CR> command.
		else if((data[rxReadPos] == 77)&&(data[rxReadPos + 1] == 87))		// "M" , "W"
		{
			rxReadPos++;
			while(data[rxReadPos] != CR[0])
 2fe:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <rxReadPos>
 302:	f8 01       	movw	r30, r16
 304:	e8 0f       	add	r30, r24
 306:	f1 1d       	adc	r31, r1
 308:	20 81       	ld	r18, Z
 30a:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <CR>
 30e:	29 13       	cpse	r18, r25
				else if(Space_num == 2)
					par2 = k ;
				else
					NULL;
			}//WHILE LOOP END
			if((Space_num == 1)||(Space_num == 0)){
 310:	18 cf       	rjmp	.-464    	; 0x142 <Check_Input+0x84>
 312:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Space_num>
 316:	82 30       	cpi	r24, 0x02	; 2
				Transmit("6",0,strlen("6"));
 318:	68 f4       	brcc	.+26     	; 0x334 <Check_Input+0x276>
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	8c e8       	ldi	r24, 0x8C	; 140
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	b5 de       	rcall	.-662    	; 0x8e <Transmit>
				flag = 1;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <flag>
 32a:	08 c0       	rjmp	.+16     	; 0x33c <Check_Input+0x27e>
			}
		}
		else
			flag = 1;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <flag>
		

	//Transmit("MPIKA",0,strlen("MPIKA"));


	if(flag == 1)        // Error found, break while loop (rxreadps --> CR)
 332:	04 c0       	rjmp	.+8      	; 0x33c <Check_Input+0x27e>
 334:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <flag>
 338:	81 30       	cpi	r24, 0x01	; 1
	{					
		rxReadPos = rxWritePos;  
 33a:	49 f4       	brne	.+18     	; 0x34e <Check_Input+0x290>
 33c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 340:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <rxReadPos>
		Transmit("ER\r",0,strlen("ER\r"));
 344:	43 e0       	ldi	r20, 0x03	; 3
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	8e e8       	ldi	r24, 0x8E	; 142
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	a0 de       	rcall	.-704    	; 0x8e <Transmit>
	} 
	//char Val[10];
	//Transmit(itoa(par1,Val,16),0,10);


	rxReadPos++;		//Ready for the next command (deixnei sto 1o gramma) 
 34e:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <rxReadPos>
 352:	8f 5f       	subi	r24, 0xFF	; 255
 354:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <rxReadPos>
	

				
}
 358:	10 c0       	rjmp	.+32     	; 0x37a <Check_Input+0x2bc>
						flag = 1;
						break;
					}	
				}

				if((data[rxReadPos] == SPACE))  //the above while has broken bcs of space and we cancel the rxreadpos increase(must be counted in the next loop)
 35a:	08 2e       	mov	r0, r24
 35c:	00 0c       	add	r0, r0
 35e:	99 0b       	sbc	r25, r25
 360:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <SPACE>
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	84 17       	cp	r24, r20
 368:	95 07       	cpc	r25, r21
 36a:	09 f4       	brne	.+2      	; 0x36e <Check_Input+0x2b0>
 36c:	9a cf       	rjmp	.-204    	; 0x2a2 <Check_Input+0x1e4>
 36e:	a2 cf       	rjmp	.-188    	; 0x2b4 <Check_Input+0x1f6>
				else if(Space_num == 2)
					par2 = k ;
				else
					NULL;
			}//WHILE LOOP END
			if((Space_num == 1)||(Space_num == 0)){
 370:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Space_num>
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	10 f7       	brcc	.-60     	; 0x33c <Check_Input+0x27e>
 378:	d0 cf       	rjmp	.-96     	; 0x31a <Check_Input+0x25c>

	rxReadPos++;		//Ready for the next command (deixnei sto 1o gramma) 
	

				
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	08 95       	ret

00000388 <__vector_11>:


ISR (USART_RXC_vect) { //  Interrupts : a new element in UDR
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	4f 93       	push	r20
 398:	5f 93       	push	r21
 39a:	6f 93       	push	r22
 39c:	7f 93       	push	r23
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
 3a2:	af 93       	push	r26
 3a4:	bf 93       	push	r27
 3a6:	ef 93       	push	r30
 3a8:	ff 93       	push	r31

	/////// ECHO DRIVER  //////////
	myrxbuffer[rxWritePos] = UDR ;
 3aa:	8c b1       	in	r24, 0x0c	; 12
 3ac:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	e2 56       	subi	r30, 0x62	; 98
 3b4:	fe 4f       	sbci	r31, 0xFE	; 254
 3b6:	80 83       	st	Z, r24
	
	while(!(UCSRA & (1 << UDRE))) //if UDR is empty(no data transfer at the moment)
 3b8:	5d 9b       	sbis	0x0b, 5	; 11
 3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <__vector_11+0x30>
	;
	UDR = myrxbuffer[rxWritePos];
 3bc:	8c b9       	out	0x0c, r24	; 12
	//////////////////////////////
	
	//Flag setting according to input control codes
	if(myrxbuffer[rxWritePos] == CR[0])
 3be:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	e2 56       	subi	r30, 0x62	; 98
 3c6:	fe 4f       	sbci	r31, 0xFE	; 254
 3c8:	90 81       	ld	r25, Z
 3ca:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <CR>
 3ce:	98 13       	cpse	r25, r24
 3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <__vector_11+0x50>
		Check_Input(myrxbuffer);
 3d2:	8e e9       	ldi	r24, 0x9E	; 158
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	73 de       	rcall	.-794    	; 0xbe <Check_Input>
	

	rxWritePos++;
 3d8:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 3dc:	8f 5f       	subi	r24, 0xFF	; 255
 3de:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
	
	
	if(rxWritePos >= BUFFER_SIZE )
		rxWritePos = 0;
		
}
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <init_serial>:



void init_serial(void){
	// By default URSEL == 0, so we can edit UBRRH regs.
	UBRRH = (unsigned char)(BRC >> 8); //UBRRH has 8 + 4 useful bits
 404:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BRC;
 406:	83 e3       	ldi	r24, 0x33	; 51
 408:	89 b9       	out	0x09, r24	; 9
	
	//UBRRH |= ( 1 << URSEL); // So we can edit UCRSC
	
	UCSRC &= ~(1 << UPM0); //UPM1 is cleared by default
 40a:	80 b5       	in	r24, 0x20	; 32
 40c:	8f 7e       	andi	r24, 0xEF	; 239
 40e:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << UPM1); //UPM1 is cleared by default
 410:	80 b5       	in	r24, 0x20	; 32
 412:	8f 7d       	andi	r24, 0xDF	; 223
 414:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1 << USBS); // 1 Stop bit
 416:	80 b5       	in	r24, 0x20	; 32
 418:	87 7f       	andi	r24, 0xF7	; 247
 41a:	80 bd       	out	0x20, r24	; 32

	UCSRC = ((1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1)) ;
 41c:	86 e8       	ldi	r24, 0x86	; 134
 41e:	80 bd       	out	0x20, r24	; 32
	UCSRB &= ~(1 << UCSZ2); //
 420:	52 98       	cbi	0x0a, 2	; 10

	UCSRB |= ((1 << RXEN) | (1 << TXEN)) ;
 422:	8a b1       	in	r24, 0x0a	; 10
 424:	88 61       	ori	r24, 0x18	; 24
 426:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= (1 << TXCIE); //TXC interrupts enabled
 428:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (1 << RXCIE); //RXC interrupts enabled
 42a:	57 9a       	sbi	0x0a, 7	; 10
 42c:	08 95       	ret

0000042e <main>:
unsigned char USART_Receive(void);


int main (void)
{
	board_init();
 42e:	2e de       	rcall	.-932    	; 0x8c <board_init>
	init_serial();
 430:	e9 df       	rcall	.-46     	; 0x404 <init_serial>
 432:	78 94       	sei
	
	sei();
 434:	8d e0       	ldi	r24, 0x0D	; 13
	
	//String copy
	//strcpy(SPACE,"\x20");
	
	strcpy(CR,"\xD"); 
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <flag>
 43c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <CR>
 440:	83 e1       	ldi	r24, 0x13	; 19
	strcpy(Pause_Code,"\x13"); // ^S	
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Space_num>
 448:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Pause_Code>
 44c:	81 e1       	ldi	r24, 0x11	; 17
	strcpy(Resume_Code,"\x11"); //^Q
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <__bss_end>
 454:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <Resume_Code>
 458:	83 e0       	ldi	r24, 0x03	; 3
	strcpy(Stop_Code,"\x03");	   // ^C
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <par1>
 460:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Stop_Code>
 464:	8f ef       	ldi	r24, 0xFF	; 255

	//SpecialInputFlag will help at specifying
	//the state of the program according the last input code.
	SpecialInputFlag = -1;
 466:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <SpecialInputFlag>
 46a:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <rxReadPos>
	}


	*/
	//after the 'T' input has been received, we can start the normal program.
	rxReadPos=0;
 46e:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
	rxWritePos=0;
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stack+0x13>

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
